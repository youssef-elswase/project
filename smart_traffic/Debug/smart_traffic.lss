
smart_traffic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002648  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00002648  000026dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800084  00800084  00002700  2**0
                  ALLOC
  3 .stab         000021a8  00000000  00000000  00002700  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000efd  00000000  00000000  000048a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000057a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000058e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005a55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000769e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008589  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009338  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009498  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009725  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009ef3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 74 0e 	jmp	0x1ce8	; 0x1ce8 <__vector_1>
       8:	0c 94 aa 0e 	jmp	0x1d54	; 0x1d54 <__vector_2>
       c:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e4       	ldi	r30, 0x48	; 72
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 38       	cpi	r26, 0x8B	; 139
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 39 12 	call	0x2472	; 0x2472 <main>
      8a:	0c 94 22 13 	jmp	0x2644	; 0x2644 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 eb 12 	jmp	0x25d6	; 0x25d6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 07 13 	jmp	0x260e	; 0x260e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 13 13 	jmp	0x2626	; 0x2626 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 13 13 	jmp	0x2626	; 0x2626 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 eb 12 	jmp	0x25d6	; 0x25d6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 07 13 	jmp	0x260e	; 0x260e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 13 13 	jmp	0x2626	; 0x2626 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 13 13 	jmp	0x2626	; 0x2626 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 13 13 	jmp	0x2626	; 0x2626 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 fb 12 	jmp	0x25f6	; 0x25f6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 17 13 	jmp	0x262e	; 0x262e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_eunmSetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

DIO_ErrorStatus DIO_eunmSetPinDirection     (u8 COPY_u8PORT ,u8 COPY_u8PIN ,u8 COPY_u8Direction )
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	28 97       	sbiw	r28, 0x08	; 8
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8a 83       	std	Y+2, r24	; 0x02
     b5c:	6b 83       	std	Y+3, r22	; 0x03
     b5e:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus LOC_enumStatus = DIO_OK;
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	89 83       	std	Y+1, r24	; 0x01
	if((COPY_u8PORT <= DIO_PORTD)&&(COPY_u8PIN <= DIO_PIN7))
     b64:	8a 81       	ldd	r24, Y+2	; 0x02
     b66:	84 30       	cpi	r24, 0x04	; 4
     b68:	08 f0       	brcs	.+2      	; 0xb6c <DIO_eunmSetPinDirection+0x26>
     b6a:	f1 c0       	rjmp	.+482    	; 0xd4e <DIO_eunmSetPinDirection+0x208>
     b6c:	8b 81       	ldd	r24, Y+3	; 0x03
     b6e:	88 30       	cpi	r24, 0x08	; 8
     b70:	08 f0       	brcs	.+2      	; 0xb74 <DIO_eunmSetPinDirection+0x2e>
     b72:	ed c0       	rjmp	.+474    	; 0xd4e <DIO_eunmSetPinDirection+0x208>
	{
		if (COPY_u8Direction == DIO_PIN_OUTPUT)
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	09 f0       	breq	.+2      	; 0xb7c <DIO_eunmSetPinDirection+0x36>
     b7a:	6f c0       	rjmp	.+222    	; 0xc5a <DIO_eunmSetPinDirection+0x114>
		{
			switch(COPY_u8PORT)
     b7c:	8a 81       	ldd	r24, Y+2	; 0x02
     b7e:	28 2f       	mov	r18, r24
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	38 87       	std	Y+8, r19	; 0x08
     b84:	2f 83       	std	Y+7, r18	; 0x07
     b86:	8f 81       	ldd	r24, Y+7	; 0x07
     b88:	98 85       	ldd	r25, Y+8	; 0x08
     b8a:	81 30       	cpi	r24, 0x01	; 1
     b8c:	91 05       	cpc	r25, r1
     b8e:	49 f1       	breq	.+82     	; 0xbe2 <DIO_eunmSetPinDirection+0x9c>
     b90:	2f 81       	ldd	r18, Y+7	; 0x07
     b92:	38 85       	ldd	r19, Y+8	; 0x08
     b94:	22 30       	cpi	r18, 0x02	; 2
     b96:	31 05       	cpc	r19, r1
     b98:	2c f4       	brge	.+10     	; 0xba4 <DIO_eunmSetPinDirection+0x5e>
     b9a:	8f 81       	ldd	r24, Y+7	; 0x07
     b9c:	98 85       	ldd	r25, Y+8	; 0x08
     b9e:	00 97       	sbiw	r24, 0x00	; 0
     ba0:	61 f0       	breq	.+24     	; 0xbba <DIO_eunmSetPinDirection+0x74>
     ba2:	d6 c0       	rjmp	.+428    	; 0xd50 <DIO_eunmSetPinDirection+0x20a>
     ba4:	2f 81       	ldd	r18, Y+7	; 0x07
     ba6:	38 85       	ldd	r19, Y+8	; 0x08
     ba8:	22 30       	cpi	r18, 0x02	; 2
     baa:	31 05       	cpc	r19, r1
     bac:	71 f1       	breq	.+92     	; 0xc0a <DIO_eunmSetPinDirection+0xc4>
     bae:	8f 81       	ldd	r24, Y+7	; 0x07
     bb0:	98 85       	ldd	r25, Y+8	; 0x08
     bb2:	83 30       	cpi	r24, 0x03	; 3
     bb4:	91 05       	cpc	r25, r1
     bb6:	e9 f1       	breq	.+122    	; 0xc32 <DIO_eunmSetPinDirection+0xec>
     bb8:	cb c0       	rjmp	.+406    	; 0xd50 <DIO_eunmSetPinDirection+0x20a>
			{
			case DIO_PORTA: SET_BIT(DDRA_R,COPY_u8PIN); break;
     bba:	aa e3       	ldi	r26, 0x3A	; 58
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	ea e3       	ldi	r30, 0x3A	; 58
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	48 2f       	mov	r20, r24
     bc6:	8b 81       	ldd	r24, Y+3	; 0x03
     bc8:	28 2f       	mov	r18, r24
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	02 2e       	mov	r0, r18
     bd2:	02 c0       	rjmp	.+4      	; 0xbd8 <DIO_eunmSetPinDirection+0x92>
     bd4:	88 0f       	add	r24, r24
     bd6:	99 1f       	adc	r25, r25
     bd8:	0a 94       	dec	r0
     bda:	e2 f7       	brpl	.-8      	; 0xbd4 <DIO_eunmSetPinDirection+0x8e>
     bdc:	84 2b       	or	r24, r20
     bde:	8c 93       	st	X, r24
     be0:	b7 c0       	rjmp	.+366    	; 0xd50 <DIO_eunmSetPinDirection+0x20a>
			case DIO_PORTB: SET_BIT(DDRB_R,COPY_u8PIN); break;
     be2:	a7 e3       	ldi	r26, 0x37	; 55
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	e7 e3       	ldi	r30, 0x37	; 55
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	48 2f       	mov	r20, r24
     bee:	8b 81       	ldd	r24, Y+3	; 0x03
     bf0:	28 2f       	mov	r18, r24
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	02 2e       	mov	r0, r18
     bfa:	02 c0       	rjmp	.+4      	; 0xc00 <DIO_eunmSetPinDirection+0xba>
     bfc:	88 0f       	add	r24, r24
     bfe:	99 1f       	adc	r25, r25
     c00:	0a 94       	dec	r0
     c02:	e2 f7       	brpl	.-8      	; 0xbfc <DIO_eunmSetPinDirection+0xb6>
     c04:	84 2b       	or	r24, r20
     c06:	8c 93       	st	X, r24
     c08:	a3 c0       	rjmp	.+326    	; 0xd50 <DIO_eunmSetPinDirection+0x20a>
			case DIO_PORTC: SET_BIT(DDRC_R,COPY_u8PIN); break;
     c0a:	a4 e3       	ldi	r26, 0x34	; 52
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	e4 e3       	ldi	r30, 0x34	; 52
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	48 2f       	mov	r20, r24
     c16:	8b 81       	ldd	r24, Y+3	; 0x03
     c18:	28 2f       	mov	r18, r24
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	02 2e       	mov	r0, r18
     c22:	02 c0       	rjmp	.+4      	; 0xc28 <DIO_eunmSetPinDirection+0xe2>
     c24:	88 0f       	add	r24, r24
     c26:	99 1f       	adc	r25, r25
     c28:	0a 94       	dec	r0
     c2a:	e2 f7       	brpl	.-8      	; 0xc24 <DIO_eunmSetPinDirection+0xde>
     c2c:	84 2b       	or	r24, r20
     c2e:	8c 93       	st	X, r24
     c30:	8f c0       	rjmp	.+286    	; 0xd50 <DIO_eunmSetPinDirection+0x20a>
			case DIO_PORTD: SET_BIT(DDRD_R,COPY_u8PIN); break;
     c32:	a1 e3       	ldi	r26, 0x31	; 49
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	e1 e3       	ldi	r30, 0x31	; 49
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	48 2f       	mov	r20, r24
     c3e:	8b 81       	ldd	r24, Y+3	; 0x03
     c40:	28 2f       	mov	r18, r24
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	02 2e       	mov	r0, r18
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <DIO_eunmSetPinDirection+0x10a>
     c4c:	88 0f       	add	r24, r24
     c4e:	99 1f       	adc	r25, r25
     c50:	0a 94       	dec	r0
     c52:	e2 f7       	brpl	.-8      	; 0xc4c <DIO_eunmSetPinDirection+0x106>
     c54:	84 2b       	or	r24, r20
     c56:	8c 93       	st	X, r24
     c58:	7b c0       	rjmp	.+246    	; 0xd50 <DIO_eunmSetPinDirection+0x20a>
			}
		}
		else if (COPY_u8Direction == DIO_PIN_INPUT)
     c5a:	8c 81       	ldd	r24, Y+4	; 0x04
     c5c:	88 23       	and	r24, r24
     c5e:	09 f0       	breq	.+2      	; 0xc62 <DIO_eunmSetPinDirection+0x11c>
     c60:	74 c0       	rjmp	.+232    	; 0xd4a <DIO_eunmSetPinDirection+0x204>
		{
			switch(COPY_u8PORT)
     c62:	8a 81       	ldd	r24, Y+2	; 0x02
     c64:	28 2f       	mov	r18, r24
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	3e 83       	std	Y+6, r19	; 0x06
     c6a:	2d 83       	std	Y+5, r18	; 0x05
     c6c:	8d 81       	ldd	r24, Y+5	; 0x05
     c6e:	9e 81       	ldd	r25, Y+6	; 0x06
     c70:	81 30       	cpi	r24, 0x01	; 1
     c72:	91 05       	cpc	r25, r1
     c74:	59 f1       	breq	.+86     	; 0xccc <DIO_eunmSetPinDirection+0x186>
     c76:	2d 81       	ldd	r18, Y+5	; 0x05
     c78:	3e 81       	ldd	r19, Y+6	; 0x06
     c7a:	22 30       	cpi	r18, 0x02	; 2
     c7c:	31 05       	cpc	r19, r1
     c7e:	2c f4       	brge	.+10     	; 0xc8a <DIO_eunmSetPinDirection+0x144>
     c80:	8d 81       	ldd	r24, Y+5	; 0x05
     c82:	9e 81       	ldd	r25, Y+6	; 0x06
     c84:	00 97       	sbiw	r24, 0x00	; 0
     c86:	69 f0       	breq	.+26     	; 0xca2 <DIO_eunmSetPinDirection+0x15c>
     c88:	63 c0       	rjmp	.+198    	; 0xd50 <DIO_eunmSetPinDirection+0x20a>
     c8a:	2d 81       	ldd	r18, Y+5	; 0x05
     c8c:	3e 81       	ldd	r19, Y+6	; 0x06
     c8e:	22 30       	cpi	r18, 0x02	; 2
     c90:	31 05       	cpc	r19, r1
     c92:	89 f1       	breq	.+98     	; 0xcf6 <DIO_eunmSetPinDirection+0x1b0>
     c94:	8d 81       	ldd	r24, Y+5	; 0x05
     c96:	9e 81       	ldd	r25, Y+6	; 0x06
     c98:	83 30       	cpi	r24, 0x03	; 3
     c9a:	91 05       	cpc	r25, r1
     c9c:	09 f4       	brne	.+2      	; 0xca0 <DIO_eunmSetPinDirection+0x15a>
     c9e:	40 c0       	rjmp	.+128    	; 0xd20 <DIO_eunmSetPinDirection+0x1da>
     ca0:	57 c0       	rjmp	.+174    	; 0xd50 <DIO_eunmSetPinDirection+0x20a>
			{
			case DIO_PORTA: CLR_BIT(DDRA_R,COPY_u8PIN); break;
     ca2:	aa e3       	ldi	r26, 0x3A	; 58
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	ea e3       	ldi	r30, 0x3A	; 58
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	48 2f       	mov	r20, r24
     cae:	8b 81       	ldd	r24, Y+3	; 0x03
     cb0:	28 2f       	mov	r18, r24
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	02 2e       	mov	r0, r18
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <DIO_eunmSetPinDirection+0x17a>
     cbc:	88 0f       	add	r24, r24
     cbe:	99 1f       	adc	r25, r25
     cc0:	0a 94       	dec	r0
     cc2:	e2 f7       	brpl	.-8      	; 0xcbc <DIO_eunmSetPinDirection+0x176>
     cc4:	80 95       	com	r24
     cc6:	84 23       	and	r24, r20
     cc8:	8c 93       	st	X, r24
     cca:	42 c0       	rjmp	.+132    	; 0xd50 <DIO_eunmSetPinDirection+0x20a>
			case DIO_PORTB: CLR_BIT(DDRB_R,COPY_u8PIN); break;
     ccc:	a7 e3       	ldi	r26, 0x37	; 55
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	e7 e3       	ldi	r30, 0x37	; 55
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	48 2f       	mov	r20, r24
     cd8:	8b 81       	ldd	r24, Y+3	; 0x03
     cda:	28 2f       	mov	r18, r24
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	02 2e       	mov	r0, r18
     ce4:	02 c0       	rjmp	.+4      	; 0xcea <DIO_eunmSetPinDirection+0x1a4>
     ce6:	88 0f       	add	r24, r24
     ce8:	99 1f       	adc	r25, r25
     cea:	0a 94       	dec	r0
     cec:	e2 f7       	brpl	.-8      	; 0xce6 <DIO_eunmSetPinDirection+0x1a0>
     cee:	80 95       	com	r24
     cf0:	84 23       	and	r24, r20
     cf2:	8c 93       	st	X, r24
     cf4:	2d c0       	rjmp	.+90     	; 0xd50 <DIO_eunmSetPinDirection+0x20a>
			case DIO_PORTC: CLR_BIT(DDRC_R,COPY_u8PIN); break;
     cf6:	a4 e3       	ldi	r26, 0x34	; 52
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	e4 e3       	ldi	r30, 0x34	; 52
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	48 2f       	mov	r20, r24
     d02:	8b 81       	ldd	r24, Y+3	; 0x03
     d04:	28 2f       	mov	r18, r24
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	02 2e       	mov	r0, r18
     d0e:	02 c0       	rjmp	.+4      	; 0xd14 <DIO_eunmSetPinDirection+0x1ce>
     d10:	88 0f       	add	r24, r24
     d12:	99 1f       	adc	r25, r25
     d14:	0a 94       	dec	r0
     d16:	e2 f7       	brpl	.-8      	; 0xd10 <DIO_eunmSetPinDirection+0x1ca>
     d18:	80 95       	com	r24
     d1a:	84 23       	and	r24, r20
     d1c:	8c 93       	st	X, r24
     d1e:	18 c0       	rjmp	.+48     	; 0xd50 <DIO_eunmSetPinDirection+0x20a>
			case DIO_PORTD: CLR_BIT(DDRD_R,COPY_u8PIN); break;
     d20:	a1 e3       	ldi	r26, 0x31	; 49
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	e1 e3       	ldi	r30, 0x31	; 49
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	48 2f       	mov	r20, r24
     d2c:	8b 81       	ldd	r24, Y+3	; 0x03
     d2e:	28 2f       	mov	r18, r24
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	02 2e       	mov	r0, r18
     d38:	02 c0       	rjmp	.+4      	; 0xd3e <DIO_eunmSetPinDirection+0x1f8>
     d3a:	88 0f       	add	r24, r24
     d3c:	99 1f       	adc	r25, r25
     d3e:	0a 94       	dec	r0
     d40:	e2 f7       	brpl	.-8      	; 0xd3a <DIO_eunmSetPinDirection+0x1f4>
     d42:	80 95       	com	r24
     d44:	84 23       	and	r24, r20
     d46:	8c 93       	st	X, r24
     d48:	03 c0       	rjmp	.+6      	; 0xd50 <DIO_eunmSetPinDirection+0x20a>
			}
		}
		else
		{
			LOC_enumStatus = DIO_NOK;
     d4a:	19 82       	std	Y+1, r1	; 0x01
     d4c:	01 c0       	rjmp	.+2      	; 0xd50 <DIO_eunmSetPinDirection+0x20a>
		}
	}
	else
	{
		LOC_enumStatus = DIO_NOK;
     d4e:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumStatus;
     d50:	89 81       	ldd	r24, Y+1	; 0x01
}
     d52:	28 96       	adiw	r28, 0x08	; 8
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	f8 94       	cli
     d58:	de bf       	out	0x3e, r29	; 62
     d5a:	0f be       	out	0x3f, r0	; 63
     d5c:	cd bf       	out	0x3d, r28	; 61
     d5e:	cf 91       	pop	r28
     d60:	df 91       	pop	r29
     d62:	08 95       	ret

00000d64 <DIO_eunmSetPinValue>:
DIO_ErrorStatus DIO_eunmSetPinValue         (u8 COPY_u8PORT ,u8 COPY_u8PIN ,u8 COPY_u8Value     )
{
     d64:	df 93       	push	r29
     d66:	cf 93       	push	r28
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
     d6c:	28 97       	sbiw	r28, 0x08	; 8
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	f8 94       	cli
     d72:	de bf       	out	0x3e, r29	; 62
     d74:	0f be       	out	0x3f, r0	; 63
     d76:	cd bf       	out	0x3d, r28	; 61
     d78:	8a 83       	std	Y+2, r24	; 0x02
     d7a:	6b 83       	std	Y+3, r22	; 0x03
     d7c:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus LOC_enumStatus = DIO_OK;
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	89 83       	std	Y+1, r24	; 0x01
	if((COPY_u8PORT <= DIO_PORTD)&&(COPY_u8PIN <= DIO_PIN7))
     d82:	8a 81       	ldd	r24, Y+2	; 0x02
     d84:	84 30       	cpi	r24, 0x04	; 4
     d86:	08 f0       	brcs	.+2      	; 0xd8a <DIO_eunmSetPinValue+0x26>
     d88:	f1 c0       	rjmp	.+482    	; 0xf6c <DIO_eunmSetPinValue+0x208>
     d8a:	8b 81       	ldd	r24, Y+3	; 0x03
     d8c:	88 30       	cpi	r24, 0x08	; 8
     d8e:	08 f0       	brcs	.+2      	; 0xd92 <DIO_eunmSetPinValue+0x2e>
     d90:	ed c0       	rjmp	.+474    	; 0xf6c <DIO_eunmSetPinValue+0x208>
	{
		if (COPY_u8Value == DIO_PIN_HIGH)
     d92:	8c 81       	ldd	r24, Y+4	; 0x04
     d94:	81 30       	cpi	r24, 0x01	; 1
     d96:	09 f0       	breq	.+2      	; 0xd9a <DIO_eunmSetPinValue+0x36>
     d98:	6f c0       	rjmp	.+222    	; 0xe78 <DIO_eunmSetPinValue+0x114>
		{
			switch(COPY_u8PORT)
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	28 2f       	mov	r18, r24
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	38 87       	std	Y+8, r19	; 0x08
     da2:	2f 83       	std	Y+7, r18	; 0x07
     da4:	8f 81       	ldd	r24, Y+7	; 0x07
     da6:	98 85       	ldd	r25, Y+8	; 0x08
     da8:	81 30       	cpi	r24, 0x01	; 1
     daa:	91 05       	cpc	r25, r1
     dac:	49 f1       	breq	.+82     	; 0xe00 <DIO_eunmSetPinValue+0x9c>
     dae:	2f 81       	ldd	r18, Y+7	; 0x07
     db0:	38 85       	ldd	r19, Y+8	; 0x08
     db2:	22 30       	cpi	r18, 0x02	; 2
     db4:	31 05       	cpc	r19, r1
     db6:	2c f4       	brge	.+10     	; 0xdc2 <DIO_eunmSetPinValue+0x5e>
     db8:	8f 81       	ldd	r24, Y+7	; 0x07
     dba:	98 85       	ldd	r25, Y+8	; 0x08
     dbc:	00 97       	sbiw	r24, 0x00	; 0
     dbe:	61 f0       	breq	.+24     	; 0xdd8 <DIO_eunmSetPinValue+0x74>
     dc0:	d6 c0       	rjmp	.+428    	; 0xf6e <DIO_eunmSetPinValue+0x20a>
     dc2:	2f 81       	ldd	r18, Y+7	; 0x07
     dc4:	38 85       	ldd	r19, Y+8	; 0x08
     dc6:	22 30       	cpi	r18, 0x02	; 2
     dc8:	31 05       	cpc	r19, r1
     dca:	71 f1       	breq	.+92     	; 0xe28 <DIO_eunmSetPinValue+0xc4>
     dcc:	8f 81       	ldd	r24, Y+7	; 0x07
     dce:	98 85       	ldd	r25, Y+8	; 0x08
     dd0:	83 30       	cpi	r24, 0x03	; 3
     dd2:	91 05       	cpc	r25, r1
     dd4:	e9 f1       	breq	.+122    	; 0xe50 <DIO_eunmSetPinValue+0xec>
     dd6:	cb c0       	rjmp	.+406    	; 0xf6e <DIO_eunmSetPinValue+0x20a>
			{
			case DIO_PORTA: SET_BIT(PORTA_R,COPY_u8PIN);break;
     dd8:	ab e3       	ldi	r26, 0x3B	; 59
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	eb e3       	ldi	r30, 0x3B	; 59
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	48 2f       	mov	r20, r24
     de4:	8b 81       	ldd	r24, Y+3	; 0x03
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	02 2e       	mov	r0, r18
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <DIO_eunmSetPinValue+0x92>
     df2:	88 0f       	add	r24, r24
     df4:	99 1f       	adc	r25, r25
     df6:	0a 94       	dec	r0
     df8:	e2 f7       	brpl	.-8      	; 0xdf2 <DIO_eunmSetPinValue+0x8e>
     dfa:	84 2b       	or	r24, r20
     dfc:	8c 93       	st	X, r24
     dfe:	b7 c0       	rjmp	.+366    	; 0xf6e <DIO_eunmSetPinValue+0x20a>
			case DIO_PORTB: SET_BIT(PORTB_R,COPY_u8PIN);break;
     e00:	a8 e3       	ldi	r26, 0x38	; 56
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e8 e3       	ldi	r30, 0x38	; 56
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	48 2f       	mov	r20, r24
     e0c:	8b 81       	ldd	r24, Y+3	; 0x03
     e0e:	28 2f       	mov	r18, r24
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	02 2e       	mov	r0, r18
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <DIO_eunmSetPinValue+0xba>
     e1a:	88 0f       	add	r24, r24
     e1c:	99 1f       	adc	r25, r25
     e1e:	0a 94       	dec	r0
     e20:	e2 f7       	brpl	.-8      	; 0xe1a <DIO_eunmSetPinValue+0xb6>
     e22:	84 2b       	or	r24, r20
     e24:	8c 93       	st	X, r24
     e26:	a3 c0       	rjmp	.+326    	; 0xf6e <DIO_eunmSetPinValue+0x20a>
			case DIO_PORTC: SET_BIT(PORTC_R,COPY_u8PIN);break;
     e28:	a5 e3       	ldi	r26, 0x35	; 53
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e5 e3       	ldi	r30, 0x35	; 53
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	48 2f       	mov	r20, r24
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	28 2f       	mov	r18, r24
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	02 2e       	mov	r0, r18
     e40:	02 c0       	rjmp	.+4      	; 0xe46 <DIO_eunmSetPinValue+0xe2>
     e42:	88 0f       	add	r24, r24
     e44:	99 1f       	adc	r25, r25
     e46:	0a 94       	dec	r0
     e48:	e2 f7       	brpl	.-8      	; 0xe42 <DIO_eunmSetPinValue+0xde>
     e4a:	84 2b       	or	r24, r20
     e4c:	8c 93       	st	X, r24
     e4e:	8f c0       	rjmp	.+286    	; 0xf6e <DIO_eunmSetPinValue+0x20a>
			case DIO_PORTD: SET_BIT(PORTD_R,COPY_u8PIN);break;
     e50:	a2 e3       	ldi	r26, 0x32	; 50
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e2 e3       	ldi	r30, 0x32	; 50
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	48 2f       	mov	r20, r24
     e5c:	8b 81       	ldd	r24, Y+3	; 0x03
     e5e:	28 2f       	mov	r18, r24
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	02 2e       	mov	r0, r18
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <DIO_eunmSetPinValue+0x10a>
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	0a 94       	dec	r0
     e70:	e2 f7       	brpl	.-8      	; 0xe6a <DIO_eunmSetPinValue+0x106>
     e72:	84 2b       	or	r24, r20
     e74:	8c 93       	st	X, r24
     e76:	7b c0       	rjmp	.+246    	; 0xf6e <DIO_eunmSetPinValue+0x20a>
			}
		}
		else if (COPY_u8Value == DIO_PIN_LOW)
     e78:	8c 81       	ldd	r24, Y+4	; 0x04
     e7a:	88 23       	and	r24, r24
     e7c:	09 f0       	breq	.+2      	; 0xe80 <DIO_eunmSetPinValue+0x11c>
     e7e:	74 c0       	rjmp	.+232    	; 0xf68 <DIO_eunmSetPinValue+0x204>
		{
			switch(COPY_u8PORT)
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	28 2f       	mov	r18, r24
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	3e 83       	std	Y+6, r19	; 0x06
     e88:	2d 83       	std	Y+5, r18	; 0x05
     e8a:	8d 81       	ldd	r24, Y+5	; 0x05
     e8c:	9e 81       	ldd	r25, Y+6	; 0x06
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	91 05       	cpc	r25, r1
     e92:	59 f1       	breq	.+86     	; 0xeea <DIO_eunmSetPinValue+0x186>
     e94:	2d 81       	ldd	r18, Y+5	; 0x05
     e96:	3e 81       	ldd	r19, Y+6	; 0x06
     e98:	22 30       	cpi	r18, 0x02	; 2
     e9a:	31 05       	cpc	r19, r1
     e9c:	2c f4       	brge	.+10     	; 0xea8 <DIO_eunmSetPinValue+0x144>
     e9e:	8d 81       	ldd	r24, Y+5	; 0x05
     ea0:	9e 81       	ldd	r25, Y+6	; 0x06
     ea2:	00 97       	sbiw	r24, 0x00	; 0
     ea4:	69 f0       	breq	.+26     	; 0xec0 <DIO_eunmSetPinValue+0x15c>
     ea6:	63 c0       	rjmp	.+198    	; 0xf6e <DIO_eunmSetPinValue+0x20a>
     ea8:	2d 81       	ldd	r18, Y+5	; 0x05
     eaa:	3e 81       	ldd	r19, Y+6	; 0x06
     eac:	22 30       	cpi	r18, 0x02	; 2
     eae:	31 05       	cpc	r19, r1
     eb0:	89 f1       	breq	.+98     	; 0xf14 <DIO_eunmSetPinValue+0x1b0>
     eb2:	8d 81       	ldd	r24, Y+5	; 0x05
     eb4:	9e 81       	ldd	r25, Y+6	; 0x06
     eb6:	83 30       	cpi	r24, 0x03	; 3
     eb8:	91 05       	cpc	r25, r1
     eba:	09 f4       	brne	.+2      	; 0xebe <DIO_eunmSetPinValue+0x15a>
     ebc:	40 c0       	rjmp	.+128    	; 0xf3e <DIO_eunmSetPinValue+0x1da>
     ebe:	57 c0       	rjmp	.+174    	; 0xf6e <DIO_eunmSetPinValue+0x20a>
			{
			case DIO_PORTA: CLR_BIT(PORTA_R,COPY_u8PIN);break;
     ec0:	ab e3       	ldi	r26, 0x3B	; 59
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	eb e3       	ldi	r30, 0x3B	; 59
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	48 2f       	mov	r20, r24
     ecc:	8b 81       	ldd	r24, Y+3	; 0x03
     ece:	28 2f       	mov	r18, r24
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	02 2e       	mov	r0, r18
     ed8:	02 c0       	rjmp	.+4      	; 0xede <DIO_eunmSetPinValue+0x17a>
     eda:	88 0f       	add	r24, r24
     edc:	99 1f       	adc	r25, r25
     ede:	0a 94       	dec	r0
     ee0:	e2 f7       	brpl	.-8      	; 0xeda <DIO_eunmSetPinValue+0x176>
     ee2:	80 95       	com	r24
     ee4:	84 23       	and	r24, r20
     ee6:	8c 93       	st	X, r24
     ee8:	42 c0       	rjmp	.+132    	; 0xf6e <DIO_eunmSetPinValue+0x20a>
			case DIO_PORTB: CLR_BIT(PORTB_R,COPY_u8PIN);break;
     eea:	a8 e3       	ldi	r26, 0x38	; 56
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e8 e3       	ldi	r30, 0x38	; 56
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	48 2f       	mov	r20, r24
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	02 2e       	mov	r0, r18
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <DIO_eunmSetPinValue+0x1a4>
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	0a 94       	dec	r0
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <DIO_eunmSetPinValue+0x1a0>
     f0c:	80 95       	com	r24
     f0e:	84 23       	and	r24, r20
     f10:	8c 93       	st	X, r24
     f12:	2d c0       	rjmp	.+90     	; 0xf6e <DIO_eunmSetPinValue+0x20a>
			case DIO_PORTC: CLR_BIT(PORTC_R,COPY_u8PIN);break;
     f14:	a5 e3       	ldi	r26, 0x35	; 53
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e5 e3       	ldi	r30, 0x35	; 53
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	48 2f       	mov	r20, r24
     f20:	8b 81       	ldd	r24, Y+3	; 0x03
     f22:	28 2f       	mov	r18, r24
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	02 2e       	mov	r0, r18
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <DIO_eunmSetPinValue+0x1ce>
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	0a 94       	dec	r0
     f34:	e2 f7       	brpl	.-8      	; 0xf2e <DIO_eunmSetPinValue+0x1ca>
     f36:	80 95       	com	r24
     f38:	84 23       	and	r24, r20
     f3a:	8c 93       	st	X, r24
     f3c:	18 c0       	rjmp	.+48     	; 0xf6e <DIO_eunmSetPinValue+0x20a>
			case DIO_PORTD: CLR_BIT(PORTD_R,COPY_u8PIN);break;
     f3e:	a2 e3       	ldi	r26, 0x32	; 50
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e2 e3       	ldi	r30, 0x32	; 50
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	48 2f       	mov	r20, r24
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	02 2e       	mov	r0, r18
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <DIO_eunmSetPinValue+0x1f8>
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	0a 94       	dec	r0
     f5e:	e2 f7       	brpl	.-8      	; 0xf58 <DIO_eunmSetPinValue+0x1f4>
     f60:	80 95       	com	r24
     f62:	84 23       	and	r24, r20
     f64:	8c 93       	st	X, r24
     f66:	03 c0       	rjmp	.+6      	; 0xf6e <DIO_eunmSetPinValue+0x20a>
			}
		}
		else
		{
			LOC_enumStatus = DIO_NOK ;
     f68:	19 82       	std	Y+1, r1	; 0x01
     f6a:	01 c0       	rjmp	.+2      	; 0xf6e <DIO_eunmSetPinValue+0x20a>
		}
	}

	else
	{
		LOC_enumStatus = DIO_NOK ;
     f6c:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumStatus ;
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
}
     f70:	28 96       	adiw	r28, 0x08	; 8
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	f8 94       	cli
     f76:	de bf       	out	0x3e, r29	; 62
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	cd bf       	out	0x3d, r28	; 61
     f7c:	cf 91       	pop	r28
     f7e:	df 91       	pop	r29
     f80:	08 95       	ret

00000f82 <DIO_eunmGetPin>:
DIO_ErrorStatus DIO_eunmGetPin              (u8 COPY_u8PORT ,u8 COPY_u8PIN  ,u8 *COPY_PtrData   )
{
     f82:	df 93       	push	r29
     f84:	cf 93       	push	r28
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
     f8a:	27 97       	sbiw	r28, 0x07	; 7
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	f8 94       	cli
     f90:	de bf       	out	0x3e, r29	; 62
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	cd bf       	out	0x3d, r28	; 61
     f96:	8a 83       	std	Y+2, r24	; 0x02
     f98:	6b 83       	std	Y+3, r22	; 0x03
     f9a:	5d 83       	std	Y+5, r21	; 0x05
     f9c:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus LOC_enumStatus = DIO_OK;
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	89 83       	std	Y+1, r24	; 0x01
	if((COPY_u8PORT <= DIO_PORTD)&&(COPY_u8PIN <= DIO_PIN7))
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	84 30       	cpi	r24, 0x04	; 4
     fa6:	08 f0       	brcs	.+2      	; 0xfaa <DIO_eunmGetPin+0x28>
     fa8:	a6 c0       	rjmp	.+332    	; 0x10f6 <DIO_eunmGetPin+0x174>
     faa:	8b 81       	ldd	r24, Y+3	; 0x03
     fac:	88 30       	cpi	r24, 0x08	; 8
     fae:	08 f0       	brcs	.+2      	; 0xfb2 <DIO_eunmGetPin+0x30>
     fb0:	a2 c0       	rjmp	.+324    	; 0x10f6 <DIO_eunmGetPin+0x174>
	{
		switch (COPY_u8PORT)
     fb2:	8a 81       	ldd	r24, Y+2	; 0x02
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	3f 83       	std	Y+7, r19	; 0x07
     fba:	2e 83       	std	Y+6, r18	; 0x06
     fbc:	4e 81       	ldd	r20, Y+6	; 0x06
     fbe:	5f 81       	ldd	r21, Y+7	; 0x07
     fc0:	41 30       	cpi	r20, 0x01	; 1
     fc2:	51 05       	cpc	r21, r1
     fc4:	c1 f1       	breq	.+112    	; 0x1036 <DIO_eunmGetPin+0xb4>
     fc6:	8e 81       	ldd	r24, Y+6	; 0x06
     fc8:	9f 81       	ldd	r25, Y+7	; 0x07
     fca:	82 30       	cpi	r24, 0x02	; 2
     fcc:	91 05       	cpc	r25, r1
     fce:	34 f4       	brge	.+12     	; 0xfdc <DIO_eunmGetPin+0x5a>
     fd0:	2e 81       	ldd	r18, Y+6	; 0x06
     fd2:	3f 81       	ldd	r19, Y+7	; 0x07
     fd4:	21 15       	cp	r18, r1
     fd6:	31 05       	cpc	r19, r1
     fd8:	71 f0       	breq	.+28     	; 0xff6 <DIO_eunmGetPin+0x74>
     fda:	8e c0       	rjmp	.+284    	; 0x10f8 <DIO_eunmGetPin+0x176>
     fdc:	4e 81       	ldd	r20, Y+6	; 0x06
     fde:	5f 81       	ldd	r21, Y+7	; 0x07
     fe0:	42 30       	cpi	r20, 0x02	; 2
     fe2:	51 05       	cpc	r21, r1
     fe4:	09 f4       	brne	.+2      	; 0xfe8 <DIO_eunmGetPin+0x66>
     fe6:	47 c0       	rjmp	.+142    	; 0x1076 <DIO_eunmGetPin+0xf4>
     fe8:	8e 81       	ldd	r24, Y+6	; 0x06
     fea:	9f 81       	ldd	r25, Y+7	; 0x07
     fec:	83 30       	cpi	r24, 0x03	; 3
     fee:	91 05       	cpc	r25, r1
     ff0:	09 f4       	brne	.+2      	; 0xff4 <DIO_eunmGetPin+0x72>
     ff2:	61 c0       	rjmp	.+194    	; 0x10b6 <DIO_eunmGetPin+0x134>
     ff4:	81 c0       	rjmp	.+258    	; 0x10f8 <DIO_eunmGetPin+0x176>
		{
		case DIO_PORTA: *COPY_PtrData = RED_BIT(PINA_R,COPY_u8PIN);break;
     ff6:	e9 e3       	ldi	r30, 0x39	; 57
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	48 2f       	mov	r20, r24
     ffe:	50 e0       	ldi	r21, 0x00	; 0
    1000:	8b 81       	ldd	r24, Y+3	; 0x03
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <DIO_eunmGetPin+0x8e>
    100c:	88 0f       	add	r24, r24
    100e:	99 1f       	adc	r25, r25
    1010:	2a 95       	dec	r18
    1012:	e2 f7       	brpl	.-8      	; 0x100c <DIO_eunmGetPin+0x8a>
    1014:	9a 01       	movw	r18, r20
    1016:	28 23       	and	r18, r24
    1018:	39 23       	and	r19, r25
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	88 2f       	mov	r24, r24
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	a9 01       	movw	r20, r18
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <DIO_eunmGetPin+0xa6>
    1024:	55 95       	asr	r21
    1026:	47 95       	ror	r20
    1028:	8a 95       	dec	r24
    102a:	e2 f7       	brpl	.-8      	; 0x1024 <DIO_eunmGetPin+0xa2>
    102c:	ca 01       	movw	r24, r20
    102e:	ec 81       	ldd	r30, Y+4	; 0x04
    1030:	fd 81       	ldd	r31, Y+5	; 0x05
    1032:	80 83       	st	Z, r24
    1034:	61 c0       	rjmp	.+194    	; 0x10f8 <DIO_eunmGetPin+0x176>
		case DIO_PORTB: *COPY_PtrData = RED_BIT(PINB_R,COPY_u8PIN);break;
    1036:	e6 e3       	ldi	r30, 0x36	; 54
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	48 2f       	mov	r20, r24
    103e:	50 e0       	ldi	r21, 0x00	; 0
    1040:	8b 81       	ldd	r24, Y+3	; 0x03
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <DIO_eunmGetPin+0xce>
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	2a 95       	dec	r18
    1052:	e2 f7       	brpl	.-8      	; 0x104c <DIO_eunmGetPin+0xca>
    1054:	9a 01       	movw	r18, r20
    1056:	28 23       	and	r18, r24
    1058:	39 23       	and	r19, r25
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	88 2f       	mov	r24, r24
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	a9 01       	movw	r20, r18
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <DIO_eunmGetPin+0xe6>
    1064:	55 95       	asr	r21
    1066:	47 95       	ror	r20
    1068:	8a 95       	dec	r24
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <DIO_eunmGetPin+0xe2>
    106c:	ca 01       	movw	r24, r20
    106e:	ec 81       	ldd	r30, Y+4	; 0x04
    1070:	fd 81       	ldd	r31, Y+5	; 0x05
    1072:	80 83       	st	Z, r24
    1074:	41 c0       	rjmp	.+130    	; 0x10f8 <DIO_eunmGetPin+0x176>
		case DIO_PORTC: *COPY_PtrData = RED_BIT(PINC_R,COPY_u8PIN);break;
    1076:	e3 e3       	ldi	r30, 0x33	; 51
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	48 2f       	mov	r20, r24
    107e:	50 e0       	ldi	r21, 0x00	; 0
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <DIO_eunmGetPin+0x10e>
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	2a 95       	dec	r18
    1092:	e2 f7       	brpl	.-8      	; 0x108c <DIO_eunmGetPin+0x10a>
    1094:	9a 01       	movw	r18, r20
    1096:	28 23       	and	r18, r24
    1098:	39 23       	and	r19, r25
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	88 2f       	mov	r24, r24
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	a9 01       	movw	r20, r18
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <DIO_eunmGetPin+0x126>
    10a4:	55 95       	asr	r21
    10a6:	47 95       	ror	r20
    10a8:	8a 95       	dec	r24
    10aa:	e2 f7       	brpl	.-8      	; 0x10a4 <DIO_eunmGetPin+0x122>
    10ac:	ca 01       	movw	r24, r20
    10ae:	ec 81       	ldd	r30, Y+4	; 0x04
    10b0:	fd 81       	ldd	r31, Y+5	; 0x05
    10b2:	80 83       	st	Z, r24
    10b4:	21 c0       	rjmp	.+66     	; 0x10f8 <DIO_eunmGetPin+0x176>
		case DIO_PORTD: *COPY_PtrData = RED_BIT(PIND_R,COPY_u8PIN);break;
    10b6:	e0 e3       	ldi	r30, 0x30	; 48
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	48 2f       	mov	r20, r24
    10be:	50 e0       	ldi	r21, 0x00	; 0
    10c0:	8b 81       	ldd	r24, Y+3	; 0x03
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <DIO_eunmGetPin+0x14e>
    10cc:	88 0f       	add	r24, r24
    10ce:	99 1f       	adc	r25, r25
    10d0:	2a 95       	dec	r18
    10d2:	e2 f7       	brpl	.-8      	; 0x10cc <DIO_eunmGetPin+0x14a>
    10d4:	9a 01       	movw	r18, r20
    10d6:	28 23       	and	r18, r24
    10d8:	39 23       	and	r19, r25
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	88 2f       	mov	r24, r24
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	a9 01       	movw	r20, r18
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <DIO_eunmGetPin+0x166>
    10e4:	55 95       	asr	r21
    10e6:	47 95       	ror	r20
    10e8:	8a 95       	dec	r24
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <DIO_eunmGetPin+0x162>
    10ec:	ca 01       	movw	r24, r20
    10ee:	ec 81       	ldd	r30, Y+4	; 0x04
    10f0:	fd 81       	ldd	r31, Y+5	; 0x05
    10f2:	80 83       	st	Z, r24
    10f4:	01 c0       	rjmp	.+2      	; 0x10f8 <DIO_eunmGetPin+0x176>
		}
	}
	else
	{
		LOC_enumStatus = DIO_NOK;
    10f6:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumStatus;
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    10fa:	27 96       	adiw	r28, 0x07	; 7
    10fc:	0f b6       	in	r0, 0x3f	; 63
    10fe:	f8 94       	cli
    1100:	de bf       	out	0x3e, r29	; 62
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	cd bf       	out	0x3d, r28	; 61
    1106:	cf 91       	pop	r28
    1108:	df 91       	pop	r29
    110a:	08 95       	ret

0000110c <DIO_eunmTogglePin>:
DIO_ErrorStatus DIO_eunmTogglePin           (u8 COPY_u8PORT ,u8 COPY_u8PIN                      )
{
    110c:	df 93       	push	r29
    110e:	cf 93       	push	r28
    1110:	00 d0       	rcall	.+0      	; 0x1112 <DIO_eunmTogglePin+0x6>
    1112:	00 d0       	rcall	.+0      	; 0x1114 <DIO_eunmTogglePin+0x8>
    1114:	0f 92       	push	r0
    1116:	cd b7       	in	r28, 0x3d	; 61
    1118:	de b7       	in	r29, 0x3e	; 62
    111a:	8a 83       	std	Y+2, r24	; 0x02
    111c:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumStatus = DIO_OK;
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	89 83       	std	Y+1, r24	; 0x01
	if((COPY_u8PORT <= DIO_PORTD)&&(COPY_u8PIN <= DIO_PIN7))
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	84 30       	cpi	r24, 0x04	; 4
    1126:	08 f0       	brcs	.+2      	; 0x112a <DIO_eunmTogglePin+0x1e>
    1128:	73 c0       	rjmp	.+230    	; 0x1210 <DIO_eunmTogglePin+0x104>
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	88 30       	cpi	r24, 0x08	; 8
    112e:	08 f0       	brcs	.+2      	; 0x1132 <DIO_eunmTogglePin+0x26>
    1130:	6f c0       	rjmp	.+222    	; 0x1210 <DIO_eunmTogglePin+0x104>
	{
		switch (COPY_u8PORT)
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	3d 83       	std	Y+5, r19	; 0x05
    113a:	2c 83       	std	Y+4, r18	; 0x04
    113c:	8c 81       	ldd	r24, Y+4	; 0x04
    113e:	9d 81       	ldd	r25, Y+5	; 0x05
    1140:	81 30       	cpi	r24, 0x01	; 1
    1142:	91 05       	cpc	r25, r1
    1144:	49 f1       	breq	.+82     	; 0x1198 <DIO_eunmTogglePin+0x8c>
    1146:	2c 81       	ldd	r18, Y+4	; 0x04
    1148:	3d 81       	ldd	r19, Y+5	; 0x05
    114a:	22 30       	cpi	r18, 0x02	; 2
    114c:	31 05       	cpc	r19, r1
    114e:	2c f4       	brge	.+10     	; 0x115a <DIO_eunmTogglePin+0x4e>
    1150:	8c 81       	ldd	r24, Y+4	; 0x04
    1152:	9d 81       	ldd	r25, Y+5	; 0x05
    1154:	00 97       	sbiw	r24, 0x00	; 0
    1156:	61 f0       	breq	.+24     	; 0x1170 <DIO_eunmTogglePin+0x64>
    1158:	5c c0       	rjmp	.+184    	; 0x1212 <DIO_eunmTogglePin+0x106>
    115a:	2c 81       	ldd	r18, Y+4	; 0x04
    115c:	3d 81       	ldd	r19, Y+5	; 0x05
    115e:	22 30       	cpi	r18, 0x02	; 2
    1160:	31 05       	cpc	r19, r1
    1162:	71 f1       	breq	.+92     	; 0x11c0 <DIO_eunmTogglePin+0xb4>
    1164:	8c 81       	ldd	r24, Y+4	; 0x04
    1166:	9d 81       	ldd	r25, Y+5	; 0x05
    1168:	83 30       	cpi	r24, 0x03	; 3
    116a:	91 05       	cpc	r25, r1
    116c:	e9 f1       	breq	.+122    	; 0x11e8 <DIO_eunmTogglePin+0xdc>
    116e:	51 c0       	rjmp	.+162    	; 0x1212 <DIO_eunmTogglePin+0x106>
		{
		case DIO_PORTA: TOG_BIT(PORTA_R,COPY_u8PIN);break;
    1170:	ab e3       	ldi	r26, 0x3B	; 59
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	eb e3       	ldi	r30, 0x3B	; 59
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	48 2f       	mov	r20, r24
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	28 2f       	mov	r18, r24
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	02 2e       	mov	r0, r18
    1188:	02 c0       	rjmp	.+4      	; 0x118e <DIO_eunmTogglePin+0x82>
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	0a 94       	dec	r0
    1190:	e2 f7       	brpl	.-8      	; 0x118a <DIO_eunmTogglePin+0x7e>
    1192:	84 27       	eor	r24, r20
    1194:	8c 93       	st	X, r24
    1196:	3d c0       	rjmp	.+122    	; 0x1212 <DIO_eunmTogglePin+0x106>
		case DIO_PORTB: TOG_BIT(PORTB_R,COPY_u8PIN);break;
    1198:	a8 e3       	ldi	r26, 0x38	; 56
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e8 e3       	ldi	r30, 0x38	; 56
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	48 2f       	mov	r20, r24
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	02 2e       	mov	r0, r18
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <DIO_eunmTogglePin+0xaa>
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	0a 94       	dec	r0
    11b8:	e2 f7       	brpl	.-8      	; 0x11b2 <DIO_eunmTogglePin+0xa6>
    11ba:	84 27       	eor	r24, r20
    11bc:	8c 93       	st	X, r24
    11be:	29 c0       	rjmp	.+82     	; 0x1212 <DIO_eunmTogglePin+0x106>
		case DIO_PORTC: TOG_BIT(PORTC_R,COPY_u8PIN);break;
    11c0:	a5 e3       	ldi	r26, 0x35	; 53
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	e5 e3       	ldi	r30, 0x35	; 53
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	48 2f       	mov	r20, r24
    11cc:	8b 81       	ldd	r24, Y+3	; 0x03
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	02 2e       	mov	r0, r18
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <DIO_eunmTogglePin+0xd2>
    11da:	88 0f       	add	r24, r24
    11dc:	99 1f       	adc	r25, r25
    11de:	0a 94       	dec	r0
    11e0:	e2 f7       	brpl	.-8      	; 0x11da <DIO_eunmTogglePin+0xce>
    11e2:	84 27       	eor	r24, r20
    11e4:	8c 93       	st	X, r24
    11e6:	15 c0       	rjmp	.+42     	; 0x1212 <DIO_eunmTogglePin+0x106>
		case DIO_PORTD: TOG_BIT(PORTD_R,COPY_u8PIN);break;
    11e8:	a2 e3       	ldi	r26, 0x32	; 50
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	e2 e3       	ldi	r30, 0x32	; 50
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	48 2f       	mov	r20, r24
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	02 2e       	mov	r0, r18
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <DIO_eunmTogglePin+0xfa>
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	0a 94       	dec	r0
    1208:	e2 f7       	brpl	.-8      	; 0x1202 <DIO_eunmTogglePin+0xf6>
    120a:	84 27       	eor	r24, r20
    120c:	8c 93       	st	X, r24
    120e:	01 c0       	rjmp	.+2      	; 0x1212 <DIO_eunmTogglePin+0x106>
		}
	}
	else
	{
		LOC_enumStatus = DIO_NOK;
    1210:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumStatus;
    1212:	89 81       	ldd	r24, Y+1	; 0x01
}
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	cf 91       	pop	r28
    1220:	df 91       	pop	r29
    1222:	08 95       	ret

00001224 <DIO_eunmSetPortDirection>:
DIO_ErrorStatus DIO_eunmSetPortDirection    (u8 COPY_u8PORT ,u8 COPY_u8Direction                )
{
    1224:	df 93       	push	r29
    1226:	cf 93       	push	r28
    1228:	00 d0       	rcall	.+0      	; 0x122a <DIO_eunmSetPortDirection+0x6>
    122a:	00 d0       	rcall	.+0      	; 0x122c <DIO_eunmSetPortDirection+0x8>
    122c:	0f 92       	push	r0
    122e:	cd b7       	in	r28, 0x3d	; 61
    1230:	de b7       	in	r29, 0x3e	; 62
    1232:	8a 83       	std	Y+2, r24	; 0x02
    1234:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumStatus = DIO_OK;
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	89 83       	std	Y+1, r24	; 0x01
	if(COPY_u8PORT <= DIO_PORTD)
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	84 30       	cpi	r24, 0x04	; 4
    123e:	98 f5       	brcc	.+102    	; 0x12a6 <DIO_eunmSetPortDirection+0x82>
	{
		switch (COPY_u8PORT)
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	3d 83       	std	Y+5, r19	; 0x05
    1248:	2c 83       	std	Y+4, r18	; 0x04
    124a:	8c 81       	ldd	r24, Y+4	; 0x04
    124c:	9d 81       	ldd	r25, Y+5	; 0x05
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	91 05       	cpc	r25, r1
    1252:	d1 f0       	breq	.+52     	; 0x1288 <DIO_eunmSetPortDirection+0x64>
    1254:	2c 81       	ldd	r18, Y+4	; 0x04
    1256:	3d 81       	ldd	r19, Y+5	; 0x05
    1258:	22 30       	cpi	r18, 0x02	; 2
    125a:	31 05       	cpc	r19, r1
    125c:	2c f4       	brge	.+10     	; 0x1268 <DIO_eunmSetPortDirection+0x44>
    125e:	8c 81       	ldd	r24, Y+4	; 0x04
    1260:	9d 81       	ldd	r25, Y+5	; 0x05
    1262:	00 97       	sbiw	r24, 0x00	; 0
    1264:	61 f0       	breq	.+24     	; 0x127e <DIO_eunmSetPortDirection+0x5a>
    1266:	20 c0       	rjmp	.+64     	; 0x12a8 <DIO_eunmSetPortDirection+0x84>
    1268:	2c 81       	ldd	r18, Y+4	; 0x04
    126a:	3d 81       	ldd	r19, Y+5	; 0x05
    126c:	22 30       	cpi	r18, 0x02	; 2
    126e:	31 05       	cpc	r19, r1
    1270:	81 f0       	breq	.+32     	; 0x1292 <DIO_eunmSetPortDirection+0x6e>
    1272:	8c 81       	ldd	r24, Y+4	; 0x04
    1274:	9d 81       	ldd	r25, Y+5	; 0x05
    1276:	83 30       	cpi	r24, 0x03	; 3
    1278:	91 05       	cpc	r25, r1
    127a:	81 f0       	breq	.+32     	; 0x129c <DIO_eunmSetPortDirection+0x78>
    127c:	15 c0       	rjmp	.+42     	; 0x12a8 <DIO_eunmSetPortDirection+0x84>
		{
		case DIO_PORTA: DDRA_R = COPY_u8Direction;break;
    127e:	ea e3       	ldi	r30, 0x3A	; 58
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	80 83       	st	Z, r24
    1286:	10 c0       	rjmp	.+32     	; 0x12a8 <DIO_eunmSetPortDirection+0x84>
		case DIO_PORTB: DDRB_R = COPY_u8Direction;break;
    1288:	e7 e3       	ldi	r30, 0x37	; 55
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	8b 81       	ldd	r24, Y+3	; 0x03
    128e:	80 83       	st	Z, r24
    1290:	0b c0       	rjmp	.+22     	; 0x12a8 <DIO_eunmSetPortDirection+0x84>
		case DIO_PORTC: DDRC_R = COPY_u8Direction;break;
    1292:	e4 e3       	ldi	r30, 0x34	; 52
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	80 83       	st	Z, r24
    129a:	06 c0       	rjmp	.+12     	; 0x12a8 <DIO_eunmSetPortDirection+0x84>
		case DIO_PORTD: DDRD_R = COPY_u8Direction;break;
    129c:	e1 e3       	ldi	r30, 0x31	; 49
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	80 83       	st	Z, r24
    12a4:	01 c0       	rjmp	.+2      	; 0x12a8 <DIO_eunmSetPortDirection+0x84>
		}
	}
	else
	{
		LOC_enumStatus = DIO_NOK;
    12a6:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumStatus;
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	0f 90       	pop	r0
    12b2:	0f 90       	pop	r0
    12b4:	cf 91       	pop	r28
    12b6:	df 91       	pop	r29
    12b8:	08 95       	ret

000012ba <DIO_eunmSetPortValue>:
DIO_ErrorStatus DIO_eunmSetPortValue        (u8 COPY_u8PORT ,u8 COPY_u8Value                    )
{
    12ba:	df 93       	push	r29
    12bc:	cf 93       	push	r28
    12be:	00 d0       	rcall	.+0      	; 0x12c0 <DIO_eunmSetPortValue+0x6>
    12c0:	00 d0       	rcall	.+0      	; 0x12c2 <DIO_eunmSetPortValue+0x8>
    12c2:	0f 92       	push	r0
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
    12c8:	8a 83       	std	Y+2, r24	; 0x02
    12ca:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumStatus = DIO_OK;
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	89 83       	std	Y+1, r24	; 0x01
	if((COPY_u8PORT <= DIO_PORTD) && ( (COPY_u8Value<=255) || (COPY_u8Value==DIO_PORT_LOW) || (COPY_u8Value==DIO_PORT_HIGH) ))
    12d0:	8a 81       	ldd	r24, Y+2	; 0x02
    12d2:	84 30       	cpi	r24, 0x04	; 4
    12d4:	98 f5       	brcc	.+102    	; 0x133c <DIO_eunmSetPortValue+0x82>
	{
		switch (COPY_u8PORT)
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	3d 83       	std	Y+5, r19	; 0x05
    12de:	2c 83       	std	Y+4, r18	; 0x04
    12e0:	8c 81       	ldd	r24, Y+4	; 0x04
    12e2:	9d 81       	ldd	r25, Y+5	; 0x05
    12e4:	81 30       	cpi	r24, 0x01	; 1
    12e6:	91 05       	cpc	r25, r1
    12e8:	d1 f0       	breq	.+52     	; 0x131e <DIO_eunmSetPortValue+0x64>
    12ea:	2c 81       	ldd	r18, Y+4	; 0x04
    12ec:	3d 81       	ldd	r19, Y+5	; 0x05
    12ee:	22 30       	cpi	r18, 0x02	; 2
    12f0:	31 05       	cpc	r19, r1
    12f2:	2c f4       	brge	.+10     	; 0x12fe <DIO_eunmSetPortValue+0x44>
    12f4:	8c 81       	ldd	r24, Y+4	; 0x04
    12f6:	9d 81       	ldd	r25, Y+5	; 0x05
    12f8:	00 97       	sbiw	r24, 0x00	; 0
    12fa:	61 f0       	breq	.+24     	; 0x1314 <DIO_eunmSetPortValue+0x5a>
    12fc:	20 c0       	rjmp	.+64     	; 0x133e <DIO_eunmSetPortValue+0x84>
    12fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1300:	3d 81       	ldd	r19, Y+5	; 0x05
    1302:	22 30       	cpi	r18, 0x02	; 2
    1304:	31 05       	cpc	r19, r1
    1306:	81 f0       	breq	.+32     	; 0x1328 <DIO_eunmSetPortValue+0x6e>
    1308:	8c 81       	ldd	r24, Y+4	; 0x04
    130a:	9d 81       	ldd	r25, Y+5	; 0x05
    130c:	83 30       	cpi	r24, 0x03	; 3
    130e:	91 05       	cpc	r25, r1
    1310:	81 f0       	breq	.+32     	; 0x1332 <DIO_eunmSetPortValue+0x78>
    1312:	15 c0       	rjmp	.+42     	; 0x133e <DIO_eunmSetPortValue+0x84>
		{
		case DIO_PORTA: PORTA_R = COPY_u8Value;break;
    1314:	eb e3       	ldi	r30, 0x3B	; 59
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	8b 81       	ldd	r24, Y+3	; 0x03
    131a:	80 83       	st	Z, r24
    131c:	10 c0       	rjmp	.+32     	; 0x133e <DIO_eunmSetPortValue+0x84>
		case DIO_PORTB: PORTB_R = COPY_u8Value;break;
    131e:	e8 e3       	ldi	r30, 0x38	; 56
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	80 83       	st	Z, r24
    1326:	0b c0       	rjmp	.+22     	; 0x133e <DIO_eunmSetPortValue+0x84>
		case DIO_PORTC: PORTC_R = COPY_u8Value;break;
    1328:	e5 e3       	ldi	r30, 0x35	; 53
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	80 83       	st	Z, r24
    1330:	06 c0       	rjmp	.+12     	; 0x133e <DIO_eunmSetPortValue+0x84>
		case DIO_PORTD: PORTD_R = COPY_u8Value;break;
    1332:	e2 e3       	ldi	r30, 0x32	; 50
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	80 83       	st	Z, r24
    133a:	01 c0       	rjmp	.+2      	; 0x133e <DIO_eunmSetPortValue+0x84>
		}
	}
	else
	{
		LOC_enumStatus = DIO_NOK;
    133c:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumStatus;
    133e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1340:	0f 90       	pop	r0
    1342:	0f 90       	pop	r0
    1344:	0f 90       	pop	r0
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	cf 91       	pop	r28
    134c:	df 91       	pop	r29
    134e:	08 95       	ret

00001350 <DIO_eunmGetPort>:
DIO_ErrorStatus DIO_eunmGetPort             (u8 COPY_u8PORT ,u8 *COPY_PtrData			        )
{
    1350:	df 93       	push	r29
    1352:	cf 93       	push	r28
    1354:	00 d0       	rcall	.+0      	; 0x1356 <DIO_eunmGetPort+0x6>
    1356:	00 d0       	rcall	.+0      	; 0x1358 <DIO_eunmGetPort+0x8>
    1358:	00 d0       	rcall	.+0      	; 0x135a <DIO_eunmGetPort+0xa>
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
    135e:	8a 83       	std	Y+2, r24	; 0x02
    1360:	7c 83       	std	Y+4, r23	; 0x04
    1362:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumStatus = DIO_OK;
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	89 83       	std	Y+1, r24	; 0x01
	if(COPY_u8PORT <= DIO_PORTD)
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	84 30       	cpi	r24, 0x04	; 4
    136c:	d8 f5       	brcc	.+118    	; 0x13e4 <DIO_eunmGetPort+0x94>
	{
		switch (COPY_u8PORT)
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	3e 83       	std	Y+6, r19	; 0x06
    1376:	2d 83       	std	Y+5, r18	; 0x05
    1378:	8d 81       	ldd	r24, Y+5	; 0x05
    137a:	9e 81       	ldd	r25, Y+6	; 0x06
    137c:	81 30       	cpi	r24, 0x01	; 1
    137e:	91 05       	cpc	r25, r1
    1380:	e1 f0       	breq	.+56     	; 0x13ba <DIO_eunmGetPort+0x6a>
    1382:	2d 81       	ldd	r18, Y+5	; 0x05
    1384:	3e 81       	ldd	r19, Y+6	; 0x06
    1386:	22 30       	cpi	r18, 0x02	; 2
    1388:	31 05       	cpc	r19, r1
    138a:	2c f4       	brge	.+10     	; 0x1396 <DIO_eunmGetPort+0x46>
    138c:	8d 81       	ldd	r24, Y+5	; 0x05
    138e:	9e 81       	ldd	r25, Y+6	; 0x06
    1390:	00 97       	sbiw	r24, 0x00	; 0
    1392:	61 f0       	breq	.+24     	; 0x13ac <DIO_eunmGetPort+0x5c>
    1394:	28 c0       	rjmp	.+80     	; 0x13e6 <DIO_eunmGetPort+0x96>
    1396:	2d 81       	ldd	r18, Y+5	; 0x05
    1398:	3e 81       	ldd	r19, Y+6	; 0x06
    139a:	22 30       	cpi	r18, 0x02	; 2
    139c:	31 05       	cpc	r19, r1
    139e:	a1 f0       	breq	.+40     	; 0x13c8 <DIO_eunmGetPort+0x78>
    13a0:	8d 81       	ldd	r24, Y+5	; 0x05
    13a2:	9e 81       	ldd	r25, Y+6	; 0x06
    13a4:	83 30       	cpi	r24, 0x03	; 3
    13a6:	91 05       	cpc	r25, r1
    13a8:	b1 f0       	breq	.+44     	; 0x13d6 <DIO_eunmGetPort+0x86>
    13aa:	1d c0       	rjmp	.+58     	; 0x13e6 <DIO_eunmGetPort+0x96>
		{
		case DIO_PORTA: *COPY_PtrData = PINA_R;break;
    13ac:	e9 e3       	ldi	r30, 0x39	; 57
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	eb 81       	ldd	r30, Y+3	; 0x03
    13b4:	fc 81       	ldd	r31, Y+4	; 0x04
    13b6:	80 83       	st	Z, r24
    13b8:	16 c0       	rjmp	.+44     	; 0x13e6 <DIO_eunmGetPort+0x96>
		case DIO_PORTB: *COPY_PtrData = PINB_R;break;
    13ba:	e6 e3       	ldi	r30, 0x36	; 54
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	eb 81       	ldd	r30, Y+3	; 0x03
    13c2:	fc 81       	ldd	r31, Y+4	; 0x04
    13c4:	80 83       	st	Z, r24
    13c6:	0f c0       	rjmp	.+30     	; 0x13e6 <DIO_eunmGetPort+0x96>
		case DIO_PORTC: *COPY_PtrData = PINC_R;break;
    13c8:	e3 e3       	ldi	r30, 0x33	; 51
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	eb 81       	ldd	r30, Y+3	; 0x03
    13d0:	fc 81       	ldd	r31, Y+4	; 0x04
    13d2:	80 83       	st	Z, r24
    13d4:	08 c0       	rjmp	.+16     	; 0x13e6 <DIO_eunmGetPort+0x96>
		case DIO_PORTD: *COPY_PtrData = PIND_R;break;
    13d6:	e0 e3       	ldi	r30, 0x30	; 48
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	eb 81       	ldd	r30, Y+3	; 0x03
    13de:	fc 81       	ldd	r31, Y+4	; 0x04
    13e0:	80 83       	st	Z, r24
    13e2:	01 c0       	rjmp	.+2      	; 0x13e6 <DIO_eunmGetPort+0x96>
		}
	}
	else
	{
		LOC_enumStatus = DIO_NOK;
    13e4:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumStatus;
    13e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    13e8:	26 96       	adiw	r28, 0x06	; 6
    13ea:	0f b6       	in	r0, 0x3f	; 63
    13ec:	f8 94       	cli
    13ee:	de bf       	out	0x3e, r29	; 62
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	cd bf       	out	0x3d, r28	; 61
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	08 95       	ret

000013fa <DIO_eunmToggelPort>:
DIO_ErrorStatus DIO_eunmToggelPort          (u8 COPY_u8PORT 				  			        )
{
    13fa:	df 93       	push	r29
    13fc:	cf 93       	push	r28
    13fe:	00 d0       	rcall	.+0      	; 0x1400 <DIO_eunmToggelPort+0x6>
    1400:	00 d0       	rcall	.+0      	; 0x1402 <DIO_eunmToggelPort+0x8>
    1402:	cd b7       	in	r28, 0x3d	; 61
    1404:	de b7       	in	r29, 0x3e	; 62
    1406:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ErrorStatus LOC_enumStatus = DIO_OK;
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	89 83       	std	Y+1, r24	; 0x01
	if(COPY_u8PORT <= DIO_PORTD)
    140c:	8a 81       	ldd	r24, Y+2	; 0x02
    140e:	84 30       	cpi	r24, 0x04	; 4
    1410:	08 f0       	brcs	.+2      	; 0x1414 <DIO_eunmToggelPort+0x1a>
    1412:	3f c0       	rjmp	.+126    	; 0x1492 <DIO_eunmToggelPort+0x98>
	{
		switch (COPY_u8PORT)
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	3c 83       	std	Y+4, r19	; 0x04
    141c:	2b 83       	std	Y+3, r18	; 0x03
    141e:	8b 81       	ldd	r24, Y+3	; 0x03
    1420:	9c 81       	ldd	r25, Y+4	; 0x04
    1422:	81 30       	cpi	r24, 0x01	; 1
    1424:	91 05       	cpc	r25, r1
    1426:	e9 f0       	breq	.+58     	; 0x1462 <DIO_eunmToggelPort+0x68>
    1428:	2b 81       	ldd	r18, Y+3	; 0x03
    142a:	3c 81       	ldd	r19, Y+4	; 0x04
    142c:	22 30       	cpi	r18, 0x02	; 2
    142e:	31 05       	cpc	r19, r1
    1430:	2c f4       	brge	.+10     	; 0x143c <DIO_eunmToggelPort+0x42>
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	9c 81       	ldd	r25, Y+4	; 0x04
    1436:	00 97       	sbiw	r24, 0x00	; 0
    1438:	61 f0       	breq	.+24     	; 0x1452 <DIO_eunmToggelPort+0x58>
    143a:	2c c0       	rjmp	.+88     	; 0x1494 <DIO_eunmToggelPort+0x9a>
    143c:	2b 81       	ldd	r18, Y+3	; 0x03
    143e:	3c 81       	ldd	r19, Y+4	; 0x04
    1440:	22 30       	cpi	r18, 0x02	; 2
    1442:	31 05       	cpc	r19, r1
    1444:	b1 f0       	breq	.+44     	; 0x1472 <DIO_eunmToggelPort+0x78>
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	9c 81       	ldd	r25, Y+4	; 0x04
    144a:	83 30       	cpi	r24, 0x03	; 3
    144c:	91 05       	cpc	r25, r1
    144e:	c9 f0       	breq	.+50     	; 0x1482 <DIO_eunmToggelPort+0x88>
    1450:	21 c0       	rjmp	.+66     	; 0x1494 <DIO_eunmToggelPort+0x9a>
		{
		case DIO_PORTA: PORTA_R = ~PORTA_R;break;
    1452:	ab e3       	ldi	r26, 0x3B	; 59
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	eb e3       	ldi	r30, 0x3B	; 59
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	80 95       	com	r24
    145e:	8c 93       	st	X, r24
    1460:	19 c0       	rjmp	.+50     	; 0x1494 <DIO_eunmToggelPort+0x9a>
		case DIO_PORTB: PORTB_R = ~PORTB_R;break;
    1462:	a8 e3       	ldi	r26, 0x38	; 56
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	e8 e3       	ldi	r30, 0x38	; 56
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	80 95       	com	r24
    146e:	8c 93       	st	X, r24
    1470:	11 c0       	rjmp	.+34     	; 0x1494 <DIO_eunmToggelPort+0x9a>
		case DIO_PORTC: PORTC_R = ~PORTC_R;break;
    1472:	a5 e3       	ldi	r26, 0x35	; 53
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	e5 e3       	ldi	r30, 0x35	; 53
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	80 95       	com	r24
    147e:	8c 93       	st	X, r24
    1480:	09 c0       	rjmp	.+18     	; 0x1494 <DIO_eunmToggelPort+0x9a>
		case DIO_PORTD: PORTD_R = ~PORTD_R;break;
    1482:	a2 e3       	ldi	r26, 0x32	; 50
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	e2 e3       	ldi	r30, 0x32	; 50
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	80 95       	com	r24
    148e:	8c 93       	st	X, r24
    1490:	01 c0       	rjmp	.+2      	; 0x1494 <DIO_eunmToggelPort+0x9a>
		}
	}
	else
	{
		LOC_enumStatus = DIO_NOK;
    1492:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumStatus ;
    1494:	89 81       	ldd	r24, Y+1	; 0x01
}
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	cf 91       	pop	r28
    14a0:	df 91       	pop	r29
    14a2:	08 95       	ret

000014a4 <DIO_eunmSetPinInterPullUp>:
DIO_ErrorStatus DIO_eunmSetPinInterPullUp     (u8 COPY_u8PORT ,u8 COPY_u8PIN ,u8 COPY_u8ConnectPullUp )
{
    14a4:	df 93       	push	r29
    14a6:	cf 93       	push	r28
    14a8:	00 d0       	rcall	.+0      	; 0x14aa <DIO_eunmSetPinInterPullUp+0x6>
    14aa:	00 d0       	rcall	.+0      	; 0x14ac <DIO_eunmSetPinInterPullUp+0x8>
    14ac:	00 d0       	rcall	.+0      	; 0x14ae <DIO_eunmSetPinInterPullUp+0xa>
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
    14b2:	8a 83       	std	Y+2, r24	; 0x02
    14b4:	6b 83       	std	Y+3, r22	; 0x03
    14b6:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus LOC_enumStatus = DIO_OK;
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	89 83       	std	Y+1, r24	; 0x01
	if((COPY_u8PORT <= DIO_PORTD) && (COPY_u8PIN <= DIO_PIN7))
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	84 30       	cpi	r24, 0x04	; 4
    14c0:	08 f0       	brcs	.+2      	; 0x14c4 <DIO_eunmSetPinInterPullUp+0x20>
    14c2:	3e c1       	rjmp	.+636    	; 0x1740 <DIO_eunmSetPinInterPullUp+0x29c>
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	88 30       	cpi	r24, 0x08	; 8
    14c8:	08 f0       	brcs	.+2      	; 0x14cc <DIO_eunmSetPinInterPullUp+0x28>
    14ca:	3a c1       	rjmp	.+628    	; 0x1740 <DIO_eunmSetPinInterPullUp+0x29c>
	{
		switch(COPY_u8PORT)
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	3e 83       	std	Y+6, r19	; 0x06
    14d4:	2d 83       	std	Y+5, r18	; 0x05
    14d6:	8d 81       	ldd	r24, Y+5	; 0x05
    14d8:	9e 81       	ldd	r25, Y+6	; 0x06
    14da:	81 30       	cpi	r24, 0x01	; 1
    14dc:	91 05       	cpc	r25, r1
    14de:	09 f4       	brne	.+2      	; 0x14e2 <DIO_eunmSetPinInterPullUp+0x3e>
    14e0:	5d c0       	rjmp	.+186    	; 0x159c <DIO_eunmSetPinInterPullUp+0xf8>
    14e2:	2d 81       	ldd	r18, Y+5	; 0x05
    14e4:	3e 81       	ldd	r19, Y+6	; 0x06
    14e6:	22 30       	cpi	r18, 0x02	; 2
    14e8:	31 05       	cpc	r19, r1
    14ea:	2c f4       	brge	.+10     	; 0x14f6 <DIO_eunmSetPinInterPullUp+0x52>
    14ec:	8d 81       	ldd	r24, Y+5	; 0x05
    14ee:	9e 81       	ldd	r25, Y+6	; 0x06
    14f0:	00 97       	sbiw	r24, 0x00	; 0
    14f2:	71 f0       	breq	.+28     	; 0x1510 <DIO_eunmSetPinInterPullUp+0x6c>
    14f4:	26 c1       	rjmp	.+588    	; 0x1742 <DIO_eunmSetPinInterPullUp+0x29e>
    14f6:	2d 81       	ldd	r18, Y+5	; 0x05
    14f8:	3e 81       	ldd	r19, Y+6	; 0x06
    14fa:	22 30       	cpi	r18, 0x02	; 2
    14fc:	31 05       	cpc	r19, r1
    14fe:	09 f4       	brne	.+2      	; 0x1502 <DIO_eunmSetPinInterPullUp+0x5e>
    1500:	93 c0       	rjmp	.+294    	; 0x1628 <DIO_eunmSetPinInterPullUp+0x184>
    1502:	8d 81       	ldd	r24, Y+5	; 0x05
    1504:	9e 81       	ldd	r25, Y+6	; 0x06
    1506:	83 30       	cpi	r24, 0x03	; 3
    1508:	91 05       	cpc	r25, r1
    150a:	09 f4       	brne	.+2      	; 0x150e <DIO_eunmSetPinInterPullUp+0x6a>
    150c:	d3 c0       	rjmp	.+422    	; 0x16b4 <DIO_eunmSetPinInterPullUp+0x210>
    150e:	19 c1       	rjmp	.+562    	; 0x1742 <DIO_eunmSetPinInterPullUp+0x29e>
		{
		case DIO_PORTA:
			if(COPY_u8ConnectPullUp == DIO_PIN_HIGH)
    1510:	8c 81       	ldd	r24, Y+4	; 0x04
    1512:	81 30       	cpi	r24, 0x01	; 1
    1514:	71 f5       	brne	.+92     	; 0x1572 <DIO_eunmSetPinInterPullUp+0xce>
			{
				CLR_BIT(SFIOR,PUD);
    1516:	a0 e5       	ldi	r26, 0x50	; 80
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	e0 e5       	ldi	r30, 0x50	; 80
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	8b 7f       	andi	r24, 0xFB	; 251
    1522:	8c 93       	st	X, r24
				CLR_BIT(DDRA_R,COPY_u8PIN);
    1524:	aa e3       	ldi	r26, 0x3A	; 58
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	ea e3       	ldi	r30, 0x3A	; 58
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	48 2f       	mov	r20, r24
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <DIO_eunmSetPinInterPullUp+0x9c>
    153c:	88 0f       	add	r24, r24
    153e:	99 1f       	adc	r25, r25
    1540:	2a 95       	dec	r18
    1542:	e2 f7       	brpl	.-8      	; 0x153c <DIO_eunmSetPinInterPullUp+0x98>
    1544:	80 95       	com	r24
    1546:	84 23       	and	r24, r20
    1548:	8c 93       	st	X, r24
				SET_BIT(PORTA_R,COPY_u8PIN);
    154a:	ab e3       	ldi	r26, 0x3B	; 59
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	eb e3       	ldi	r30, 0x3B	; 59
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	48 2f       	mov	r20, r24
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	02 2e       	mov	r0, r18
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <DIO_eunmSetPinInterPullUp+0xc4>
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	0a 94       	dec	r0
    156a:	e2 f7       	brpl	.-8      	; 0x1564 <DIO_eunmSetPinInterPullUp+0xc0>
    156c:	84 2b       	or	r24, r20
    156e:	8c 93       	st	X, r24
    1570:	e8 c0       	rjmp	.+464    	; 0x1742 <DIO_eunmSetPinInterPullUp+0x29e>
			}
			else
			{
				CLR_BIT(PORTA_R,COPY_u8PIN);
    1572:	ab e3       	ldi	r26, 0x3B	; 59
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	eb e3       	ldi	r30, 0x3B	; 59
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	48 2f       	mov	r20, r24
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	02 2e       	mov	r0, r18
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <DIO_eunmSetPinInterPullUp+0xec>
    158c:	88 0f       	add	r24, r24
    158e:	99 1f       	adc	r25, r25
    1590:	0a 94       	dec	r0
    1592:	e2 f7       	brpl	.-8      	; 0x158c <DIO_eunmSetPinInterPullUp+0xe8>
    1594:	80 95       	com	r24
    1596:	84 23       	and	r24, r20
    1598:	8c 93       	st	X, r24
    159a:	d3 c0       	rjmp	.+422    	; 0x1742 <DIO_eunmSetPinInterPullUp+0x29e>
			}break;
		case DIO_PORTB:
			if(COPY_u8ConnectPullUp == DIO_PIN_HIGH)
    159c:	8c 81       	ldd	r24, Y+4	; 0x04
    159e:	81 30       	cpi	r24, 0x01	; 1
    15a0:	71 f5       	brne	.+92     	; 0x15fe <DIO_eunmSetPinInterPullUp+0x15a>
			{
				CLR_BIT(SFIOR,PUD);
    15a2:	a0 e5       	ldi	r26, 0x50	; 80
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e0 e5       	ldi	r30, 0x50	; 80
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	8b 7f       	andi	r24, 0xFB	; 251
    15ae:	8c 93       	st	X, r24
				CLR_BIT(DDRB_R,COPY_u8PIN);
    15b0:	a7 e3       	ldi	r26, 0x37	; 55
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	e7 e3       	ldi	r30, 0x37	; 55
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	48 2f       	mov	r20, r24
    15bc:	8b 81       	ldd	r24, Y+3	; 0x03
    15be:	28 2f       	mov	r18, r24
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <DIO_eunmSetPinInterPullUp+0x128>
    15c8:	88 0f       	add	r24, r24
    15ca:	99 1f       	adc	r25, r25
    15cc:	2a 95       	dec	r18
    15ce:	e2 f7       	brpl	.-8      	; 0x15c8 <DIO_eunmSetPinInterPullUp+0x124>
    15d0:	80 95       	com	r24
    15d2:	84 23       	and	r24, r20
    15d4:	8c 93       	st	X, r24
				SET_BIT(PORTB_R,COPY_u8PIN);
    15d6:	a8 e3       	ldi	r26, 0x38	; 56
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	e8 e3       	ldi	r30, 0x38	; 56
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	48 2f       	mov	r20, r24
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	28 2f       	mov	r18, r24
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	02 2e       	mov	r0, r18
    15ee:	02 c0       	rjmp	.+4      	; 0x15f4 <DIO_eunmSetPinInterPullUp+0x150>
    15f0:	88 0f       	add	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	0a 94       	dec	r0
    15f6:	e2 f7       	brpl	.-8      	; 0x15f0 <DIO_eunmSetPinInterPullUp+0x14c>
    15f8:	84 2b       	or	r24, r20
    15fa:	8c 93       	st	X, r24
    15fc:	a2 c0       	rjmp	.+324    	; 0x1742 <DIO_eunmSetPinInterPullUp+0x29e>
			}
			else
			{
				CLR_BIT(PORTB_R,COPY_u8PIN);
    15fe:	a8 e3       	ldi	r26, 0x38	; 56
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e8 e3       	ldi	r30, 0x38	; 56
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	48 2f       	mov	r20, r24
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	02 2e       	mov	r0, r18
    1616:	02 c0       	rjmp	.+4      	; 0x161c <DIO_eunmSetPinInterPullUp+0x178>
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	0a 94       	dec	r0
    161e:	e2 f7       	brpl	.-8      	; 0x1618 <DIO_eunmSetPinInterPullUp+0x174>
    1620:	80 95       	com	r24
    1622:	84 23       	and	r24, r20
    1624:	8c 93       	st	X, r24
    1626:	8d c0       	rjmp	.+282    	; 0x1742 <DIO_eunmSetPinInterPullUp+0x29e>
			}break;
		case DIO_PORTC:
			if(COPY_u8ConnectPullUp == DIO_PIN_HIGH)
    1628:	8c 81       	ldd	r24, Y+4	; 0x04
    162a:	81 30       	cpi	r24, 0x01	; 1
    162c:	71 f5       	brne	.+92     	; 0x168a <DIO_eunmSetPinInterPullUp+0x1e6>
			{
				CLR_BIT(SFIOR,PUD);
    162e:	a0 e5       	ldi	r26, 0x50	; 80
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	e0 e5       	ldi	r30, 0x50	; 80
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	8b 7f       	andi	r24, 0xFB	; 251
    163a:	8c 93       	st	X, r24
				CLR_BIT(DDRC_R,COPY_u8PIN);
    163c:	a4 e3       	ldi	r26, 0x34	; 52
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	e4 e3       	ldi	r30, 0x34	; 52
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	48 2f       	mov	r20, r24
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	28 2f       	mov	r18, r24
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <DIO_eunmSetPinInterPullUp+0x1b4>
    1654:	88 0f       	add	r24, r24
    1656:	99 1f       	adc	r25, r25
    1658:	2a 95       	dec	r18
    165a:	e2 f7       	brpl	.-8      	; 0x1654 <DIO_eunmSetPinInterPullUp+0x1b0>
    165c:	80 95       	com	r24
    165e:	84 23       	and	r24, r20
    1660:	8c 93       	st	X, r24
				SET_BIT(PORTC_R,COPY_u8PIN);
    1662:	a5 e3       	ldi	r26, 0x35	; 53
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	e5 e3       	ldi	r30, 0x35	; 53
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	48 2f       	mov	r20, r24
    166e:	8b 81       	ldd	r24, Y+3	; 0x03
    1670:	28 2f       	mov	r18, r24
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	02 2e       	mov	r0, r18
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <DIO_eunmSetPinInterPullUp+0x1dc>
    167c:	88 0f       	add	r24, r24
    167e:	99 1f       	adc	r25, r25
    1680:	0a 94       	dec	r0
    1682:	e2 f7       	brpl	.-8      	; 0x167c <DIO_eunmSetPinInterPullUp+0x1d8>
    1684:	84 2b       	or	r24, r20
    1686:	8c 93       	st	X, r24
    1688:	5c c0       	rjmp	.+184    	; 0x1742 <DIO_eunmSetPinInterPullUp+0x29e>
			}
			else
			{
				CLR_BIT(PORTC_R,COPY_u8PIN);
    168a:	a5 e3       	ldi	r26, 0x35	; 53
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	e5 e3       	ldi	r30, 0x35	; 53
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	48 2f       	mov	r20, r24
    1696:	8b 81       	ldd	r24, Y+3	; 0x03
    1698:	28 2f       	mov	r18, r24
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	02 2e       	mov	r0, r18
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <DIO_eunmSetPinInterPullUp+0x204>
    16a4:	88 0f       	add	r24, r24
    16a6:	99 1f       	adc	r25, r25
    16a8:	0a 94       	dec	r0
    16aa:	e2 f7       	brpl	.-8      	; 0x16a4 <DIO_eunmSetPinInterPullUp+0x200>
    16ac:	80 95       	com	r24
    16ae:	84 23       	and	r24, r20
    16b0:	8c 93       	st	X, r24
    16b2:	47 c0       	rjmp	.+142    	; 0x1742 <DIO_eunmSetPinInterPullUp+0x29e>
			}break;
		case DIO_PORTD:
			if(COPY_u8ConnectPullUp == DIO_PIN_HIGH)
    16b4:	8c 81       	ldd	r24, Y+4	; 0x04
    16b6:	81 30       	cpi	r24, 0x01	; 1
    16b8:	71 f5       	brne	.+92     	; 0x1716 <DIO_eunmSetPinInterPullUp+0x272>
			{
				CLR_BIT(SFIOR,PUD);
    16ba:	a0 e5       	ldi	r26, 0x50	; 80
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	e0 e5       	ldi	r30, 0x50	; 80
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	8b 7f       	andi	r24, 0xFB	; 251
    16c6:	8c 93       	st	X, r24
				CLR_BIT(DDRD_R,COPY_u8PIN);
    16c8:	a1 e3       	ldi	r26, 0x31	; 49
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e1 e3       	ldi	r30, 0x31	; 49
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	48 2f       	mov	r20, r24
    16d4:	8b 81       	ldd	r24, Y+3	; 0x03
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <DIO_eunmSetPinInterPullUp+0x240>
    16e0:	88 0f       	add	r24, r24
    16e2:	99 1f       	adc	r25, r25
    16e4:	2a 95       	dec	r18
    16e6:	e2 f7       	brpl	.-8      	; 0x16e0 <DIO_eunmSetPinInterPullUp+0x23c>
    16e8:	80 95       	com	r24
    16ea:	84 23       	and	r24, r20
    16ec:	8c 93       	st	X, r24
				SET_BIT(PORTD_R,COPY_u8PIN);
    16ee:	a2 e3       	ldi	r26, 0x32	; 50
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	e2 e3       	ldi	r30, 0x32	; 50
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	48 2f       	mov	r20, r24
    16fa:	8b 81       	ldd	r24, Y+3	; 0x03
    16fc:	28 2f       	mov	r18, r24
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	02 2e       	mov	r0, r18
    1706:	02 c0       	rjmp	.+4      	; 0x170c <DIO_eunmSetPinInterPullUp+0x268>
    1708:	88 0f       	add	r24, r24
    170a:	99 1f       	adc	r25, r25
    170c:	0a 94       	dec	r0
    170e:	e2 f7       	brpl	.-8      	; 0x1708 <DIO_eunmSetPinInterPullUp+0x264>
    1710:	84 2b       	or	r24, r20
    1712:	8c 93       	st	X, r24
    1714:	16 c0       	rjmp	.+44     	; 0x1742 <DIO_eunmSetPinInterPullUp+0x29e>
			}
			else
			{
				CLR_BIT(PORTD_R,COPY_u8PIN);
    1716:	a2 e3       	ldi	r26, 0x32	; 50
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	e2 e3       	ldi	r30, 0x32	; 50
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	48 2f       	mov	r20, r24
    1722:	8b 81       	ldd	r24, Y+3	; 0x03
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	02 2e       	mov	r0, r18
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <DIO_eunmSetPinInterPullUp+0x290>
    1730:	88 0f       	add	r24, r24
    1732:	99 1f       	adc	r25, r25
    1734:	0a 94       	dec	r0
    1736:	e2 f7       	brpl	.-8      	; 0x1730 <DIO_eunmSetPinInterPullUp+0x28c>
    1738:	80 95       	com	r24
    173a:	84 23       	and	r24, r20
    173c:	8c 93       	st	X, r24
    173e:	01 c0       	rjmp	.+2      	; 0x1742 <DIO_eunmSetPinInterPullUp+0x29e>

		}
	}
	else
	{
		LOC_enumStatus = DIO_NOK;
    1740:	19 82       	std	Y+1, r1	; 0x01
	}


	return LOC_enumStatus ;
    1742:	89 81       	ldd	r24, Y+1	; 0x01
}
    1744:	26 96       	adiw	r28, 0x06	; 6
    1746:	0f b6       	in	r0, 0x3f	; 63
    1748:	f8 94       	cli
    174a:	de bf       	out	0x3e, r29	; 62
    174c:	0f be       	out	0x3f, r0	; 63
    174e:	cd bf       	out	0x3d, r28	; 61
    1750:	cf 91       	pop	r28
    1752:	df 91       	pop	r29
    1754:	08 95       	ret

00001756 <DIO_voidWriteHighNibble>:
DIO_ErrorStatus DIO_voidWriteHighNibble         (u8 COPY_u8PORT ,u8 COPY_u8Value                        )
{
    1756:	df 93       	push	r29
    1758:	cf 93       	push	r28
    175a:	00 d0       	rcall	.+0      	; 0x175c <DIO_voidWriteHighNibble+0x6>
    175c:	00 d0       	rcall	.+0      	; 0x175e <DIO_voidWriteHighNibble+0x8>
    175e:	0f 92       	push	r0
    1760:	cd b7       	in	r28, 0x3d	; 61
    1762:	de b7       	in	r29, 0x3e	; 62
    1764:	8a 83       	std	Y+2, r24	; 0x02
    1766:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumStatus = DIO_OK;
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	89 83       	std	Y+1, r24	; 0x01
	if(COPY_u8PORT <= DIO_PORTD)
    176c:	8a 81       	ldd	r24, Y+2	; 0x02
    176e:	84 30       	cpi	r24, 0x04	; 4
    1770:	08 f0       	brcs	.+2      	; 0x1774 <DIO_voidWriteHighNibble+0x1e>
    1772:	63 c0       	rjmp	.+198    	; 0x183a <DIO_voidWriteHighNibble+0xe4>
	{
		COPY_u8Value = (COPY_u8Value<<4);
    1774:	8b 81       	ldd	r24, Y+3	; 0x03
    1776:	82 95       	swap	r24
    1778:	80 7f       	andi	r24, 0xF0	; 240
    177a:	8b 83       	std	Y+3, r24	; 0x03
		switch(COPY_u8PORT)
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	28 2f       	mov	r18, r24
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	3d 83       	std	Y+5, r19	; 0x05
    1784:	2c 83       	std	Y+4, r18	; 0x04
    1786:	8c 81       	ldd	r24, Y+4	; 0x04
    1788:	9d 81       	ldd	r25, Y+5	; 0x05
    178a:	81 30       	cpi	r24, 0x01	; 1
    178c:	91 05       	cpc	r25, r1
    178e:	29 f1       	breq	.+74     	; 0x17da <DIO_voidWriteHighNibble+0x84>
    1790:	2c 81       	ldd	r18, Y+4	; 0x04
    1792:	3d 81       	ldd	r19, Y+5	; 0x05
    1794:	22 30       	cpi	r18, 0x02	; 2
    1796:	31 05       	cpc	r19, r1
    1798:	2c f4       	brge	.+10     	; 0x17a4 <DIO_voidWriteHighNibble+0x4e>
    179a:	8c 81       	ldd	r24, Y+4	; 0x04
    179c:	9d 81       	ldd	r25, Y+5	; 0x05
    179e:	00 97       	sbiw	r24, 0x00	; 0
    17a0:	61 f0       	breq	.+24     	; 0x17ba <DIO_voidWriteHighNibble+0x64>
    17a2:	4c c0       	rjmp	.+152    	; 0x183c <DIO_voidWriteHighNibble+0xe6>
    17a4:	2c 81       	ldd	r18, Y+4	; 0x04
    17a6:	3d 81       	ldd	r19, Y+5	; 0x05
    17a8:	22 30       	cpi	r18, 0x02	; 2
    17aa:	31 05       	cpc	r19, r1
    17ac:	31 f1       	breq	.+76     	; 0x17fa <DIO_voidWriteHighNibble+0xa4>
    17ae:	8c 81       	ldd	r24, Y+4	; 0x04
    17b0:	9d 81       	ldd	r25, Y+5	; 0x05
    17b2:	83 30       	cpi	r24, 0x03	; 3
    17b4:	91 05       	cpc	r25, r1
    17b6:	89 f1       	breq	.+98     	; 0x181a <DIO_voidWriteHighNibble+0xc4>
    17b8:	41 c0       	rjmp	.+130    	; 0x183c <DIO_voidWriteHighNibble+0xe6>
		{
		case DIO_PORTA :
			PORTA_R&=0x0f;
    17ba:	ab e3       	ldi	r26, 0x3B	; 59
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	eb e3       	ldi	r30, 0x3B	; 59
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	8f 70       	andi	r24, 0x0F	; 15
    17c6:	8c 93       	st	X, r24
			PORTA_R|=COPY_u8Value;
    17c8:	ab e3       	ldi	r26, 0x3B	; 59
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	eb e3       	ldi	r30, 0x3B	; 59
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	90 81       	ld	r25, Z
    17d2:	8b 81       	ldd	r24, Y+3	; 0x03
    17d4:	89 2b       	or	r24, r25
    17d6:	8c 93       	st	X, r24
    17d8:	31 c0       	rjmp	.+98     	; 0x183c <DIO_voidWriteHighNibble+0xe6>
			break;
		case DIO_PORTB :
			PORTB_R&=0x0f;
    17da:	a8 e3       	ldi	r26, 0x38	; 56
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	e8 e3       	ldi	r30, 0x38	; 56
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	8f 70       	andi	r24, 0x0F	; 15
    17e6:	8c 93       	st	X, r24
			PORTB_R|=COPY_u8Value;
    17e8:	a8 e3       	ldi	r26, 0x38	; 56
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	e8 e3       	ldi	r30, 0x38	; 56
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	90 81       	ld	r25, Z
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	89 2b       	or	r24, r25
    17f6:	8c 93       	st	X, r24
    17f8:	21 c0       	rjmp	.+66     	; 0x183c <DIO_voidWriteHighNibble+0xe6>
			break;
		case DIO_PORTC :
			PORTC_R&=0x0f;
    17fa:	a5 e3       	ldi	r26, 0x35	; 53
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	e5 e3       	ldi	r30, 0x35	; 53
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	8f 70       	andi	r24, 0x0F	; 15
    1806:	8c 93       	st	X, r24
			PORTC_R|=COPY_u8Value;
    1808:	a5 e3       	ldi	r26, 0x35	; 53
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	e5 e3       	ldi	r30, 0x35	; 53
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	90 81       	ld	r25, Z
    1812:	8b 81       	ldd	r24, Y+3	; 0x03
    1814:	89 2b       	or	r24, r25
    1816:	8c 93       	st	X, r24
    1818:	11 c0       	rjmp	.+34     	; 0x183c <DIO_voidWriteHighNibble+0xe6>
			break;
		case DIO_PORTD :
			PORTD_R&=0x0f;
    181a:	a2 e3       	ldi	r26, 0x32	; 50
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	e2 e3       	ldi	r30, 0x32	; 50
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
    1824:	8f 70       	andi	r24, 0x0F	; 15
    1826:	8c 93       	st	X, r24
			PORTD_R|=COPY_u8Value;
    1828:	a2 e3       	ldi	r26, 0x32	; 50
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	e2 e3       	ldi	r30, 0x32	; 50
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	90 81       	ld	r25, Z
    1832:	8b 81       	ldd	r24, Y+3	; 0x03
    1834:	89 2b       	or	r24, r25
    1836:	8c 93       	st	X, r24
    1838:	01 c0       	rjmp	.+2      	; 0x183c <DIO_voidWriteHighNibble+0xe6>

		}
	}
	else
	{
		LOC_enumStatus = DIO_NOK;
    183a:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumStatus ;
    183c:	89 81       	ldd	r24, Y+1	; 0x01
}
    183e:	0f 90       	pop	r0
    1840:	0f 90       	pop	r0
    1842:	0f 90       	pop	r0
    1844:	0f 90       	pop	r0
    1846:	0f 90       	pop	r0
    1848:	cf 91       	pop	r28
    184a:	df 91       	pop	r29
    184c:	08 95       	ret

0000184e <DIO_voidWriteLowNibble>:

DIO_ErrorStatus DIO_voidWriteLowNibble          (u8 COPY_u8PORT ,u8 COPY_u8Value                        )
{
    184e:	df 93       	push	r29
    1850:	cf 93       	push	r28
    1852:	00 d0       	rcall	.+0      	; 0x1854 <DIO_voidWriteLowNibble+0x6>
    1854:	00 d0       	rcall	.+0      	; 0x1856 <DIO_voidWriteLowNibble+0x8>
    1856:	0f 92       	push	r0
    1858:	cd b7       	in	r28, 0x3d	; 61
    185a:	de b7       	in	r29, 0x3e	; 62
    185c:	8a 83       	std	Y+2, r24	; 0x02
    185e:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumStatus = DIO_OK;
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	89 83       	std	Y+1, r24	; 0x01
	if(COPY_u8PORT <= DIO_PORTD)
    1864:	8a 81       	ldd	r24, Y+2	; 0x02
    1866:	84 30       	cpi	r24, 0x04	; 4
    1868:	08 f0       	brcs	.+2      	; 0x186c <DIO_voidWriteLowNibble+0x1e>
    186a:	62 c0       	rjmp	.+196    	; 0x1930 <DIO_voidWriteLowNibble+0xe2>
	{
		COPY_u8Value &=0x0f;
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	8f 70       	andi	r24, 0x0F	; 15
    1870:	8b 83       	std	Y+3, r24	; 0x03
		switch(COPY_u8PORT)
    1872:	8a 81       	ldd	r24, Y+2	; 0x02
    1874:	28 2f       	mov	r18, r24
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	3d 83       	std	Y+5, r19	; 0x05
    187a:	2c 83       	std	Y+4, r18	; 0x04
    187c:	8c 81       	ldd	r24, Y+4	; 0x04
    187e:	9d 81       	ldd	r25, Y+5	; 0x05
    1880:	81 30       	cpi	r24, 0x01	; 1
    1882:	91 05       	cpc	r25, r1
    1884:	29 f1       	breq	.+74     	; 0x18d0 <DIO_voidWriteLowNibble+0x82>
    1886:	2c 81       	ldd	r18, Y+4	; 0x04
    1888:	3d 81       	ldd	r19, Y+5	; 0x05
    188a:	22 30       	cpi	r18, 0x02	; 2
    188c:	31 05       	cpc	r19, r1
    188e:	2c f4       	brge	.+10     	; 0x189a <DIO_voidWriteLowNibble+0x4c>
    1890:	8c 81       	ldd	r24, Y+4	; 0x04
    1892:	9d 81       	ldd	r25, Y+5	; 0x05
    1894:	00 97       	sbiw	r24, 0x00	; 0
    1896:	61 f0       	breq	.+24     	; 0x18b0 <DIO_voidWriteLowNibble+0x62>
    1898:	4c c0       	rjmp	.+152    	; 0x1932 <DIO_voidWriteLowNibble+0xe4>
    189a:	2c 81       	ldd	r18, Y+4	; 0x04
    189c:	3d 81       	ldd	r19, Y+5	; 0x05
    189e:	22 30       	cpi	r18, 0x02	; 2
    18a0:	31 05       	cpc	r19, r1
    18a2:	31 f1       	breq	.+76     	; 0x18f0 <DIO_voidWriteLowNibble+0xa2>
    18a4:	8c 81       	ldd	r24, Y+4	; 0x04
    18a6:	9d 81       	ldd	r25, Y+5	; 0x05
    18a8:	83 30       	cpi	r24, 0x03	; 3
    18aa:	91 05       	cpc	r25, r1
    18ac:	89 f1       	breq	.+98     	; 0x1910 <DIO_voidWriteLowNibble+0xc2>
    18ae:	41 c0       	rjmp	.+130    	; 0x1932 <DIO_voidWriteLowNibble+0xe4>
		{
		case DIO_PORTA :
			PORTA_R&=0xf0;
    18b0:	ab e3       	ldi	r26, 0x3B	; 59
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	eb e3       	ldi	r30, 0x3B	; 59
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	80 7f       	andi	r24, 0xF0	; 240
    18bc:	8c 93       	st	X, r24
			PORTA_R|=COPY_u8Value;
    18be:	ab e3       	ldi	r26, 0x3B	; 59
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	eb e3       	ldi	r30, 0x3B	; 59
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	90 81       	ld	r25, Z
    18c8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ca:	89 2b       	or	r24, r25
    18cc:	8c 93       	st	X, r24
    18ce:	31 c0       	rjmp	.+98     	; 0x1932 <DIO_voidWriteLowNibble+0xe4>
			break;
		case DIO_PORTB :
			PORTB_R&=0xf0;
    18d0:	a8 e3       	ldi	r26, 0x38	; 56
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	e8 e3       	ldi	r30, 0x38	; 56
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	80 7f       	andi	r24, 0xF0	; 240
    18dc:	8c 93       	st	X, r24
			PORTB_R|=COPY_u8Value;
    18de:	a8 e3       	ldi	r26, 0x38	; 56
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	e8 e3       	ldi	r30, 0x38	; 56
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	90 81       	ld	r25, Z
    18e8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ea:	89 2b       	or	r24, r25
    18ec:	8c 93       	st	X, r24
    18ee:	21 c0       	rjmp	.+66     	; 0x1932 <DIO_voidWriteLowNibble+0xe4>
			break;
		case DIO_PORTC :
			PORTC_R&=0xf0;
    18f0:	a5 e3       	ldi	r26, 0x35	; 53
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	e5 e3       	ldi	r30, 0x35	; 53
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	80 7f       	andi	r24, 0xF0	; 240
    18fc:	8c 93       	st	X, r24
			PORTC_R|=COPY_u8Value;
    18fe:	a5 e3       	ldi	r26, 0x35	; 53
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	e5 e3       	ldi	r30, 0x35	; 53
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	90 81       	ld	r25, Z
    1908:	8b 81       	ldd	r24, Y+3	; 0x03
    190a:	89 2b       	or	r24, r25
    190c:	8c 93       	st	X, r24
    190e:	11 c0       	rjmp	.+34     	; 0x1932 <DIO_voidWriteLowNibble+0xe4>
			break;
		case DIO_PORTD :
			PORTD_R&=0xf0;
    1910:	a2 e3       	ldi	r26, 0x32	; 50
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	e2 e3       	ldi	r30, 0x32	; 50
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	80 7f       	andi	r24, 0xF0	; 240
    191c:	8c 93       	st	X, r24
			PORTD_R|=COPY_u8Value;
    191e:	a2 e3       	ldi	r26, 0x32	; 50
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	e2 e3       	ldi	r30, 0x32	; 50
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	90 81       	ld	r25, Z
    1928:	8b 81       	ldd	r24, Y+3	; 0x03
    192a:	89 2b       	or	r24, r25
    192c:	8c 93       	st	X, r24
    192e:	01 c0       	rjmp	.+2      	; 0x1932 <DIO_voidWriteLowNibble+0xe4>

		}
	}
	else
	{
		LOC_enumStatus = DIO_NOK;
    1930:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumStatus ;
    1932:	89 81       	ldd	r24, Y+1	; 0x01

}
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	cf 91       	pop	r28
    1940:	df 91       	pop	r29
    1942:	08 95       	ret

00001944 <EXTI_VoidInit>:
#include "EXTI_config.h"

void (*EXTI_CallBack[3]) (void) = { NULL } ; 

void EXTI_VoidInit(void)
{
    1944:	df 93       	push	r29
    1946:	cf 93       	push	r28
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
			#elif EXTI_SENSE_MODE == EXTI_ON_CHANGE
				CLR_BIT(MCUCR,0) ; SET_BIT(MCUCR,1) ;
			#elif EXTI_SENSE_MODE == EXTI_FALLING_EDGE
				SET_BIT(MCUCR,0) ; CLR_BIT(MCUCR,1) ;
			#elif EXTI_SENSE_MODE == EXTI_RISING_EDGE
				SET_BIT(MCUCR,0) ; SET_BIT(MCUCR,1) ;
    194c:	a5 e5       	ldi	r26, 0x55	; 85
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	e5 e5       	ldi	r30, 0x55	; 85
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	81 60       	ori	r24, 0x01	; 1
    1958:	8c 93       	st	X, r24
    195a:	a5 e5       	ldi	r26, 0x55	; 85
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	e5 e5       	ldi	r30, 0x55	; 85
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	82 60       	ori	r24, 0x02	; 2
    1966:	8c 93       	st	X, r24
		#endif

	#endif
#endif

}
    1968:	cf 91       	pop	r28
    196a:	df 91       	pop	r29
    196c:	08 95       	ret

0000196e <EXTI_VoidSetSignalLatch>:
void EXTI_VoidSetSignalLatch(u8 COPY_SenseMode, u8 COPY_u8Line)
{
    196e:	df 93       	push	r29
    1970:	cf 93       	push	r28
    1972:	00 d0       	rcall	.+0      	; 0x1974 <EXTI_VoidSetSignalLatch+0x6>
    1974:	00 d0       	rcall	.+0      	; 0x1976 <EXTI_VoidSetSignalLatch+0x8>
    1976:	00 d0       	rcall	.+0      	; 0x1978 <EXTI_VoidSetSignalLatch+0xa>
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
    197c:	89 83       	std	Y+1, r24	; 0x01
    197e:	6a 83       	std	Y+2, r22	; 0x02
	COPY_u8Line = (6 - COPY_u8Line) *-2;
    1980:	8a 81       	ldd	r24, Y+2	; 0x02
    1982:	88 2f       	mov	r24, r24
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	06 97       	sbiw	r24, 0x06	; 6
    1988:	88 0f       	add	r24, r24
    198a:	99 1f       	adc	r25, r25
    198c:	8a 83       	std	Y+2, r24	; 0x02
	if(COPY_u8Line>=EXTI_LINE0 && COPY_u8Line<=EXTI_LINE1)
    198e:	8a 81       	ldd	r24, Y+2	; 0x02
    1990:	86 30       	cpi	r24, 0x06	; 6
    1992:	08 f4       	brcc	.+2      	; 0x1996 <EXTI_VoidSetSignalLatch+0x28>
    1994:	cd c0       	rjmp	.+410    	; 0x1b30 <EXTI_VoidSetSignalLatch+0x1c2>
    1996:	8a 81       	ldd	r24, Y+2	; 0x02
    1998:	88 30       	cpi	r24, 0x08	; 8
    199a:	08 f0       	brcs	.+2      	; 0x199e <EXTI_VoidSetSignalLatch+0x30>
    199c:	c9 c0       	rjmp	.+402    	; 0x1b30 <EXTI_VoidSetSignalLatch+0x1c2>
	{
		switch(COPY_SenseMode)
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	28 2f       	mov	r18, r24
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	3e 83       	std	Y+6, r19	; 0x06
    19a6:	2d 83       	std	Y+5, r18	; 0x05
    19a8:	8d 81       	ldd	r24, Y+5	; 0x05
    19aa:	9e 81       	ldd	r25, Y+6	; 0x06
    19ac:	81 30       	cpi	r24, 0x01	; 1
    19ae:	91 05       	cpc	r25, r1
    19b0:	09 f4       	brne	.+2      	; 0x19b4 <EXTI_VoidSetSignalLatch+0x46>
    19b2:	95 c0       	rjmp	.+298    	; 0x1ade <EXTI_VoidSetSignalLatch+0x170>
    19b4:	2d 81       	ldd	r18, Y+5	; 0x05
    19b6:	3e 81       	ldd	r19, Y+6	; 0x06
    19b8:	22 30       	cpi	r18, 0x02	; 2
    19ba:	31 05       	cpc	r19, r1
    19bc:	34 f4       	brge	.+12     	; 0x19ca <EXTI_VoidSetSignalLatch+0x5c>
    19be:	8d 81       	ldd	r24, Y+5	; 0x05
    19c0:	9e 81       	ldd	r25, Y+6	; 0x06
    19c2:	00 97       	sbiw	r24, 0x00	; 0
    19c4:	09 f4       	brne	.+2      	; 0x19c8 <EXTI_VoidSetSignalLatch+0x5a>
    19c6:	61 c0       	rjmp	.+194    	; 0x1a8a <EXTI_VoidSetSignalLatch+0x11c>
    19c8:	d1 c0       	rjmp	.+418    	; 0x1b6c <EXTI_VoidSetSignalLatch+0x1fe>
    19ca:	2d 81       	ldd	r18, Y+5	; 0x05
    19cc:	3e 81       	ldd	r19, Y+6	; 0x06
    19ce:	22 30       	cpi	r18, 0x02	; 2
    19d0:	31 05       	cpc	r19, r1
    19d2:	31 f0       	breq	.+12     	; 0x19e0 <EXTI_VoidSetSignalLatch+0x72>
    19d4:	8d 81       	ldd	r24, Y+5	; 0x05
    19d6:	9e 81       	ldd	r25, Y+6	; 0x06
    19d8:	83 30       	cpi	r24, 0x03	; 3
    19da:	91 05       	cpc	r25, r1
    19dc:	61 f1       	breq	.+88     	; 0x1a36 <EXTI_VoidSetSignalLatch+0xc8>
    19de:	c6 c0       	rjmp	.+396    	; 0x1b6c <EXTI_VoidSetSignalLatch+0x1fe>
		{
		case EXTI_LOW_LEVEL:CLR_BIT(MCUCR,COPY_u8Line) ; CLR_BIT(MCUCR,COPY_u8Line+1) ;break;
    19e0:	a5 e5       	ldi	r26, 0x55	; 85
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	e5 e5       	ldi	r30, 0x55	; 85
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	48 2f       	mov	r20, r24
    19ec:	8a 81       	ldd	r24, Y+2	; 0x02
    19ee:	28 2f       	mov	r18, r24
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	02 c0       	rjmp	.+4      	; 0x19fc <EXTI_VoidSetSignalLatch+0x8e>
    19f8:	88 0f       	add	r24, r24
    19fa:	99 1f       	adc	r25, r25
    19fc:	2a 95       	dec	r18
    19fe:	e2 f7       	brpl	.-8      	; 0x19f8 <EXTI_VoidSetSignalLatch+0x8a>
    1a00:	80 95       	com	r24
    1a02:	84 23       	and	r24, r20
    1a04:	8c 93       	st	X, r24
    1a06:	a5 e5       	ldi	r26, 0x55	; 85
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	e5 e5       	ldi	r30, 0x55	; 85
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	48 2f       	mov	r20, r24
    1a12:	8a 81       	ldd	r24, Y+2	; 0x02
    1a14:	88 2f       	mov	r24, r24
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	9c 01       	movw	r18, r24
    1a1a:	2f 5f       	subi	r18, 0xFF	; 255
    1a1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	02 2e       	mov	r0, r18
    1a24:	02 c0       	rjmp	.+4      	; 0x1a2a <EXTI_VoidSetSignalLatch+0xbc>
    1a26:	88 0f       	add	r24, r24
    1a28:	99 1f       	adc	r25, r25
    1a2a:	0a 94       	dec	r0
    1a2c:	e2 f7       	brpl	.-8      	; 0x1a26 <EXTI_VoidSetSignalLatch+0xb8>
    1a2e:	80 95       	com	r24
    1a30:	84 23       	and	r24, r20
    1a32:	8c 93       	st	X, r24
    1a34:	9b c0       	rjmp	.+310    	; 0x1b6c <EXTI_VoidSetSignalLatch+0x1fe>
		case EXTI_ON_CHANGE:SET_BIT(MCUCR,COPY_u8Line) ; CLR_BIT(MCUCR,COPY_u8Line+1) ;break;
    1a36:	a5 e5       	ldi	r26, 0x55	; 85
    1a38:	b0 e0       	ldi	r27, 0x00	; 0
    1a3a:	e5 e5       	ldi	r30, 0x55	; 85
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 81       	ld	r24, Z
    1a40:	48 2f       	mov	r20, r24
    1a42:	8a 81       	ldd	r24, Y+2	; 0x02
    1a44:	28 2f       	mov	r18, r24
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	02 c0       	rjmp	.+4      	; 0x1a52 <EXTI_VoidSetSignalLatch+0xe4>
    1a4e:	88 0f       	add	r24, r24
    1a50:	99 1f       	adc	r25, r25
    1a52:	2a 95       	dec	r18
    1a54:	e2 f7       	brpl	.-8      	; 0x1a4e <EXTI_VoidSetSignalLatch+0xe0>
    1a56:	84 2b       	or	r24, r20
    1a58:	8c 93       	st	X, r24
    1a5a:	a5 e5       	ldi	r26, 0x55	; 85
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	e5 e5       	ldi	r30, 0x55	; 85
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	48 2f       	mov	r20, r24
    1a66:	8a 81       	ldd	r24, Y+2	; 0x02
    1a68:	88 2f       	mov	r24, r24
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	9c 01       	movw	r18, r24
    1a6e:	2f 5f       	subi	r18, 0xFF	; 255
    1a70:	3f 4f       	sbci	r19, 0xFF	; 255
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	02 2e       	mov	r0, r18
    1a78:	02 c0       	rjmp	.+4      	; 0x1a7e <EXTI_VoidSetSignalLatch+0x110>
    1a7a:	88 0f       	add	r24, r24
    1a7c:	99 1f       	adc	r25, r25
    1a7e:	0a 94       	dec	r0
    1a80:	e2 f7       	brpl	.-8      	; 0x1a7a <EXTI_VoidSetSignalLatch+0x10c>
    1a82:	80 95       	com	r24
    1a84:	84 23       	and	r24, r20
    1a86:	8c 93       	st	X, r24
    1a88:	71 c0       	rjmp	.+226    	; 0x1b6c <EXTI_VoidSetSignalLatch+0x1fe>
		case EXTI_FALLING_EDGE:CLR_BIT(MCUCR,COPY_u8Line) ; SET_BIT(MCUCR,COPY_u8Line+1) ;break;
    1a8a:	a5 e5       	ldi	r26, 0x55	; 85
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	e5 e5       	ldi	r30, 0x55	; 85
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	48 2f       	mov	r20, r24
    1a96:	8a 81       	ldd	r24, Y+2	; 0x02
    1a98:	28 2f       	mov	r18, r24
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	02 c0       	rjmp	.+4      	; 0x1aa6 <EXTI_VoidSetSignalLatch+0x138>
    1aa2:	88 0f       	add	r24, r24
    1aa4:	99 1f       	adc	r25, r25
    1aa6:	2a 95       	dec	r18
    1aa8:	e2 f7       	brpl	.-8      	; 0x1aa2 <EXTI_VoidSetSignalLatch+0x134>
    1aaa:	80 95       	com	r24
    1aac:	84 23       	and	r24, r20
    1aae:	8c 93       	st	X, r24
    1ab0:	a5 e5       	ldi	r26, 0x55	; 85
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	e5 e5       	ldi	r30, 0x55	; 85
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	48 2f       	mov	r20, r24
    1abc:	8a 81       	ldd	r24, Y+2	; 0x02
    1abe:	88 2f       	mov	r24, r24
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	9c 01       	movw	r18, r24
    1ac4:	2f 5f       	subi	r18, 0xFF	; 255
    1ac6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	02 2e       	mov	r0, r18
    1ace:	02 c0       	rjmp	.+4      	; 0x1ad4 <EXTI_VoidSetSignalLatch+0x166>
    1ad0:	88 0f       	add	r24, r24
    1ad2:	99 1f       	adc	r25, r25
    1ad4:	0a 94       	dec	r0
    1ad6:	e2 f7       	brpl	.-8      	; 0x1ad0 <EXTI_VoidSetSignalLatch+0x162>
    1ad8:	84 2b       	or	r24, r20
    1ada:	8c 93       	st	X, r24
    1adc:	47 c0       	rjmp	.+142    	; 0x1b6c <EXTI_VoidSetSignalLatch+0x1fe>
		case EXTI_RISING_EDGE:SET_BIT(MCUCR,COPY_u8Line) ; SET_BIT(MCUCR,COPY_u8Line+1) ;break;
    1ade:	a5 e5       	ldi	r26, 0x55	; 85
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	e5 e5       	ldi	r30, 0x55	; 85
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	48 2f       	mov	r20, r24
    1aea:	8a 81       	ldd	r24, Y+2	; 0x02
    1aec:	28 2f       	mov	r18, r24
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	02 c0       	rjmp	.+4      	; 0x1afa <EXTI_VoidSetSignalLatch+0x18c>
    1af6:	88 0f       	add	r24, r24
    1af8:	99 1f       	adc	r25, r25
    1afa:	2a 95       	dec	r18
    1afc:	e2 f7       	brpl	.-8      	; 0x1af6 <EXTI_VoidSetSignalLatch+0x188>
    1afe:	84 2b       	or	r24, r20
    1b00:	8c 93       	st	X, r24
    1b02:	a5 e5       	ldi	r26, 0x55	; 85
    1b04:	b0 e0       	ldi	r27, 0x00	; 0
    1b06:	e5 e5       	ldi	r30, 0x55	; 85
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	48 2f       	mov	r20, r24
    1b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b10:	88 2f       	mov	r24, r24
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	9c 01       	movw	r18, r24
    1b16:	2f 5f       	subi	r18, 0xFF	; 255
    1b18:	3f 4f       	sbci	r19, 0xFF	; 255
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	02 2e       	mov	r0, r18
    1b20:	02 c0       	rjmp	.+4      	; 0x1b26 <EXTI_VoidSetSignalLatch+0x1b8>
    1b22:	88 0f       	add	r24, r24
    1b24:	99 1f       	adc	r25, r25
    1b26:	0a 94       	dec	r0
    1b28:	e2 f7       	brpl	.-8      	; 0x1b22 <EXTI_VoidSetSignalLatch+0x1b4>
    1b2a:	84 2b       	or	r24, r20
    1b2c:	8c 93       	st	X, r24
    1b2e:	1e c0       	rjmp	.+60     	; 0x1b6c <EXTI_VoidSetSignalLatch+0x1fe>
		}
		
	}
	else
	{
		switch(COPY_SenseMode)
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	28 2f       	mov	r18, r24
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	3c 83       	std	Y+4, r19	; 0x04
    1b38:	2b 83       	std	Y+3, r18	; 0x03
    1b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3e:	00 97       	sbiw	r24, 0x00	; 0
    1b40:	31 f0       	breq	.+12     	; 0x1b4e <EXTI_VoidSetSignalLatch+0x1e0>
    1b42:	2b 81       	ldd	r18, Y+3	; 0x03
    1b44:	3c 81       	ldd	r19, Y+4	; 0x04
    1b46:	21 30       	cpi	r18, 0x01	; 1
    1b48:	31 05       	cpc	r19, r1
    1b4a:	49 f0       	breq	.+18     	; 0x1b5e <EXTI_VoidSetSignalLatch+0x1f0>
    1b4c:	0f c0       	rjmp	.+30     	; 0x1b6c <EXTI_VoidSetSignalLatch+0x1fe>
		{
		case EXTI_FALLING_EDGE: CLR_BIT(MCUCSR,6) ;break;
    1b4e:	a4 e5       	ldi	r26, 0x54	; 84
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	e4 e5       	ldi	r30, 0x54	; 84
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	8f 7b       	andi	r24, 0xBF	; 191
    1b5a:	8c 93       	st	X, r24
    1b5c:	07 c0       	rjmp	.+14     	; 0x1b6c <EXTI_VoidSetSignalLatch+0x1fe>
		case EXTI_RISING_EDGE : SET_BIT(MCUCSR,6) ;break;
    1b5e:	a4 e5       	ldi	r26, 0x54	; 84
    1b60:	b0 e0       	ldi	r27, 0x00	; 0
    1b62:	e4 e5       	ldi	r30, 0x54	; 84
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	80 64       	ori	r24, 0x40	; 64
    1b6a:	8c 93       	st	X, r24
		}
		
	}
}
    1b6c:	26 96       	adiw	r28, 0x06	; 6
    1b6e:	0f b6       	in	r0, 0x3f	; 63
    1b70:	f8 94       	cli
    1b72:	de bf       	out	0x3e, r29	; 62
    1b74:	0f be       	out	0x3f, r0	; 63
    1b76:	cd bf       	out	0x3d, r28	; 61
    1b78:	cf 91       	pop	r28
    1b7a:	df 91       	pop	r29
    1b7c:	08 95       	ret

00001b7e <EXTI_VoidEnable>:
u8 EXTI_VoidEnable(u8 COPY_u8Line)
{
    1b7e:	df 93       	push	r29
    1b80:	cf 93       	push	r28
    1b82:	00 d0       	rcall	.+0      	; 0x1b84 <EXTI_VoidEnable+0x6>
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
    1b88:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8ErrorStutas = OK;
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	89 83       	std	Y+1, r24	; 0x01
	if((COPY_u8Line<EXTI_LINE1)&&(COPY_u8Line>EXTI_LINE2))
    1b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b90:	87 30       	cpi	r24, 0x07	; 7
    1b92:	b8 f4       	brcc	.+46     	; 0x1bc2 <EXTI_VoidEnable+0x44>
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	86 30       	cpi	r24, 0x06	; 6
    1b98:	a0 f0       	brcs	.+40     	; 0x1bc2 <EXTI_VoidEnable+0x44>
	{
		SET_BIT(GICR,COPY_u8Line);
    1b9a:	ab e5       	ldi	r26, 0x5B	; 91
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	eb e5       	ldi	r30, 0x5B	; 91
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	48 2f       	mov	r20, r24
    1ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba8:	28 2f       	mov	r18, r24
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	02 2e       	mov	r0, r18
    1bb2:	02 c0       	rjmp	.+4      	; 0x1bb8 <EXTI_VoidEnable+0x3a>
    1bb4:	88 0f       	add	r24, r24
    1bb6:	99 1f       	adc	r25, r25
    1bb8:	0a 94       	dec	r0
    1bba:	e2 f7       	brpl	.-8      	; 0x1bb4 <EXTI_VoidEnable+0x36>
    1bbc:	84 2b       	or	r24, r20
    1bbe:	8c 93       	st	X, r24
    1bc0:	01 c0       	rjmp	.+2      	; 0x1bc4 <EXTI_VoidEnable+0x46>
	}
	else
	{
		local_u8ErrorStutas = NOK;
    1bc2:	19 82       	std	Y+1, r1	; 0x01
	}
	return local_u8ErrorStutas;
    1bc4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bc6:	0f 90       	pop	r0
    1bc8:	0f 90       	pop	r0
    1bca:	cf 91       	pop	r28
    1bcc:	df 91       	pop	r29
    1bce:	08 95       	ret

00001bd0 <EXTI_VoidDisable>:
u8 EXTI_VoidDisable(u8 COPY_u8Line)
{
    1bd0:	df 93       	push	r29
    1bd2:	cf 93       	push	r28
    1bd4:	00 d0       	rcall	.+0      	; 0x1bd6 <EXTI_VoidDisable+0x6>
    1bd6:	cd b7       	in	r28, 0x3d	; 61
    1bd8:	de b7       	in	r29, 0x3e	; 62
    1bda:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8ErrorStutas = OK;
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	89 83       	std	Y+1, r24	; 0x01
	if((COPY_u8Line<EXTI_LINE1)&&(COPY_u8Line>EXTI_LINE2))
    1be0:	8a 81       	ldd	r24, Y+2	; 0x02
    1be2:	87 30       	cpi	r24, 0x07	; 7
    1be4:	c0 f4       	brcc	.+48     	; 0x1c16 <EXTI_VoidDisable+0x46>
    1be6:	8a 81       	ldd	r24, Y+2	; 0x02
    1be8:	86 30       	cpi	r24, 0x06	; 6
    1bea:	a8 f0       	brcs	.+42     	; 0x1c16 <EXTI_VoidDisable+0x46>
	{ 
		CLR_BIT( GICR , COPY_u8Line );
    1bec:	ab e5       	ldi	r26, 0x5B	; 91
    1bee:	b0 e0       	ldi	r27, 0x00	; 0
    1bf0:	eb e5       	ldi	r30, 0x5B	; 91
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	48 2f       	mov	r20, r24
    1bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfa:	28 2f       	mov	r18, r24
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	02 2e       	mov	r0, r18
    1c04:	02 c0       	rjmp	.+4      	; 0x1c0a <EXTI_VoidDisable+0x3a>
    1c06:	88 0f       	add	r24, r24
    1c08:	99 1f       	adc	r25, r25
    1c0a:	0a 94       	dec	r0
    1c0c:	e2 f7       	brpl	.-8      	; 0x1c06 <EXTI_VoidDisable+0x36>
    1c0e:	80 95       	com	r24
    1c10:	84 23       	and	r24, r20
    1c12:	8c 93       	st	X, r24
    1c14:	01 c0       	rjmp	.+2      	; 0x1c18 <EXTI_VoidDisable+0x48>
	}
	else
	{
		local_u8ErrorStutas = NOK;
    1c16:	19 82       	std	Y+1, r1	; 0x01
	}
	return local_u8ErrorStutas;
    1c18:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	cf 91       	pop	r28
    1c20:	df 91       	pop	r29
    1c22:	08 95       	ret

00001c24 <EXTI_VoidClearFlag>:
void EXTI_VoidClearFlag(u8 COPY_u8Line)
{
    1c24:	df 93       	push	r29
    1c26:	cf 93       	push	r28
    1c28:	0f 92       	push	r0
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
    1c2e:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT( GIFR , COPY_u8Line );
    1c30:	aa e5       	ldi	r26, 0x5A	; 90
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	ea e5       	ldi	r30, 0x5A	; 90
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	48 2f       	mov	r20, r24
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	28 2f       	mov	r18, r24
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	02 2e       	mov	r0, r18
    1c48:	02 c0       	rjmp	.+4      	; 0x1c4e <EXTI_VoidClearFlag+0x2a>
    1c4a:	88 0f       	add	r24, r24
    1c4c:	99 1f       	adc	r25, r25
    1c4e:	0a 94       	dec	r0
    1c50:	e2 f7       	brpl	.-8      	; 0x1c4a <EXTI_VoidClearFlag+0x26>
    1c52:	84 2b       	or	r24, r20
    1c54:	8c 93       	st	X, r24
}
    1c56:	0f 90       	pop	r0
    1c58:	cf 91       	pop	r28
    1c5a:	df 91       	pop	r29
    1c5c:	08 95       	ret

00001c5e <EXTI_u8GetFlag>:
u8 EXTI_u8GetFlag( u8 COPY_u8Line ){
    1c5e:	df 93       	push	r29
    1c60:	cf 93       	push	r28
    1c62:	0f 92       	push	r0
    1c64:	cd b7       	in	r28, 0x3d	; 61
    1c66:	de b7       	in	r29, 0x3e	; 62
    1c68:	89 83       	std	Y+1, r24	; 0x01

	return RED_BIT( GIFR , COPY_u8Line );
    1c6a:	ea e5       	ldi	r30, 0x5A	; 90
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	48 2f       	mov	r20, r24
    1c72:	50 e0       	ldi	r21, 0x00	; 0
    1c74:	89 81       	ldd	r24, Y+1	; 0x01
    1c76:	28 2f       	mov	r18, r24
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	02 c0       	rjmp	.+4      	; 0x1c84 <EXTI_u8GetFlag+0x26>
    1c80:	88 0f       	add	r24, r24
    1c82:	99 1f       	adc	r25, r25
    1c84:	2a 95       	dec	r18
    1c86:	e2 f7       	brpl	.-8      	; 0x1c80 <EXTI_u8GetFlag+0x22>
    1c88:	9a 01       	movw	r18, r20
    1c8a:	28 23       	and	r18, r24
    1c8c:	39 23       	and	r19, r25
    1c8e:	89 81       	ldd	r24, Y+1	; 0x01
    1c90:	88 2f       	mov	r24, r24
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	a9 01       	movw	r20, r18
    1c96:	02 c0       	rjmp	.+4      	; 0x1c9c <EXTI_u8GetFlag+0x3e>
    1c98:	55 95       	asr	r21
    1c9a:	47 95       	ror	r20
    1c9c:	8a 95       	dec	r24
    1c9e:	e2 f7       	brpl	.-8      	; 0x1c98 <EXTI_u8GetFlag+0x3a>
    1ca0:	ca 01       	movw	r24, r20

}
    1ca2:	0f 90       	pop	r0
    1ca4:	cf 91       	pop	r28
    1ca6:	df 91       	pop	r29
    1ca8:	08 95       	ret

00001caa <EXTI_VoidSetCallBack>:
void EXTI_VoidSetCallBack(void (*COPY_pvoidCallBack)(void) , u8 COPY_u8EXTILine )
{
    1caa:	df 93       	push	r29
    1cac:	cf 93       	push	r28
    1cae:	00 d0       	rcall	.+0      	; 0x1cb0 <EXTI_VoidSetCallBack+0x6>
    1cb0:	0f 92       	push	r0
    1cb2:	cd b7       	in	r28, 0x3d	; 61
    1cb4:	de b7       	in	r29, 0x3e	; 62
    1cb6:	9a 83       	std	Y+2, r25	; 0x02
    1cb8:	89 83       	std	Y+1, r24	; 0x01
    1cba:	6b 83       	std	Y+3, r22	; 0x03
	if(COPY_pvoidCallBack != NULL)
    1cbc:	89 81       	ldd	r24, Y+1	; 0x01
    1cbe:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc0:	00 97       	sbiw	r24, 0x00	; 0
    1cc2:	61 f0       	breq	.+24     	; 0x1cdc <EXTI_VoidSetCallBack+0x32>
	{
		EXTI_CallBack[COPY_u8EXTILine] = COPY_pvoidCallBack;
    1cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc6:	88 2f       	mov	r24, r24
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	88 0f       	add	r24, r24
    1ccc:	99 1f       	adc	r25, r25
    1cce:	fc 01       	movw	r30, r24
    1cd0:	ec 57       	subi	r30, 0x7C	; 124
    1cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd4:	89 81       	ldd	r24, Y+1	; 0x01
    1cd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd8:	91 83       	std	Z+1, r25	; 0x01
    1cda:	80 83       	st	Z, r24
	}
}
    1cdc:	0f 90       	pop	r0
    1cde:	0f 90       	pop	r0
    1ce0:	0f 90       	pop	r0
    1ce2:	cf 91       	pop	r28
    1ce4:	df 91       	pop	r29
    1ce6:	08 95       	ret

00001ce8 <__vector_1>:

	void __vector_1(void) __attribute__((signal));
	void __vector_1(void)
	{
    1ce8:	1f 92       	push	r1
    1cea:	0f 92       	push	r0
    1cec:	0f b6       	in	r0, 0x3f	; 63
    1cee:	0f 92       	push	r0
    1cf0:	11 24       	eor	r1, r1
    1cf2:	2f 93       	push	r18
    1cf4:	3f 93       	push	r19
    1cf6:	4f 93       	push	r20
    1cf8:	5f 93       	push	r21
    1cfa:	6f 93       	push	r22
    1cfc:	7f 93       	push	r23
    1cfe:	8f 93       	push	r24
    1d00:	9f 93       	push	r25
    1d02:	af 93       	push	r26
    1d04:	bf 93       	push	r27
    1d06:	ef 93       	push	r30
    1d08:	ff 93       	push	r31
    1d0a:	df 93       	push	r29
    1d0c:	cf 93       	push	r28
    1d0e:	cd b7       	in	r28, 0x3d	; 61
    1d10:	de b7       	in	r29, 0x3e	; 62
		if(EXTI_CallBack[0] != NULL)
    1d12:	80 91 84 00 	lds	r24, 0x0084
    1d16:	90 91 85 00 	lds	r25, 0x0085
    1d1a:	00 97       	sbiw	r24, 0x00	; 0
    1d1c:	41 f0       	breq	.+16     	; 0x1d2e <__vector_1+0x46>
		{
			EXTI_CallBack[0]();
    1d1e:	e0 91 84 00 	lds	r30, 0x0084
    1d22:	f0 91 85 00 	lds	r31, 0x0085
    1d26:	09 95       	icall
			EXTI_VoidClearFlag( EXTI_LINE0 );
    1d28:	86 e0       	ldi	r24, 0x06	; 6
    1d2a:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <EXTI_VoidClearFlag>
		}
	}
    1d2e:	cf 91       	pop	r28
    1d30:	df 91       	pop	r29
    1d32:	ff 91       	pop	r31
    1d34:	ef 91       	pop	r30
    1d36:	bf 91       	pop	r27
    1d38:	af 91       	pop	r26
    1d3a:	9f 91       	pop	r25
    1d3c:	8f 91       	pop	r24
    1d3e:	7f 91       	pop	r23
    1d40:	6f 91       	pop	r22
    1d42:	5f 91       	pop	r21
    1d44:	4f 91       	pop	r20
    1d46:	3f 91       	pop	r19
    1d48:	2f 91       	pop	r18
    1d4a:	0f 90       	pop	r0
    1d4c:	0f be       	out	0x3f, r0	; 63
    1d4e:	0f 90       	pop	r0
    1d50:	1f 90       	pop	r1
    1d52:	18 95       	reti

00001d54 <__vector_2>:
	
	void __vector_2(void) __attribute__((signal));
	void __vector_2(void)
	{
    1d54:	1f 92       	push	r1
    1d56:	0f 92       	push	r0
    1d58:	0f b6       	in	r0, 0x3f	; 63
    1d5a:	0f 92       	push	r0
    1d5c:	11 24       	eor	r1, r1
    1d5e:	2f 93       	push	r18
    1d60:	3f 93       	push	r19
    1d62:	4f 93       	push	r20
    1d64:	5f 93       	push	r21
    1d66:	6f 93       	push	r22
    1d68:	7f 93       	push	r23
    1d6a:	8f 93       	push	r24
    1d6c:	9f 93       	push	r25
    1d6e:	af 93       	push	r26
    1d70:	bf 93       	push	r27
    1d72:	ef 93       	push	r30
    1d74:	ff 93       	push	r31
    1d76:	df 93       	push	r29
    1d78:	cf 93       	push	r28
    1d7a:	cd b7       	in	r28, 0x3d	; 61
    1d7c:	de b7       	in	r29, 0x3e	; 62
		if(EXTI_CallBack[1] != NULL)
    1d7e:	80 91 86 00 	lds	r24, 0x0086
    1d82:	90 91 87 00 	lds	r25, 0x0087
    1d86:	00 97       	sbiw	r24, 0x00	; 0
    1d88:	41 f0       	breq	.+16     	; 0x1d9a <__vector_2+0x46>
		{
			EXTI_CallBack[1]();
    1d8a:	e0 91 86 00 	lds	r30, 0x0086
    1d8e:	f0 91 87 00 	lds	r31, 0x0087
    1d92:	09 95       	icall
			EXTI_VoidClearFlag( EXTI_LINE1 );
    1d94:	87 e0       	ldi	r24, 0x07	; 7
    1d96:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <EXTI_VoidClearFlag>
		}
	}
    1d9a:	cf 91       	pop	r28
    1d9c:	df 91       	pop	r29
    1d9e:	ff 91       	pop	r31
    1da0:	ef 91       	pop	r30
    1da2:	bf 91       	pop	r27
    1da4:	af 91       	pop	r26
    1da6:	9f 91       	pop	r25
    1da8:	8f 91       	pop	r24
    1daa:	7f 91       	pop	r23
    1dac:	6f 91       	pop	r22
    1dae:	5f 91       	pop	r21
    1db0:	4f 91       	pop	r20
    1db2:	3f 91       	pop	r19
    1db4:	2f 91       	pop	r18
    1db6:	0f 90       	pop	r0
    1db8:	0f be       	out	0x3f, r0	; 63
    1dba:	0f 90       	pop	r0
    1dbc:	1f 90       	pop	r1
    1dbe:	18 95       	reti

00001dc0 <__vector_3>:
	
	void __vector_3(void) __attribute__((signal));
	void __vector_3(void)
	{
    1dc0:	1f 92       	push	r1
    1dc2:	0f 92       	push	r0
    1dc4:	0f b6       	in	r0, 0x3f	; 63
    1dc6:	0f 92       	push	r0
    1dc8:	11 24       	eor	r1, r1
    1dca:	2f 93       	push	r18
    1dcc:	3f 93       	push	r19
    1dce:	4f 93       	push	r20
    1dd0:	5f 93       	push	r21
    1dd2:	6f 93       	push	r22
    1dd4:	7f 93       	push	r23
    1dd6:	8f 93       	push	r24
    1dd8:	9f 93       	push	r25
    1dda:	af 93       	push	r26
    1ddc:	bf 93       	push	r27
    1dde:	ef 93       	push	r30
    1de0:	ff 93       	push	r31
    1de2:	df 93       	push	r29
    1de4:	cf 93       	push	r28
    1de6:	cd b7       	in	r28, 0x3d	; 61
    1de8:	de b7       	in	r29, 0x3e	; 62

		if( EXTI_CallBack[2] != NULL ){
    1dea:	80 91 88 00 	lds	r24, 0x0088
    1dee:	90 91 89 00 	lds	r25, 0x0089
    1df2:	00 97       	sbiw	r24, 0x00	; 0
    1df4:	41 f0       	breq	.+16     	; 0x1e06 <__vector_3+0x46>

			EXTI_CallBack[2]();
    1df6:	e0 91 88 00 	lds	r30, 0x0088
    1dfa:	f0 91 89 00 	lds	r31, 0x0089
    1dfe:	09 95       	icall
			EXTI_VoidClearFlag( EXTI_LINE2 );
    1e00:	85 e0       	ldi	r24, 0x05	; 5
    1e02:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <EXTI_VoidClearFlag>

		}

	}
    1e06:	cf 91       	pop	r28
    1e08:	df 91       	pop	r29
    1e0a:	ff 91       	pop	r31
    1e0c:	ef 91       	pop	r30
    1e0e:	bf 91       	pop	r27
    1e10:	af 91       	pop	r26
    1e12:	9f 91       	pop	r25
    1e14:	8f 91       	pop	r24
    1e16:	7f 91       	pop	r23
    1e18:	6f 91       	pop	r22
    1e1a:	5f 91       	pop	r21
    1e1c:	4f 91       	pop	r20
    1e1e:	3f 91       	pop	r19
    1e20:	2f 91       	pop	r18
    1e22:	0f 90       	pop	r0
    1e24:	0f be       	out	0x3f, r0	; 63
    1e26:	0f 90       	pop	r0
    1e28:	1f 90       	pop	r1
    1e2a:	18 95       	reti

00001e2c <GIF_VoidEnable>:

#include "GIF_register.h"
#include "GIF_interface.h"

void GIF_VoidEnable (void)
{
    1e2c:	df 93       	push	r29
    1e2e:	cf 93       	push	r28
    1e30:	cd b7       	in	r28, 0x3d	; 61
    1e32:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    1e34:	af e5       	ldi	r26, 0x5F	; 95
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	ef e5       	ldi	r30, 0x5F	; 95
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	80 68       	ori	r24, 0x80	; 128
    1e40:	8c 93       	st	X, r24
}
    1e42:	cf 91       	pop	r28
    1e44:	df 91       	pop	r29
    1e46:	08 95       	ret

00001e48 <GIF_VoidDisable>:
void GIF_VoidDisable (void)
{
    1e48:	df 93       	push	r29
    1e4a:	cf 93       	push	r28
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    1e50:	af e5       	ldi	r26, 0x5F	; 95
    1e52:	b0 e0       	ldi	r27, 0x00	; 0
    1e54:	ef e5       	ldi	r30, 0x5F	; 95
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	8f 77       	andi	r24, 0x7F	; 127
    1e5c:	8c 93       	st	X, r24
    1e5e:	cf 91       	pop	r28
    1e60:	df 91       	pop	r29
    1e62:	08 95       	ret

00001e64 <LED_VoidInitialPin>:
#include "LED_interface.h"
#include "LED_private.h"
#include "LED_config.h"

void LED_VoidInitialPin ( LED_Type LED_Configuration )
{
    1e64:	df 93       	push	r29
    1e66:	cf 93       	push	r28
    1e68:	00 d0       	rcall	.+0      	; 0x1e6a <LED_VoidInitialPin+0x6>
    1e6a:	0f 92       	push	r0
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
    1e70:	69 83       	std	Y+1, r22	; 0x01
    1e72:	7a 83       	std	Y+2, r23	; 0x02
    1e74:	8b 83       	std	Y+3, r24	; 0x03
	DIO_eunmSetPinDirection ( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_OUTPUT );
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
    1e78:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7a:	69 2f       	mov	r22, r25
    1e7c:	41 e0       	ldi	r20, 0x01	; 1
    1e7e:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_eunmSetPinDirection>
}
    1e82:	0f 90       	pop	r0
    1e84:	0f 90       	pop	r0
    1e86:	0f 90       	pop	r0
    1e88:	cf 91       	pop	r28
    1e8a:	df 91       	pop	r29
    1e8c:	08 95       	ret

00001e8e <LED_VoidTurnOn>:
void LED_VoidTurnOn     ( LED_Type LED_Configuration )
{
    1e8e:	df 93       	push	r29
    1e90:	cf 93       	push	r28
    1e92:	00 d0       	rcall	.+0      	; 0x1e94 <LED_VoidTurnOn+0x6>
    1e94:	0f 92       	push	r0
    1e96:	cd b7       	in	r28, 0x3d	; 61
    1e98:	de b7       	in	r29, 0x3e	; 62
    1e9a:	69 83       	std	Y+1, r22	; 0x01
    1e9c:	7a 83       	std	Y+2, r23	; 0x02
    1e9e:	8b 83       	std	Y+3, r24	; 0x03
	if( LED_Configuration.Active_State == ACTIVE_HIGH )
    1ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea2:	81 30       	cpi	r24, 0x01	; 1
    1ea4:	39 f4       	brne	.+14     	; 0x1eb4 <LED_VoidTurnOn+0x26>
	{
		DIO_eunmSetPinValue   ( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_HIGH );
    1ea6:	89 81       	ldd	r24, Y+1	; 0x01
    1ea8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eaa:	69 2f       	mov	r22, r25
    1eac:	41 e0       	ldi	r20, 0x01	; 1
    1eae:	0e 94 b2 06 	call	0xd64	; 0xd64 <DIO_eunmSetPinValue>
    1eb2:	09 c0       	rjmp	.+18     	; 0x1ec6 <LED_VoidTurnOn+0x38>
	}
	else if ( LED_Configuration.Active_State == ACTIVE_LOW )
    1eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb6:	88 23       	and	r24, r24
    1eb8:	31 f4       	brne	.+12     	; 0x1ec6 <LED_VoidTurnOn+0x38>
	{
		DIO_eunmSetPinValue   ( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_LOW );
    1eba:	89 81       	ldd	r24, Y+1	; 0x01
    1ebc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ebe:	69 2f       	mov	r22, r25
    1ec0:	40 e0       	ldi	r20, 0x00	; 0
    1ec2:	0e 94 b2 06 	call	0xd64	; 0xd64 <DIO_eunmSetPinValue>
	}
}
    1ec6:	0f 90       	pop	r0
    1ec8:	0f 90       	pop	r0
    1eca:	0f 90       	pop	r0
    1ecc:	cf 91       	pop	r28
    1ece:	df 91       	pop	r29
    1ed0:	08 95       	ret

00001ed2 <LED_VoidTurnOff>:
void LED_VoidTurnOff    ( LED_Type LED_Configuration )
{
    1ed2:	df 93       	push	r29
    1ed4:	cf 93       	push	r28
    1ed6:	00 d0       	rcall	.+0      	; 0x1ed8 <LED_VoidTurnOff+0x6>
    1ed8:	0f 92       	push	r0
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
    1ede:	69 83       	std	Y+1, r22	; 0x01
    1ee0:	7a 83       	std	Y+2, r23	; 0x02
    1ee2:	8b 83       	std	Y+3, r24	; 0x03
	if( LED_Configuration.Active_State == ACTIVE_HIGH )
    1ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee6:	81 30       	cpi	r24, 0x01	; 1
    1ee8:	39 f4       	brne	.+14     	; 0x1ef8 <LED_VoidTurnOff+0x26>
	{
		DIO_eunmSetPinValue   ( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_LOW );
    1eea:	89 81       	ldd	r24, Y+1	; 0x01
    1eec:	9a 81       	ldd	r25, Y+2	; 0x02
    1eee:	69 2f       	mov	r22, r25
    1ef0:	40 e0       	ldi	r20, 0x00	; 0
    1ef2:	0e 94 b2 06 	call	0xd64	; 0xd64 <DIO_eunmSetPinValue>
    1ef6:	09 c0       	rjmp	.+18     	; 0x1f0a <LED_VoidTurnOff+0x38>
	}
	else if ( LED_Configuration.Active_State == ACTIVE_LOW )
    1ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    1efa:	88 23       	and	r24, r24
    1efc:	31 f4       	brne	.+12     	; 0x1f0a <LED_VoidTurnOff+0x38>
	{
		DIO_eunmSetPinValue   ( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_HIGH );
    1efe:	89 81       	ldd	r24, Y+1	; 0x01
    1f00:	9a 81       	ldd	r25, Y+2	; 0x02
    1f02:	69 2f       	mov	r22, r25
    1f04:	41 e0       	ldi	r20, 0x01	; 1
    1f06:	0e 94 b2 06 	call	0xd64	; 0xd64 <DIO_eunmSetPinValue>
	}
}
    1f0a:	0f 90       	pop	r0
    1f0c:	0f 90       	pop	r0
    1f0e:	0f 90       	pop	r0
    1f10:	cf 91       	pop	r28
    1f12:	df 91       	pop	r29
    1f14:	08 95       	ret

00001f16 <LED_VoidToggle>:
void LED_VoidToggle     ( LED_Type LED_Configuration )
{
    1f16:	df 93       	push	r29
    1f18:	cf 93       	push	r28
    1f1a:	00 d0       	rcall	.+0      	; 0x1f1c <LED_VoidToggle+0x6>
    1f1c:	0f 92       	push	r0
    1f1e:	cd b7       	in	r28, 0x3d	; 61
    1f20:	de b7       	in	r29, 0x3e	; 62
    1f22:	69 83       	std	Y+1, r22	; 0x01
    1f24:	7a 83       	std	Y+2, r23	; 0x02
    1f26:	8b 83       	std	Y+3, r24	; 0x03
	DIO_eunmTogglePin  (LED_Configuration.Port , LED_Configuration.Pin);
    1f28:	89 81       	ldd	r24, Y+1	; 0x01
    1f2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f2c:	69 2f       	mov	r22, r25
    1f2e:	0e 94 86 08 	call	0x110c	; 0x110c <DIO_eunmTogglePin>
}
    1f32:	0f 90       	pop	r0
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	cf 91       	pop	r28
    1f3a:	df 91       	pop	r29
    1f3c:	08 95       	ret

00001f3e <SSD_VoidIntialDataPin>:
#include "SSD_config.h"

static u8 Local_u8SSDNumbers[10] = SSD_NUMBER_ARR ;

void SSD_VoidIntialDataPin (SSD_Type COPY_StructConfig)
{
    1f3e:	df 93       	push	r29
    1f40:	cf 93       	push	r28
    1f42:	00 d0       	rcall	.+0      	; 0x1f44 <SSD_VoidIntialDataPin+0x6>
    1f44:	00 d0       	rcall	.+0      	; 0x1f46 <SSD_VoidIntialDataPin+0x8>
    1f46:	cd b7       	in	r28, 0x3d	; 61
    1f48:	de b7       	in	r29, 0x3e	; 62
    1f4a:	69 83       	std	Y+1, r22	; 0x01
    1f4c:	7a 83       	std	Y+2, r23	; 0x02
    1f4e:	8b 83       	std	Y+3, r24	; 0x03
    1f50:	9c 83       	std	Y+4, r25	; 0x04
	DIO_eunmSetPortDirection(COPY_StructConfig.DataPort,DIO_PORT_OUTPUT);
    1f52:	8a 81       	ldd	r24, Y+2	; 0x02
    1f54:	6f ef       	ldi	r22, 0xFF	; 255
    1f56:	0e 94 12 09 	call	0x1224	; 0x1224 <DIO_eunmSetPortDirection>
}
    1f5a:	0f 90       	pop	r0
    1f5c:	0f 90       	pop	r0
    1f5e:	0f 90       	pop	r0
    1f60:	0f 90       	pop	r0
    1f62:	cf 91       	pop	r28
    1f64:	df 91       	pop	r29
    1f66:	08 95       	ret

00001f68 <SSD_VoidEnable>:
void SSD_VoidEnable        (SSD_Type COPY_StructConfig)
{
    1f68:	df 93       	push	r29
    1f6a:	cf 93       	push	r28
    1f6c:	00 d0       	rcall	.+0      	; 0x1f6e <SSD_VoidEnable+0x6>
    1f6e:	00 d0       	rcall	.+0      	; 0x1f70 <SSD_VoidEnable+0x8>
    1f70:	cd b7       	in	r28, 0x3d	; 61
    1f72:	de b7       	in	r29, 0x3e	; 62
    1f74:	69 83       	std	Y+1, r22	; 0x01
    1f76:	7a 83       	std	Y+2, r23	; 0x02
    1f78:	8b 83       	std	Y+3, r24	; 0x03
    1f7a:	9c 83       	std	Y+4, r25	; 0x04
	if(COPY_StructConfig.Type == SSD_CommonCathod)
    1f7c:	89 81       	ldd	r24, Y+1	; 0x01
    1f7e:	88 23       	and	r24, r24
    1f80:	69 f4       	brne	.+26     	; 0x1f9c <SSD_VoidEnable+0x34>
	{
		 DIO_eunmSetPinDirection  (COPY_StructConfig.EnablePort , COPY_StructConfig.EnablePin , DIO_PIN_HIGH);
    1f82:	8b 81       	ldd	r24, Y+3	; 0x03
    1f84:	9c 81       	ldd	r25, Y+4	; 0x04
    1f86:	69 2f       	mov	r22, r25
    1f88:	41 e0       	ldi	r20, 0x01	; 1
    1f8a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_eunmSetPinDirection>
		 DIO_eunmSetPinValue (COPY_StructConfig.EnablePort,COPY_StructConfig.EnablePin,DIO_PIN_LOW);
    1f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f90:	9c 81       	ldd	r25, Y+4	; 0x04
    1f92:	69 2f       	mov	r22, r25
    1f94:	40 e0       	ldi	r20, 0x00	; 0
    1f96:	0e 94 b2 06 	call	0xd64	; 0xd64 <DIO_eunmSetPinValue>
    1f9a:	0f c0       	rjmp	.+30     	; 0x1fba <SSD_VoidEnable+0x52>
	}
	else if (COPY_StructConfig.Type == SSD_CommonAnode)
    1f9c:	89 81       	ldd	r24, Y+1	; 0x01
    1f9e:	81 30       	cpi	r24, 0x01	; 1
    1fa0:	61 f4       	brne	.+24     	; 0x1fba <SSD_VoidEnable+0x52>
	{
		DIO_eunmSetPinDirection  (COPY_StructConfig.EnablePort , COPY_StructConfig.EnablePin , DIO_PIN_HIGH);
    1fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa6:	69 2f       	mov	r22, r25
    1fa8:	41 e0       	ldi	r20, 0x01	; 1
    1faa:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_eunmSetPinDirection>
		 DIO_eunmSetPinValue (COPY_StructConfig.EnablePort,COPY_StructConfig.EnablePin,DIO_PIN_HIGH);
    1fae:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb2:	69 2f       	mov	r22, r25
    1fb4:	41 e0       	ldi	r20, 0x01	; 1
    1fb6:	0e 94 b2 06 	call	0xd64	; 0xd64 <DIO_eunmSetPinValue>
	}
}
    1fba:	0f 90       	pop	r0
    1fbc:	0f 90       	pop	r0
    1fbe:	0f 90       	pop	r0
    1fc0:	0f 90       	pop	r0
    1fc2:	cf 91       	pop	r28
    1fc4:	df 91       	pop	r29
    1fc6:	08 95       	ret

00001fc8 <SSD_VoidDisable>:
void SSD_VoidDisable       (SSD_Type COPY_StructConfig)
{
    1fc8:	df 93       	push	r29
    1fca:	cf 93       	push	r28
    1fcc:	00 d0       	rcall	.+0      	; 0x1fce <SSD_VoidDisable+0x6>
    1fce:	00 d0       	rcall	.+0      	; 0x1fd0 <SSD_VoidDisable+0x8>
    1fd0:	cd b7       	in	r28, 0x3d	; 61
    1fd2:	de b7       	in	r29, 0x3e	; 62
    1fd4:	69 83       	std	Y+1, r22	; 0x01
    1fd6:	7a 83       	std	Y+2, r23	; 0x02
    1fd8:	8b 83       	std	Y+3, r24	; 0x03
    1fda:	9c 83       	std	Y+4, r25	; 0x04
	if(COPY_StructConfig.Type == SSD_CommonCathod)
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	88 23       	and	r24, r24
    1fe0:	69 f4       	brne	.+26     	; 0x1ffc <SSD_VoidDisable+0x34>
	{
		 DIO_eunmSetPinDirection  (COPY_StructConfig.EnablePort , COPY_StructConfig.EnablePin , DIO_PIN_HIGH);
    1fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe6:	69 2f       	mov	r22, r25
    1fe8:	41 e0       	ldi	r20, 0x01	; 1
    1fea:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_eunmSetPinDirection>
		 DIO_eunmSetPinValue (COPY_StructConfig.EnablePort,COPY_StructConfig.EnablePin,DIO_PIN_HIGH);
    1fee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff2:	69 2f       	mov	r22, r25
    1ff4:	41 e0       	ldi	r20, 0x01	; 1
    1ff6:	0e 94 b2 06 	call	0xd64	; 0xd64 <DIO_eunmSetPinValue>
    1ffa:	0f c0       	rjmp	.+30     	; 0x201a <SSD_VoidDisable+0x52>
	}
	else if (COPY_StructConfig.Type == SSD_CommonAnode)
    1ffc:	89 81       	ldd	r24, Y+1	; 0x01
    1ffe:	81 30       	cpi	r24, 0x01	; 1
    2000:	61 f4       	brne	.+24     	; 0x201a <SSD_VoidDisable+0x52>
	{
		DIO_eunmSetPinDirection  (COPY_StructConfig.EnablePort , COPY_StructConfig.EnablePin , DIO_PIN_HIGH);
    2002:	8b 81       	ldd	r24, Y+3	; 0x03
    2004:	9c 81       	ldd	r25, Y+4	; 0x04
    2006:	69 2f       	mov	r22, r25
    2008:	41 e0       	ldi	r20, 0x01	; 1
    200a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_eunmSetPinDirection>
		 DIO_eunmSetPinValue (COPY_StructConfig.EnablePort,COPY_StructConfig.EnablePin,DIO_PIN_LOW);
    200e:	8b 81       	ldd	r24, Y+3	; 0x03
    2010:	9c 81       	ldd	r25, Y+4	; 0x04
    2012:	69 2f       	mov	r22, r25
    2014:	40 e0       	ldi	r20, 0x00	; 0
    2016:	0e 94 b2 06 	call	0xd64	; 0xd64 <DIO_eunmSetPinValue>
	}
}
    201a:	0f 90       	pop	r0
    201c:	0f 90       	pop	r0
    201e:	0f 90       	pop	r0
    2020:	0f 90       	pop	r0
    2022:	cf 91       	pop	r28
    2024:	df 91       	pop	r29
    2026:	08 95       	ret

00002028 <SSD_VoidSendNumber>:
void SSD_VoidSendNumber    (SSD_Type COPY_StructConfig, u8 COPY_u8Number)
{
    2028:	df 93       	push	r29
    202a:	cf 93       	push	r28
    202c:	00 d0       	rcall	.+0      	; 0x202e <SSD_VoidSendNumber+0x6>
    202e:	00 d0       	rcall	.+0      	; 0x2030 <SSD_VoidSendNumber+0x8>
    2030:	0f 92       	push	r0
    2032:	cd b7       	in	r28, 0x3d	; 61
    2034:	de b7       	in	r29, 0x3e	; 62
    2036:	69 83       	std	Y+1, r22	; 0x01
    2038:	7a 83       	std	Y+2, r23	; 0x02
    203a:	8b 83       	std	Y+3, r24	; 0x03
    203c:	9c 83       	std	Y+4, r25	; 0x04
    203e:	4d 83       	std	Y+5, r20	; 0x05
	if(COPY_StructConfig.Type == SSD_CommonCathod)
    2040:	89 81       	ldd	r24, Y+1	; 0x01
    2042:	88 23       	and	r24, r24
    2044:	69 f4       	brne	.+26     	; 0x2060 <SSD_VoidSendNumber+0x38>
	{
		DIO_eunmSetPortValue        (COPY_StructConfig.DataPort , Local_u8SSDNumbers[ COPY_u8Number ]);
    2046:	2a 81       	ldd	r18, Y+2	; 0x02
    2048:	8d 81       	ldd	r24, Y+5	; 0x05
    204a:	88 2f       	mov	r24, r24
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	fc 01       	movw	r30, r24
    2050:	e8 59       	subi	r30, 0x98	; 152
    2052:	ff 4f       	sbci	r31, 0xFF	; 255
    2054:	90 81       	ld	r25, Z
    2056:	82 2f       	mov	r24, r18
    2058:	69 2f       	mov	r22, r25
    205a:	0e 94 5d 09 	call	0x12ba	; 0x12ba <DIO_eunmSetPortValue>
    205e:	11 c0       	rjmp	.+34     	; 0x2082 <SSD_VoidSendNumber+0x5a>
	}
	else if (COPY_StructConfig.Type == SSD_CommonAnode)
    2060:	89 81       	ldd	r24, Y+1	; 0x01
    2062:	81 30       	cpi	r24, 0x01	; 1
    2064:	71 f4       	brne	.+28     	; 0x2082 <SSD_VoidSendNumber+0x5a>
	{
		 DIO_eunmSetPortValue        (COPY_StructConfig.DataPort , ~(Local_u8SSDNumbers[ COPY_u8Number ]));
    2066:	2a 81       	ldd	r18, Y+2	; 0x02
    2068:	8d 81       	ldd	r24, Y+5	; 0x05
    206a:	88 2f       	mov	r24, r24
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	fc 01       	movw	r30, r24
    2070:	e8 59       	subi	r30, 0x98	; 152
    2072:	ff 4f       	sbci	r31, 0xFF	; 255
    2074:	80 81       	ld	r24, Z
    2076:	98 2f       	mov	r25, r24
    2078:	90 95       	com	r25
    207a:	82 2f       	mov	r24, r18
    207c:	69 2f       	mov	r22, r25
    207e:	0e 94 5d 09 	call	0x12ba	; 0x12ba <DIO_eunmSetPortValue>
	}
	
}
    2082:	0f 90       	pop	r0
    2084:	0f 90       	pop	r0
    2086:	0f 90       	pop	r0
    2088:	0f 90       	pop	r0
    208a:	0f 90       	pop	r0
    208c:	cf 91       	pop	r28
    208e:	df 91       	pop	r29
    2090:	08 95       	ret

00002092 <SW_VoidInital>:
#include "SW_private.h"
#include "SW_interface.h"


void SW_VoidInital (SW_Type SW_Config)
{
    2092:	df 93       	push	r29
    2094:	cf 93       	push	r28
    2096:	00 d0       	rcall	.+0      	; 0x2098 <SW_VoidInital+0x6>
    2098:	0f 92       	push	r0
    209a:	cd b7       	in	r28, 0x3d	; 61
    209c:	de b7       	in	r29, 0x3e	; 62
    209e:	69 83       	std	Y+1, r22	; 0x01
    20a0:	7a 83       	std	Y+2, r23	; 0x02
    20a2:	8b 83       	std	Y+3, r24	; 0x03
	DIO_eunmSetPinDirection     (SW_Config.Port ,SW_Config.Pin ,DIO_PIN_INPUT );
    20a4:	89 81       	ldd	r24, Y+1	; 0x01
    20a6:	9a 81       	ldd	r25, Y+2	; 0x02
    20a8:	69 2f       	mov	r22, r25
    20aa:	40 e0       	ldi	r20, 0x00	; 0
    20ac:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_eunmSetPinDirection>
	
	if(SW_Config.Pull_State == SW_INT_PULL_UP)
    20b0:	8b 81       	ldd	r24, Y+3	; 0x03
    20b2:	88 23       	and	r24, r24
    20b4:	31 f4       	brne	.+12     	; 0x20c2 <SW_VoidInital+0x30>
	{
		DIO_eunmSetPinInterPullUp     (SW_Config.Port ,SW_Config.Pin ,DIO_PIN_HIGH);
    20b6:	89 81       	ldd	r24, Y+1	; 0x01
    20b8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ba:	69 2f       	mov	r22, r25
    20bc:	41 e0       	ldi	r20, 0x01	; 1
    20be:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <DIO_eunmSetPinInterPullUp>
	}
	
}
    20c2:	0f 90       	pop	r0
    20c4:	0f 90       	pop	r0
    20c6:	0f 90       	pop	r0
    20c8:	cf 91       	pop	r28
    20ca:	df 91       	pop	r29
    20cc:	08 95       	ret

000020ce <SW_u8GetPressed>:
u8 SW_u8GetPressed (SW_Type SW_Config)
{
    20ce:	df 93       	push	r29
    20d0:	cf 93       	push	r28
    20d2:	00 d0       	rcall	.+0      	; 0x20d4 <SW_u8GetPressed+0x6>
    20d4:	00 d0       	rcall	.+0      	; 0x20d6 <SW_u8GetPressed+0x8>
    20d6:	0f 92       	push	r0
    20d8:	cd b7       	in	r28, 0x3d	; 61
    20da:	de b7       	in	r29, 0x3e	; 62
    20dc:	6b 83       	std	Y+3, r22	; 0x03
    20de:	7c 83       	std	Y+4, r23	; 0x04
    20e0:	8d 83       	std	Y+5, r24	; 0x05
	u8 LOC_u8Result = SW_NOT_PRESSED;
    20e2:	19 82       	std	Y+1, r1	; 0x01
	u8 LOC_u8PinVal = SW_NOT_PRESSED;
    20e4:	1a 82       	std	Y+2, r1	; 0x02
	
	if(SW_Config.Pull_State == SW_INT_PULL_UP || SW_Config.Pull_State == SW_EXT_PULL_UP )
    20e6:	8d 81       	ldd	r24, Y+5	; 0x05
    20e8:	88 23       	and	r24, r24
    20ea:	19 f0       	breq	.+6      	; 0x20f2 <SW_u8GetPressed+0x24>
    20ec:	8d 81       	ldd	r24, Y+5	; 0x05
    20ee:	81 30       	cpi	r24, 0x01	; 1
    20f0:	a1 f4       	brne	.+40     	; 0x211a <SW_u8GetPressed+0x4c>
	{
		DIO_eunmGetPin (SW_Config.Port ,SW_Config.Pin ,&LOC_u8PinVal);
    20f2:	8b 81       	ldd	r24, Y+3	; 0x03
    20f4:	9c 81       	ldd	r25, Y+4	; 0x04
    20f6:	9e 01       	movw	r18, r28
    20f8:	2e 5f       	subi	r18, 0xFE	; 254
    20fa:	3f 4f       	sbci	r19, 0xFF	; 255
    20fc:	69 2f       	mov	r22, r25
    20fe:	a9 01       	movw	r20, r18
    2100:	0e 94 c1 07 	call	0xf82	; 0xf82 <DIO_eunmGetPin>
		if(LOC_u8PinVal==0)
    2104:	8a 81       	ldd	r24, Y+2	; 0x02
    2106:	88 23       	and	r24, r24
    2108:	19 f4       	brne	.+6      	; 0x2110 <SW_u8GetPressed+0x42>
		{
			LOC_u8Result = SW_PRESSED;
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	89 83       	std	Y+1, r24	; 0x01
    210e:	1b c0       	rjmp	.+54     	; 0x2146 <SW_u8GetPressed+0x78>
		}
		else if(LOC_u8PinVal==1)
    2110:	8a 81       	ldd	r24, Y+2	; 0x02
    2112:	81 30       	cpi	r24, 0x01	; 1
    2114:	c1 f4       	brne	.+48     	; 0x2146 <SW_u8GetPressed+0x78>
		{
			LOC_u8Result = SW_NOT_PRESSED;
    2116:	19 82       	std	Y+1, r1	; 0x01
    2118:	16 c0       	rjmp	.+44     	; 0x2146 <SW_u8GetPressed+0x78>
		}
		
		
	}
	else if(SW_Config.Pull_State == SW_EXT_PULL_DOWN )
    211a:	8d 81       	ldd	r24, Y+5	; 0x05
    211c:	82 30       	cpi	r24, 0x02	; 2
    211e:	99 f4       	brne	.+38     	; 0x2146 <SW_u8GetPressed+0x78>
	{
		DIO_eunmGetPin (SW_Config.Port ,SW_Config.Pin ,&LOC_u8PinVal);
    2120:	8b 81       	ldd	r24, Y+3	; 0x03
    2122:	9c 81       	ldd	r25, Y+4	; 0x04
    2124:	9e 01       	movw	r18, r28
    2126:	2e 5f       	subi	r18, 0xFE	; 254
    2128:	3f 4f       	sbci	r19, 0xFF	; 255
    212a:	69 2f       	mov	r22, r25
    212c:	a9 01       	movw	r20, r18
    212e:	0e 94 c1 07 	call	0xf82	; 0xf82 <DIO_eunmGetPin>
		if(LOC_u8PinVal==0)
    2132:	8a 81       	ldd	r24, Y+2	; 0x02
    2134:	88 23       	and	r24, r24
    2136:	11 f4       	brne	.+4      	; 0x213c <SW_u8GetPressed+0x6e>
		{
			LOC_u8Result = SW_NOT_PRESSED;
    2138:	19 82       	std	Y+1, r1	; 0x01
    213a:	05 c0       	rjmp	.+10     	; 0x2146 <SW_u8GetPressed+0x78>
		}
		else if(LOC_u8PinVal==1)
    213c:	8a 81       	ldd	r24, Y+2	; 0x02
    213e:	81 30       	cpi	r24, 0x01	; 1
    2140:	11 f4       	brne	.+4      	; 0x2146 <SW_u8GetPressed+0x78>
		{
			LOC_u8Result = SW_PRESSED;
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	89 83       	std	Y+1, r24	; 0x01
		}
		
		
	}
	return LOC_u8Result;
    2146:	89 81       	ldd	r24, Y+1	; 0x01
}
    2148:	0f 90       	pop	r0
    214a:	0f 90       	pop	r0
    214c:	0f 90       	pop	r0
    214e:	0f 90       	pop	r0
    2150:	0f 90       	pop	r0
    2152:	cf 91       	pop	r28
    2154:	df 91       	pop	r29
    2156:	08 95       	ret

00002158 <APP_INIT>:
SW_Type b1 ={SW_PORTD,SW_PIN2,SW_EXT_PULL_DOWN};
SSD_Type ssd1={SSD_CommonCathod,SSD_PORTC,SSD_PORTD,SSD_PIN0};


void APP_INIT(void)
{
    2158:	df 93       	push	r29
    215a:	cf 93       	push	r28
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62

	LED_VoidInitialPin(red);
    2160:	60 91 73 00 	lds	r22, 0x0073
    2164:	70 91 74 00 	lds	r23, 0x0074
    2168:	80 91 75 00 	lds	r24, 0x0075
    216c:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <LED_VoidInitialPin>
	LED_VoidInitialPin(yellow);
    2170:	60 91 76 00 	lds	r22, 0x0076
    2174:	70 91 77 00 	lds	r23, 0x0077
    2178:	80 91 78 00 	lds	r24, 0x0078
    217c:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <LED_VoidInitialPin>
	LED_VoidInitialPin(green);
    2180:	60 91 79 00 	lds	r22, 0x0079
    2184:	70 91 7a 00 	lds	r23, 0x007A
    2188:	80 91 7b 00 	lds	r24, 0x007B
    218c:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <LED_VoidInitialPin>
	SW_VoidInital(b1);
    2190:	60 91 7c 00 	lds	r22, 0x007C
    2194:	70 91 7d 00 	lds	r23, 0x007D
    2198:	80 91 7e 00 	lds	r24, 0x007E
    219c:	0e 94 49 10 	call	0x2092	; 0x2092 <SW_VoidInital>
	SSD_VoidIntialDataPin(ssd1);
    21a0:	80 91 7f 00 	lds	r24, 0x007F
    21a4:	90 91 80 00 	lds	r25, 0x0080
    21a8:	a0 91 81 00 	lds	r26, 0x0081
    21ac:	b0 91 82 00 	lds	r27, 0x0082
    21b0:	bc 01       	movw	r22, r24
    21b2:	cd 01       	movw	r24, r26
    21b4:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <SSD_VoidIntialDataPin>
	EXTI_VoidInit();
    21b8:	0e 94 a2 0c 	call	0x1944	; 0x1944 <EXTI_VoidInit>
	EXTI_VoidEnable(EXTI_LINE0);
    21bc:	86 e0       	ldi	r24, 0x06	; 6
    21be:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <EXTI_VoidEnable>
	GIF_VoidEnable();
    21c2:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <GIF_VoidEnable>
	SSD_VoidEnable(ssd1);
    21c6:	80 91 7f 00 	lds	r24, 0x007F
    21ca:	90 91 80 00 	lds	r25, 0x0080
    21ce:	a0 91 81 00 	lds	r26, 0x0081
    21d2:	b0 91 82 00 	lds	r27, 0x0082
    21d6:	bc 01       	movw	r22, r24
    21d8:	cd 01       	movw	r24, r26
    21da:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <SSD_VoidEnable>


}
    21de:	cf 91       	pop	r28
    21e0:	df 91       	pop	r29
    21e2:	08 95       	ret

000021e4 <Stop>:
void Stop (void)
{
    21e4:	df 93       	push	r29
    21e6:	cf 93       	push	r28
    21e8:	cd b7       	in	r28, 0x3d	; 61
    21ea:	de b7       	in	r29, 0x3e	; 62
    21ec:	6e 97       	sbiw	r28, 0x1e	; 30
    21ee:	0f b6       	in	r0, 0x3f	; 63
    21f0:	f8 94       	cli
    21f2:	de bf       	out	0x3e, r29	; 62
    21f4:	0f be       	out	0x3f, r0	; 63
    21f6:	cd bf       	out	0x3d, r28	; 61
	LED_VoidTurnOff(red);
    21f8:	60 91 73 00 	lds	r22, 0x0073
    21fc:	70 91 74 00 	lds	r23, 0x0074
    2200:	80 91 75 00 	lds	r24, 0x0075
    2204:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <LED_VoidTurnOff>
	LED_VoidTurnOn(yellow);
    2208:	60 91 76 00 	lds	r22, 0x0076
    220c:	70 91 77 00 	lds	r23, 0x0077
    2210:	80 91 78 00 	lds	r24, 0x0078
    2214:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LED_VoidTurnOn>
	for(s8 i=5;i>=0;i--)
    2218:	85 e0       	ldi	r24, 0x05	; 5
    221a:	8e 8f       	std	Y+30, r24	; 0x1e
    221c:	83 c0       	rjmp	.+262    	; 0x2324 <Stop+0x140>
	{
		SSD_VoidSendNumber(ssd1,i);
    221e:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2220:	80 91 7f 00 	lds	r24, 0x007F
    2224:	90 91 80 00 	lds	r25, 0x0080
    2228:	a0 91 81 00 	lds	r26, 0x0081
    222c:	b0 91 82 00 	lds	r27, 0x0082
    2230:	bc 01       	movw	r22, r24
    2232:	cd 01       	movw	r24, r26
    2234:	42 2f       	mov	r20, r18
    2236:	0e 94 14 10 	call	0x2028	; 0x2028 <SSD_VoidSendNumber>
    223a:	80 e0       	ldi	r24, 0x00	; 0
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	aa e7       	ldi	r26, 0x7A	; 122
    2240:	b4 e4       	ldi	r27, 0x44	; 68
    2242:	89 8f       	std	Y+25, r24	; 0x19
    2244:	9a 8f       	std	Y+26, r25	; 0x1a
    2246:	ab 8f       	std	Y+27, r26	; 0x1b
    2248:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    224a:	69 8d       	ldd	r22, Y+25	; 0x19
    224c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    224e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2250:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	4a ef       	ldi	r20, 0xFA	; 250
    2258:	54 e4       	ldi	r21, 0x44	; 68
    225a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	8d 8b       	std	Y+21, r24	; 0x15
    2264:	9e 8b       	std	Y+22, r25	; 0x16
    2266:	af 8b       	std	Y+23, r26	; 0x17
    2268:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    226a:	6d 89       	ldd	r22, Y+21	; 0x15
    226c:	7e 89       	ldd	r23, Y+22	; 0x16
    226e:	8f 89       	ldd	r24, Y+23	; 0x17
    2270:	98 8d       	ldd	r25, Y+24	; 0x18
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	40 e8       	ldi	r20, 0x80	; 128
    2278:	5f e3       	ldi	r21, 0x3F	; 63
    227a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    227e:	88 23       	and	r24, r24
    2280:	2c f4       	brge	.+10     	; 0x228c <Stop+0xa8>
		__ticks = 1;
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	9c 8b       	std	Y+20, r25	; 0x14
    2288:	8b 8b       	std	Y+19, r24	; 0x13
    228a:	3f c0       	rjmp	.+126    	; 0x230a <Stop+0x126>
	else if (__tmp > 65535)
    228c:	6d 89       	ldd	r22, Y+21	; 0x15
    228e:	7e 89       	ldd	r23, Y+22	; 0x16
    2290:	8f 89       	ldd	r24, Y+23	; 0x17
    2292:	98 8d       	ldd	r25, Y+24	; 0x18
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	3f ef       	ldi	r19, 0xFF	; 255
    2298:	4f e7       	ldi	r20, 0x7F	; 127
    229a:	57 e4       	ldi	r21, 0x47	; 71
    229c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22a0:	18 16       	cp	r1, r24
    22a2:	4c f5       	brge	.+82     	; 0x22f6 <Stop+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a4:	69 8d       	ldd	r22, Y+25	; 0x19
    22a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	40 e2       	ldi	r20, 0x20	; 32
    22b2:	51 e4       	ldi	r21, 0x41	; 65
    22b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	bc 01       	movw	r22, r24
    22be:	cd 01       	movw	r24, r26
    22c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c4:	dc 01       	movw	r26, r24
    22c6:	cb 01       	movw	r24, r22
    22c8:	9c 8b       	std	Y+20, r25	; 0x14
    22ca:	8b 8b       	std	Y+19, r24	; 0x13
    22cc:	0f c0       	rjmp	.+30     	; 0x22ec <Stop+0x108>
    22ce:	88 ec       	ldi	r24, 0xC8	; 200
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	9a 8b       	std	Y+18, r25	; 0x12
    22d4:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22d6:	89 89       	ldd	r24, Y+17	; 0x11
    22d8:	9a 89       	ldd	r25, Y+18	; 0x12
    22da:	01 97       	sbiw	r24, 0x01	; 1
    22dc:	f1 f7       	brne	.-4      	; 0x22da <Stop+0xf6>
    22de:	9a 8b       	std	Y+18, r25	; 0x12
    22e0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e2:	8b 89       	ldd	r24, Y+19	; 0x13
    22e4:	9c 89       	ldd	r25, Y+20	; 0x14
    22e6:	01 97       	sbiw	r24, 0x01	; 1
    22e8:	9c 8b       	std	Y+20, r25	; 0x14
    22ea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ec:	8b 89       	ldd	r24, Y+19	; 0x13
    22ee:	9c 89       	ldd	r25, Y+20	; 0x14
    22f0:	00 97       	sbiw	r24, 0x00	; 0
    22f2:	69 f7       	brne	.-38     	; 0x22ce <Stop+0xea>
    22f4:	14 c0       	rjmp	.+40     	; 0x231e <Stop+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f6:	6d 89       	ldd	r22, Y+21	; 0x15
    22f8:	7e 89       	ldd	r23, Y+22	; 0x16
    22fa:	8f 89       	ldd	r24, Y+23	; 0x17
    22fc:	98 8d       	ldd	r25, Y+24	; 0x18
    22fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2302:	dc 01       	movw	r26, r24
    2304:	cb 01       	movw	r24, r22
    2306:	9c 8b       	std	Y+20, r25	; 0x14
    2308:	8b 8b       	std	Y+19, r24	; 0x13
    230a:	8b 89       	ldd	r24, Y+19	; 0x13
    230c:	9c 89       	ldd	r25, Y+20	; 0x14
    230e:	98 8b       	std	Y+16, r25	; 0x10
    2310:	8f 87       	std	Y+15, r24	; 0x0f
    2312:	8f 85       	ldd	r24, Y+15	; 0x0f
    2314:	98 89       	ldd	r25, Y+16	; 0x10
    2316:	01 97       	sbiw	r24, 0x01	; 1
    2318:	f1 f7       	brne	.-4      	; 0x2316 <Stop+0x132>
    231a:	98 8b       	std	Y+16, r25	; 0x10
    231c:	8f 87       	std	Y+15, r24	; 0x0f
}
void Stop (void)
{
	LED_VoidTurnOff(red);
	LED_VoidTurnOn(yellow);
	for(s8 i=5;i>=0;i--)
    231e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2320:	81 50       	subi	r24, 0x01	; 1
    2322:	8e 8f       	std	Y+30, r24	; 0x1e
    2324:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2326:	88 23       	and	r24, r24
    2328:	0c f0       	brlt	.+2      	; 0x232c <Stop+0x148>
    232a:	79 cf       	rjmp	.-270    	; 0x221e <Stop+0x3a>
	{
		SSD_VoidSendNumber(ssd1,i);
		_delay_ms(1000);
	}
	LED_VoidTurnOff(yellow);
    232c:	60 91 76 00 	lds	r22, 0x0076
    2330:	70 91 77 00 	lds	r23, 0x0077
    2334:	80 91 78 00 	lds	r24, 0x0078
    2338:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <LED_VoidTurnOff>
	LED_VoidTurnOn(green);
    233c:	60 91 79 00 	lds	r22, 0x0079
    2340:	70 91 7a 00 	lds	r23, 0x007A
    2344:	80 91 7b 00 	lds	r24, 0x007B
    2348:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LED_VoidTurnOn>
	for(s8 i=9;i>=0;i--)
    234c:	89 e0       	ldi	r24, 0x09	; 9
    234e:	8d 8f       	std	Y+29, r24	; 0x1d
    2350:	83 c0       	rjmp	.+262    	; 0x2458 <Stop+0x274>
	{
		SSD_VoidSendNumber(ssd1,i);
    2352:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2354:	80 91 7f 00 	lds	r24, 0x007F
    2358:	90 91 80 00 	lds	r25, 0x0080
    235c:	a0 91 81 00 	lds	r26, 0x0081
    2360:	b0 91 82 00 	lds	r27, 0x0082
    2364:	bc 01       	movw	r22, r24
    2366:	cd 01       	movw	r24, r26
    2368:	42 2f       	mov	r20, r18
    236a:	0e 94 14 10 	call	0x2028	; 0x2028 <SSD_VoidSendNumber>
    236e:	80 e0       	ldi	r24, 0x00	; 0
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	aa e7       	ldi	r26, 0x7A	; 122
    2374:	b4 e4       	ldi	r27, 0x44	; 68
    2376:	8b 87       	std	Y+11, r24	; 0x0b
    2378:	9c 87       	std	Y+12, r25	; 0x0c
    237a:	ad 87       	std	Y+13, r26	; 0x0d
    237c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    237e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2380:	7c 85       	ldd	r23, Y+12	; 0x0c
    2382:	8d 85       	ldd	r24, Y+13	; 0x0d
    2384:	9e 85       	ldd	r25, Y+14	; 0x0e
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	4a ef       	ldi	r20, 0xFA	; 250
    238c:	54 e4       	ldi	r21, 0x44	; 68
    238e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	8f 83       	std	Y+7, r24	; 0x07
    2398:	98 87       	std	Y+8, r25	; 0x08
    239a:	a9 87       	std	Y+9, r26	; 0x09
    239c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    239e:	6f 81       	ldd	r22, Y+7	; 0x07
    23a0:	78 85       	ldd	r23, Y+8	; 0x08
    23a2:	89 85       	ldd	r24, Y+9	; 0x09
    23a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	40 e8       	ldi	r20, 0x80	; 128
    23ac:	5f e3       	ldi	r21, 0x3F	; 63
    23ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23b2:	88 23       	and	r24, r24
    23b4:	2c f4       	brge	.+10     	; 0x23c0 <Stop+0x1dc>
		__ticks = 1;
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	9e 83       	std	Y+6, r25	; 0x06
    23bc:	8d 83       	std	Y+5, r24	; 0x05
    23be:	3f c0       	rjmp	.+126    	; 0x243e <Stop+0x25a>
	else if (__tmp > 65535)
    23c0:	6f 81       	ldd	r22, Y+7	; 0x07
    23c2:	78 85       	ldd	r23, Y+8	; 0x08
    23c4:	89 85       	ldd	r24, Y+9	; 0x09
    23c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	3f ef       	ldi	r19, 0xFF	; 255
    23cc:	4f e7       	ldi	r20, 0x7F	; 127
    23ce:	57 e4       	ldi	r21, 0x47	; 71
    23d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23d4:	18 16       	cp	r1, r24
    23d6:	4c f5       	brge	.+82     	; 0x242a <Stop+0x246>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23da:	7c 85       	ldd	r23, Y+12	; 0x0c
    23dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    23de:	9e 85       	ldd	r25, Y+14	; 0x0e
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	40 e2       	ldi	r20, 0x20	; 32
    23e6:	51 e4       	ldi	r21, 0x41	; 65
    23e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	bc 01       	movw	r22, r24
    23f2:	cd 01       	movw	r24, r26
    23f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f8:	dc 01       	movw	r26, r24
    23fa:	cb 01       	movw	r24, r22
    23fc:	9e 83       	std	Y+6, r25	; 0x06
    23fe:	8d 83       	std	Y+5, r24	; 0x05
    2400:	0f c0       	rjmp	.+30     	; 0x2420 <Stop+0x23c>
    2402:	88 ec       	ldi	r24, 0xC8	; 200
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	9c 83       	std	Y+4, r25	; 0x04
    2408:	8b 83       	std	Y+3, r24	; 0x03
    240a:	8b 81       	ldd	r24, Y+3	; 0x03
    240c:	9c 81       	ldd	r25, Y+4	; 0x04
    240e:	01 97       	sbiw	r24, 0x01	; 1
    2410:	f1 f7       	brne	.-4      	; 0x240e <Stop+0x22a>
    2412:	9c 83       	std	Y+4, r25	; 0x04
    2414:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2416:	8d 81       	ldd	r24, Y+5	; 0x05
    2418:	9e 81       	ldd	r25, Y+6	; 0x06
    241a:	01 97       	sbiw	r24, 0x01	; 1
    241c:	9e 83       	std	Y+6, r25	; 0x06
    241e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2420:	8d 81       	ldd	r24, Y+5	; 0x05
    2422:	9e 81       	ldd	r25, Y+6	; 0x06
    2424:	00 97       	sbiw	r24, 0x00	; 0
    2426:	69 f7       	brne	.-38     	; 0x2402 <Stop+0x21e>
    2428:	14 c0       	rjmp	.+40     	; 0x2452 <Stop+0x26e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    242a:	6f 81       	ldd	r22, Y+7	; 0x07
    242c:	78 85       	ldd	r23, Y+8	; 0x08
    242e:	89 85       	ldd	r24, Y+9	; 0x09
    2430:	9a 85       	ldd	r25, Y+10	; 0x0a
    2432:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	9e 83       	std	Y+6, r25	; 0x06
    243c:	8d 83       	std	Y+5, r24	; 0x05
    243e:	8d 81       	ldd	r24, Y+5	; 0x05
    2440:	9e 81       	ldd	r25, Y+6	; 0x06
    2442:	9a 83       	std	Y+2, r25	; 0x02
    2444:	89 83       	std	Y+1, r24	; 0x01
    2446:	89 81       	ldd	r24, Y+1	; 0x01
    2448:	9a 81       	ldd	r25, Y+2	; 0x02
    244a:	01 97       	sbiw	r24, 0x01	; 1
    244c:	f1 f7       	brne	.-4      	; 0x244a <Stop+0x266>
    244e:	9a 83       	std	Y+2, r25	; 0x02
    2450:	89 83       	std	Y+1, r24	; 0x01
		SSD_VoidSendNumber(ssd1,i);
		_delay_ms(1000);
	}
	LED_VoidTurnOff(yellow);
	LED_VoidTurnOn(green);
	for(s8 i=9;i>=0;i--)
    2452:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2454:	81 50       	subi	r24, 0x01	; 1
    2456:	8d 8f       	std	Y+29, r24	; 0x1d
    2458:	8d 8d       	ldd	r24, Y+29	; 0x1d
    245a:	88 23       	and	r24, r24
    245c:	0c f0       	brlt	.+2      	; 0x2460 <Stop+0x27c>
    245e:	79 cf       	rjmp	.-270    	; 0x2352 <Stop+0x16e>
	{
		SSD_VoidSendNumber(ssd1,i);
		_delay_ms(1000);
	}
}
    2460:	6e 96       	adiw	r28, 0x1e	; 30
    2462:	0f b6       	in	r0, 0x3f	; 63
    2464:	f8 94       	cli
    2466:	de bf       	out	0x3e, r29	; 62
    2468:	0f be       	out	0x3f, r0	; 63
    246a:	cd bf       	out	0x3d, r28	; 61
    246c:	cf 91       	pop	r28
    246e:	df 91       	pop	r29
    2470:	08 95       	ret

00002472 <main>:

int main (void)
{
    2472:	df 93       	push	r29
    2474:	cf 93       	push	r28
    2476:	cd b7       	in	r28, 0x3d	; 61
    2478:	de b7       	in	r29, 0x3e	; 62
    247a:	2e 97       	sbiw	r28, 0x0e	; 14
    247c:	0f b6       	in	r0, 0x3f	; 63
    247e:	f8 94       	cli
    2480:	de bf       	out	0x3e, r29	; 62
    2482:	0f be       	out	0x3f, r0	; 63
    2484:	cd bf       	out	0x3d, r28	; 61
	APP_INIT();
    2486:	0e 94 ac 10 	call	0x2158	; 0x2158 <APP_INIT>
	EXTI_VoidSetCallBack(Stop,0);
    248a:	82 ef       	ldi	r24, 0xF2	; 242
    248c:	90 e1       	ldi	r25, 0x10	; 16
    248e:	60 e0       	ldi	r22, 0x00	; 0
    2490:	0e 94 55 0e 	call	0x1caa	; 0x1caa <EXTI_VoidSetCallBack>

	while(1)
	{
		s=9;
    2494:	89 e0       	ldi	r24, 0x09	; 9
    2496:	80 93 72 00 	sts	0x0072, r24
		LED_VoidTurnOff(green);
    249a:	60 91 79 00 	lds	r22, 0x0079
    249e:	70 91 7a 00 	lds	r23, 0x007A
    24a2:	80 91 7b 00 	lds	r24, 0x007B
    24a6:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <LED_VoidTurnOff>
		LED_VoidTurnOn(red);
    24aa:	60 91 73 00 	lds	r22, 0x0073
    24ae:	70 91 74 00 	lds	r23, 0x0074
    24b2:	80 91 75 00 	lds	r24, 0x0075
    24b6:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LED_VoidTurnOn>
    24ba:	87 c0       	rjmp	.+270    	; 0x25ca <main+0x158>
		for( ;s>=0;s--)
		{
			SSD_VoidSendNumber(ssd1,s);
    24bc:	80 91 72 00 	lds	r24, 0x0072
    24c0:	28 2f       	mov	r18, r24
    24c2:	80 91 7f 00 	lds	r24, 0x007F
    24c6:	90 91 80 00 	lds	r25, 0x0080
    24ca:	a0 91 81 00 	lds	r26, 0x0081
    24ce:	b0 91 82 00 	lds	r27, 0x0082
    24d2:	bc 01       	movw	r22, r24
    24d4:	cd 01       	movw	r24, r26
    24d6:	42 2f       	mov	r20, r18
    24d8:	0e 94 14 10 	call	0x2028	; 0x2028 <SSD_VoidSendNumber>
    24dc:	80 e0       	ldi	r24, 0x00	; 0
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	aa e7       	ldi	r26, 0x7A	; 122
    24e2:	b4 e4       	ldi	r27, 0x44	; 68
    24e4:	8b 87       	std	Y+11, r24	; 0x0b
    24e6:	9c 87       	std	Y+12, r25	; 0x0c
    24e8:	ad 87       	std	Y+13, r26	; 0x0d
    24ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    24f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	4a ef       	ldi	r20, 0xFA	; 250
    24fa:	54 e4       	ldi	r21, 0x44	; 68
    24fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	8f 83       	std	Y+7, r24	; 0x07
    2506:	98 87       	std	Y+8, r25	; 0x08
    2508:	a9 87       	std	Y+9, r26	; 0x09
    250a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    250c:	6f 81       	ldd	r22, Y+7	; 0x07
    250e:	78 85       	ldd	r23, Y+8	; 0x08
    2510:	89 85       	ldd	r24, Y+9	; 0x09
    2512:	9a 85       	ldd	r25, Y+10	; 0x0a
    2514:	20 e0       	ldi	r18, 0x00	; 0
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	40 e8       	ldi	r20, 0x80	; 128
    251a:	5f e3       	ldi	r21, 0x3F	; 63
    251c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2520:	88 23       	and	r24, r24
    2522:	2c f4       	brge	.+10     	; 0x252e <main+0xbc>
		__ticks = 1;
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	9e 83       	std	Y+6, r25	; 0x06
    252a:	8d 83       	std	Y+5, r24	; 0x05
    252c:	3f c0       	rjmp	.+126    	; 0x25ac <main+0x13a>
	else if (__tmp > 65535)
    252e:	6f 81       	ldd	r22, Y+7	; 0x07
    2530:	78 85       	ldd	r23, Y+8	; 0x08
    2532:	89 85       	ldd	r24, Y+9	; 0x09
    2534:	9a 85       	ldd	r25, Y+10	; 0x0a
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	3f ef       	ldi	r19, 0xFF	; 255
    253a:	4f e7       	ldi	r20, 0x7F	; 127
    253c:	57 e4       	ldi	r21, 0x47	; 71
    253e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2542:	18 16       	cp	r1, r24
    2544:	4c f5       	brge	.+82     	; 0x2598 <main+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2546:	6b 85       	ldd	r22, Y+11	; 0x0b
    2548:	7c 85       	ldd	r23, Y+12	; 0x0c
    254a:	8d 85       	ldd	r24, Y+13	; 0x0d
    254c:	9e 85       	ldd	r25, Y+14	; 0x0e
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	40 e2       	ldi	r20, 0x20	; 32
    2554:	51 e4       	ldi	r21, 0x41	; 65
    2556:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    255a:	dc 01       	movw	r26, r24
    255c:	cb 01       	movw	r24, r22
    255e:	bc 01       	movw	r22, r24
    2560:	cd 01       	movw	r24, r26
    2562:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2566:	dc 01       	movw	r26, r24
    2568:	cb 01       	movw	r24, r22
    256a:	9e 83       	std	Y+6, r25	; 0x06
    256c:	8d 83       	std	Y+5, r24	; 0x05
    256e:	0f c0       	rjmp	.+30     	; 0x258e <main+0x11c>
    2570:	88 ec       	ldi	r24, 0xC8	; 200
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	9c 83       	std	Y+4, r25	; 0x04
    2576:	8b 83       	std	Y+3, r24	; 0x03
    2578:	8b 81       	ldd	r24, Y+3	; 0x03
    257a:	9c 81       	ldd	r25, Y+4	; 0x04
    257c:	01 97       	sbiw	r24, 0x01	; 1
    257e:	f1 f7       	brne	.-4      	; 0x257c <main+0x10a>
    2580:	9c 83       	std	Y+4, r25	; 0x04
    2582:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2584:	8d 81       	ldd	r24, Y+5	; 0x05
    2586:	9e 81       	ldd	r25, Y+6	; 0x06
    2588:	01 97       	sbiw	r24, 0x01	; 1
    258a:	9e 83       	std	Y+6, r25	; 0x06
    258c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    258e:	8d 81       	ldd	r24, Y+5	; 0x05
    2590:	9e 81       	ldd	r25, Y+6	; 0x06
    2592:	00 97       	sbiw	r24, 0x00	; 0
    2594:	69 f7       	brne	.-38     	; 0x2570 <main+0xfe>
    2596:	14 c0       	rjmp	.+40     	; 0x25c0 <main+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2598:	6f 81       	ldd	r22, Y+7	; 0x07
    259a:	78 85       	ldd	r23, Y+8	; 0x08
    259c:	89 85       	ldd	r24, Y+9	; 0x09
    259e:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	9e 83       	std	Y+6, r25	; 0x06
    25aa:	8d 83       	std	Y+5, r24	; 0x05
    25ac:	8d 81       	ldd	r24, Y+5	; 0x05
    25ae:	9e 81       	ldd	r25, Y+6	; 0x06
    25b0:	9a 83       	std	Y+2, r25	; 0x02
    25b2:	89 83       	std	Y+1, r24	; 0x01
    25b4:	89 81       	ldd	r24, Y+1	; 0x01
    25b6:	9a 81       	ldd	r25, Y+2	; 0x02
    25b8:	01 97       	sbiw	r24, 0x01	; 1
    25ba:	f1 f7       	brne	.-4      	; 0x25b8 <main+0x146>
    25bc:	9a 83       	std	Y+2, r25	; 0x02
    25be:	89 83       	std	Y+1, r24	; 0x01
	while(1)
	{
		s=9;
		LED_VoidTurnOff(green);
		LED_VoidTurnOn(red);
		for( ;s>=0;s--)
    25c0:	80 91 72 00 	lds	r24, 0x0072
    25c4:	81 50       	subi	r24, 0x01	; 1
    25c6:	80 93 72 00 	sts	0x0072, r24
    25ca:	80 91 72 00 	lds	r24, 0x0072
    25ce:	88 23       	and	r24, r24
    25d0:	0c f0       	brlt	.+2      	; 0x25d4 <main+0x162>
    25d2:	74 cf       	rjmp	.-280    	; 0x24bc <main+0x4a>
    25d4:	5f cf       	rjmp	.-322    	; 0x2494 <main+0x22>

000025d6 <__prologue_saves__>:
    25d6:	2f 92       	push	r2
    25d8:	3f 92       	push	r3
    25da:	4f 92       	push	r4
    25dc:	5f 92       	push	r5
    25de:	6f 92       	push	r6
    25e0:	7f 92       	push	r7
    25e2:	8f 92       	push	r8
    25e4:	9f 92       	push	r9
    25e6:	af 92       	push	r10
    25e8:	bf 92       	push	r11
    25ea:	cf 92       	push	r12
    25ec:	df 92       	push	r13
    25ee:	ef 92       	push	r14
    25f0:	ff 92       	push	r15
    25f2:	0f 93       	push	r16
    25f4:	1f 93       	push	r17
    25f6:	cf 93       	push	r28
    25f8:	df 93       	push	r29
    25fa:	cd b7       	in	r28, 0x3d	; 61
    25fc:	de b7       	in	r29, 0x3e	; 62
    25fe:	ca 1b       	sub	r28, r26
    2600:	db 0b       	sbc	r29, r27
    2602:	0f b6       	in	r0, 0x3f	; 63
    2604:	f8 94       	cli
    2606:	de bf       	out	0x3e, r29	; 62
    2608:	0f be       	out	0x3f, r0	; 63
    260a:	cd bf       	out	0x3d, r28	; 61
    260c:	09 94       	ijmp

0000260e <__epilogue_restores__>:
    260e:	2a 88       	ldd	r2, Y+18	; 0x12
    2610:	39 88       	ldd	r3, Y+17	; 0x11
    2612:	48 88       	ldd	r4, Y+16	; 0x10
    2614:	5f 84       	ldd	r5, Y+15	; 0x0f
    2616:	6e 84       	ldd	r6, Y+14	; 0x0e
    2618:	7d 84       	ldd	r7, Y+13	; 0x0d
    261a:	8c 84       	ldd	r8, Y+12	; 0x0c
    261c:	9b 84       	ldd	r9, Y+11	; 0x0b
    261e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2620:	b9 84       	ldd	r11, Y+9	; 0x09
    2622:	c8 84       	ldd	r12, Y+8	; 0x08
    2624:	df 80       	ldd	r13, Y+7	; 0x07
    2626:	ee 80       	ldd	r14, Y+6	; 0x06
    2628:	fd 80       	ldd	r15, Y+5	; 0x05
    262a:	0c 81       	ldd	r16, Y+4	; 0x04
    262c:	1b 81       	ldd	r17, Y+3	; 0x03
    262e:	aa 81       	ldd	r26, Y+2	; 0x02
    2630:	b9 81       	ldd	r27, Y+1	; 0x01
    2632:	ce 0f       	add	r28, r30
    2634:	d1 1d       	adc	r29, r1
    2636:	0f b6       	in	r0, 0x3f	; 63
    2638:	f8 94       	cli
    263a:	de bf       	out	0x3e, r29	; 62
    263c:	0f be       	out	0x3f, r0	; 63
    263e:	cd bf       	out	0x3d, r28	; 61
    2640:	ed 01       	movw	r28, r26
    2642:	08 95       	ret

00002644 <_exit>:
    2644:	f8 94       	cli

00002646 <__stop_program>:
    2646:	ff cf       	rjmp	.-2      	; 0x2646 <__stop_program>
