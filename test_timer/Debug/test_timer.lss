
test_timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000018ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000018ba  0000194e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000027  0080006a  0080006a  00001958  2**0
                  ALLOC
  3 .stab         00001db8  00000000  00000000  00001958  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000bc8  00000000  00000000  00003710  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 85 0b 	jmp	0x170a	; 0x170a <__vector_4>
      14:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__vector_5>
      18:	0c 94 1f 0b 	jmp	0x163e	; 0x163e <__vector_6>
      1c:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <__vector_7>
      20:	0c 94 b9 0a 	jmp	0x1572	; 0x1572 <__vector_8>
      24:	0c 94 86 0a 	jmp	0x150c	; 0x150c <__vector_9>
      28:	0c 94 53 0a 	jmp	0x14a6	; 0x14a6 <__vector_10>
      2c:	0c 94 20 0a 	jmp	0x1440	; 0x1440 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea eb       	ldi	r30, 0xBA	; 186
      68:	f8 e1       	ldi	r31, 0x18	; 24
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 39       	cpi	r26, 0x91	; 145
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 00 0c 	call	0x1800	; 0x1800 <main>
      8a:	0c 94 5b 0c 	jmp	0x18b6	; 0x18b6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_eunmSetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

DIO_ErrorStatus DIO_eunmSetPinDirection     (u8 COPY_u8PORT ,u8 COPY_u8PIN ,u8 COPY_u8Direction )
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	28 97       	sbiw	r28, 0x08	; 8
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
      a6:	8a 83       	std	Y+2, r24	; 0x02
      a8:	6b 83       	std	Y+3, r22	; 0x03
      aa:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus LOC_enumStatus = DIO_OK;
      ac:	81 e0       	ldi	r24, 0x01	; 1
      ae:	89 83       	std	Y+1, r24	; 0x01
	if((COPY_u8PORT <= DIO_PORTD)&&(COPY_u8PIN <= DIO_PIN7))
      b0:	8a 81       	ldd	r24, Y+2	; 0x02
      b2:	84 30       	cpi	r24, 0x04	; 4
      b4:	08 f0       	brcs	.+2      	; 0xb8 <DIO_eunmSetPinDirection+0x26>
      b6:	f1 c0       	rjmp	.+482    	; 0x29a <DIO_eunmSetPinDirection+0x208>
      b8:	8b 81       	ldd	r24, Y+3	; 0x03
      ba:	88 30       	cpi	r24, 0x08	; 8
      bc:	08 f0       	brcs	.+2      	; 0xc0 <DIO_eunmSetPinDirection+0x2e>
      be:	ed c0       	rjmp	.+474    	; 0x29a <DIO_eunmSetPinDirection+0x208>
	{
		if (COPY_u8Direction == DIO_PIN_OUTPUT)
      c0:	8c 81       	ldd	r24, Y+4	; 0x04
      c2:	81 30       	cpi	r24, 0x01	; 1
      c4:	09 f0       	breq	.+2      	; 0xc8 <DIO_eunmSetPinDirection+0x36>
      c6:	6f c0       	rjmp	.+222    	; 0x1a6 <DIO_eunmSetPinDirection+0x114>
		{
			switch(COPY_u8PORT)
      c8:	8a 81       	ldd	r24, Y+2	; 0x02
      ca:	28 2f       	mov	r18, r24
      cc:	30 e0       	ldi	r19, 0x00	; 0
      ce:	38 87       	std	Y+8, r19	; 0x08
      d0:	2f 83       	std	Y+7, r18	; 0x07
      d2:	8f 81       	ldd	r24, Y+7	; 0x07
      d4:	98 85       	ldd	r25, Y+8	; 0x08
      d6:	81 30       	cpi	r24, 0x01	; 1
      d8:	91 05       	cpc	r25, r1
      da:	49 f1       	breq	.+82     	; 0x12e <DIO_eunmSetPinDirection+0x9c>
      dc:	2f 81       	ldd	r18, Y+7	; 0x07
      de:	38 85       	ldd	r19, Y+8	; 0x08
      e0:	22 30       	cpi	r18, 0x02	; 2
      e2:	31 05       	cpc	r19, r1
      e4:	2c f4       	brge	.+10     	; 0xf0 <DIO_eunmSetPinDirection+0x5e>
      e6:	8f 81       	ldd	r24, Y+7	; 0x07
      e8:	98 85       	ldd	r25, Y+8	; 0x08
      ea:	00 97       	sbiw	r24, 0x00	; 0
      ec:	61 f0       	breq	.+24     	; 0x106 <DIO_eunmSetPinDirection+0x74>
      ee:	d6 c0       	rjmp	.+428    	; 0x29c <DIO_eunmSetPinDirection+0x20a>
      f0:	2f 81       	ldd	r18, Y+7	; 0x07
      f2:	38 85       	ldd	r19, Y+8	; 0x08
      f4:	22 30       	cpi	r18, 0x02	; 2
      f6:	31 05       	cpc	r19, r1
      f8:	71 f1       	breq	.+92     	; 0x156 <DIO_eunmSetPinDirection+0xc4>
      fa:	8f 81       	ldd	r24, Y+7	; 0x07
      fc:	98 85       	ldd	r25, Y+8	; 0x08
      fe:	83 30       	cpi	r24, 0x03	; 3
     100:	91 05       	cpc	r25, r1
     102:	e9 f1       	breq	.+122    	; 0x17e <DIO_eunmSetPinDirection+0xec>
     104:	cb c0       	rjmp	.+406    	; 0x29c <DIO_eunmSetPinDirection+0x20a>
			{
			case DIO_PORTA: SET_BIT(DDRA_R,COPY_u8PIN); break;
     106:	aa e3       	ldi	r26, 0x3A	; 58
     108:	b0 e0       	ldi	r27, 0x00	; 0
     10a:	ea e3       	ldi	r30, 0x3A	; 58
     10c:	f0 e0       	ldi	r31, 0x00	; 0
     10e:	80 81       	ld	r24, Z
     110:	48 2f       	mov	r20, r24
     112:	8b 81       	ldd	r24, Y+3	; 0x03
     114:	28 2f       	mov	r18, r24
     116:	30 e0       	ldi	r19, 0x00	; 0
     118:	81 e0       	ldi	r24, 0x01	; 1
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	02 2e       	mov	r0, r18
     11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_eunmSetPinDirection+0x92>
     120:	88 0f       	add	r24, r24
     122:	99 1f       	adc	r25, r25
     124:	0a 94       	dec	r0
     126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_eunmSetPinDirection+0x8e>
     128:	84 2b       	or	r24, r20
     12a:	8c 93       	st	X, r24
     12c:	b7 c0       	rjmp	.+366    	; 0x29c <DIO_eunmSetPinDirection+0x20a>
			case DIO_PORTB: SET_BIT(DDRB_R,COPY_u8PIN); break;
     12e:	a7 e3       	ldi	r26, 0x37	; 55
     130:	b0 e0       	ldi	r27, 0x00	; 0
     132:	e7 e3       	ldi	r30, 0x37	; 55
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	80 81       	ld	r24, Z
     138:	48 2f       	mov	r20, r24
     13a:	8b 81       	ldd	r24, Y+3	; 0x03
     13c:	28 2f       	mov	r18, r24
     13e:	30 e0       	ldi	r19, 0x00	; 0
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	02 2e       	mov	r0, r18
     146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_eunmSetPinDirection+0xba>
     148:	88 0f       	add	r24, r24
     14a:	99 1f       	adc	r25, r25
     14c:	0a 94       	dec	r0
     14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_eunmSetPinDirection+0xb6>
     150:	84 2b       	or	r24, r20
     152:	8c 93       	st	X, r24
     154:	a3 c0       	rjmp	.+326    	; 0x29c <DIO_eunmSetPinDirection+0x20a>
			case DIO_PORTC: SET_BIT(DDRC_R,COPY_u8PIN); break;
     156:	a4 e3       	ldi	r26, 0x34	; 52
     158:	b0 e0       	ldi	r27, 0x00	; 0
     15a:	e4 e3       	ldi	r30, 0x34	; 52
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	80 81       	ld	r24, Z
     160:	48 2f       	mov	r20, r24
     162:	8b 81       	ldd	r24, Y+3	; 0x03
     164:	28 2f       	mov	r18, r24
     166:	30 e0       	ldi	r19, 0x00	; 0
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	02 2e       	mov	r0, r18
     16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_eunmSetPinDirection+0xe2>
     170:	88 0f       	add	r24, r24
     172:	99 1f       	adc	r25, r25
     174:	0a 94       	dec	r0
     176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_eunmSetPinDirection+0xde>
     178:	84 2b       	or	r24, r20
     17a:	8c 93       	st	X, r24
     17c:	8f c0       	rjmp	.+286    	; 0x29c <DIO_eunmSetPinDirection+0x20a>
			case DIO_PORTD: SET_BIT(DDRD_R,COPY_u8PIN); break;
     17e:	a1 e3       	ldi	r26, 0x31	; 49
     180:	b0 e0       	ldi	r27, 0x00	; 0
     182:	e1 e3       	ldi	r30, 0x31	; 49
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	80 81       	ld	r24, Z
     188:	48 2f       	mov	r20, r24
     18a:	8b 81       	ldd	r24, Y+3	; 0x03
     18c:	28 2f       	mov	r18, r24
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	02 2e       	mov	r0, r18
     196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_eunmSetPinDirection+0x10a>
     198:	88 0f       	add	r24, r24
     19a:	99 1f       	adc	r25, r25
     19c:	0a 94       	dec	r0
     19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_eunmSetPinDirection+0x106>
     1a0:	84 2b       	or	r24, r20
     1a2:	8c 93       	st	X, r24
     1a4:	7b c0       	rjmp	.+246    	; 0x29c <DIO_eunmSetPinDirection+0x20a>
			}
		}
		else if (COPY_u8Direction == DIO_PIN_INPUT)
     1a6:	8c 81       	ldd	r24, Y+4	; 0x04
     1a8:	88 23       	and	r24, r24
     1aa:	09 f0       	breq	.+2      	; 0x1ae <DIO_eunmSetPinDirection+0x11c>
     1ac:	74 c0       	rjmp	.+232    	; 0x296 <DIO_eunmSetPinDirection+0x204>
		{
			switch(COPY_u8PORT)
     1ae:	8a 81       	ldd	r24, Y+2	; 0x02
     1b0:	28 2f       	mov	r18, r24
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	3e 83       	std	Y+6, r19	; 0x06
     1b6:	2d 83       	std	Y+5, r18	; 0x05
     1b8:	8d 81       	ldd	r24, Y+5	; 0x05
     1ba:	9e 81       	ldd	r25, Y+6	; 0x06
     1bc:	81 30       	cpi	r24, 0x01	; 1
     1be:	91 05       	cpc	r25, r1
     1c0:	59 f1       	breq	.+86     	; 0x218 <DIO_eunmSetPinDirection+0x186>
     1c2:	2d 81       	ldd	r18, Y+5	; 0x05
     1c4:	3e 81       	ldd	r19, Y+6	; 0x06
     1c6:	22 30       	cpi	r18, 0x02	; 2
     1c8:	31 05       	cpc	r19, r1
     1ca:	2c f4       	brge	.+10     	; 0x1d6 <DIO_eunmSetPinDirection+0x144>
     1cc:	8d 81       	ldd	r24, Y+5	; 0x05
     1ce:	9e 81       	ldd	r25, Y+6	; 0x06
     1d0:	00 97       	sbiw	r24, 0x00	; 0
     1d2:	69 f0       	breq	.+26     	; 0x1ee <DIO_eunmSetPinDirection+0x15c>
     1d4:	63 c0       	rjmp	.+198    	; 0x29c <DIO_eunmSetPinDirection+0x20a>
     1d6:	2d 81       	ldd	r18, Y+5	; 0x05
     1d8:	3e 81       	ldd	r19, Y+6	; 0x06
     1da:	22 30       	cpi	r18, 0x02	; 2
     1dc:	31 05       	cpc	r19, r1
     1de:	89 f1       	breq	.+98     	; 0x242 <DIO_eunmSetPinDirection+0x1b0>
     1e0:	8d 81       	ldd	r24, Y+5	; 0x05
     1e2:	9e 81       	ldd	r25, Y+6	; 0x06
     1e4:	83 30       	cpi	r24, 0x03	; 3
     1e6:	91 05       	cpc	r25, r1
     1e8:	09 f4       	brne	.+2      	; 0x1ec <DIO_eunmSetPinDirection+0x15a>
     1ea:	40 c0       	rjmp	.+128    	; 0x26c <DIO_eunmSetPinDirection+0x1da>
     1ec:	57 c0       	rjmp	.+174    	; 0x29c <DIO_eunmSetPinDirection+0x20a>
			{
			case DIO_PORTA: CLR_BIT(DDRA_R,COPY_u8PIN); break;
     1ee:	aa e3       	ldi	r26, 0x3A	; 58
     1f0:	b0 e0       	ldi	r27, 0x00	; 0
     1f2:	ea e3       	ldi	r30, 0x3A	; 58
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	80 81       	ld	r24, Z
     1f8:	48 2f       	mov	r20, r24
     1fa:	8b 81       	ldd	r24, Y+3	; 0x03
     1fc:	28 2f       	mov	r18, r24
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	02 2e       	mov	r0, r18
     206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_eunmSetPinDirection+0x17a>
     208:	88 0f       	add	r24, r24
     20a:	99 1f       	adc	r25, r25
     20c:	0a 94       	dec	r0
     20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_eunmSetPinDirection+0x176>
     210:	80 95       	com	r24
     212:	84 23       	and	r24, r20
     214:	8c 93       	st	X, r24
     216:	42 c0       	rjmp	.+132    	; 0x29c <DIO_eunmSetPinDirection+0x20a>
			case DIO_PORTB: CLR_BIT(DDRB_R,COPY_u8PIN); break;
     218:	a7 e3       	ldi	r26, 0x37	; 55
     21a:	b0 e0       	ldi	r27, 0x00	; 0
     21c:	e7 e3       	ldi	r30, 0x37	; 55
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	80 81       	ld	r24, Z
     222:	48 2f       	mov	r20, r24
     224:	8b 81       	ldd	r24, Y+3	; 0x03
     226:	28 2f       	mov	r18, r24
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	02 2e       	mov	r0, r18
     230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_eunmSetPinDirection+0x1a4>
     232:	88 0f       	add	r24, r24
     234:	99 1f       	adc	r25, r25
     236:	0a 94       	dec	r0
     238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_eunmSetPinDirection+0x1a0>
     23a:	80 95       	com	r24
     23c:	84 23       	and	r24, r20
     23e:	8c 93       	st	X, r24
     240:	2d c0       	rjmp	.+90     	; 0x29c <DIO_eunmSetPinDirection+0x20a>
			case DIO_PORTC: CLR_BIT(DDRC_R,COPY_u8PIN); break;
     242:	a4 e3       	ldi	r26, 0x34	; 52
     244:	b0 e0       	ldi	r27, 0x00	; 0
     246:	e4 e3       	ldi	r30, 0x34	; 52
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	80 81       	ld	r24, Z
     24c:	48 2f       	mov	r20, r24
     24e:	8b 81       	ldd	r24, Y+3	; 0x03
     250:	28 2f       	mov	r18, r24
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	02 2e       	mov	r0, r18
     25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_eunmSetPinDirection+0x1ce>
     25c:	88 0f       	add	r24, r24
     25e:	99 1f       	adc	r25, r25
     260:	0a 94       	dec	r0
     262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_eunmSetPinDirection+0x1ca>
     264:	80 95       	com	r24
     266:	84 23       	and	r24, r20
     268:	8c 93       	st	X, r24
     26a:	18 c0       	rjmp	.+48     	; 0x29c <DIO_eunmSetPinDirection+0x20a>
			case DIO_PORTD: CLR_BIT(DDRD_R,COPY_u8PIN); break;
     26c:	a1 e3       	ldi	r26, 0x31	; 49
     26e:	b0 e0       	ldi	r27, 0x00	; 0
     270:	e1 e3       	ldi	r30, 0x31	; 49
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	80 81       	ld	r24, Z
     276:	48 2f       	mov	r20, r24
     278:	8b 81       	ldd	r24, Y+3	; 0x03
     27a:	28 2f       	mov	r18, r24
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	02 2e       	mov	r0, r18
     284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_eunmSetPinDirection+0x1f8>
     286:	88 0f       	add	r24, r24
     288:	99 1f       	adc	r25, r25
     28a:	0a 94       	dec	r0
     28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_eunmSetPinDirection+0x1f4>
     28e:	80 95       	com	r24
     290:	84 23       	and	r24, r20
     292:	8c 93       	st	X, r24
     294:	03 c0       	rjmp	.+6      	; 0x29c <DIO_eunmSetPinDirection+0x20a>
			}
		}
		else
		{
			LOC_enumStatus = DIO_NOK;
     296:	19 82       	std	Y+1, r1	; 0x01
     298:	01 c0       	rjmp	.+2      	; 0x29c <DIO_eunmSetPinDirection+0x20a>
		}
	}
	else
	{
		LOC_enumStatus = DIO_NOK;
     29a:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumStatus;
     29c:	89 81       	ldd	r24, Y+1	; 0x01
}
     29e:	28 96       	adiw	r28, 0x08	; 8
     2a0:	0f b6       	in	r0, 0x3f	; 63
     2a2:	f8 94       	cli
     2a4:	de bf       	out	0x3e, r29	; 62
     2a6:	0f be       	out	0x3f, r0	; 63
     2a8:	cd bf       	out	0x3d, r28	; 61
     2aa:	cf 91       	pop	r28
     2ac:	df 91       	pop	r29
     2ae:	08 95       	ret

000002b0 <DIO_eunmSetPinValue>:
DIO_ErrorStatus DIO_eunmSetPinValue         (u8 COPY_u8PORT ,u8 COPY_u8PIN ,u8 COPY_u8Value     )
{
     2b0:	df 93       	push	r29
     2b2:	cf 93       	push	r28
     2b4:	cd b7       	in	r28, 0x3d	; 61
     2b6:	de b7       	in	r29, 0x3e	; 62
     2b8:	28 97       	sbiw	r28, 0x08	; 8
     2ba:	0f b6       	in	r0, 0x3f	; 63
     2bc:	f8 94       	cli
     2be:	de bf       	out	0x3e, r29	; 62
     2c0:	0f be       	out	0x3f, r0	; 63
     2c2:	cd bf       	out	0x3d, r28	; 61
     2c4:	8a 83       	std	Y+2, r24	; 0x02
     2c6:	6b 83       	std	Y+3, r22	; 0x03
     2c8:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus LOC_enumStatus = DIO_OK;
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	89 83       	std	Y+1, r24	; 0x01
	if((COPY_u8PORT <= DIO_PORTD)&&(COPY_u8PIN <= DIO_PIN7))
     2ce:	8a 81       	ldd	r24, Y+2	; 0x02
     2d0:	84 30       	cpi	r24, 0x04	; 4
     2d2:	08 f0       	brcs	.+2      	; 0x2d6 <DIO_eunmSetPinValue+0x26>
     2d4:	f1 c0       	rjmp	.+482    	; 0x4b8 <DIO_eunmSetPinValue+0x208>
     2d6:	8b 81       	ldd	r24, Y+3	; 0x03
     2d8:	88 30       	cpi	r24, 0x08	; 8
     2da:	08 f0       	brcs	.+2      	; 0x2de <DIO_eunmSetPinValue+0x2e>
     2dc:	ed c0       	rjmp	.+474    	; 0x4b8 <DIO_eunmSetPinValue+0x208>
	{
		if (COPY_u8Value == DIO_PIN_HIGH)
     2de:	8c 81       	ldd	r24, Y+4	; 0x04
     2e0:	81 30       	cpi	r24, 0x01	; 1
     2e2:	09 f0       	breq	.+2      	; 0x2e6 <DIO_eunmSetPinValue+0x36>
     2e4:	6f c0       	rjmp	.+222    	; 0x3c4 <DIO_eunmSetPinValue+0x114>
		{
			switch(COPY_u8PORT)
     2e6:	8a 81       	ldd	r24, Y+2	; 0x02
     2e8:	28 2f       	mov	r18, r24
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	38 87       	std	Y+8, r19	; 0x08
     2ee:	2f 83       	std	Y+7, r18	; 0x07
     2f0:	8f 81       	ldd	r24, Y+7	; 0x07
     2f2:	98 85       	ldd	r25, Y+8	; 0x08
     2f4:	81 30       	cpi	r24, 0x01	; 1
     2f6:	91 05       	cpc	r25, r1
     2f8:	49 f1       	breq	.+82     	; 0x34c <DIO_eunmSetPinValue+0x9c>
     2fa:	2f 81       	ldd	r18, Y+7	; 0x07
     2fc:	38 85       	ldd	r19, Y+8	; 0x08
     2fe:	22 30       	cpi	r18, 0x02	; 2
     300:	31 05       	cpc	r19, r1
     302:	2c f4       	brge	.+10     	; 0x30e <DIO_eunmSetPinValue+0x5e>
     304:	8f 81       	ldd	r24, Y+7	; 0x07
     306:	98 85       	ldd	r25, Y+8	; 0x08
     308:	00 97       	sbiw	r24, 0x00	; 0
     30a:	61 f0       	breq	.+24     	; 0x324 <DIO_eunmSetPinValue+0x74>
     30c:	d6 c0       	rjmp	.+428    	; 0x4ba <DIO_eunmSetPinValue+0x20a>
     30e:	2f 81       	ldd	r18, Y+7	; 0x07
     310:	38 85       	ldd	r19, Y+8	; 0x08
     312:	22 30       	cpi	r18, 0x02	; 2
     314:	31 05       	cpc	r19, r1
     316:	71 f1       	breq	.+92     	; 0x374 <DIO_eunmSetPinValue+0xc4>
     318:	8f 81       	ldd	r24, Y+7	; 0x07
     31a:	98 85       	ldd	r25, Y+8	; 0x08
     31c:	83 30       	cpi	r24, 0x03	; 3
     31e:	91 05       	cpc	r25, r1
     320:	e9 f1       	breq	.+122    	; 0x39c <DIO_eunmSetPinValue+0xec>
     322:	cb c0       	rjmp	.+406    	; 0x4ba <DIO_eunmSetPinValue+0x20a>
			{
			case DIO_PORTA: SET_BIT(PORTA_R,COPY_u8PIN);break;
     324:	ab e3       	ldi	r26, 0x3B	; 59
     326:	b0 e0       	ldi	r27, 0x00	; 0
     328:	eb e3       	ldi	r30, 0x3B	; 59
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	80 81       	ld	r24, Z
     32e:	48 2f       	mov	r20, r24
     330:	8b 81       	ldd	r24, Y+3	; 0x03
     332:	28 2f       	mov	r18, r24
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	02 2e       	mov	r0, r18
     33c:	02 c0       	rjmp	.+4      	; 0x342 <DIO_eunmSetPinValue+0x92>
     33e:	88 0f       	add	r24, r24
     340:	99 1f       	adc	r25, r25
     342:	0a 94       	dec	r0
     344:	e2 f7       	brpl	.-8      	; 0x33e <DIO_eunmSetPinValue+0x8e>
     346:	84 2b       	or	r24, r20
     348:	8c 93       	st	X, r24
     34a:	b7 c0       	rjmp	.+366    	; 0x4ba <DIO_eunmSetPinValue+0x20a>
			case DIO_PORTB: SET_BIT(PORTB_R,COPY_u8PIN);break;
     34c:	a8 e3       	ldi	r26, 0x38	; 56
     34e:	b0 e0       	ldi	r27, 0x00	; 0
     350:	e8 e3       	ldi	r30, 0x38	; 56
     352:	f0 e0       	ldi	r31, 0x00	; 0
     354:	80 81       	ld	r24, Z
     356:	48 2f       	mov	r20, r24
     358:	8b 81       	ldd	r24, Y+3	; 0x03
     35a:	28 2f       	mov	r18, r24
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	02 2e       	mov	r0, r18
     364:	02 c0       	rjmp	.+4      	; 0x36a <DIO_eunmSetPinValue+0xba>
     366:	88 0f       	add	r24, r24
     368:	99 1f       	adc	r25, r25
     36a:	0a 94       	dec	r0
     36c:	e2 f7       	brpl	.-8      	; 0x366 <DIO_eunmSetPinValue+0xb6>
     36e:	84 2b       	or	r24, r20
     370:	8c 93       	st	X, r24
     372:	a3 c0       	rjmp	.+326    	; 0x4ba <DIO_eunmSetPinValue+0x20a>
			case DIO_PORTC: SET_BIT(PORTC_R,COPY_u8PIN);break;
     374:	a5 e3       	ldi	r26, 0x35	; 53
     376:	b0 e0       	ldi	r27, 0x00	; 0
     378:	e5 e3       	ldi	r30, 0x35	; 53
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	80 81       	ld	r24, Z
     37e:	48 2f       	mov	r20, r24
     380:	8b 81       	ldd	r24, Y+3	; 0x03
     382:	28 2f       	mov	r18, r24
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	81 e0       	ldi	r24, 0x01	; 1
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	02 2e       	mov	r0, r18
     38c:	02 c0       	rjmp	.+4      	; 0x392 <DIO_eunmSetPinValue+0xe2>
     38e:	88 0f       	add	r24, r24
     390:	99 1f       	adc	r25, r25
     392:	0a 94       	dec	r0
     394:	e2 f7       	brpl	.-8      	; 0x38e <DIO_eunmSetPinValue+0xde>
     396:	84 2b       	or	r24, r20
     398:	8c 93       	st	X, r24
     39a:	8f c0       	rjmp	.+286    	; 0x4ba <DIO_eunmSetPinValue+0x20a>
			case DIO_PORTD: SET_BIT(PORTD_R,COPY_u8PIN);break;
     39c:	a2 e3       	ldi	r26, 0x32	; 50
     39e:	b0 e0       	ldi	r27, 0x00	; 0
     3a0:	e2 e3       	ldi	r30, 0x32	; 50
     3a2:	f0 e0       	ldi	r31, 0x00	; 0
     3a4:	80 81       	ld	r24, Z
     3a6:	48 2f       	mov	r20, r24
     3a8:	8b 81       	ldd	r24, Y+3	; 0x03
     3aa:	28 2f       	mov	r18, r24
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	02 2e       	mov	r0, r18
     3b4:	02 c0       	rjmp	.+4      	; 0x3ba <DIO_eunmSetPinValue+0x10a>
     3b6:	88 0f       	add	r24, r24
     3b8:	99 1f       	adc	r25, r25
     3ba:	0a 94       	dec	r0
     3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <DIO_eunmSetPinValue+0x106>
     3be:	84 2b       	or	r24, r20
     3c0:	8c 93       	st	X, r24
     3c2:	7b c0       	rjmp	.+246    	; 0x4ba <DIO_eunmSetPinValue+0x20a>
			}
		}
		else if (COPY_u8Value == DIO_PIN_LOW)
     3c4:	8c 81       	ldd	r24, Y+4	; 0x04
     3c6:	88 23       	and	r24, r24
     3c8:	09 f0       	breq	.+2      	; 0x3cc <DIO_eunmSetPinValue+0x11c>
     3ca:	74 c0       	rjmp	.+232    	; 0x4b4 <DIO_eunmSetPinValue+0x204>
		{
			switch(COPY_u8PORT)
     3cc:	8a 81       	ldd	r24, Y+2	; 0x02
     3ce:	28 2f       	mov	r18, r24
     3d0:	30 e0       	ldi	r19, 0x00	; 0
     3d2:	3e 83       	std	Y+6, r19	; 0x06
     3d4:	2d 83       	std	Y+5, r18	; 0x05
     3d6:	8d 81       	ldd	r24, Y+5	; 0x05
     3d8:	9e 81       	ldd	r25, Y+6	; 0x06
     3da:	81 30       	cpi	r24, 0x01	; 1
     3dc:	91 05       	cpc	r25, r1
     3de:	59 f1       	breq	.+86     	; 0x436 <DIO_eunmSetPinValue+0x186>
     3e0:	2d 81       	ldd	r18, Y+5	; 0x05
     3e2:	3e 81       	ldd	r19, Y+6	; 0x06
     3e4:	22 30       	cpi	r18, 0x02	; 2
     3e6:	31 05       	cpc	r19, r1
     3e8:	2c f4       	brge	.+10     	; 0x3f4 <DIO_eunmSetPinValue+0x144>
     3ea:	8d 81       	ldd	r24, Y+5	; 0x05
     3ec:	9e 81       	ldd	r25, Y+6	; 0x06
     3ee:	00 97       	sbiw	r24, 0x00	; 0
     3f0:	69 f0       	breq	.+26     	; 0x40c <DIO_eunmSetPinValue+0x15c>
     3f2:	63 c0       	rjmp	.+198    	; 0x4ba <DIO_eunmSetPinValue+0x20a>
     3f4:	2d 81       	ldd	r18, Y+5	; 0x05
     3f6:	3e 81       	ldd	r19, Y+6	; 0x06
     3f8:	22 30       	cpi	r18, 0x02	; 2
     3fa:	31 05       	cpc	r19, r1
     3fc:	89 f1       	breq	.+98     	; 0x460 <DIO_eunmSetPinValue+0x1b0>
     3fe:	8d 81       	ldd	r24, Y+5	; 0x05
     400:	9e 81       	ldd	r25, Y+6	; 0x06
     402:	83 30       	cpi	r24, 0x03	; 3
     404:	91 05       	cpc	r25, r1
     406:	09 f4       	brne	.+2      	; 0x40a <DIO_eunmSetPinValue+0x15a>
     408:	40 c0       	rjmp	.+128    	; 0x48a <DIO_eunmSetPinValue+0x1da>
     40a:	57 c0       	rjmp	.+174    	; 0x4ba <DIO_eunmSetPinValue+0x20a>
			{
			case DIO_PORTA: CLR_BIT(PORTA_R,COPY_u8PIN);break;
     40c:	ab e3       	ldi	r26, 0x3B	; 59
     40e:	b0 e0       	ldi	r27, 0x00	; 0
     410:	eb e3       	ldi	r30, 0x3B	; 59
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	80 81       	ld	r24, Z
     416:	48 2f       	mov	r20, r24
     418:	8b 81       	ldd	r24, Y+3	; 0x03
     41a:	28 2f       	mov	r18, r24
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	02 2e       	mov	r0, r18
     424:	02 c0       	rjmp	.+4      	; 0x42a <DIO_eunmSetPinValue+0x17a>
     426:	88 0f       	add	r24, r24
     428:	99 1f       	adc	r25, r25
     42a:	0a 94       	dec	r0
     42c:	e2 f7       	brpl	.-8      	; 0x426 <DIO_eunmSetPinValue+0x176>
     42e:	80 95       	com	r24
     430:	84 23       	and	r24, r20
     432:	8c 93       	st	X, r24
     434:	42 c0       	rjmp	.+132    	; 0x4ba <DIO_eunmSetPinValue+0x20a>
			case DIO_PORTB: CLR_BIT(PORTB_R,COPY_u8PIN);break;
     436:	a8 e3       	ldi	r26, 0x38	; 56
     438:	b0 e0       	ldi	r27, 0x00	; 0
     43a:	e8 e3       	ldi	r30, 0x38	; 56
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	80 81       	ld	r24, Z
     440:	48 2f       	mov	r20, r24
     442:	8b 81       	ldd	r24, Y+3	; 0x03
     444:	28 2f       	mov	r18, r24
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	02 2e       	mov	r0, r18
     44e:	02 c0       	rjmp	.+4      	; 0x454 <DIO_eunmSetPinValue+0x1a4>
     450:	88 0f       	add	r24, r24
     452:	99 1f       	adc	r25, r25
     454:	0a 94       	dec	r0
     456:	e2 f7       	brpl	.-8      	; 0x450 <DIO_eunmSetPinValue+0x1a0>
     458:	80 95       	com	r24
     45a:	84 23       	and	r24, r20
     45c:	8c 93       	st	X, r24
     45e:	2d c0       	rjmp	.+90     	; 0x4ba <DIO_eunmSetPinValue+0x20a>
			case DIO_PORTC: CLR_BIT(PORTC_R,COPY_u8PIN);break;
     460:	a5 e3       	ldi	r26, 0x35	; 53
     462:	b0 e0       	ldi	r27, 0x00	; 0
     464:	e5 e3       	ldi	r30, 0x35	; 53
     466:	f0 e0       	ldi	r31, 0x00	; 0
     468:	80 81       	ld	r24, Z
     46a:	48 2f       	mov	r20, r24
     46c:	8b 81       	ldd	r24, Y+3	; 0x03
     46e:	28 2f       	mov	r18, r24
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	02 2e       	mov	r0, r18
     478:	02 c0       	rjmp	.+4      	; 0x47e <DIO_eunmSetPinValue+0x1ce>
     47a:	88 0f       	add	r24, r24
     47c:	99 1f       	adc	r25, r25
     47e:	0a 94       	dec	r0
     480:	e2 f7       	brpl	.-8      	; 0x47a <DIO_eunmSetPinValue+0x1ca>
     482:	80 95       	com	r24
     484:	84 23       	and	r24, r20
     486:	8c 93       	st	X, r24
     488:	18 c0       	rjmp	.+48     	; 0x4ba <DIO_eunmSetPinValue+0x20a>
			case DIO_PORTD: CLR_BIT(PORTD_R,COPY_u8PIN);break;
     48a:	a2 e3       	ldi	r26, 0x32	; 50
     48c:	b0 e0       	ldi	r27, 0x00	; 0
     48e:	e2 e3       	ldi	r30, 0x32	; 50
     490:	f0 e0       	ldi	r31, 0x00	; 0
     492:	80 81       	ld	r24, Z
     494:	48 2f       	mov	r20, r24
     496:	8b 81       	ldd	r24, Y+3	; 0x03
     498:	28 2f       	mov	r18, r24
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	02 2e       	mov	r0, r18
     4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <DIO_eunmSetPinValue+0x1f8>
     4a4:	88 0f       	add	r24, r24
     4a6:	99 1f       	adc	r25, r25
     4a8:	0a 94       	dec	r0
     4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <DIO_eunmSetPinValue+0x1f4>
     4ac:	80 95       	com	r24
     4ae:	84 23       	and	r24, r20
     4b0:	8c 93       	st	X, r24
     4b2:	03 c0       	rjmp	.+6      	; 0x4ba <DIO_eunmSetPinValue+0x20a>
			}
		}
		else
		{
			LOC_enumStatus = DIO_NOK ;
     4b4:	19 82       	std	Y+1, r1	; 0x01
     4b6:	01 c0       	rjmp	.+2      	; 0x4ba <DIO_eunmSetPinValue+0x20a>
		}
	}

	else
	{
		LOC_enumStatus = DIO_NOK ;
     4b8:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumStatus ;
     4ba:	89 81       	ldd	r24, Y+1	; 0x01
}
     4bc:	28 96       	adiw	r28, 0x08	; 8
     4be:	0f b6       	in	r0, 0x3f	; 63
     4c0:	f8 94       	cli
     4c2:	de bf       	out	0x3e, r29	; 62
     4c4:	0f be       	out	0x3f, r0	; 63
     4c6:	cd bf       	out	0x3d, r28	; 61
     4c8:	cf 91       	pop	r28
     4ca:	df 91       	pop	r29
     4cc:	08 95       	ret

000004ce <DIO_eunmGetPin>:
DIO_ErrorStatus DIO_eunmGetPin              (u8 COPY_u8PORT ,u8 COPY_u8PIN  ,u8 *COPY_PtrData   )
{
     4ce:	df 93       	push	r29
     4d0:	cf 93       	push	r28
     4d2:	cd b7       	in	r28, 0x3d	; 61
     4d4:	de b7       	in	r29, 0x3e	; 62
     4d6:	27 97       	sbiw	r28, 0x07	; 7
     4d8:	0f b6       	in	r0, 0x3f	; 63
     4da:	f8 94       	cli
     4dc:	de bf       	out	0x3e, r29	; 62
     4de:	0f be       	out	0x3f, r0	; 63
     4e0:	cd bf       	out	0x3d, r28	; 61
     4e2:	8a 83       	std	Y+2, r24	; 0x02
     4e4:	6b 83       	std	Y+3, r22	; 0x03
     4e6:	5d 83       	std	Y+5, r21	; 0x05
     4e8:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus LOC_enumStatus = DIO_OK;
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	89 83       	std	Y+1, r24	; 0x01
	if((COPY_u8PORT <= DIO_PORTD)&&(COPY_u8PIN <= DIO_PIN7))
     4ee:	8a 81       	ldd	r24, Y+2	; 0x02
     4f0:	84 30       	cpi	r24, 0x04	; 4
     4f2:	08 f0       	brcs	.+2      	; 0x4f6 <DIO_eunmGetPin+0x28>
     4f4:	a6 c0       	rjmp	.+332    	; 0x642 <DIO_eunmGetPin+0x174>
     4f6:	8b 81       	ldd	r24, Y+3	; 0x03
     4f8:	88 30       	cpi	r24, 0x08	; 8
     4fa:	08 f0       	brcs	.+2      	; 0x4fe <DIO_eunmGetPin+0x30>
     4fc:	a2 c0       	rjmp	.+324    	; 0x642 <DIO_eunmGetPin+0x174>
	{
		switch (COPY_u8PORT)
     4fe:	8a 81       	ldd	r24, Y+2	; 0x02
     500:	28 2f       	mov	r18, r24
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	3f 83       	std	Y+7, r19	; 0x07
     506:	2e 83       	std	Y+6, r18	; 0x06
     508:	4e 81       	ldd	r20, Y+6	; 0x06
     50a:	5f 81       	ldd	r21, Y+7	; 0x07
     50c:	41 30       	cpi	r20, 0x01	; 1
     50e:	51 05       	cpc	r21, r1
     510:	c1 f1       	breq	.+112    	; 0x582 <DIO_eunmGetPin+0xb4>
     512:	8e 81       	ldd	r24, Y+6	; 0x06
     514:	9f 81       	ldd	r25, Y+7	; 0x07
     516:	82 30       	cpi	r24, 0x02	; 2
     518:	91 05       	cpc	r25, r1
     51a:	34 f4       	brge	.+12     	; 0x528 <DIO_eunmGetPin+0x5a>
     51c:	2e 81       	ldd	r18, Y+6	; 0x06
     51e:	3f 81       	ldd	r19, Y+7	; 0x07
     520:	21 15       	cp	r18, r1
     522:	31 05       	cpc	r19, r1
     524:	71 f0       	breq	.+28     	; 0x542 <DIO_eunmGetPin+0x74>
     526:	8e c0       	rjmp	.+284    	; 0x644 <DIO_eunmGetPin+0x176>
     528:	4e 81       	ldd	r20, Y+6	; 0x06
     52a:	5f 81       	ldd	r21, Y+7	; 0x07
     52c:	42 30       	cpi	r20, 0x02	; 2
     52e:	51 05       	cpc	r21, r1
     530:	09 f4       	brne	.+2      	; 0x534 <DIO_eunmGetPin+0x66>
     532:	47 c0       	rjmp	.+142    	; 0x5c2 <DIO_eunmGetPin+0xf4>
     534:	8e 81       	ldd	r24, Y+6	; 0x06
     536:	9f 81       	ldd	r25, Y+7	; 0x07
     538:	83 30       	cpi	r24, 0x03	; 3
     53a:	91 05       	cpc	r25, r1
     53c:	09 f4       	brne	.+2      	; 0x540 <DIO_eunmGetPin+0x72>
     53e:	61 c0       	rjmp	.+194    	; 0x602 <DIO_eunmGetPin+0x134>
     540:	81 c0       	rjmp	.+258    	; 0x644 <DIO_eunmGetPin+0x176>
		{
		case DIO_PORTA: *COPY_PtrData = RED_BIT(PINA_R,COPY_u8PIN);break;
     542:	e9 e3       	ldi	r30, 0x39	; 57
     544:	f0 e0       	ldi	r31, 0x00	; 0
     546:	80 81       	ld	r24, Z
     548:	48 2f       	mov	r20, r24
     54a:	50 e0       	ldi	r21, 0x00	; 0
     54c:	8b 81       	ldd	r24, Y+3	; 0x03
     54e:	28 2f       	mov	r18, r24
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	02 c0       	rjmp	.+4      	; 0x55c <DIO_eunmGetPin+0x8e>
     558:	88 0f       	add	r24, r24
     55a:	99 1f       	adc	r25, r25
     55c:	2a 95       	dec	r18
     55e:	e2 f7       	brpl	.-8      	; 0x558 <DIO_eunmGetPin+0x8a>
     560:	9a 01       	movw	r18, r20
     562:	28 23       	and	r18, r24
     564:	39 23       	and	r19, r25
     566:	8b 81       	ldd	r24, Y+3	; 0x03
     568:	88 2f       	mov	r24, r24
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	a9 01       	movw	r20, r18
     56e:	02 c0       	rjmp	.+4      	; 0x574 <DIO_eunmGetPin+0xa6>
     570:	55 95       	asr	r21
     572:	47 95       	ror	r20
     574:	8a 95       	dec	r24
     576:	e2 f7       	brpl	.-8      	; 0x570 <DIO_eunmGetPin+0xa2>
     578:	ca 01       	movw	r24, r20
     57a:	ec 81       	ldd	r30, Y+4	; 0x04
     57c:	fd 81       	ldd	r31, Y+5	; 0x05
     57e:	80 83       	st	Z, r24
     580:	61 c0       	rjmp	.+194    	; 0x644 <DIO_eunmGetPin+0x176>
		case DIO_PORTB: *COPY_PtrData = RED_BIT(PINB_R,COPY_u8PIN);break;
     582:	e6 e3       	ldi	r30, 0x36	; 54
     584:	f0 e0       	ldi	r31, 0x00	; 0
     586:	80 81       	ld	r24, Z
     588:	48 2f       	mov	r20, r24
     58a:	50 e0       	ldi	r21, 0x00	; 0
     58c:	8b 81       	ldd	r24, Y+3	; 0x03
     58e:	28 2f       	mov	r18, r24
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	02 c0       	rjmp	.+4      	; 0x59c <DIO_eunmGetPin+0xce>
     598:	88 0f       	add	r24, r24
     59a:	99 1f       	adc	r25, r25
     59c:	2a 95       	dec	r18
     59e:	e2 f7       	brpl	.-8      	; 0x598 <DIO_eunmGetPin+0xca>
     5a0:	9a 01       	movw	r18, r20
     5a2:	28 23       	and	r18, r24
     5a4:	39 23       	and	r19, r25
     5a6:	8b 81       	ldd	r24, Y+3	; 0x03
     5a8:	88 2f       	mov	r24, r24
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	a9 01       	movw	r20, r18
     5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <DIO_eunmGetPin+0xe6>
     5b0:	55 95       	asr	r21
     5b2:	47 95       	ror	r20
     5b4:	8a 95       	dec	r24
     5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <DIO_eunmGetPin+0xe2>
     5b8:	ca 01       	movw	r24, r20
     5ba:	ec 81       	ldd	r30, Y+4	; 0x04
     5bc:	fd 81       	ldd	r31, Y+5	; 0x05
     5be:	80 83       	st	Z, r24
     5c0:	41 c0       	rjmp	.+130    	; 0x644 <DIO_eunmGetPin+0x176>
		case DIO_PORTC: *COPY_PtrData = RED_BIT(PINC_R,COPY_u8PIN);break;
     5c2:	e3 e3       	ldi	r30, 0x33	; 51
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	80 81       	ld	r24, Z
     5c8:	48 2f       	mov	r20, r24
     5ca:	50 e0       	ldi	r21, 0x00	; 0
     5cc:	8b 81       	ldd	r24, Y+3	; 0x03
     5ce:	28 2f       	mov	r18, r24
     5d0:	30 e0       	ldi	r19, 0x00	; 0
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	02 c0       	rjmp	.+4      	; 0x5dc <DIO_eunmGetPin+0x10e>
     5d8:	88 0f       	add	r24, r24
     5da:	99 1f       	adc	r25, r25
     5dc:	2a 95       	dec	r18
     5de:	e2 f7       	brpl	.-8      	; 0x5d8 <DIO_eunmGetPin+0x10a>
     5e0:	9a 01       	movw	r18, r20
     5e2:	28 23       	and	r18, r24
     5e4:	39 23       	and	r19, r25
     5e6:	8b 81       	ldd	r24, Y+3	; 0x03
     5e8:	88 2f       	mov	r24, r24
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	a9 01       	movw	r20, r18
     5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <DIO_eunmGetPin+0x126>
     5f0:	55 95       	asr	r21
     5f2:	47 95       	ror	r20
     5f4:	8a 95       	dec	r24
     5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <DIO_eunmGetPin+0x122>
     5f8:	ca 01       	movw	r24, r20
     5fa:	ec 81       	ldd	r30, Y+4	; 0x04
     5fc:	fd 81       	ldd	r31, Y+5	; 0x05
     5fe:	80 83       	st	Z, r24
     600:	21 c0       	rjmp	.+66     	; 0x644 <DIO_eunmGetPin+0x176>
		case DIO_PORTD: *COPY_PtrData = RED_BIT(PIND_R,COPY_u8PIN);break;
     602:	e0 e3       	ldi	r30, 0x30	; 48
     604:	f0 e0       	ldi	r31, 0x00	; 0
     606:	80 81       	ld	r24, Z
     608:	48 2f       	mov	r20, r24
     60a:	50 e0       	ldi	r21, 0x00	; 0
     60c:	8b 81       	ldd	r24, Y+3	; 0x03
     60e:	28 2f       	mov	r18, r24
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	02 c0       	rjmp	.+4      	; 0x61c <DIO_eunmGetPin+0x14e>
     618:	88 0f       	add	r24, r24
     61a:	99 1f       	adc	r25, r25
     61c:	2a 95       	dec	r18
     61e:	e2 f7       	brpl	.-8      	; 0x618 <DIO_eunmGetPin+0x14a>
     620:	9a 01       	movw	r18, r20
     622:	28 23       	and	r18, r24
     624:	39 23       	and	r19, r25
     626:	8b 81       	ldd	r24, Y+3	; 0x03
     628:	88 2f       	mov	r24, r24
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	a9 01       	movw	r20, r18
     62e:	02 c0       	rjmp	.+4      	; 0x634 <DIO_eunmGetPin+0x166>
     630:	55 95       	asr	r21
     632:	47 95       	ror	r20
     634:	8a 95       	dec	r24
     636:	e2 f7       	brpl	.-8      	; 0x630 <DIO_eunmGetPin+0x162>
     638:	ca 01       	movw	r24, r20
     63a:	ec 81       	ldd	r30, Y+4	; 0x04
     63c:	fd 81       	ldd	r31, Y+5	; 0x05
     63e:	80 83       	st	Z, r24
     640:	01 c0       	rjmp	.+2      	; 0x644 <DIO_eunmGetPin+0x176>
		}
	}
	else
	{
		LOC_enumStatus = DIO_NOK;
     642:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumStatus;
     644:	89 81       	ldd	r24, Y+1	; 0x01
}
     646:	27 96       	adiw	r28, 0x07	; 7
     648:	0f b6       	in	r0, 0x3f	; 63
     64a:	f8 94       	cli
     64c:	de bf       	out	0x3e, r29	; 62
     64e:	0f be       	out	0x3f, r0	; 63
     650:	cd bf       	out	0x3d, r28	; 61
     652:	cf 91       	pop	r28
     654:	df 91       	pop	r29
     656:	08 95       	ret

00000658 <DIO_eunmTogglePin>:
DIO_ErrorStatus DIO_eunmTogglePin           (u8 COPY_u8PORT ,u8 COPY_u8PIN                      )
{
     658:	df 93       	push	r29
     65a:	cf 93       	push	r28
     65c:	00 d0       	rcall	.+0      	; 0x65e <DIO_eunmTogglePin+0x6>
     65e:	00 d0       	rcall	.+0      	; 0x660 <DIO_eunmTogglePin+0x8>
     660:	0f 92       	push	r0
     662:	cd b7       	in	r28, 0x3d	; 61
     664:	de b7       	in	r29, 0x3e	; 62
     666:	8a 83       	std	Y+2, r24	; 0x02
     668:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumStatus = DIO_OK;
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	89 83       	std	Y+1, r24	; 0x01
	if((COPY_u8PORT <= DIO_PORTD)&&(COPY_u8PIN <= DIO_PIN7))
     66e:	8a 81       	ldd	r24, Y+2	; 0x02
     670:	84 30       	cpi	r24, 0x04	; 4
     672:	08 f0       	brcs	.+2      	; 0x676 <DIO_eunmTogglePin+0x1e>
     674:	73 c0       	rjmp	.+230    	; 0x75c <DIO_eunmTogglePin+0x104>
     676:	8b 81       	ldd	r24, Y+3	; 0x03
     678:	88 30       	cpi	r24, 0x08	; 8
     67a:	08 f0       	brcs	.+2      	; 0x67e <DIO_eunmTogglePin+0x26>
     67c:	6f c0       	rjmp	.+222    	; 0x75c <DIO_eunmTogglePin+0x104>
	{
		switch (COPY_u8PORT)
     67e:	8a 81       	ldd	r24, Y+2	; 0x02
     680:	28 2f       	mov	r18, r24
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	3d 83       	std	Y+5, r19	; 0x05
     686:	2c 83       	std	Y+4, r18	; 0x04
     688:	8c 81       	ldd	r24, Y+4	; 0x04
     68a:	9d 81       	ldd	r25, Y+5	; 0x05
     68c:	81 30       	cpi	r24, 0x01	; 1
     68e:	91 05       	cpc	r25, r1
     690:	49 f1       	breq	.+82     	; 0x6e4 <DIO_eunmTogglePin+0x8c>
     692:	2c 81       	ldd	r18, Y+4	; 0x04
     694:	3d 81       	ldd	r19, Y+5	; 0x05
     696:	22 30       	cpi	r18, 0x02	; 2
     698:	31 05       	cpc	r19, r1
     69a:	2c f4       	brge	.+10     	; 0x6a6 <DIO_eunmTogglePin+0x4e>
     69c:	8c 81       	ldd	r24, Y+4	; 0x04
     69e:	9d 81       	ldd	r25, Y+5	; 0x05
     6a0:	00 97       	sbiw	r24, 0x00	; 0
     6a2:	61 f0       	breq	.+24     	; 0x6bc <DIO_eunmTogglePin+0x64>
     6a4:	5c c0       	rjmp	.+184    	; 0x75e <DIO_eunmTogglePin+0x106>
     6a6:	2c 81       	ldd	r18, Y+4	; 0x04
     6a8:	3d 81       	ldd	r19, Y+5	; 0x05
     6aa:	22 30       	cpi	r18, 0x02	; 2
     6ac:	31 05       	cpc	r19, r1
     6ae:	71 f1       	breq	.+92     	; 0x70c <DIO_eunmTogglePin+0xb4>
     6b0:	8c 81       	ldd	r24, Y+4	; 0x04
     6b2:	9d 81       	ldd	r25, Y+5	; 0x05
     6b4:	83 30       	cpi	r24, 0x03	; 3
     6b6:	91 05       	cpc	r25, r1
     6b8:	e9 f1       	breq	.+122    	; 0x734 <DIO_eunmTogglePin+0xdc>
     6ba:	51 c0       	rjmp	.+162    	; 0x75e <DIO_eunmTogglePin+0x106>
		{
		case DIO_PORTA: TOG_BIT(PORTA_R,COPY_u8PIN);break;
     6bc:	ab e3       	ldi	r26, 0x3B	; 59
     6be:	b0 e0       	ldi	r27, 0x00	; 0
     6c0:	eb e3       	ldi	r30, 0x3B	; 59
     6c2:	f0 e0       	ldi	r31, 0x00	; 0
     6c4:	80 81       	ld	r24, Z
     6c6:	48 2f       	mov	r20, r24
     6c8:	8b 81       	ldd	r24, Y+3	; 0x03
     6ca:	28 2f       	mov	r18, r24
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	02 2e       	mov	r0, r18
     6d4:	02 c0       	rjmp	.+4      	; 0x6da <DIO_eunmTogglePin+0x82>
     6d6:	88 0f       	add	r24, r24
     6d8:	99 1f       	adc	r25, r25
     6da:	0a 94       	dec	r0
     6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <DIO_eunmTogglePin+0x7e>
     6de:	84 27       	eor	r24, r20
     6e0:	8c 93       	st	X, r24
     6e2:	3d c0       	rjmp	.+122    	; 0x75e <DIO_eunmTogglePin+0x106>
		case DIO_PORTB: TOG_BIT(PORTB_R,COPY_u8PIN);break;
     6e4:	a8 e3       	ldi	r26, 0x38	; 56
     6e6:	b0 e0       	ldi	r27, 0x00	; 0
     6e8:	e8 e3       	ldi	r30, 0x38	; 56
     6ea:	f0 e0       	ldi	r31, 0x00	; 0
     6ec:	80 81       	ld	r24, Z
     6ee:	48 2f       	mov	r20, r24
     6f0:	8b 81       	ldd	r24, Y+3	; 0x03
     6f2:	28 2f       	mov	r18, r24
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	02 2e       	mov	r0, r18
     6fc:	02 c0       	rjmp	.+4      	; 0x702 <DIO_eunmTogglePin+0xaa>
     6fe:	88 0f       	add	r24, r24
     700:	99 1f       	adc	r25, r25
     702:	0a 94       	dec	r0
     704:	e2 f7       	brpl	.-8      	; 0x6fe <DIO_eunmTogglePin+0xa6>
     706:	84 27       	eor	r24, r20
     708:	8c 93       	st	X, r24
     70a:	29 c0       	rjmp	.+82     	; 0x75e <DIO_eunmTogglePin+0x106>
		case DIO_PORTC: TOG_BIT(PORTC_R,COPY_u8PIN);break;
     70c:	a5 e3       	ldi	r26, 0x35	; 53
     70e:	b0 e0       	ldi	r27, 0x00	; 0
     710:	e5 e3       	ldi	r30, 0x35	; 53
     712:	f0 e0       	ldi	r31, 0x00	; 0
     714:	80 81       	ld	r24, Z
     716:	48 2f       	mov	r20, r24
     718:	8b 81       	ldd	r24, Y+3	; 0x03
     71a:	28 2f       	mov	r18, r24
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	02 2e       	mov	r0, r18
     724:	02 c0       	rjmp	.+4      	; 0x72a <DIO_eunmTogglePin+0xd2>
     726:	88 0f       	add	r24, r24
     728:	99 1f       	adc	r25, r25
     72a:	0a 94       	dec	r0
     72c:	e2 f7       	brpl	.-8      	; 0x726 <DIO_eunmTogglePin+0xce>
     72e:	84 27       	eor	r24, r20
     730:	8c 93       	st	X, r24
     732:	15 c0       	rjmp	.+42     	; 0x75e <DIO_eunmTogglePin+0x106>
		case DIO_PORTD: TOG_BIT(PORTD_R,COPY_u8PIN);break;
     734:	a2 e3       	ldi	r26, 0x32	; 50
     736:	b0 e0       	ldi	r27, 0x00	; 0
     738:	e2 e3       	ldi	r30, 0x32	; 50
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	80 81       	ld	r24, Z
     73e:	48 2f       	mov	r20, r24
     740:	8b 81       	ldd	r24, Y+3	; 0x03
     742:	28 2f       	mov	r18, r24
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	02 2e       	mov	r0, r18
     74c:	02 c0       	rjmp	.+4      	; 0x752 <DIO_eunmTogglePin+0xfa>
     74e:	88 0f       	add	r24, r24
     750:	99 1f       	adc	r25, r25
     752:	0a 94       	dec	r0
     754:	e2 f7       	brpl	.-8      	; 0x74e <DIO_eunmTogglePin+0xf6>
     756:	84 27       	eor	r24, r20
     758:	8c 93       	st	X, r24
     75a:	01 c0       	rjmp	.+2      	; 0x75e <DIO_eunmTogglePin+0x106>
		}
	}
	else
	{
		LOC_enumStatus = DIO_NOK;
     75c:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumStatus;
     75e:	89 81       	ldd	r24, Y+1	; 0x01
}
     760:	0f 90       	pop	r0
     762:	0f 90       	pop	r0
     764:	0f 90       	pop	r0
     766:	0f 90       	pop	r0
     768:	0f 90       	pop	r0
     76a:	cf 91       	pop	r28
     76c:	df 91       	pop	r29
     76e:	08 95       	ret

00000770 <DIO_eunmSetPortDirection>:
DIO_ErrorStatus DIO_eunmSetPortDirection    (u8 COPY_u8PORT ,u8 COPY_u8Direction                )
{
     770:	df 93       	push	r29
     772:	cf 93       	push	r28
     774:	00 d0       	rcall	.+0      	; 0x776 <DIO_eunmSetPortDirection+0x6>
     776:	00 d0       	rcall	.+0      	; 0x778 <DIO_eunmSetPortDirection+0x8>
     778:	0f 92       	push	r0
     77a:	cd b7       	in	r28, 0x3d	; 61
     77c:	de b7       	in	r29, 0x3e	; 62
     77e:	8a 83       	std	Y+2, r24	; 0x02
     780:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumStatus = DIO_OK;
     782:	81 e0       	ldi	r24, 0x01	; 1
     784:	89 83       	std	Y+1, r24	; 0x01
	if(COPY_u8PORT <= DIO_PORTD)
     786:	8a 81       	ldd	r24, Y+2	; 0x02
     788:	84 30       	cpi	r24, 0x04	; 4
     78a:	98 f5       	brcc	.+102    	; 0x7f2 <DIO_eunmSetPortDirection+0x82>
	{
		switch (COPY_u8PORT)
     78c:	8a 81       	ldd	r24, Y+2	; 0x02
     78e:	28 2f       	mov	r18, r24
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	3d 83       	std	Y+5, r19	; 0x05
     794:	2c 83       	std	Y+4, r18	; 0x04
     796:	8c 81       	ldd	r24, Y+4	; 0x04
     798:	9d 81       	ldd	r25, Y+5	; 0x05
     79a:	81 30       	cpi	r24, 0x01	; 1
     79c:	91 05       	cpc	r25, r1
     79e:	d1 f0       	breq	.+52     	; 0x7d4 <DIO_eunmSetPortDirection+0x64>
     7a0:	2c 81       	ldd	r18, Y+4	; 0x04
     7a2:	3d 81       	ldd	r19, Y+5	; 0x05
     7a4:	22 30       	cpi	r18, 0x02	; 2
     7a6:	31 05       	cpc	r19, r1
     7a8:	2c f4       	brge	.+10     	; 0x7b4 <DIO_eunmSetPortDirection+0x44>
     7aa:	8c 81       	ldd	r24, Y+4	; 0x04
     7ac:	9d 81       	ldd	r25, Y+5	; 0x05
     7ae:	00 97       	sbiw	r24, 0x00	; 0
     7b0:	61 f0       	breq	.+24     	; 0x7ca <DIO_eunmSetPortDirection+0x5a>
     7b2:	20 c0       	rjmp	.+64     	; 0x7f4 <DIO_eunmSetPortDirection+0x84>
     7b4:	2c 81       	ldd	r18, Y+4	; 0x04
     7b6:	3d 81       	ldd	r19, Y+5	; 0x05
     7b8:	22 30       	cpi	r18, 0x02	; 2
     7ba:	31 05       	cpc	r19, r1
     7bc:	81 f0       	breq	.+32     	; 0x7de <DIO_eunmSetPortDirection+0x6e>
     7be:	8c 81       	ldd	r24, Y+4	; 0x04
     7c0:	9d 81       	ldd	r25, Y+5	; 0x05
     7c2:	83 30       	cpi	r24, 0x03	; 3
     7c4:	91 05       	cpc	r25, r1
     7c6:	81 f0       	breq	.+32     	; 0x7e8 <DIO_eunmSetPortDirection+0x78>
     7c8:	15 c0       	rjmp	.+42     	; 0x7f4 <DIO_eunmSetPortDirection+0x84>
		{
		case DIO_PORTA: DDRA_R = COPY_u8Direction;break;
     7ca:	ea e3       	ldi	r30, 0x3A	; 58
     7cc:	f0 e0       	ldi	r31, 0x00	; 0
     7ce:	8b 81       	ldd	r24, Y+3	; 0x03
     7d0:	80 83       	st	Z, r24
     7d2:	10 c0       	rjmp	.+32     	; 0x7f4 <DIO_eunmSetPortDirection+0x84>
		case DIO_PORTB: DDRB_R = COPY_u8Direction;break;
     7d4:	e7 e3       	ldi	r30, 0x37	; 55
     7d6:	f0 e0       	ldi	r31, 0x00	; 0
     7d8:	8b 81       	ldd	r24, Y+3	; 0x03
     7da:	80 83       	st	Z, r24
     7dc:	0b c0       	rjmp	.+22     	; 0x7f4 <DIO_eunmSetPortDirection+0x84>
		case DIO_PORTC: DDRC_R = COPY_u8Direction;break;
     7de:	e4 e3       	ldi	r30, 0x34	; 52
     7e0:	f0 e0       	ldi	r31, 0x00	; 0
     7e2:	8b 81       	ldd	r24, Y+3	; 0x03
     7e4:	80 83       	st	Z, r24
     7e6:	06 c0       	rjmp	.+12     	; 0x7f4 <DIO_eunmSetPortDirection+0x84>
		case DIO_PORTD: DDRD_R = COPY_u8Direction;break;
     7e8:	e1 e3       	ldi	r30, 0x31	; 49
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	8b 81       	ldd	r24, Y+3	; 0x03
     7ee:	80 83       	st	Z, r24
     7f0:	01 c0       	rjmp	.+2      	; 0x7f4 <DIO_eunmSetPortDirection+0x84>
		}
	}
	else
	{
		LOC_enumStatus = DIO_NOK;
     7f2:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumStatus;
     7f4:	89 81       	ldd	r24, Y+1	; 0x01
}
     7f6:	0f 90       	pop	r0
     7f8:	0f 90       	pop	r0
     7fa:	0f 90       	pop	r0
     7fc:	0f 90       	pop	r0
     7fe:	0f 90       	pop	r0
     800:	cf 91       	pop	r28
     802:	df 91       	pop	r29
     804:	08 95       	ret

00000806 <DIO_eunmSetPortValue>:
DIO_ErrorStatus DIO_eunmSetPortValue        (u8 COPY_u8PORT ,u8 COPY_u8Value                    )
{
     806:	df 93       	push	r29
     808:	cf 93       	push	r28
     80a:	00 d0       	rcall	.+0      	; 0x80c <DIO_eunmSetPortValue+0x6>
     80c:	00 d0       	rcall	.+0      	; 0x80e <DIO_eunmSetPortValue+0x8>
     80e:	0f 92       	push	r0
     810:	cd b7       	in	r28, 0x3d	; 61
     812:	de b7       	in	r29, 0x3e	; 62
     814:	8a 83       	std	Y+2, r24	; 0x02
     816:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumStatus = DIO_OK;
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	89 83       	std	Y+1, r24	; 0x01
	if((COPY_u8PORT <= DIO_PORTD) && ( (COPY_u8Value<=255) || (COPY_u8Value==DIO_PORT_LOW) || (COPY_u8Value==DIO_PORT_HIGH) ))
     81c:	8a 81       	ldd	r24, Y+2	; 0x02
     81e:	84 30       	cpi	r24, 0x04	; 4
     820:	98 f5       	brcc	.+102    	; 0x888 <__stack+0x29>
	{
		switch (COPY_u8PORT)
     822:	8a 81       	ldd	r24, Y+2	; 0x02
     824:	28 2f       	mov	r18, r24
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	3d 83       	std	Y+5, r19	; 0x05
     82a:	2c 83       	std	Y+4, r18	; 0x04
     82c:	8c 81       	ldd	r24, Y+4	; 0x04
     82e:	9d 81       	ldd	r25, Y+5	; 0x05
     830:	81 30       	cpi	r24, 0x01	; 1
     832:	91 05       	cpc	r25, r1
     834:	d1 f0       	breq	.+52     	; 0x86a <__stack+0xb>
     836:	2c 81       	ldd	r18, Y+4	; 0x04
     838:	3d 81       	ldd	r19, Y+5	; 0x05
     83a:	22 30       	cpi	r18, 0x02	; 2
     83c:	31 05       	cpc	r19, r1
     83e:	2c f4       	brge	.+10     	; 0x84a <DIO_eunmSetPortValue+0x44>
     840:	8c 81       	ldd	r24, Y+4	; 0x04
     842:	9d 81       	ldd	r25, Y+5	; 0x05
     844:	00 97       	sbiw	r24, 0x00	; 0
     846:	61 f0       	breq	.+24     	; 0x860 <__stack+0x1>
     848:	20 c0       	rjmp	.+64     	; 0x88a <__stack+0x2b>
     84a:	2c 81       	ldd	r18, Y+4	; 0x04
     84c:	3d 81       	ldd	r19, Y+5	; 0x05
     84e:	22 30       	cpi	r18, 0x02	; 2
     850:	31 05       	cpc	r19, r1
     852:	81 f0       	breq	.+32     	; 0x874 <__stack+0x15>
     854:	8c 81       	ldd	r24, Y+4	; 0x04
     856:	9d 81       	ldd	r25, Y+5	; 0x05
     858:	83 30       	cpi	r24, 0x03	; 3
     85a:	91 05       	cpc	r25, r1
     85c:	81 f0       	breq	.+32     	; 0x87e <__stack+0x1f>
     85e:	15 c0       	rjmp	.+42     	; 0x88a <__stack+0x2b>
		{
		case DIO_PORTA: PORTA_R = COPY_u8Value;break;
     860:	eb e3       	ldi	r30, 0x3B	; 59
     862:	f0 e0       	ldi	r31, 0x00	; 0
     864:	8b 81       	ldd	r24, Y+3	; 0x03
     866:	80 83       	st	Z, r24
     868:	10 c0       	rjmp	.+32     	; 0x88a <__stack+0x2b>
		case DIO_PORTB: PORTB_R = COPY_u8Value;break;
     86a:	e8 e3       	ldi	r30, 0x38	; 56
     86c:	f0 e0       	ldi	r31, 0x00	; 0
     86e:	8b 81       	ldd	r24, Y+3	; 0x03
     870:	80 83       	st	Z, r24
     872:	0b c0       	rjmp	.+22     	; 0x88a <__stack+0x2b>
		case DIO_PORTC: PORTC_R = COPY_u8Value;break;
     874:	e5 e3       	ldi	r30, 0x35	; 53
     876:	f0 e0       	ldi	r31, 0x00	; 0
     878:	8b 81       	ldd	r24, Y+3	; 0x03
     87a:	80 83       	st	Z, r24
     87c:	06 c0       	rjmp	.+12     	; 0x88a <__stack+0x2b>
		case DIO_PORTD: PORTD_R = COPY_u8Value;break;
     87e:	e2 e3       	ldi	r30, 0x32	; 50
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	8b 81       	ldd	r24, Y+3	; 0x03
     884:	80 83       	st	Z, r24
     886:	01 c0       	rjmp	.+2      	; 0x88a <__stack+0x2b>
		}
	}
	else
	{
		LOC_enumStatus = DIO_NOK;
     888:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumStatus;
     88a:	89 81       	ldd	r24, Y+1	; 0x01
}
     88c:	0f 90       	pop	r0
     88e:	0f 90       	pop	r0
     890:	0f 90       	pop	r0
     892:	0f 90       	pop	r0
     894:	0f 90       	pop	r0
     896:	cf 91       	pop	r28
     898:	df 91       	pop	r29
     89a:	08 95       	ret

0000089c <DIO_eunmGetPort>:
DIO_ErrorStatus DIO_eunmGetPort             (u8 COPY_u8PORT ,u8 *COPY_PtrData			        )
{
     89c:	df 93       	push	r29
     89e:	cf 93       	push	r28
     8a0:	00 d0       	rcall	.+0      	; 0x8a2 <DIO_eunmGetPort+0x6>
     8a2:	00 d0       	rcall	.+0      	; 0x8a4 <DIO_eunmGetPort+0x8>
     8a4:	00 d0       	rcall	.+0      	; 0x8a6 <DIO_eunmGetPort+0xa>
     8a6:	cd b7       	in	r28, 0x3d	; 61
     8a8:	de b7       	in	r29, 0x3e	; 62
     8aa:	8a 83       	std	Y+2, r24	; 0x02
     8ac:	7c 83       	std	Y+4, r23	; 0x04
     8ae:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumStatus = DIO_OK;
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	89 83       	std	Y+1, r24	; 0x01
	if(COPY_u8PORT <= DIO_PORTD)
     8b4:	8a 81       	ldd	r24, Y+2	; 0x02
     8b6:	84 30       	cpi	r24, 0x04	; 4
     8b8:	d8 f5       	brcc	.+118    	; 0x930 <DIO_eunmGetPort+0x94>
	{
		switch (COPY_u8PORT)
     8ba:	8a 81       	ldd	r24, Y+2	; 0x02
     8bc:	28 2f       	mov	r18, r24
     8be:	30 e0       	ldi	r19, 0x00	; 0
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	2d 83       	std	Y+5, r18	; 0x05
     8c4:	8d 81       	ldd	r24, Y+5	; 0x05
     8c6:	9e 81       	ldd	r25, Y+6	; 0x06
     8c8:	81 30       	cpi	r24, 0x01	; 1
     8ca:	91 05       	cpc	r25, r1
     8cc:	e1 f0       	breq	.+56     	; 0x906 <DIO_eunmGetPort+0x6a>
     8ce:	2d 81       	ldd	r18, Y+5	; 0x05
     8d0:	3e 81       	ldd	r19, Y+6	; 0x06
     8d2:	22 30       	cpi	r18, 0x02	; 2
     8d4:	31 05       	cpc	r19, r1
     8d6:	2c f4       	brge	.+10     	; 0x8e2 <DIO_eunmGetPort+0x46>
     8d8:	8d 81       	ldd	r24, Y+5	; 0x05
     8da:	9e 81       	ldd	r25, Y+6	; 0x06
     8dc:	00 97       	sbiw	r24, 0x00	; 0
     8de:	61 f0       	breq	.+24     	; 0x8f8 <DIO_eunmGetPort+0x5c>
     8e0:	28 c0       	rjmp	.+80     	; 0x932 <DIO_eunmGetPort+0x96>
     8e2:	2d 81       	ldd	r18, Y+5	; 0x05
     8e4:	3e 81       	ldd	r19, Y+6	; 0x06
     8e6:	22 30       	cpi	r18, 0x02	; 2
     8e8:	31 05       	cpc	r19, r1
     8ea:	a1 f0       	breq	.+40     	; 0x914 <DIO_eunmGetPort+0x78>
     8ec:	8d 81       	ldd	r24, Y+5	; 0x05
     8ee:	9e 81       	ldd	r25, Y+6	; 0x06
     8f0:	83 30       	cpi	r24, 0x03	; 3
     8f2:	91 05       	cpc	r25, r1
     8f4:	b1 f0       	breq	.+44     	; 0x922 <DIO_eunmGetPort+0x86>
     8f6:	1d c0       	rjmp	.+58     	; 0x932 <DIO_eunmGetPort+0x96>
		{
		case DIO_PORTA: *COPY_PtrData = PINA_R;break;
     8f8:	e9 e3       	ldi	r30, 0x39	; 57
     8fa:	f0 e0       	ldi	r31, 0x00	; 0
     8fc:	80 81       	ld	r24, Z
     8fe:	eb 81       	ldd	r30, Y+3	; 0x03
     900:	fc 81       	ldd	r31, Y+4	; 0x04
     902:	80 83       	st	Z, r24
     904:	16 c0       	rjmp	.+44     	; 0x932 <DIO_eunmGetPort+0x96>
		case DIO_PORTB: *COPY_PtrData = PINB_R;break;
     906:	e6 e3       	ldi	r30, 0x36	; 54
     908:	f0 e0       	ldi	r31, 0x00	; 0
     90a:	80 81       	ld	r24, Z
     90c:	eb 81       	ldd	r30, Y+3	; 0x03
     90e:	fc 81       	ldd	r31, Y+4	; 0x04
     910:	80 83       	st	Z, r24
     912:	0f c0       	rjmp	.+30     	; 0x932 <DIO_eunmGetPort+0x96>
		case DIO_PORTC: *COPY_PtrData = PINC_R;break;
     914:	e3 e3       	ldi	r30, 0x33	; 51
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	80 81       	ld	r24, Z
     91a:	eb 81       	ldd	r30, Y+3	; 0x03
     91c:	fc 81       	ldd	r31, Y+4	; 0x04
     91e:	80 83       	st	Z, r24
     920:	08 c0       	rjmp	.+16     	; 0x932 <DIO_eunmGetPort+0x96>
		case DIO_PORTD: *COPY_PtrData = PIND_R;break;
     922:	e0 e3       	ldi	r30, 0x30	; 48
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	80 81       	ld	r24, Z
     928:	eb 81       	ldd	r30, Y+3	; 0x03
     92a:	fc 81       	ldd	r31, Y+4	; 0x04
     92c:	80 83       	st	Z, r24
     92e:	01 c0       	rjmp	.+2      	; 0x932 <DIO_eunmGetPort+0x96>
		}
	}
	else
	{
		LOC_enumStatus = DIO_NOK;
     930:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumStatus;
     932:	89 81       	ldd	r24, Y+1	; 0x01
}
     934:	26 96       	adiw	r28, 0x06	; 6
     936:	0f b6       	in	r0, 0x3f	; 63
     938:	f8 94       	cli
     93a:	de bf       	out	0x3e, r29	; 62
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	cd bf       	out	0x3d, r28	; 61
     940:	cf 91       	pop	r28
     942:	df 91       	pop	r29
     944:	08 95       	ret

00000946 <DIO_eunmToggelPort>:
DIO_ErrorStatus DIO_eunmToggelPort          (u8 COPY_u8PORT 				  			        )
{
     946:	df 93       	push	r29
     948:	cf 93       	push	r28
     94a:	00 d0       	rcall	.+0      	; 0x94c <DIO_eunmToggelPort+0x6>
     94c:	00 d0       	rcall	.+0      	; 0x94e <DIO_eunmToggelPort+0x8>
     94e:	cd b7       	in	r28, 0x3d	; 61
     950:	de b7       	in	r29, 0x3e	; 62
     952:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ErrorStatus LOC_enumStatus = DIO_OK;
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	89 83       	std	Y+1, r24	; 0x01
	if(COPY_u8PORT <= DIO_PORTD)
     958:	8a 81       	ldd	r24, Y+2	; 0x02
     95a:	84 30       	cpi	r24, 0x04	; 4
     95c:	08 f0       	brcs	.+2      	; 0x960 <DIO_eunmToggelPort+0x1a>
     95e:	3f c0       	rjmp	.+126    	; 0x9de <DIO_eunmToggelPort+0x98>
	{
		switch (COPY_u8PORT)
     960:	8a 81       	ldd	r24, Y+2	; 0x02
     962:	28 2f       	mov	r18, r24
     964:	30 e0       	ldi	r19, 0x00	; 0
     966:	3c 83       	std	Y+4, r19	; 0x04
     968:	2b 83       	std	Y+3, r18	; 0x03
     96a:	8b 81       	ldd	r24, Y+3	; 0x03
     96c:	9c 81       	ldd	r25, Y+4	; 0x04
     96e:	81 30       	cpi	r24, 0x01	; 1
     970:	91 05       	cpc	r25, r1
     972:	e9 f0       	breq	.+58     	; 0x9ae <DIO_eunmToggelPort+0x68>
     974:	2b 81       	ldd	r18, Y+3	; 0x03
     976:	3c 81       	ldd	r19, Y+4	; 0x04
     978:	22 30       	cpi	r18, 0x02	; 2
     97a:	31 05       	cpc	r19, r1
     97c:	2c f4       	brge	.+10     	; 0x988 <DIO_eunmToggelPort+0x42>
     97e:	8b 81       	ldd	r24, Y+3	; 0x03
     980:	9c 81       	ldd	r25, Y+4	; 0x04
     982:	00 97       	sbiw	r24, 0x00	; 0
     984:	61 f0       	breq	.+24     	; 0x99e <DIO_eunmToggelPort+0x58>
     986:	2c c0       	rjmp	.+88     	; 0x9e0 <DIO_eunmToggelPort+0x9a>
     988:	2b 81       	ldd	r18, Y+3	; 0x03
     98a:	3c 81       	ldd	r19, Y+4	; 0x04
     98c:	22 30       	cpi	r18, 0x02	; 2
     98e:	31 05       	cpc	r19, r1
     990:	b1 f0       	breq	.+44     	; 0x9be <DIO_eunmToggelPort+0x78>
     992:	8b 81       	ldd	r24, Y+3	; 0x03
     994:	9c 81       	ldd	r25, Y+4	; 0x04
     996:	83 30       	cpi	r24, 0x03	; 3
     998:	91 05       	cpc	r25, r1
     99a:	c9 f0       	breq	.+50     	; 0x9ce <DIO_eunmToggelPort+0x88>
     99c:	21 c0       	rjmp	.+66     	; 0x9e0 <DIO_eunmToggelPort+0x9a>
		{
		case DIO_PORTA: PORTA_R = ~PORTA_R;break;
     99e:	ab e3       	ldi	r26, 0x3B	; 59
     9a0:	b0 e0       	ldi	r27, 0x00	; 0
     9a2:	eb e3       	ldi	r30, 0x3B	; 59
     9a4:	f0 e0       	ldi	r31, 0x00	; 0
     9a6:	80 81       	ld	r24, Z
     9a8:	80 95       	com	r24
     9aa:	8c 93       	st	X, r24
     9ac:	19 c0       	rjmp	.+50     	; 0x9e0 <DIO_eunmToggelPort+0x9a>
		case DIO_PORTB: PORTB_R = ~PORTB_R;break;
     9ae:	a8 e3       	ldi	r26, 0x38	; 56
     9b0:	b0 e0       	ldi	r27, 0x00	; 0
     9b2:	e8 e3       	ldi	r30, 0x38	; 56
     9b4:	f0 e0       	ldi	r31, 0x00	; 0
     9b6:	80 81       	ld	r24, Z
     9b8:	80 95       	com	r24
     9ba:	8c 93       	st	X, r24
     9bc:	11 c0       	rjmp	.+34     	; 0x9e0 <DIO_eunmToggelPort+0x9a>
		case DIO_PORTC: PORTC_R = ~PORTC_R;break;
     9be:	a5 e3       	ldi	r26, 0x35	; 53
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	e5 e3       	ldi	r30, 0x35	; 53
     9c4:	f0 e0       	ldi	r31, 0x00	; 0
     9c6:	80 81       	ld	r24, Z
     9c8:	80 95       	com	r24
     9ca:	8c 93       	st	X, r24
     9cc:	09 c0       	rjmp	.+18     	; 0x9e0 <DIO_eunmToggelPort+0x9a>
		case DIO_PORTD: PORTD_R = ~PORTD_R;break;
     9ce:	a2 e3       	ldi	r26, 0x32	; 50
     9d0:	b0 e0       	ldi	r27, 0x00	; 0
     9d2:	e2 e3       	ldi	r30, 0x32	; 50
     9d4:	f0 e0       	ldi	r31, 0x00	; 0
     9d6:	80 81       	ld	r24, Z
     9d8:	80 95       	com	r24
     9da:	8c 93       	st	X, r24
     9dc:	01 c0       	rjmp	.+2      	; 0x9e0 <DIO_eunmToggelPort+0x9a>
		}
	}
	else
	{
		LOC_enumStatus = DIO_NOK;
     9de:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumStatus ;
     9e0:	89 81       	ldd	r24, Y+1	; 0x01
}
     9e2:	0f 90       	pop	r0
     9e4:	0f 90       	pop	r0
     9e6:	0f 90       	pop	r0
     9e8:	0f 90       	pop	r0
     9ea:	cf 91       	pop	r28
     9ec:	df 91       	pop	r29
     9ee:	08 95       	ret

000009f0 <DIO_eunmSetPinInterPullUp>:
DIO_ErrorStatus DIO_eunmSetPinInterPullUp     (u8 COPY_u8PORT ,u8 COPY_u8PIN ,u8 COPY_u8ConnectPullUp )
{
     9f0:	df 93       	push	r29
     9f2:	cf 93       	push	r28
     9f4:	00 d0       	rcall	.+0      	; 0x9f6 <DIO_eunmSetPinInterPullUp+0x6>
     9f6:	00 d0       	rcall	.+0      	; 0x9f8 <DIO_eunmSetPinInterPullUp+0x8>
     9f8:	00 d0       	rcall	.+0      	; 0x9fa <DIO_eunmSetPinInterPullUp+0xa>
     9fa:	cd b7       	in	r28, 0x3d	; 61
     9fc:	de b7       	in	r29, 0x3e	; 62
     9fe:	8a 83       	std	Y+2, r24	; 0x02
     a00:	6b 83       	std	Y+3, r22	; 0x03
     a02:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus LOC_enumStatus = DIO_OK;
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	89 83       	std	Y+1, r24	; 0x01
	if((COPY_u8PORT <= DIO_PORTD) && (COPY_u8PIN <= DIO_PIN7))
     a08:	8a 81       	ldd	r24, Y+2	; 0x02
     a0a:	84 30       	cpi	r24, 0x04	; 4
     a0c:	08 f0       	brcs	.+2      	; 0xa10 <DIO_eunmSetPinInterPullUp+0x20>
     a0e:	3e c1       	rjmp	.+636    	; 0xc8c <DIO_eunmSetPinInterPullUp+0x29c>
     a10:	8b 81       	ldd	r24, Y+3	; 0x03
     a12:	88 30       	cpi	r24, 0x08	; 8
     a14:	08 f0       	brcs	.+2      	; 0xa18 <DIO_eunmSetPinInterPullUp+0x28>
     a16:	3a c1       	rjmp	.+628    	; 0xc8c <DIO_eunmSetPinInterPullUp+0x29c>
	{
		switch(COPY_u8PORT)
     a18:	8a 81       	ldd	r24, Y+2	; 0x02
     a1a:	28 2f       	mov	r18, r24
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	3e 83       	std	Y+6, r19	; 0x06
     a20:	2d 83       	std	Y+5, r18	; 0x05
     a22:	8d 81       	ldd	r24, Y+5	; 0x05
     a24:	9e 81       	ldd	r25, Y+6	; 0x06
     a26:	81 30       	cpi	r24, 0x01	; 1
     a28:	91 05       	cpc	r25, r1
     a2a:	09 f4       	brne	.+2      	; 0xa2e <DIO_eunmSetPinInterPullUp+0x3e>
     a2c:	5d c0       	rjmp	.+186    	; 0xae8 <DIO_eunmSetPinInterPullUp+0xf8>
     a2e:	2d 81       	ldd	r18, Y+5	; 0x05
     a30:	3e 81       	ldd	r19, Y+6	; 0x06
     a32:	22 30       	cpi	r18, 0x02	; 2
     a34:	31 05       	cpc	r19, r1
     a36:	2c f4       	brge	.+10     	; 0xa42 <DIO_eunmSetPinInterPullUp+0x52>
     a38:	8d 81       	ldd	r24, Y+5	; 0x05
     a3a:	9e 81       	ldd	r25, Y+6	; 0x06
     a3c:	00 97       	sbiw	r24, 0x00	; 0
     a3e:	71 f0       	breq	.+28     	; 0xa5c <DIO_eunmSetPinInterPullUp+0x6c>
     a40:	26 c1       	rjmp	.+588    	; 0xc8e <DIO_eunmSetPinInterPullUp+0x29e>
     a42:	2d 81       	ldd	r18, Y+5	; 0x05
     a44:	3e 81       	ldd	r19, Y+6	; 0x06
     a46:	22 30       	cpi	r18, 0x02	; 2
     a48:	31 05       	cpc	r19, r1
     a4a:	09 f4       	brne	.+2      	; 0xa4e <DIO_eunmSetPinInterPullUp+0x5e>
     a4c:	93 c0       	rjmp	.+294    	; 0xb74 <DIO_eunmSetPinInterPullUp+0x184>
     a4e:	8d 81       	ldd	r24, Y+5	; 0x05
     a50:	9e 81       	ldd	r25, Y+6	; 0x06
     a52:	83 30       	cpi	r24, 0x03	; 3
     a54:	91 05       	cpc	r25, r1
     a56:	09 f4       	brne	.+2      	; 0xa5a <DIO_eunmSetPinInterPullUp+0x6a>
     a58:	d3 c0       	rjmp	.+422    	; 0xc00 <DIO_eunmSetPinInterPullUp+0x210>
     a5a:	19 c1       	rjmp	.+562    	; 0xc8e <DIO_eunmSetPinInterPullUp+0x29e>
		{
		case DIO_PORTA:
			if(COPY_u8ConnectPullUp == DIO_PIN_HIGH)
     a5c:	8c 81       	ldd	r24, Y+4	; 0x04
     a5e:	81 30       	cpi	r24, 0x01	; 1
     a60:	71 f5       	brne	.+92     	; 0xabe <DIO_eunmSetPinInterPullUp+0xce>
			{
				CLR_BIT(SFIOR,PUD);
     a62:	a0 e5       	ldi	r26, 0x50	; 80
     a64:	b0 e0       	ldi	r27, 0x00	; 0
     a66:	e0 e5       	ldi	r30, 0x50	; 80
     a68:	f0 e0       	ldi	r31, 0x00	; 0
     a6a:	80 81       	ld	r24, Z
     a6c:	8b 7f       	andi	r24, 0xFB	; 251
     a6e:	8c 93       	st	X, r24
				CLR_BIT(DDRA_R,COPY_u8PIN);
     a70:	aa e3       	ldi	r26, 0x3A	; 58
     a72:	b0 e0       	ldi	r27, 0x00	; 0
     a74:	ea e3       	ldi	r30, 0x3A	; 58
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	80 81       	ld	r24, Z
     a7a:	48 2f       	mov	r20, r24
     a7c:	8b 81       	ldd	r24, Y+3	; 0x03
     a7e:	28 2f       	mov	r18, r24
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	02 c0       	rjmp	.+4      	; 0xa8c <DIO_eunmSetPinInterPullUp+0x9c>
     a88:	88 0f       	add	r24, r24
     a8a:	99 1f       	adc	r25, r25
     a8c:	2a 95       	dec	r18
     a8e:	e2 f7       	brpl	.-8      	; 0xa88 <DIO_eunmSetPinInterPullUp+0x98>
     a90:	80 95       	com	r24
     a92:	84 23       	and	r24, r20
     a94:	8c 93       	st	X, r24
				SET_BIT(PORTA_R,COPY_u8PIN);
     a96:	ab e3       	ldi	r26, 0x3B	; 59
     a98:	b0 e0       	ldi	r27, 0x00	; 0
     a9a:	eb e3       	ldi	r30, 0x3B	; 59
     a9c:	f0 e0       	ldi	r31, 0x00	; 0
     a9e:	80 81       	ld	r24, Z
     aa0:	48 2f       	mov	r20, r24
     aa2:	8b 81       	ldd	r24, Y+3	; 0x03
     aa4:	28 2f       	mov	r18, r24
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	02 2e       	mov	r0, r18
     aae:	02 c0       	rjmp	.+4      	; 0xab4 <DIO_eunmSetPinInterPullUp+0xc4>
     ab0:	88 0f       	add	r24, r24
     ab2:	99 1f       	adc	r25, r25
     ab4:	0a 94       	dec	r0
     ab6:	e2 f7       	brpl	.-8      	; 0xab0 <DIO_eunmSetPinInterPullUp+0xc0>
     ab8:	84 2b       	or	r24, r20
     aba:	8c 93       	st	X, r24
     abc:	e8 c0       	rjmp	.+464    	; 0xc8e <DIO_eunmSetPinInterPullUp+0x29e>
			}
			else
			{
				CLR_BIT(PORTA_R,COPY_u8PIN);
     abe:	ab e3       	ldi	r26, 0x3B	; 59
     ac0:	b0 e0       	ldi	r27, 0x00	; 0
     ac2:	eb e3       	ldi	r30, 0x3B	; 59
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	80 81       	ld	r24, Z
     ac8:	48 2f       	mov	r20, r24
     aca:	8b 81       	ldd	r24, Y+3	; 0x03
     acc:	28 2f       	mov	r18, r24
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	02 2e       	mov	r0, r18
     ad6:	02 c0       	rjmp	.+4      	; 0xadc <DIO_eunmSetPinInterPullUp+0xec>
     ad8:	88 0f       	add	r24, r24
     ada:	99 1f       	adc	r25, r25
     adc:	0a 94       	dec	r0
     ade:	e2 f7       	brpl	.-8      	; 0xad8 <DIO_eunmSetPinInterPullUp+0xe8>
     ae0:	80 95       	com	r24
     ae2:	84 23       	and	r24, r20
     ae4:	8c 93       	st	X, r24
     ae6:	d3 c0       	rjmp	.+422    	; 0xc8e <DIO_eunmSetPinInterPullUp+0x29e>
			}break;
		case DIO_PORTB:
			if(COPY_u8ConnectPullUp == DIO_PIN_HIGH)
     ae8:	8c 81       	ldd	r24, Y+4	; 0x04
     aea:	81 30       	cpi	r24, 0x01	; 1
     aec:	71 f5       	brne	.+92     	; 0xb4a <DIO_eunmSetPinInterPullUp+0x15a>
			{
				CLR_BIT(SFIOR,PUD);
     aee:	a0 e5       	ldi	r26, 0x50	; 80
     af0:	b0 e0       	ldi	r27, 0x00	; 0
     af2:	e0 e5       	ldi	r30, 0x50	; 80
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	80 81       	ld	r24, Z
     af8:	8b 7f       	andi	r24, 0xFB	; 251
     afa:	8c 93       	st	X, r24
				CLR_BIT(DDRB_R,COPY_u8PIN);
     afc:	a7 e3       	ldi	r26, 0x37	; 55
     afe:	b0 e0       	ldi	r27, 0x00	; 0
     b00:	e7 e3       	ldi	r30, 0x37	; 55
     b02:	f0 e0       	ldi	r31, 0x00	; 0
     b04:	80 81       	ld	r24, Z
     b06:	48 2f       	mov	r20, r24
     b08:	8b 81       	ldd	r24, Y+3	; 0x03
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	02 c0       	rjmp	.+4      	; 0xb18 <DIO_eunmSetPinInterPullUp+0x128>
     b14:	88 0f       	add	r24, r24
     b16:	99 1f       	adc	r25, r25
     b18:	2a 95       	dec	r18
     b1a:	e2 f7       	brpl	.-8      	; 0xb14 <DIO_eunmSetPinInterPullUp+0x124>
     b1c:	80 95       	com	r24
     b1e:	84 23       	and	r24, r20
     b20:	8c 93       	st	X, r24
				SET_BIT(PORTB_R,COPY_u8PIN);
     b22:	a8 e3       	ldi	r26, 0x38	; 56
     b24:	b0 e0       	ldi	r27, 0x00	; 0
     b26:	e8 e3       	ldi	r30, 0x38	; 56
     b28:	f0 e0       	ldi	r31, 0x00	; 0
     b2a:	80 81       	ld	r24, Z
     b2c:	48 2f       	mov	r20, r24
     b2e:	8b 81       	ldd	r24, Y+3	; 0x03
     b30:	28 2f       	mov	r18, r24
     b32:	30 e0       	ldi	r19, 0x00	; 0
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	02 2e       	mov	r0, r18
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <DIO_eunmSetPinInterPullUp+0x150>
     b3c:	88 0f       	add	r24, r24
     b3e:	99 1f       	adc	r25, r25
     b40:	0a 94       	dec	r0
     b42:	e2 f7       	brpl	.-8      	; 0xb3c <DIO_eunmSetPinInterPullUp+0x14c>
     b44:	84 2b       	or	r24, r20
     b46:	8c 93       	st	X, r24
     b48:	a2 c0       	rjmp	.+324    	; 0xc8e <DIO_eunmSetPinInterPullUp+0x29e>
			}
			else
			{
				CLR_BIT(PORTB_R,COPY_u8PIN);
     b4a:	a8 e3       	ldi	r26, 0x38	; 56
     b4c:	b0 e0       	ldi	r27, 0x00	; 0
     b4e:	e8 e3       	ldi	r30, 0x38	; 56
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	80 81       	ld	r24, Z
     b54:	48 2f       	mov	r20, r24
     b56:	8b 81       	ldd	r24, Y+3	; 0x03
     b58:	28 2f       	mov	r18, r24
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	02 2e       	mov	r0, r18
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <DIO_eunmSetPinInterPullUp+0x178>
     b64:	88 0f       	add	r24, r24
     b66:	99 1f       	adc	r25, r25
     b68:	0a 94       	dec	r0
     b6a:	e2 f7       	brpl	.-8      	; 0xb64 <DIO_eunmSetPinInterPullUp+0x174>
     b6c:	80 95       	com	r24
     b6e:	84 23       	and	r24, r20
     b70:	8c 93       	st	X, r24
     b72:	8d c0       	rjmp	.+282    	; 0xc8e <DIO_eunmSetPinInterPullUp+0x29e>
			}break;
		case DIO_PORTC:
			if(COPY_u8ConnectPullUp == DIO_PIN_HIGH)
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	71 f5       	brne	.+92     	; 0xbd6 <DIO_eunmSetPinInterPullUp+0x1e6>
			{
				CLR_BIT(SFIOR,PUD);
     b7a:	a0 e5       	ldi	r26, 0x50	; 80
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	e0 e5       	ldi	r30, 0x50	; 80
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	80 81       	ld	r24, Z
     b84:	8b 7f       	andi	r24, 0xFB	; 251
     b86:	8c 93       	st	X, r24
				CLR_BIT(DDRC_R,COPY_u8PIN);
     b88:	a4 e3       	ldi	r26, 0x34	; 52
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	e4 e3       	ldi	r30, 0x34	; 52
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z
     b92:	48 2f       	mov	r20, r24
     b94:	8b 81       	ldd	r24, Y+3	; 0x03
     b96:	28 2f       	mov	r18, r24
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	02 c0       	rjmp	.+4      	; 0xba4 <DIO_eunmSetPinInterPullUp+0x1b4>
     ba0:	88 0f       	add	r24, r24
     ba2:	99 1f       	adc	r25, r25
     ba4:	2a 95       	dec	r18
     ba6:	e2 f7       	brpl	.-8      	; 0xba0 <DIO_eunmSetPinInterPullUp+0x1b0>
     ba8:	80 95       	com	r24
     baa:	84 23       	and	r24, r20
     bac:	8c 93       	st	X, r24
				SET_BIT(PORTC_R,COPY_u8PIN);
     bae:	a5 e3       	ldi	r26, 0x35	; 53
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	e5 e3       	ldi	r30, 0x35	; 53
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 81       	ld	r24, Z
     bb8:	48 2f       	mov	r20, r24
     bba:	8b 81       	ldd	r24, Y+3	; 0x03
     bbc:	28 2f       	mov	r18, r24
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	02 2e       	mov	r0, r18
     bc6:	02 c0       	rjmp	.+4      	; 0xbcc <DIO_eunmSetPinInterPullUp+0x1dc>
     bc8:	88 0f       	add	r24, r24
     bca:	99 1f       	adc	r25, r25
     bcc:	0a 94       	dec	r0
     bce:	e2 f7       	brpl	.-8      	; 0xbc8 <DIO_eunmSetPinInterPullUp+0x1d8>
     bd0:	84 2b       	or	r24, r20
     bd2:	8c 93       	st	X, r24
     bd4:	5c c0       	rjmp	.+184    	; 0xc8e <DIO_eunmSetPinInterPullUp+0x29e>
			}
			else
			{
				CLR_BIT(PORTC_R,COPY_u8PIN);
     bd6:	a5 e3       	ldi	r26, 0x35	; 53
     bd8:	b0 e0       	ldi	r27, 0x00	; 0
     bda:	e5 e3       	ldi	r30, 0x35	; 53
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	80 81       	ld	r24, Z
     be0:	48 2f       	mov	r20, r24
     be2:	8b 81       	ldd	r24, Y+3	; 0x03
     be4:	28 2f       	mov	r18, r24
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	02 2e       	mov	r0, r18
     bee:	02 c0       	rjmp	.+4      	; 0xbf4 <DIO_eunmSetPinInterPullUp+0x204>
     bf0:	88 0f       	add	r24, r24
     bf2:	99 1f       	adc	r25, r25
     bf4:	0a 94       	dec	r0
     bf6:	e2 f7       	brpl	.-8      	; 0xbf0 <DIO_eunmSetPinInterPullUp+0x200>
     bf8:	80 95       	com	r24
     bfa:	84 23       	and	r24, r20
     bfc:	8c 93       	st	X, r24
     bfe:	47 c0       	rjmp	.+142    	; 0xc8e <DIO_eunmSetPinInterPullUp+0x29e>
			}break;
		case DIO_PORTD:
			if(COPY_u8ConnectPullUp == DIO_PIN_HIGH)
     c00:	8c 81       	ldd	r24, Y+4	; 0x04
     c02:	81 30       	cpi	r24, 0x01	; 1
     c04:	71 f5       	brne	.+92     	; 0xc62 <DIO_eunmSetPinInterPullUp+0x272>
			{
				CLR_BIT(SFIOR,PUD);
     c06:	a0 e5       	ldi	r26, 0x50	; 80
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	e0 e5       	ldi	r30, 0x50	; 80
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	8b 7f       	andi	r24, 0xFB	; 251
     c12:	8c 93       	st	X, r24
				CLR_BIT(DDRD_R,COPY_u8PIN);
     c14:	a1 e3       	ldi	r26, 0x31	; 49
     c16:	b0 e0       	ldi	r27, 0x00	; 0
     c18:	e1 e3       	ldi	r30, 0x31	; 49
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	48 2f       	mov	r20, r24
     c20:	8b 81       	ldd	r24, Y+3	; 0x03
     c22:	28 2f       	mov	r18, r24
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	02 c0       	rjmp	.+4      	; 0xc30 <DIO_eunmSetPinInterPullUp+0x240>
     c2c:	88 0f       	add	r24, r24
     c2e:	99 1f       	adc	r25, r25
     c30:	2a 95       	dec	r18
     c32:	e2 f7       	brpl	.-8      	; 0xc2c <DIO_eunmSetPinInterPullUp+0x23c>
     c34:	80 95       	com	r24
     c36:	84 23       	and	r24, r20
     c38:	8c 93       	st	X, r24
				SET_BIT(PORTD_R,COPY_u8PIN);
     c3a:	a2 e3       	ldi	r26, 0x32	; 50
     c3c:	b0 e0       	ldi	r27, 0x00	; 0
     c3e:	e2 e3       	ldi	r30, 0x32	; 50
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 81       	ld	r24, Z
     c44:	48 2f       	mov	r20, r24
     c46:	8b 81       	ldd	r24, Y+3	; 0x03
     c48:	28 2f       	mov	r18, r24
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	02 2e       	mov	r0, r18
     c52:	02 c0       	rjmp	.+4      	; 0xc58 <DIO_eunmSetPinInterPullUp+0x268>
     c54:	88 0f       	add	r24, r24
     c56:	99 1f       	adc	r25, r25
     c58:	0a 94       	dec	r0
     c5a:	e2 f7       	brpl	.-8      	; 0xc54 <DIO_eunmSetPinInterPullUp+0x264>
     c5c:	84 2b       	or	r24, r20
     c5e:	8c 93       	st	X, r24
     c60:	16 c0       	rjmp	.+44     	; 0xc8e <DIO_eunmSetPinInterPullUp+0x29e>
			}
			else
			{
				CLR_BIT(PORTD_R,COPY_u8PIN);
     c62:	a2 e3       	ldi	r26, 0x32	; 50
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	e2 e3       	ldi	r30, 0x32	; 50
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
     c6c:	48 2f       	mov	r20, r24
     c6e:	8b 81       	ldd	r24, Y+3	; 0x03
     c70:	28 2f       	mov	r18, r24
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	02 2e       	mov	r0, r18
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <DIO_eunmSetPinInterPullUp+0x290>
     c7c:	88 0f       	add	r24, r24
     c7e:	99 1f       	adc	r25, r25
     c80:	0a 94       	dec	r0
     c82:	e2 f7       	brpl	.-8      	; 0xc7c <DIO_eunmSetPinInterPullUp+0x28c>
     c84:	80 95       	com	r24
     c86:	84 23       	and	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	01 c0       	rjmp	.+2      	; 0xc8e <DIO_eunmSetPinInterPullUp+0x29e>

		}
	}
	else
	{
		LOC_enumStatus = DIO_NOK;
     c8c:	19 82       	std	Y+1, r1	; 0x01
	}


	return LOC_enumStatus ;
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
}
     c90:	26 96       	adiw	r28, 0x06	; 6
     c92:	0f b6       	in	r0, 0x3f	; 63
     c94:	f8 94       	cli
     c96:	de bf       	out	0x3e, r29	; 62
     c98:	0f be       	out	0x3f, r0	; 63
     c9a:	cd bf       	out	0x3d, r28	; 61
     c9c:	cf 91       	pop	r28
     c9e:	df 91       	pop	r29
     ca0:	08 95       	ret

00000ca2 <DIO_voidWriteHighNibble>:
DIO_ErrorStatus DIO_voidWriteHighNibble         (u8 COPY_u8PORT ,u8 COPY_u8Value                        )
{
     ca2:	df 93       	push	r29
     ca4:	cf 93       	push	r28
     ca6:	00 d0       	rcall	.+0      	; 0xca8 <DIO_voidWriteHighNibble+0x6>
     ca8:	00 d0       	rcall	.+0      	; 0xcaa <DIO_voidWriteHighNibble+0x8>
     caa:	0f 92       	push	r0
     cac:	cd b7       	in	r28, 0x3d	; 61
     cae:	de b7       	in	r29, 0x3e	; 62
     cb0:	8a 83       	std	Y+2, r24	; 0x02
     cb2:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumStatus = DIO_OK;
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	89 83       	std	Y+1, r24	; 0x01
	if(COPY_u8PORT <= DIO_PORTD)
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	84 30       	cpi	r24, 0x04	; 4
     cbc:	08 f0       	brcs	.+2      	; 0xcc0 <DIO_voidWriteHighNibble+0x1e>
     cbe:	63 c0       	rjmp	.+198    	; 0xd86 <DIO_voidWriteHighNibble+0xe4>
	{
		COPY_u8Value = (COPY_u8Value<<4);
     cc0:	8b 81       	ldd	r24, Y+3	; 0x03
     cc2:	82 95       	swap	r24
     cc4:	80 7f       	andi	r24, 0xF0	; 240
     cc6:	8b 83       	std	Y+3, r24	; 0x03
		switch(COPY_u8PORT)
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	3d 83       	std	Y+5, r19	; 0x05
     cd0:	2c 83       	std	Y+4, r18	; 0x04
     cd2:	8c 81       	ldd	r24, Y+4	; 0x04
     cd4:	9d 81       	ldd	r25, Y+5	; 0x05
     cd6:	81 30       	cpi	r24, 0x01	; 1
     cd8:	91 05       	cpc	r25, r1
     cda:	29 f1       	breq	.+74     	; 0xd26 <DIO_voidWriteHighNibble+0x84>
     cdc:	2c 81       	ldd	r18, Y+4	; 0x04
     cde:	3d 81       	ldd	r19, Y+5	; 0x05
     ce0:	22 30       	cpi	r18, 0x02	; 2
     ce2:	31 05       	cpc	r19, r1
     ce4:	2c f4       	brge	.+10     	; 0xcf0 <DIO_voidWriteHighNibble+0x4e>
     ce6:	8c 81       	ldd	r24, Y+4	; 0x04
     ce8:	9d 81       	ldd	r25, Y+5	; 0x05
     cea:	00 97       	sbiw	r24, 0x00	; 0
     cec:	61 f0       	breq	.+24     	; 0xd06 <DIO_voidWriteHighNibble+0x64>
     cee:	4c c0       	rjmp	.+152    	; 0xd88 <DIO_voidWriteHighNibble+0xe6>
     cf0:	2c 81       	ldd	r18, Y+4	; 0x04
     cf2:	3d 81       	ldd	r19, Y+5	; 0x05
     cf4:	22 30       	cpi	r18, 0x02	; 2
     cf6:	31 05       	cpc	r19, r1
     cf8:	31 f1       	breq	.+76     	; 0xd46 <DIO_voidWriteHighNibble+0xa4>
     cfa:	8c 81       	ldd	r24, Y+4	; 0x04
     cfc:	9d 81       	ldd	r25, Y+5	; 0x05
     cfe:	83 30       	cpi	r24, 0x03	; 3
     d00:	91 05       	cpc	r25, r1
     d02:	89 f1       	breq	.+98     	; 0xd66 <DIO_voidWriteHighNibble+0xc4>
     d04:	41 c0       	rjmp	.+130    	; 0xd88 <DIO_voidWriteHighNibble+0xe6>
		{
		case DIO_PORTA :
			PORTA_R&=0x0f;
     d06:	ab e3       	ldi	r26, 0x3B	; 59
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	eb e3       	ldi	r30, 0x3B	; 59
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	8f 70       	andi	r24, 0x0F	; 15
     d12:	8c 93       	st	X, r24
			PORTA_R|=COPY_u8Value;
     d14:	ab e3       	ldi	r26, 0x3B	; 59
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	eb e3       	ldi	r30, 0x3B	; 59
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	90 81       	ld	r25, Z
     d1e:	8b 81       	ldd	r24, Y+3	; 0x03
     d20:	89 2b       	or	r24, r25
     d22:	8c 93       	st	X, r24
     d24:	31 c0       	rjmp	.+98     	; 0xd88 <DIO_voidWriteHighNibble+0xe6>
			break;
		case DIO_PORTB :
			PORTB_R&=0x0f;
     d26:	a8 e3       	ldi	r26, 0x38	; 56
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	e8 e3       	ldi	r30, 0x38	; 56
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	8f 70       	andi	r24, 0x0F	; 15
     d32:	8c 93       	st	X, r24
			PORTB_R|=COPY_u8Value;
     d34:	a8 e3       	ldi	r26, 0x38	; 56
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	e8 e3       	ldi	r30, 0x38	; 56
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	90 81       	ld	r25, Z
     d3e:	8b 81       	ldd	r24, Y+3	; 0x03
     d40:	89 2b       	or	r24, r25
     d42:	8c 93       	st	X, r24
     d44:	21 c0       	rjmp	.+66     	; 0xd88 <DIO_voidWriteHighNibble+0xe6>
			break;
		case DIO_PORTC :
			PORTC_R&=0x0f;
     d46:	a5 e3       	ldi	r26, 0x35	; 53
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e5 e3       	ldi	r30, 0x35	; 53
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	8f 70       	andi	r24, 0x0F	; 15
     d52:	8c 93       	st	X, r24
			PORTC_R|=COPY_u8Value;
     d54:	a5 e3       	ldi	r26, 0x35	; 53
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e5 e3       	ldi	r30, 0x35	; 53
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	90 81       	ld	r25, Z
     d5e:	8b 81       	ldd	r24, Y+3	; 0x03
     d60:	89 2b       	or	r24, r25
     d62:	8c 93       	st	X, r24
     d64:	11 c0       	rjmp	.+34     	; 0xd88 <DIO_voidWriteHighNibble+0xe6>
			break;
		case DIO_PORTD :
			PORTD_R&=0x0f;
     d66:	a2 e3       	ldi	r26, 0x32	; 50
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e2 e3       	ldi	r30, 0x32	; 50
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	8f 70       	andi	r24, 0x0F	; 15
     d72:	8c 93       	st	X, r24
			PORTD_R|=COPY_u8Value;
     d74:	a2 e3       	ldi	r26, 0x32	; 50
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	e2 e3       	ldi	r30, 0x32	; 50
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	90 81       	ld	r25, Z
     d7e:	8b 81       	ldd	r24, Y+3	; 0x03
     d80:	89 2b       	or	r24, r25
     d82:	8c 93       	st	X, r24
     d84:	01 c0       	rjmp	.+2      	; 0xd88 <DIO_voidWriteHighNibble+0xe6>

		}
	}
	else
	{
		LOC_enumStatus = DIO_NOK;
     d86:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumStatus ;
     d88:	89 81       	ldd	r24, Y+1	; 0x01
}
     d8a:	0f 90       	pop	r0
     d8c:	0f 90       	pop	r0
     d8e:	0f 90       	pop	r0
     d90:	0f 90       	pop	r0
     d92:	0f 90       	pop	r0
     d94:	cf 91       	pop	r28
     d96:	df 91       	pop	r29
     d98:	08 95       	ret

00000d9a <DIO_voidWriteLowNibble>:

DIO_ErrorStatus DIO_voidWriteLowNibble          (u8 COPY_u8PORT ,u8 COPY_u8Value                        )
{
     d9a:	df 93       	push	r29
     d9c:	cf 93       	push	r28
     d9e:	00 d0       	rcall	.+0      	; 0xda0 <DIO_voidWriteLowNibble+0x6>
     da0:	00 d0       	rcall	.+0      	; 0xda2 <DIO_voidWriteLowNibble+0x8>
     da2:	0f 92       	push	r0
     da4:	cd b7       	in	r28, 0x3d	; 61
     da6:	de b7       	in	r29, 0x3e	; 62
     da8:	8a 83       	std	Y+2, r24	; 0x02
     daa:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumStatus = DIO_OK;
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	89 83       	std	Y+1, r24	; 0x01
	if(COPY_u8PORT <= DIO_PORTD)
     db0:	8a 81       	ldd	r24, Y+2	; 0x02
     db2:	84 30       	cpi	r24, 0x04	; 4
     db4:	08 f0       	brcs	.+2      	; 0xdb8 <DIO_voidWriteLowNibble+0x1e>
     db6:	62 c0       	rjmp	.+196    	; 0xe7c <DIO_voidWriteLowNibble+0xe2>
	{
		COPY_u8Value &=0x0f;
     db8:	8b 81       	ldd	r24, Y+3	; 0x03
     dba:	8f 70       	andi	r24, 0x0F	; 15
     dbc:	8b 83       	std	Y+3, r24	; 0x03
		switch(COPY_u8PORT)
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	3d 83       	std	Y+5, r19	; 0x05
     dc6:	2c 83       	std	Y+4, r18	; 0x04
     dc8:	8c 81       	ldd	r24, Y+4	; 0x04
     dca:	9d 81       	ldd	r25, Y+5	; 0x05
     dcc:	81 30       	cpi	r24, 0x01	; 1
     dce:	91 05       	cpc	r25, r1
     dd0:	29 f1       	breq	.+74     	; 0xe1c <DIO_voidWriteLowNibble+0x82>
     dd2:	2c 81       	ldd	r18, Y+4	; 0x04
     dd4:	3d 81       	ldd	r19, Y+5	; 0x05
     dd6:	22 30       	cpi	r18, 0x02	; 2
     dd8:	31 05       	cpc	r19, r1
     dda:	2c f4       	brge	.+10     	; 0xde6 <DIO_voidWriteLowNibble+0x4c>
     ddc:	8c 81       	ldd	r24, Y+4	; 0x04
     dde:	9d 81       	ldd	r25, Y+5	; 0x05
     de0:	00 97       	sbiw	r24, 0x00	; 0
     de2:	61 f0       	breq	.+24     	; 0xdfc <DIO_voidWriteLowNibble+0x62>
     de4:	4c c0       	rjmp	.+152    	; 0xe7e <DIO_voidWriteLowNibble+0xe4>
     de6:	2c 81       	ldd	r18, Y+4	; 0x04
     de8:	3d 81       	ldd	r19, Y+5	; 0x05
     dea:	22 30       	cpi	r18, 0x02	; 2
     dec:	31 05       	cpc	r19, r1
     dee:	31 f1       	breq	.+76     	; 0xe3c <DIO_voidWriteLowNibble+0xa2>
     df0:	8c 81       	ldd	r24, Y+4	; 0x04
     df2:	9d 81       	ldd	r25, Y+5	; 0x05
     df4:	83 30       	cpi	r24, 0x03	; 3
     df6:	91 05       	cpc	r25, r1
     df8:	89 f1       	breq	.+98     	; 0xe5c <DIO_voidWriteLowNibble+0xc2>
     dfa:	41 c0       	rjmp	.+130    	; 0xe7e <DIO_voidWriteLowNibble+0xe4>
		{
		case DIO_PORTA :
			PORTA_R&=0xf0;
     dfc:	ab e3       	ldi	r26, 0x3B	; 59
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	eb e3       	ldi	r30, 0x3B	; 59
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	80 7f       	andi	r24, 0xF0	; 240
     e08:	8c 93       	st	X, r24
			PORTA_R|=COPY_u8Value;
     e0a:	ab e3       	ldi	r26, 0x3B	; 59
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	eb e3       	ldi	r30, 0x3B	; 59
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	90 81       	ld	r25, Z
     e14:	8b 81       	ldd	r24, Y+3	; 0x03
     e16:	89 2b       	or	r24, r25
     e18:	8c 93       	st	X, r24
     e1a:	31 c0       	rjmp	.+98     	; 0xe7e <DIO_voidWriteLowNibble+0xe4>
			break;
		case DIO_PORTB :
			PORTB_R&=0xf0;
     e1c:	a8 e3       	ldi	r26, 0x38	; 56
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e8 e3       	ldi	r30, 0x38	; 56
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	80 7f       	andi	r24, 0xF0	; 240
     e28:	8c 93       	st	X, r24
			PORTB_R|=COPY_u8Value;
     e2a:	a8 e3       	ldi	r26, 0x38	; 56
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e8 e3       	ldi	r30, 0x38	; 56
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	90 81       	ld	r25, Z
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	89 2b       	or	r24, r25
     e38:	8c 93       	st	X, r24
     e3a:	21 c0       	rjmp	.+66     	; 0xe7e <DIO_voidWriteLowNibble+0xe4>
			break;
		case DIO_PORTC :
			PORTC_R&=0xf0;
     e3c:	a5 e3       	ldi	r26, 0x35	; 53
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e5 e3       	ldi	r30, 0x35	; 53
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	80 7f       	andi	r24, 0xF0	; 240
     e48:	8c 93       	st	X, r24
			PORTC_R|=COPY_u8Value;
     e4a:	a5 e3       	ldi	r26, 0x35	; 53
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e5 e3       	ldi	r30, 0x35	; 53
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	90 81       	ld	r25, Z
     e54:	8b 81       	ldd	r24, Y+3	; 0x03
     e56:	89 2b       	or	r24, r25
     e58:	8c 93       	st	X, r24
     e5a:	11 c0       	rjmp	.+34     	; 0xe7e <DIO_voidWriteLowNibble+0xe4>
			break;
		case DIO_PORTD :
			PORTD_R&=0xf0;
     e5c:	a2 e3       	ldi	r26, 0x32	; 50
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	e2 e3       	ldi	r30, 0x32	; 50
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	80 7f       	andi	r24, 0xF0	; 240
     e68:	8c 93       	st	X, r24
			PORTD_R|=COPY_u8Value;
     e6a:	a2 e3       	ldi	r26, 0x32	; 50
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	e2 e3       	ldi	r30, 0x32	; 50
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	90 81       	ld	r25, Z
     e74:	8b 81       	ldd	r24, Y+3	; 0x03
     e76:	89 2b       	or	r24, r25
     e78:	8c 93       	st	X, r24
     e7a:	01 c0       	rjmp	.+2      	; 0xe7e <DIO_voidWriteLowNibble+0xe4>

		}
	}
	else
	{
		LOC_enumStatus = DIO_NOK;
     e7c:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumStatus ;
     e7e:	89 81       	ldd	r24, Y+1	; 0x01

}
     e80:	0f 90       	pop	r0
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <GIF_VoidEnable>:

#include "GIF_register.h"
#include "GIF_interface.h"

void GIF_VoidEnable (void)
{
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
     e98:	af e5       	ldi	r26, 0x5F	; 95
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	ef e5       	ldi	r30, 0x5F	; 95
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	80 68       	ori	r24, 0x80	; 128
     ea4:	8c 93       	st	X, r24
}
     ea6:	cf 91       	pop	r28
     ea8:	df 91       	pop	r29
     eaa:	08 95       	ret

00000eac <GIF_VoidDisable>:
void GIF_VoidDisable (void)
{
     eac:	df 93       	push	r29
     eae:	cf 93       	push	r28
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
     eb4:	af e5       	ldi	r26, 0x5F	; 95
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	ef e5       	ldi	r30, 0x5F	; 95
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	8f 77       	andi	r24, 0x7F	; 127
     ec0:	8c 93       	st	X, r24
     ec2:	cf 91       	pop	r28
     ec4:	df 91       	pop	r29
     ec6:	08 95       	ret

00000ec8 <LED_VoidInitialPin>:
#include "LED_interface.h"
#include "LED_private.h"
#include "LED_config.h"

void LED_VoidInitialPin ( LED_Type LED_Configuration )
{
     ec8:	df 93       	push	r29
     eca:	cf 93       	push	r28
     ecc:	00 d0       	rcall	.+0      	; 0xece <LED_VoidInitialPin+0x6>
     ece:	0f 92       	push	r0
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
     ed4:	69 83       	std	Y+1, r22	; 0x01
     ed6:	7a 83       	std	Y+2, r23	; 0x02
     ed8:	8b 83       	std	Y+3, r24	; 0x03
	DIO_eunmSetPinDirection ( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_OUTPUT );
     eda:	89 81       	ldd	r24, Y+1	; 0x01
     edc:	9a 81       	ldd	r25, Y+2	; 0x02
     ede:	69 2f       	mov	r22, r25
     ee0:	41 e0       	ldi	r20, 0x01	; 1
     ee2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_eunmSetPinDirection>
}
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <LED_VoidTurnOn>:
void LED_VoidTurnOn     ( LED_Type LED_Configuration )
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <LED_VoidTurnOn+0x6>
     ef8:	0f 92       	push	r0
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	69 83       	std	Y+1, r22	; 0x01
     f00:	7a 83       	std	Y+2, r23	; 0x02
     f02:	8b 83       	std	Y+3, r24	; 0x03
	if( LED_Configuration.Active_State == ACTIVE_HIGH )
     f04:	8b 81       	ldd	r24, Y+3	; 0x03
     f06:	81 30       	cpi	r24, 0x01	; 1
     f08:	39 f4       	brne	.+14     	; 0xf18 <LED_VoidTurnOn+0x26>
	{
		DIO_eunmSetPinValue   ( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_HIGH );
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	9a 81       	ldd	r25, Y+2	; 0x02
     f0e:	69 2f       	mov	r22, r25
     f10:	41 e0       	ldi	r20, 0x01	; 1
     f12:	0e 94 58 01 	call	0x2b0	; 0x2b0 <DIO_eunmSetPinValue>
     f16:	09 c0       	rjmp	.+18     	; 0xf2a <LED_VoidTurnOn+0x38>
	}
	else if ( LED_Configuration.Active_State == ACTIVE_LOW )
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	88 23       	and	r24, r24
     f1c:	31 f4       	brne	.+12     	; 0xf2a <LED_VoidTurnOn+0x38>
	{
		DIO_eunmSetPinValue   ( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_LOW );
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	9a 81       	ldd	r25, Y+2	; 0x02
     f22:	69 2f       	mov	r22, r25
     f24:	40 e0       	ldi	r20, 0x00	; 0
     f26:	0e 94 58 01 	call	0x2b0	; 0x2b0 <DIO_eunmSetPinValue>
	}
}
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	0f 90       	pop	r0
     f30:	cf 91       	pop	r28
     f32:	df 91       	pop	r29
     f34:	08 95       	ret

00000f36 <LED_VoidTurnOff>:
void LED_VoidTurnOff    ( LED_Type LED_Configuration )
{
     f36:	df 93       	push	r29
     f38:	cf 93       	push	r28
     f3a:	00 d0       	rcall	.+0      	; 0xf3c <LED_VoidTurnOff+0x6>
     f3c:	0f 92       	push	r0
     f3e:	cd b7       	in	r28, 0x3d	; 61
     f40:	de b7       	in	r29, 0x3e	; 62
     f42:	69 83       	std	Y+1, r22	; 0x01
     f44:	7a 83       	std	Y+2, r23	; 0x02
     f46:	8b 83       	std	Y+3, r24	; 0x03
	if( LED_Configuration.Active_State == ACTIVE_HIGH )
     f48:	8b 81       	ldd	r24, Y+3	; 0x03
     f4a:	81 30       	cpi	r24, 0x01	; 1
     f4c:	39 f4       	brne	.+14     	; 0xf5c <LED_VoidTurnOff+0x26>
	{
		DIO_eunmSetPinValue   ( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_LOW );
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
     f50:	9a 81       	ldd	r25, Y+2	; 0x02
     f52:	69 2f       	mov	r22, r25
     f54:	40 e0       	ldi	r20, 0x00	; 0
     f56:	0e 94 58 01 	call	0x2b0	; 0x2b0 <DIO_eunmSetPinValue>
     f5a:	09 c0       	rjmp	.+18     	; 0xf6e <LED_VoidTurnOff+0x38>
	}
	else if ( LED_Configuration.Active_State == ACTIVE_LOW )
     f5c:	8b 81       	ldd	r24, Y+3	; 0x03
     f5e:	88 23       	and	r24, r24
     f60:	31 f4       	brne	.+12     	; 0xf6e <LED_VoidTurnOff+0x38>
	{
		DIO_eunmSetPinValue   ( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_HIGH );
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	9a 81       	ldd	r25, Y+2	; 0x02
     f66:	69 2f       	mov	r22, r25
     f68:	41 e0       	ldi	r20, 0x01	; 1
     f6a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <DIO_eunmSetPinValue>
	}
}
     f6e:	0f 90       	pop	r0
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	cf 91       	pop	r28
     f76:	df 91       	pop	r29
     f78:	08 95       	ret

00000f7a <LED_VoidToggle>:
void LED_VoidToggle     ( LED_Type LED_Configuration )
{
     f7a:	df 93       	push	r29
     f7c:	cf 93       	push	r28
     f7e:	00 d0       	rcall	.+0      	; 0xf80 <LED_VoidToggle+0x6>
     f80:	0f 92       	push	r0
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
     f86:	69 83       	std	Y+1, r22	; 0x01
     f88:	7a 83       	std	Y+2, r23	; 0x02
     f8a:	8b 83       	std	Y+3, r24	; 0x03
	DIO_eunmTogglePin  (LED_Configuration.Port , LED_Configuration.Pin);
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	9a 81       	ldd	r25, Y+2	; 0x02
     f90:	69 2f       	mov	r22, r25
     f92:	0e 94 2c 03 	call	0x658	; 0x658 <DIO_eunmTogglePin>
}
     f96:	0f 90       	pop	r0
     f98:	0f 90       	pop	r0
     f9a:	0f 90       	pop	r0
     f9c:	cf 91       	pop	r28
     f9e:	df 91       	pop	r29
     fa0:	08 95       	ret

00000fa2 <TIMER0_voidInit>:
static void (*TIMERS_pvCallBackFunc[16])(void) = {NULL} ;  /* we have 8 interrupt sources in timer  */


/*******************************************************************************************************************/
void TIMER0_voidInit(void)
{
     fa2:	df 93       	push	r29
     fa4:	cf 93       	push	r28
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
			OCR0 = TIMER0_CTC_VAL ;

		#elif TIMER0_WAVEFORM_GENERATION_MODE == TIMER_CTC_MODE

			/*Initialize Waveform Generation Mode as CTC Mode*/
			CLR_BIT(TCCR0 , TCCR0_WGM00) ;
     faa:	a3 e5       	ldi	r26, 0x53	; 83
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e3 e5       	ldi	r30, 0x53	; 83
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	8f 7b       	andi	r24, 0xBF	; 191
     fb6:	8c 93       	st	X, r24
			SET_BIT(TCCR0 , TCCR0_WGM01) ;
     fb8:	a3 e5       	ldi	r26, 0x53	; 83
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e3 e5       	ldi	r30, 0x53	; 83
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	88 60       	ori	r24, 0x08	; 8
     fc4:	8c 93       	st	X, r24

			/*Set the Required CTC Value*/
			OCR0 = TIMER0_CTC_VAL ;
     fc6:	ec e5       	ldi	r30, 0x5C	; 92
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 e5       	ldi	r24, 0x50	; 80
     fcc:	80 83       	st	Z, r24

			/*Timer0 Compare Match Interrupt Enable*/
			#if TIMER0_CTC_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE0) ;
			#elif TIMER0_CTC_INTERRUPT == ENABLE
				SET_BIT(TIMSK , TIMSK_OCIE0) ;
     fce:	a9 e5       	ldi	r26, 0x59	; 89
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e9 e5       	ldi	r30, 0x59	; 89
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	82 60       	ori	r24, 0x02	; 2
     fda:	8c 93       	st	X, r24
			#error "Wrong TIMER0_WAVEFORM_GENERATION_MODE Config"

		#endif

	/*Set the Required Prescaler*/
	TCCR0 &= TIMER_PRESCALER_MASK ;
     fdc:	a3 e5       	ldi	r26, 0x53	; 83
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e3 e5       	ldi	r30, 0x53	; 83
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	88 7f       	andi	r24, 0xF8	; 248
     fe8:	8c 93       	st	X, r24
	TCCR0 |= TIMER0_PRESCALER ;
     fea:	a3 e5       	ldi	r26, 0x53	; 83
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e3 e5       	ldi	r30, 0x53	; 83
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	85 60       	ori	r24, 0x05	; 5
     ff6:	8c 93       	st	X, r24
}
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	08 95       	ret

00000ffe <TIMER1_voidInit>:

void TIMER1_voidInit(void)
{
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
				SET_BIT(TCCR1A,TCCR1A_WGM10);
				SET_BIT(TCCR1A,TCCR1A_WGM11);
				SET_BIT(TCCR1B,TCCR1B_WGM12);
				SET_BIT(TCCR1B,TCCR1B_WGM13);
			#elif TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
				CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1006:	af e4       	ldi	r26, 0x4F	; 79
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	ef e4       	ldi	r30, 0x4F	; 79
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	8e 7f       	andi	r24, 0xFE	; 254
    1012:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1A_WGM11);
    1014:	af e4       	ldi	r26, 0x4F	; 79
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	ef e4       	ldi	r30, 0x4F	; 79
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	82 60       	ori	r24, 0x02	; 2
    1020:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,TCCR1B_WGM12);
    1022:	ae e4       	ldi	r26, 0x4E	; 78
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	ee e4       	ldi	r30, 0x4E	; 78
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	88 60       	ori	r24, 0x08	; 8
    102e:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,TCCR1B_WGM13);
    1030:	ae e4       	ldi	r26, 0x4E	; 78
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	ee e4       	ldi	r30, 0x4E	; 78
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	80 61       	ori	r24, 0x10	; 16
    103c:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
			#endif

			/*Set the require CTC Values*/
			OCR1A = TIMER1_CTCA_VAL ;
    103e:	ea e4       	ldi	r30, 0x4A	; 74
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	84 ef       	ldi	r24, 0xF4	; 244
    1044:	91 e0       	ldi	r25, 0x01	; 1
    1046:	91 83       	std	Z+1, r25	; 0x01
    1048:	80 83       	st	Z, r24
			OCR1B = TIMER1_CTCB_VAL ;
    104a:	e8 e4       	ldi	r30, 0x48	; 72
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	11 82       	std	Z+1, r1	; 0x01
    1050:	10 82       	st	Z, r1

			/*Set ICR1*/
			#if TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
				ICR1 = TIMER1_ICR1_VAL ;
    1052:	e6 e4       	ldi	r30, 0x46	; 70
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 e2       	ldi	r24, 0x20	; 32
    1058:	9e e4       	ldi	r25, 0x4E	; 78
    105a:	91 83       	std	Z+1, r25	; 0x01
    105c:	80 83       	st	Z, r24

				#if TIMER1_ICR_EDGE == RISING_EDGE
					SET_BIT(TCCR1B , TCCR1B_ICES1) ;
    105e:	ae e4       	ldi	r26, 0x4E	; 78
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	ee e4       	ldi	r30, 0x4E	; 78
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	80 64       	ori	r24, 0x40	; 64
    106a:	8c 93       	st	X, r24
			/*Set OCR1A mode*/
			#if TIMER1_OCR1A_MODE == TIMER_OC_DISCONNECTED
				CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
				CLR_BIT(TCCR1A , TCCR1A_COM1A1) ;
			#elif TIMER1_OCR1A_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
				CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
    106c:	af e4       	ldi	r26, 0x4F	; 79
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	ef e4       	ldi	r30, 0x4F	; 79
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	8f 7b       	andi	r24, 0xBF	; 191
    1078:	8c 93       	st	X, r24
				SET_BIT(TCCR1A , TCCR1A_COM1A1) ;
    107a:	af e4       	ldi	r26, 0x4F	; 79
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	ef e4       	ldi	r30, 0x4F	; 79
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	80 68       	ori	r24, 0x80	; 128
    1086:	8c 93       	st	X, r24
			/*Set OCR1B mode*/
			#if TIMER1_OCR1B_MODE == TIMER_OC_DISCONNECTED
				CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
				CLR_BIT(TCCR1A , TCCR1A_COM1B1) ;
			#elif TIMER1_OCR1B_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
				CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
    1088:	af e4       	ldi	r26, 0x4F	; 79
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	ef e4       	ldi	r30, 0x4F	; 79
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	8f 7e       	andi	r24, 0xEF	; 239
    1094:	8c 93       	st	X, r24
				SET_BIT(TCCR1A , TCCR1A_COM1B1) ;
    1096:	af e4       	ldi	r26, 0x4F	; 79
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	ef e4       	ldi	r30, 0x4F	; 79
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	80 62       	ori	r24, 0x20	; 32
    10a2:	8c 93       	st	X, r24
				#error "Wrong TIMER1_OCR1B_MODE Config"
			#endif

			/*Timer1 PWM Interrupt Enable*/
			#if TIMER1_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE1) ;
    10a4:	a9 e5       	ldi	r26, 0x59	; 89
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e9 e5       	ldi	r30, 0x59	; 89
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	8b 7f       	andi	r24, 0xFB	; 251
    10b0:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_OVERFLOW_INTERRUPT Config"
			#endif

			#if TIMER1_CTCA_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE1A) ;
    10b2:	a9 e5       	ldi	r26, 0x59	; 89
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e9 e5       	ldi	r30, 0x59	; 89
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	8f 7e       	andi	r24, 0xEF	; 239
    10be:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_CTCA_INTERRUPT Config"
			#endif

			#if TIMER1_CTCB_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE1B) ;
    10c0:	a9 e5       	ldi	r26, 0x59	; 89
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e9 e5       	ldi	r30, 0x59	; 89
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	87 7f       	andi	r24, 0xF7	; 247
    10cc:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_CTCB_INTERRUPT Config"
			#endif

			#if TIMER1_ICR_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TICIE1) ;
    10ce:	a9 e5       	ldi	r26, 0x59	; 89
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	e9 e5       	ldi	r30, 0x59	; 89
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	8f 7d       	andi	r24, 0xDF	; 223
    10da:	8c 93       	st	X, r24
		#else
			#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
		#endif

	/*Set the Required Prescaler*/
	TCCR1B &= TIMER_PRESCALER_MASK ;
    10dc:	ae e4       	ldi	r26, 0x4E	; 78
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	ee e4       	ldi	r30, 0x4E	; 78
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	88 7f       	andi	r24, 0xF8	; 248
    10e8:	8c 93       	st	X, r24
	TCCR1B |= TIMER1_PRESCALER ;
    10ea:	ae e4       	ldi	r26, 0x4E	; 78
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	ee e4       	ldi	r30, 0x4E	; 78
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	82 60       	ori	r24, 0x02	; 2
    10f6:	8c 93       	st	X, r24


}
    10f8:	cf 91       	pop	r28
    10fa:	df 91       	pop	r29
    10fc:	08 95       	ret

000010fe <TIMER2_voidInit>:

void TIMER2_voidInit(void)
{
    10fe:	df 93       	push	r29
    1100:	cf 93       	push	r28
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
			#endif

		#elif TIMER2_WAVEFORM_GENERATION_MODE == TIMER_FAST_PWM_MODE

			/*Initialize Waveform Generation Mode as Fast PWM Mode*/
			SET_BIT(TCCR2 , TCCR2_WGM20) ;
    1106:	a5 e4       	ldi	r26, 0x45	; 69
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	e5 e4       	ldi	r30, 0x45	; 69
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	80 64       	ori	r24, 0x40	; 64
    1112:	8c 93       	st	X, r24
			SET_BIT(TCCR2 , TCCR2_WGM21) ;
    1114:	a5 e4       	ldi	r26, 0x45	; 69
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e5 e4       	ldi	r30, 0x45	; 69
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	88 60       	ori	r24, 0x08	; 8
    1120:	8c 93       	st	X, r24
			/*Set CTC Fast PWM MODE*/
			#if TIMER2_CTC_PWM_MODE == TIMER_OC_DISCONNECTED
					CLR_BIT(TCCR2 , TCCR2_COM20) ;
					CLR_BIT(TCCR2 , TCCR2_COM21) ;
			#elif TIMER2_CTC_PWM_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
					CLR_BIT(TCCR2 , TCCR2_COM20) ;
    1122:	a5 e4       	ldi	r26, 0x45	; 69
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	e5 e4       	ldi	r30, 0x45	; 69
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	8f 7e       	andi	r24, 0xEF	; 239
    112e:	8c 93       	st	X, r24
					SET_BIT(TCCR2 , TCCR2_COM21) ;
    1130:	a5 e4       	ldi	r26, 0x45	; 69
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e5 e4       	ldi	r30, 0x45	; 69
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	80 62       	ori	r24, 0x20	; 32
    113c:	8c 93       	st	X, r24
			#else
					#error "Wrong TIMER2_CTC_PWM_MODE Config"
			#endif

			/*Set the Required CTC Value*/
			OCR2 = TIMER2_CTC_VAL ;
    113e:	e3 e4       	ldi	r30, 0x43	; 67
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	82 e3       	ldi	r24, 0x32	; 50
    1144:	80 83       	st	Z, r24
			#error "Wrong TIMER2_WAVEFORM_GENERATION_MODE Config"

		#endif

	/*Set the Required Prescaler*/
	TCCR2 &= TIMER_PRESCALER_MASK ;
    1146:	a5 e4       	ldi	r26, 0x45	; 69
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e5 e4       	ldi	r30, 0x45	; 69
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	88 7f       	andi	r24, 0xF8	; 248
    1152:	8c 93       	st	X, r24
	TCCR2 |= TIMER2_PRESCALER ;
    1154:	a5 e4       	ldi	r26, 0x45	; 69
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e5 e4       	ldi	r30, 0x45	; 69
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	83 60       	ori	r24, 0x03	; 3
    1160:	8c 93       	st	X, r24
}
    1162:	cf 91       	pop	r28
    1164:	df 91       	pop	r29
    1166:	08 95       	ret

00001168 <TIMER0_voidSetPreload>:

/*******************************************************************************************************************/
void TIMER0_voidSetPreload (u8 Copy_u8Preload)
{
    1168:	df 93       	push	r29
    116a:	cf 93       	push	r28
    116c:	0f 92       	push	r0
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
    1172:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload ;
    1174:	e2 e5       	ldi	r30, 0x52	; 82
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	89 81       	ldd	r24, Y+1	; 0x01
    117a:	80 83       	st	Z, r24
}
    117c:	0f 90       	pop	r0
    117e:	cf 91       	pop	r28
    1180:	df 91       	pop	r29
    1182:	08 95       	ret

00001184 <TIMER1_voidSetPreload>:

void TIMER1_voidSetPreload (u16 Copy_u16Preload)
{
    1184:	df 93       	push	r29
    1186:	cf 93       	push	r28
    1188:	00 d0       	rcall	.+0      	; 0x118a <TIMER1_voidSetPreload+0x6>
    118a:	cd b7       	in	r28, 0x3d	; 61
    118c:	de b7       	in	r29, 0x3e	; 62
    118e:	9a 83       	std	Y+2, r25	; 0x02
    1190:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Preload ;
    1192:	ec e4       	ldi	r30, 0x4C	; 76
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	9a 81       	ldd	r25, Y+2	; 0x02
    119a:	91 83       	std	Z+1, r25	; 0x01
    119c:	80 83       	st	Z, r24
}
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	cf 91       	pop	r28
    11a4:	df 91       	pop	r29
    11a6:	08 95       	ret

000011a8 <TIMER2_voidSetPreload>:


void TIMER2_voidSetPreload (u8 Copy_u8Preload)
{
    11a8:	df 93       	push	r29
    11aa:	cf 93       	push	r28
    11ac:	0f 92       	push	r0
    11ae:	cd b7       	in	r28, 0x3d	; 61
    11b0:	de b7       	in	r29, 0x3e	; 62
    11b2:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = Copy_u8Preload ;
    11b4:	e4 e4       	ldi	r30, 0x44	; 68
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	80 83       	st	Z, r24
}
    11bc:	0f 90       	pop	r0
    11be:	cf 91       	pop	r28
    11c0:	df 91       	pop	r29
    11c2:	08 95       	ret

000011c4 <TIMER0_voidSetCTC>:

void TIMER0_voidSetCTC (u8 Copy_u8CTC)
{
    11c4:	df 93       	push	r29
    11c6:	cf 93       	push	r28
    11c8:	0f 92       	push	r0
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    11ce:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8CTC ;
    11d0:	ec e5       	ldi	r30, 0x5C	; 92
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
    11d6:	80 83       	st	Z, r24
}
    11d8:	0f 90       	pop	r0
    11da:	cf 91       	pop	r28
    11dc:	df 91       	pop	r29
    11de:	08 95       	ret

000011e0 <TIMER1_voidSetCTCA>:

void TIMER1_voidSetCTCA (u16 Copy_u16CTCA)
{
    11e0:	df 93       	push	r29
    11e2:	cf 93       	push	r28
    11e4:	00 d0       	rcall	.+0      	; 0x11e6 <TIMER1_voidSetCTCA+0x6>
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
    11ea:	9a 83       	std	Y+2, r25	; 0x02
    11ec:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CTCA ;
    11ee:	ea e4       	ldi	r30, 0x4A	; 74
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	9a 81       	ldd	r25, Y+2	; 0x02
    11f6:	91 83       	std	Z+1, r25	; 0x01
    11f8:	80 83       	st	Z, r24
}
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	cf 91       	pop	r28
    1200:	df 91       	pop	r29
    1202:	08 95       	ret

00001204 <TIMER1_voidSetCTCB>:

void TIMER1_voidSetCTCB (u16 Copy_u16CTCB)
{
    1204:	df 93       	push	r29
    1206:	cf 93       	push	r28
    1208:	00 d0       	rcall	.+0      	; 0x120a <TIMER1_voidSetCTCB+0x6>
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
    120e:	9a 83       	std	Y+2, r25	; 0x02
    1210:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = Copy_u16CTCB ;
    1212:	e8 e4       	ldi	r30, 0x48	; 72
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	9a 81       	ldd	r25, Y+2	; 0x02
    121a:	91 83       	std	Z+1, r25	; 0x01
    121c:	80 83       	st	Z, r24
}
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	cf 91       	pop	r28
    1224:	df 91       	pop	r29
    1226:	08 95       	ret

00001228 <TIMER2_voidSetCTC>:

void TIMER2_voidSetCTC (u8 Copy_u8CTC)
{
    1228:	df 93       	push	r29
    122a:	cf 93       	push	r28
    122c:	0f 92       	push	r0
    122e:	cd b7       	in	r28, 0x3d	; 61
    1230:	de b7       	in	r29, 0x3e	; 62
    1232:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_u8CTC ;
    1234:	e3 e4       	ldi	r30, 0x43	; 67
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	80 83       	st	Z, r24
}
    123c:	0f 90       	pop	r0
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	08 95       	ret

00001244 <TIMER1_voidSetICR1>:

void TIMER1_voidSetICR1 (u16 Copy_u16ICR1)
{
    1244:	df 93       	push	r29
    1246:	cf 93       	push	r28
    1248:	00 d0       	rcall	.+0      	; 0x124a <TIMER1_voidSetICR1+0x6>
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
    124e:	9a 83       	std	Y+2, r25	; 0x02
    1250:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16ICR1 ;
    1252:	e6 e4       	ldi	r30, 0x46	; 70
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	9a 81       	ldd	r25, Y+2	; 0x02
    125a:	91 83       	std	Z+1, r25	; 0x01
    125c:	80 83       	st	Z, r24
}
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	cf 91       	pop	r28
    1264:	df 91       	pop	r29
    1266:	08 95       	ret

00001268 <TIMER0_u8GetTimerCounterValue>:

u8 TIMER0_u8GetTimerCounterValue (void)
{
    1268:	df 93       	push	r29
    126a:	cf 93       	push	r28
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
	return TCNT0 ;
    1270:	e2 e5       	ldi	r30, 0x52	; 82
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
}
    1276:	cf 91       	pop	r28
    1278:	df 91       	pop	r29
    127a:	08 95       	ret

0000127c <TIMER1_u16GetTimerCounterValue>:

u16 TIMER1_u16GetTimerCounterValue (void)
{
    127c:	df 93       	push	r29
    127e:	cf 93       	push	r28
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
	return TCNT1 ;
    1284:	ec e4       	ldi	r30, 0x4C	; 76
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	91 81       	ldd	r25, Z+1	; 0x01
}
    128c:	cf 91       	pop	r28
    128e:	df 91       	pop	r29
    1290:	08 95       	ret

00001292 <TIMER2_u8GetTimerCounterValue>:

u8 TIMER2_u8GetTimerCounterValue (void)
{
    1292:	df 93       	push	r29
    1294:	cf 93       	push	r28
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
	return TCNT2 ;
    129a:	e4 e4       	ldi	r30, 0x44	; 68
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
}
    12a0:	cf 91       	pop	r28
    12a2:	df 91       	pop	r29
    12a4:	08 95       	ret

000012a6 <TIMER_voidSetPWM>:

/*******************************************************************************************************************/

void TIMER_voidSetPWM(u16 Copy_u16CompareValue)
{
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	00 d0       	rcall	.+0      	; 0x12ac <TIMER_voidSetPWM+0x6>
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
    12b0:	9a 83       	std	Y+2, r25	; 0x02
    12b2:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CompareValue;
    12b4:	ea e4       	ldi	r30, 0x4A	; 74
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	89 81       	ldd	r24, Y+1	; 0x01
    12ba:	9a 81       	ldd	r25, Y+2	; 0x02
    12bc:	91 83       	std	Z+1, r25	; 0x01
    12be:	80 83       	st	Z, r24
}
    12c0:	0f 90       	pop	r0
    12c2:	0f 90       	pop	r0
    12c4:	cf 91       	pop	r28
    12c6:	df 91       	pop	r29
    12c8:	08 95       	ret

000012ca <TIMER_voidICUInitEnable>:
//----------------------------------------------------------------------------------------------------------------------------------------------------
/*
	Hint : This func for initial state of trigger (prebuild)
*/
void TIMER_voidICUInitEnable(void)
{
    12ca:	df 93       	push	r29
    12cc:	cf 93       	push	r28
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
	/* Set trigger source as rising edge Initially  */
	#if (TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_RAISING_EDGE)
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    12d2:	ae e4       	ldi	r26, 0x4E	; 78
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	ee e4       	ldi	r30, 0x4E	; 78
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	80 64       	ori	r24, 0x40	; 64
    12de:	8c 93       	st	X, r24
	#elif(TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_FALLING_EDGE)
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
	#endif
	
	/* Enable Interrupt of ICU */
	SET_BIT(TIMSK,TIMSK_TICIE1);
    12e0:	a9 e5       	ldi	r26, 0x59	; 89
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	e9 e5       	ldi	r30, 0x59	; 89
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	80 62       	ori	r24, 0x20	; 32
    12ec:	8c 93       	st	X, r24
}
    12ee:	cf 91       	pop	r28
    12f0:	df 91       	pop	r29
    12f2:	08 95       	ret

000012f4 <TIMER_voidICUSetTriggerEdge>:
	Options :-
	 1- TIMER_u8_ICP_RAISING_EDGE
	 2- TIMER_u8_ICP_FALLING_EDGE
*/
u8 TIMER_voidICUSetTriggerEdge(u8 Copy_u8Edge)
{
    12f4:	df 93       	push	r29
    12f6:	cf 93       	push	r28
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <TIMER_voidICUSetTriggerEdge+0x6>
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK ;
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	89 83       	std	Y+1, r24	; 0x01
	
	/* Change The trigger source as Rising edge or Falling edge */
	if (Copy_u8Edge == TIMER_u8_ICP_RAISING_EDGE)
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	81 30       	cpi	r24, 0x01	; 1
    1308:	41 f4       	brne	.+16     	; 0x131a <TIMER_voidICUSetTriggerEdge+0x26>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    130a:	ae e4       	ldi	r26, 0x4E	; 78
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	ee e4       	ldi	r30, 0x4E	; 78
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	80 64       	ori	r24, 0x40	; 64
    1316:	8c 93       	st	X, r24
    1318:	0c c0       	rjmp	.+24     	; 0x1332 <TIMER_voidICUSetTriggerEdge+0x3e>
	}
	else if(Copy_u8Edge == TIMER_u8_ICP_FALLING_EDGE)
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	88 23       	and	r24, r24
    131e:	41 f4       	brne	.+16     	; 0x1330 <TIMER_voidICUSetTriggerEdge+0x3c>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    1320:	ae e4       	ldi	r26, 0x4E	; 78
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	ee e4       	ldi	r30, 0x4E	; 78
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	8f 7b       	andi	r24, 0xBF	; 191
    132c:	8c 93       	st	X, r24
    132e:	01 c0       	rjmp	.+2      	; 0x1332 <TIMER_voidICUSetTriggerEdge+0x3e>
	}
	else
	{
		Local_u8ErrorStatus = NOK ;
    1330:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorStatus;
    1332:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	08 95       	ret

0000133e <TIMER_voidICUEnableInterrupt>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidICUEnableInterrupt(void)
{
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
    1346:	a9 e5       	ldi	r26, 0x59	; 89
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	e9 e5       	ldi	r30, 0x59	; 89
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	80 62       	ori	r24, 0x20	; 32
    1352:	8c 93       	st	X, r24
}
    1354:	cf 91       	pop	r28
    1356:	df 91       	pop	r29
    1358:	08 95       	ret

0000135a <TIMER_voidICUDisableInterrupt>:


//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidICUDisableInterrupt(void)
{
    135a:	df 93       	push	r29
    135c:	cf 93       	push	r28
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    1362:	a9 e5       	ldi	r26, 0x59	; 89
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	e9 e5       	ldi	r30, 0x59	; 89
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	8f 7d       	andi	r24, 0xDF	; 223
    136e:	8c 93       	st	X, r24
}
    1370:	cf 91       	pop	r28
    1372:	df 91       	pop	r29
    1374:	08 95       	ret

00001376 <TIMER_u16GetICR>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

u16 TIMER_u16GetICR(void)
{
    1376:	df 93       	push	r29
    1378:	cf 93       	push	r28
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    137e:	e6 e4       	ldi	r30, 0x46	; 70
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	91 81       	ldd	r25, Z+1	; 0x01
}
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	08 95       	ret

0000138c <TIMER_voidWDTSleep>:
*/

//----------------------------------------------------------------------------------------------------------------------------------------------------
/* Hint : prebuild config  */
void TIMER_voidWDTSleep(void)
{
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
	/* CLear The Prescaler bits  */
	WDTCR &= WDT_PS_MASKING ;
    1394:	a1 e4       	ldi	r26, 0x41	; 65
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	e1 e4       	ldi	r30, 0x41	; 65
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	88 7f       	andi	r24, 0xF8	; 248
    13a0:	8c 93       	st	X, r24
	/* Set The required prescaller */
	WDTCR |= WDT_PRESCALER ;
    13a2:	a1 e4       	ldi	r26, 0x41	; 65
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	e1 e4       	ldi	r30, 0x41	; 65
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	86 60       	ori	r24, 0x06	; 6
    13ae:	8c 93       	st	X, r24
}
    13b0:	cf 91       	pop	r28
    13b2:	df 91       	pop	r29
    13b4:	08 95       	ret

000013b6 <TIMER_voidWDTEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidWDTEnable (void)
{
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT (WDTCR , WDTCR_WDE);
    13be:	a1 e4       	ldi	r26, 0x41	; 65
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	e1 e4       	ldi	r30, 0x41	; 65
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	88 60       	ori	r24, 0x08	; 8
    13ca:	8c 93       	st	X, r24
}
    13cc:	cf 91       	pop	r28
    13ce:	df 91       	pop	r29
    13d0:	08 95       	ret

000013d2 <TIMER_voidWDTDisable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidWDTDisable (void)
{
    13d2:	df 93       	push	r29
    13d4:	cf 93       	push	r28
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
	/* Set Bit 3&4 at the same CLK cycle  */
	WDTCR |= 0b00011000 ;
    13da:	a1 e4       	ldi	r26, 0x41	; 65
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	e1 e4       	ldi	r30, 0x41	; 65
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	88 61       	ori	r24, 0x18	; 24
    13e6:	8c 93       	st	X, r24
	/* WDTCR_WDE = 0 */
	/* I don't care for any value in this Reg Cuz I want to Disable */
	WDTCR = 0 ;
    13e8:	e1 e4       	ldi	r30, 0x41	; 65
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	10 82       	st	Z, r1
}
    13ee:	cf 91       	pop	r28
    13f0:	df 91       	pop	r29
    13f2:	08 95       	ret

000013f4 <TIMER_u8SetCallBack>:

//----------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------------------------

u8 TIMER_u8SetCallBack(void (*Copy_pvCallBackFunc)(void) , u8 Copy_u8VectorID)
{
    13f4:	df 93       	push	r29
    13f6:	cf 93       	push	r28
    13f8:	00 d0       	rcall	.+0      	; 0x13fa <TIMER_u8SetCallBack+0x6>
    13fa:	00 d0       	rcall	.+0      	; 0x13fc <TIMER_u8SetCallBack+0x8>
    13fc:	cd b7       	in	r28, 0x3d	; 61
    13fe:	de b7       	in	r29, 0x3e	; 62
    1400:	9b 83       	std	Y+3, r25	; 0x03
    1402:	8a 83       	std	Y+2, r24	; 0x02
    1404:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK ;
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_pvCallBackFunc != NULL)
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	9b 81       	ldd	r25, Y+3	; 0x03
    140e:	00 97       	sbiw	r24, 0x00	; 0
    1410:	69 f0       	breq	.+26     	; 0x142c <TIMER_u8SetCallBack+0x38>
	{
		TIMERS_pvCallBackFunc[Copy_u8VectorID] = Copy_pvCallBackFunc ;
    1412:	8c 81       	ldd	r24, Y+4	; 0x04
    1414:	88 2f       	mov	r24, r24
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	fc 01       	movw	r30, r24
    141e:	e6 59       	subi	r30, 0x96	; 150
    1420:	ff 4f       	sbci	r31, 0xFF	; 255
    1422:	8a 81       	ldd	r24, Y+2	; 0x02
    1424:	9b 81       	ldd	r25, Y+3	; 0x03
    1426:	91 83       	std	Z+1, r25	; 0x01
    1428:	80 83       	st	Z, r24
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <TIMER_u8SetCallBack+0x3c>
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER ;
    142c:	82 e0       	ldi	r24, 0x02	; 2
    142e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    1430:	89 81       	ldd	r24, Y+1	; 0x01
}
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	cf 91       	pop	r28
    143c:	df 91       	pop	r29
    143e:	08 95       	ret

00001440 <__vector_11>:

/*TIMER0 Normal Mode ISR*/
void __vector_11 (void)		__attribute__((signal)) ;
void __vector_11 (void)
{
    1440:	1f 92       	push	r1
    1442:	0f 92       	push	r0
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	0f 92       	push	r0
    1448:	11 24       	eor	r1, r1
    144a:	2f 93       	push	r18
    144c:	3f 93       	push	r19
    144e:	4f 93       	push	r20
    1450:	5f 93       	push	r21
    1452:	6f 93       	push	r22
    1454:	7f 93       	push	r23
    1456:	8f 93       	push	r24
    1458:	9f 93       	push	r25
    145a:	af 93       	push	r26
    145c:	bf 93       	push	r27
    145e:	ef 93       	push	r30
    1460:	ff 93       	push	r31
    1462:	df 93       	push	r29
    1464:	cf 93       	push	r28
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID] != NULL)
    146a:	80 91 80 00 	lds	r24, 0x0080
    146e:	90 91 81 00 	lds	r25, 0x0081
    1472:	00 97       	sbiw	r24, 0x00	; 0
    1474:	29 f0       	breq	.+10     	; 0x1480 <__vector_11+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID]() ;
    1476:	e0 91 80 00 	lds	r30, 0x0080
    147a:	f0 91 81 00 	lds	r31, 0x0081
    147e:	09 95       	icall
	}
}
    1480:	cf 91       	pop	r28
    1482:	df 91       	pop	r29
    1484:	ff 91       	pop	r31
    1486:	ef 91       	pop	r30
    1488:	bf 91       	pop	r27
    148a:	af 91       	pop	r26
    148c:	9f 91       	pop	r25
    148e:	8f 91       	pop	r24
    1490:	7f 91       	pop	r23
    1492:	6f 91       	pop	r22
    1494:	5f 91       	pop	r21
    1496:	4f 91       	pop	r20
    1498:	3f 91       	pop	r19
    149a:	2f 91       	pop	r18
    149c:	0f 90       	pop	r0
    149e:	0f be       	out	0x3f, r0	; 63
    14a0:	0f 90       	pop	r0
    14a2:	1f 90       	pop	r1
    14a4:	18 95       	reti

000014a6 <__vector_10>:

/*TIMER0 CTC Mode ISR*/
void __vector_10 (void)		__attribute__((signal)) ;
void __vector_10 (void)
{
    14a6:	1f 92       	push	r1
    14a8:	0f 92       	push	r0
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	0f 92       	push	r0
    14ae:	11 24       	eor	r1, r1
    14b0:	2f 93       	push	r18
    14b2:	3f 93       	push	r19
    14b4:	4f 93       	push	r20
    14b6:	5f 93       	push	r21
    14b8:	6f 93       	push	r22
    14ba:	7f 93       	push	r23
    14bc:	8f 93       	push	r24
    14be:	9f 93       	push	r25
    14c0:	af 93       	push	r26
    14c2:	bf 93       	push	r27
    14c4:	ef 93       	push	r30
    14c6:	ff 93       	push	r31
    14c8:	df 93       	push	r29
    14ca:	cf 93       	push	r28
    14cc:	cd b7       	in	r28, 0x3d	; 61
    14ce:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID] != NULL)
    14d0:	80 91 7e 00 	lds	r24, 0x007E
    14d4:	90 91 7f 00 	lds	r25, 0x007F
    14d8:	00 97       	sbiw	r24, 0x00	; 0
    14da:	29 f0       	breq	.+10     	; 0x14e6 <__vector_10+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID]() ;
    14dc:	e0 91 7e 00 	lds	r30, 0x007E
    14e0:	f0 91 7f 00 	lds	r31, 0x007F
    14e4:	09 95       	icall
	}
}
    14e6:	cf 91       	pop	r28
    14e8:	df 91       	pop	r29
    14ea:	ff 91       	pop	r31
    14ec:	ef 91       	pop	r30
    14ee:	bf 91       	pop	r27
    14f0:	af 91       	pop	r26
    14f2:	9f 91       	pop	r25
    14f4:	8f 91       	pop	r24
    14f6:	7f 91       	pop	r23
    14f8:	6f 91       	pop	r22
    14fa:	5f 91       	pop	r21
    14fc:	4f 91       	pop	r20
    14fe:	3f 91       	pop	r19
    1500:	2f 91       	pop	r18
    1502:	0f 90       	pop	r0
    1504:	0f be       	out	0x3f, r0	; 63
    1506:	0f 90       	pop	r0
    1508:	1f 90       	pop	r1
    150a:	18 95       	reti

0000150c <__vector_9>:

/*TIMER1 Normal Mode ISR*/
void __vector_9 (void)		__attribute__((signal)) ;
void __vector_9 (void)
{
    150c:	1f 92       	push	r1
    150e:	0f 92       	push	r0
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	0f 92       	push	r0
    1514:	11 24       	eor	r1, r1
    1516:	2f 93       	push	r18
    1518:	3f 93       	push	r19
    151a:	4f 93       	push	r20
    151c:	5f 93       	push	r21
    151e:	6f 93       	push	r22
    1520:	7f 93       	push	r23
    1522:	8f 93       	push	r24
    1524:	9f 93       	push	r25
    1526:	af 93       	push	r26
    1528:	bf 93       	push	r27
    152a:	ef 93       	push	r30
    152c:	ff 93       	push	r31
    152e:	df 93       	push	r29
    1530:	cf 93       	push	r28
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID] != NULL)
    1536:	80 91 7c 00 	lds	r24, 0x007C
    153a:	90 91 7d 00 	lds	r25, 0x007D
    153e:	00 97       	sbiw	r24, 0x00	; 0
    1540:	29 f0       	breq	.+10     	; 0x154c <__vector_9+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID]() ;
    1542:	e0 91 7c 00 	lds	r30, 0x007C
    1546:	f0 91 7d 00 	lds	r31, 0x007D
    154a:	09 95       	icall
	}
}
    154c:	cf 91       	pop	r28
    154e:	df 91       	pop	r29
    1550:	ff 91       	pop	r31
    1552:	ef 91       	pop	r30
    1554:	bf 91       	pop	r27
    1556:	af 91       	pop	r26
    1558:	9f 91       	pop	r25
    155a:	8f 91       	pop	r24
    155c:	7f 91       	pop	r23
    155e:	6f 91       	pop	r22
    1560:	5f 91       	pop	r21
    1562:	4f 91       	pop	r20
    1564:	3f 91       	pop	r19
    1566:	2f 91       	pop	r18
    1568:	0f 90       	pop	r0
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	0f 90       	pop	r0
    156e:	1f 90       	pop	r1
    1570:	18 95       	reti

00001572 <__vector_8>:

/*TIMER1 CTCB Mode ISR*/
void __vector_8 (void)		__attribute__((signal)) ;
void __vector_8 (void)
{
    1572:	1f 92       	push	r1
    1574:	0f 92       	push	r0
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	0f 92       	push	r0
    157a:	11 24       	eor	r1, r1
    157c:	2f 93       	push	r18
    157e:	3f 93       	push	r19
    1580:	4f 93       	push	r20
    1582:	5f 93       	push	r21
    1584:	6f 93       	push	r22
    1586:	7f 93       	push	r23
    1588:	8f 93       	push	r24
    158a:	9f 93       	push	r25
    158c:	af 93       	push	r26
    158e:	bf 93       	push	r27
    1590:	ef 93       	push	r30
    1592:	ff 93       	push	r31
    1594:	df 93       	push	r29
    1596:	cf 93       	push	r28
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID] != NULL)
    159c:	80 91 7a 00 	lds	r24, 0x007A
    15a0:	90 91 7b 00 	lds	r25, 0x007B
    15a4:	00 97       	sbiw	r24, 0x00	; 0
    15a6:	29 f0       	breq	.+10     	; 0x15b2 <__vector_8+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID]() ;
    15a8:	e0 91 7a 00 	lds	r30, 0x007A
    15ac:	f0 91 7b 00 	lds	r31, 0x007B
    15b0:	09 95       	icall
	}
}
    15b2:	cf 91       	pop	r28
    15b4:	df 91       	pop	r29
    15b6:	ff 91       	pop	r31
    15b8:	ef 91       	pop	r30
    15ba:	bf 91       	pop	r27
    15bc:	af 91       	pop	r26
    15be:	9f 91       	pop	r25
    15c0:	8f 91       	pop	r24
    15c2:	7f 91       	pop	r23
    15c4:	6f 91       	pop	r22
    15c6:	5f 91       	pop	r21
    15c8:	4f 91       	pop	r20
    15ca:	3f 91       	pop	r19
    15cc:	2f 91       	pop	r18
    15ce:	0f 90       	pop	r0
    15d0:	0f be       	out	0x3f, r0	; 63
    15d2:	0f 90       	pop	r0
    15d4:	1f 90       	pop	r1
    15d6:	18 95       	reti

000015d8 <__vector_7>:

/*TIMER1 CTCA Mode ISR*/
void __vector_7 (void)		__attribute__((signal)) ;
void __vector_7 (void)
{
    15d8:	1f 92       	push	r1
    15da:	0f 92       	push	r0
    15dc:	0f b6       	in	r0, 0x3f	; 63
    15de:	0f 92       	push	r0
    15e0:	11 24       	eor	r1, r1
    15e2:	2f 93       	push	r18
    15e4:	3f 93       	push	r19
    15e6:	4f 93       	push	r20
    15e8:	5f 93       	push	r21
    15ea:	6f 93       	push	r22
    15ec:	7f 93       	push	r23
    15ee:	8f 93       	push	r24
    15f0:	9f 93       	push	r25
    15f2:	af 93       	push	r26
    15f4:	bf 93       	push	r27
    15f6:	ef 93       	push	r30
    15f8:	ff 93       	push	r31
    15fa:	df 93       	push	r29
    15fc:	cf 93       	push	r28
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID] != NULL)
    1602:	80 91 78 00 	lds	r24, 0x0078
    1606:	90 91 79 00 	lds	r25, 0x0079
    160a:	00 97       	sbiw	r24, 0x00	; 0
    160c:	29 f0       	breq	.+10     	; 0x1618 <__vector_7+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID]() ;
    160e:	e0 91 78 00 	lds	r30, 0x0078
    1612:	f0 91 79 00 	lds	r31, 0x0079
    1616:	09 95       	icall
	}
}
    1618:	cf 91       	pop	r28
    161a:	df 91       	pop	r29
    161c:	ff 91       	pop	r31
    161e:	ef 91       	pop	r30
    1620:	bf 91       	pop	r27
    1622:	af 91       	pop	r26
    1624:	9f 91       	pop	r25
    1626:	8f 91       	pop	r24
    1628:	7f 91       	pop	r23
    162a:	6f 91       	pop	r22
    162c:	5f 91       	pop	r21
    162e:	4f 91       	pop	r20
    1630:	3f 91       	pop	r19
    1632:	2f 91       	pop	r18
    1634:	0f 90       	pop	r0
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	0f 90       	pop	r0
    163a:	1f 90       	pop	r1
    163c:	18 95       	reti

0000163e <__vector_6>:

/*TIMER1 ICU ISR*/
void __vector_6 (void)		__attribute__((signal)) ;
void __vector_6 (void)
{
    163e:	1f 92       	push	r1
    1640:	0f 92       	push	r0
    1642:	0f b6       	in	r0, 0x3f	; 63
    1644:	0f 92       	push	r0
    1646:	11 24       	eor	r1, r1
    1648:	2f 93       	push	r18
    164a:	3f 93       	push	r19
    164c:	4f 93       	push	r20
    164e:	5f 93       	push	r21
    1650:	6f 93       	push	r22
    1652:	7f 93       	push	r23
    1654:	8f 93       	push	r24
    1656:	9f 93       	push	r25
    1658:	af 93       	push	r26
    165a:	bf 93       	push	r27
    165c:	ef 93       	push	r30
    165e:	ff 93       	push	r31
    1660:	df 93       	push	r29
    1662:	cf 93       	push	r28
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID] != NULL)
    1668:	80 91 76 00 	lds	r24, 0x0076
    166c:	90 91 77 00 	lds	r25, 0x0077
    1670:	00 97       	sbiw	r24, 0x00	; 0
    1672:	29 f0       	breq	.+10     	; 0x167e <__vector_6+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID]() ;
    1674:	e0 91 76 00 	lds	r30, 0x0076
    1678:	f0 91 77 00 	lds	r31, 0x0077
    167c:	09 95       	icall
	}
}
    167e:	cf 91       	pop	r28
    1680:	df 91       	pop	r29
    1682:	ff 91       	pop	r31
    1684:	ef 91       	pop	r30
    1686:	bf 91       	pop	r27
    1688:	af 91       	pop	r26
    168a:	9f 91       	pop	r25
    168c:	8f 91       	pop	r24
    168e:	7f 91       	pop	r23
    1690:	6f 91       	pop	r22
    1692:	5f 91       	pop	r21
    1694:	4f 91       	pop	r20
    1696:	3f 91       	pop	r19
    1698:	2f 91       	pop	r18
    169a:	0f 90       	pop	r0
    169c:	0f be       	out	0x3f, r0	; 63
    169e:	0f 90       	pop	r0
    16a0:	1f 90       	pop	r1
    16a2:	18 95       	reti

000016a4 <__vector_5>:

/*TIMER2 Normal Mode ISR*/
void __vector_5 (void)		__attribute__((signal)) ;
void __vector_5 (void)
{
    16a4:	1f 92       	push	r1
    16a6:	0f 92       	push	r0
    16a8:	0f b6       	in	r0, 0x3f	; 63
    16aa:	0f 92       	push	r0
    16ac:	11 24       	eor	r1, r1
    16ae:	2f 93       	push	r18
    16b0:	3f 93       	push	r19
    16b2:	4f 93       	push	r20
    16b4:	5f 93       	push	r21
    16b6:	6f 93       	push	r22
    16b8:	7f 93       	push	r23
    16ba:	8f 93       	push	r24
    16bc:	9f 93       	push	r25
    16be:	af 93       	push	r26
    16c0:	bf 93       	push	r27
    16c2:	ef 93       	push	r30
    16c4:	ff 93       	push	r31
    16c6:	df 93       	push	r29
    16c8:	cf 93       	push	r28
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID] != NULL)
    16ce:	80 91 74 00 	lds	r24, 0x0074
    16d2:	90 91 75 00 	lds	r25, 0x0075
    16d6:	00 97       	sbiw	r24, 0x00	; 0
    16d8:	29 f0       	breq	.+10     	; 0x16e4 <__vector_5+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID]() ;
    16da:	e0 91 74 00 	lds	r30, 0x0074
    16de:	f0 91 75 00 	lds	r31, 0x0075
    16e2:	09 95       	icall
	}
}
    16e4:	cf 91       	pop	r28
    16e6:	df 91       	pop	r29
    16e8:	ff 91       	pop	r31
    16ea:	ef 91       	pop	r30
    16ec:	bf 91       	pop	r27
    16ee:	af 91       	pop	r26
    16f0:	9f 91       	pop	r25
    16f2:	8f 91       	pop	r24
    16f4:	7f 91       	pop	r23
    16f6:	6f 91       	pop	r22
    16f8:	5f 91       	pop	r21
    16fa:	4f 91       	pop	r20
    16fc:	3f 91       	pop	r19
    16fe:	2f 91       	pop	r18
    1700:	0f 90       	pop	r0
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	0f 90       	pop	r0
    1706:	1f 90       	pop	r1
    1708:	18 95       	reti

0000170a <__vector_4>:

/*TIMER2 CTC Mode ISR*/
void __vector_4 (void)		__attribute__((signal)) ;
void __vector_4 (void)
{
    170a:	1f 92       	push	r1
    170c:	0f 92       	push	r0
    170e:	0f b6       	in	r0, 0x3f	; 63
    1710:	0f 92       	push	r0
    1712:	11 24       	eor	r1, r1
    1714:	2f 93       	push	r18
    1716:	3f 93       	push	r19
    1718:	4f 93       	push	r20
    171a:	5f 93       	push	r21
    171c:	6f 93       	push	r22
    171e:	7f 93       	push	r23
    1720:	8f 93       	push	r24
    1722:	9f 93       	push	r25
    1724:	af 93       	push	r26
    1726:	bf 93       	push	r27
    1728:	ef 93       	push	r30
    172a:	ff 93       	push	r31
    172c:	df 93       	push	r29
    172e:	cf 93       	push	r28
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID] != NULL)
    1734:	80 91 72 00 	lds	r24, 0x0072
    1738:	90 91 73 00 	lds	r25, 0x0073
    173c:	00 97       	sbiw	r24, 0x00	; 0
    173e:	29 f0       	breq	.+10     	; 0x174a <__vector_4+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID]() ;
    1740:	e0 91 72 00 	lds	r30, 0x0072
    1744:	f0 91 73 00 	lds	r31, 0x0073
    1748:	09 95       	icall
	}
}
    174a:	cf 91       	pop	r28
    174c:	df 91       	pop	r29
    174e:	ff 91       	pop	r31
    1750:	ef 91       	pop	r30
    1752:	bf 91       	pop	r27
    1754:	af 91       	pop	r26
    1756:	9f 91       	pop	r25
    1758:	8f 91       	pop	r24
    175a:	7f 91       	pop	r23
    175c:	6f 91       	pop	r22
    175e:	5f 91       	pop	r21
    1760:	4f 91       	pop	r20
    1762:	3f 91       	pop	r19
    1764:	2f 91       	pop	r18
    1766:	0f 90       	pop	r0
    1768:	0f be       	out	0x3f, r0	; 63
    176a:	0f 90       	pop	r0
    176c:	1f 90       	pop	r1
    176e:	18 95       	reti

00001770 <APP>:
volatile u8 count2 =0;
volatile u8 x =0;
volatile u16 count3 =0;
volatile u16 count4 =0;
void APP (void)
{
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62

	LED_VoidInitialPin(led1);
    1778:	60 91 60 00 	lds	r22, 0x0060
    177c:	70 91 61 00 	lds	r23, 0x0061
    1780:	80 91 62 00 	lds	r24, 0x0062
    1784:	0e 94 64 07 	call	0xec8	; 0xec8 <LED_VoidInitialPin>
	LED_VoidInitialPin(led2);
    1788:	60 91 63 00 	lds	r22, 0x0063
    178c:	70 91 64 00 	lds	r23, 0x0064
    1790:	80 91 65 00 	lds	r24, 0x0065
    1794:	0e 94 64 07 	call	0xec8	; 0xec8 <LED_VoidInitialPin>
	LED_VoidInitialPin(led3);
    1798:	60 91 66 00 	lds	r22, 0x0066
    179c:	70 91 67 00 	lds	r23, 0x0067
    17a0:	80 91 68 00 	lds	r24, 0x0068
    17a4:	0e 94 64 07 	call	0xec8	; 0xec8 <LED_VoidInitialPin>
	TIMER0_voidInit();
    17a8:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <TIMER0_voidInit>
	TIMER2_voidInit();
    17ac:	0e 94 7f 08 	call	0x10fe	; 0x10fe <TIMER2_voidInit>
	GIF_VoidEnable();
    17b0:	0e 94 48 07 	call	0xe90	; 0xe90 <GIF_VoidEnable>
}
    17b4:	cf 91       	pop	r28
    17b6:	df 91       	pop	r29
    17b8:	08 95       	ret

000017ba <DELAY>:
void DELAY (void)
{
    17ba:	df 93       	push	r29
    17bc:	cf 93       	push	r28
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
	count1++;
    17c2:	80 91 8a 00 	lds	r24, 0x008A
    17c6:	8f 5f       	subi	r24, 0xFF	; 255
    17c8:	80 93 8a 00 	sts	0x008A, r24
	count2++;
    17cc:	80 91 8b 00 	lds	r24, 0x008B
    17d0:	8f 5f       	subi	r24, 0xFF	; 255
    17d2:	80 93 8b 00 	sts	0x008B, r24
	count3++;
    17d6:	80 91 8d 00 	lds	r24, 0x008D
    17da:	90 91 8e 00 	lds	r25, 0x008E
    17de:	01 96       	adiw	r24, 0x01	; 1
    17e0:	90 93 8e 00 	sts	0x008E, r25
    17e4:	80 93 8d 00 	sts	0x008D, r24
	count4++;
    17e8:	80 91 8f 00 	lds	r24, 0x008F
    17ec:	90 91 90 00 	lds	r25, 0x0090
    17f0:	01 96       	adiw	r24, 0x01	; 1
    17f2:	90 93 90 00 	sts	0x0090, r25
    17f6:	80 93 8f 00 	sts	0x008F, r24
}
    17fa:	cf 91       	pop	r28
    17fc:	df 91       	pop	r29
    17fe:	08 95       	ret

00001800 <main>:
int main ()
{
    1800:	df 93       	push	r29
    1802:	cf 93       	push	r28
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
	APP();
    1808:	0e 94 b8 0b 	call	0x1770	; 0x1770 <APP>
	TIMER_u8SetCallBack(&DELAY,TIMER0_CTC_VECTOR_ID);
    180c:	8d ed       	ldi	r24, 0xDD	; 221
    180e:	9b e0       	ldi	r25, 0x0B	; 11
    1810:	6a e0       	ldi	r22, 0x0A	; 10
    1812:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <TIMER_u8SetCallBack>
	while(1)
	{
		if(count1>=100)
    1816:	80 91 8a 00 	lds	r24, 0x008A
    181a:	84 36       	cpi	r24, 0x64	; 100
    181c:	58 f0       	brcs	.+22     	; 0x1834 <main+0x34>
		{
			LED_VoidToggle(led1);
    181e:	60 91 60 00 	lds	r22, 0x0060
    1822:	70 91 61 00 	lds	r23, 0x0061
    1826:	80 91 62 00 	lds	r24, 0x0062
    182a:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LED_VoidToggle>
			count1=0;
    182e:	10 92 8a 00 	sts	0x008A, r1
    1832:	f1 cf       	rjmp	.-30     	; 0x1816 <main+0x16>
		}
		else if(count2>=200)
    1834:	80 91 8b 00 	lds	r24, 0x008B
    1838:	88 3c       	cpi	r24, 0xC8	; 200
    183a:	58 f0       	brcs	.+22     	; 0x1852 <main+0x52>
		{
			LED_VoidToggle(led2);
    183c:	60 91 63 00 	lds	r22, 0x0063
    1840:	70 91 64 00 	lds	r23, 0x0064
    1844:	80 91 65 00 	lds	r24, 0x0065
    1848:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LED_VoidToggle>
			count2=0;
    184c:	10 92 8b 00 	sts	0x008B, r1
    1850:	e2 cf       	rjmp	.-60     	; 0x1816 <main+0x16>
		}
		else if(count3>=300)
    1852:	80 91 8d 00 	lds	r24, 0x008D
    1856:	90 91 8e 00 	lds	r25, 0x008E
    185a:	21 e0       	ldi	r18, 0x01	; 1
    185c:	8c 32       	cpi	r24, 0x2C	; 44
    185e:	92 07       	cpc	r25, r18
    1860:	68 f0       	brcs	.+26     	; 0x187c <main+0x7c>
		{
			LED_VoidToggle(led3);
    1862:	60 91 66 00 	lds	r22, 0x0066
    1866:	70 91 67 00 	lds	r23, 0x0067
    186a:	80 91 68 00 	lds	r24, 0x0068
    186e:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LED_VoidToggle>
			count3=0;
    1872:	10 92 8e 00 	sts	0x008E, r1
    1876:	10 92 8d 00 	sts	0x008D, r1
    187a:	cd cf       	rjmp	.-102    	; 0x1816 <main+0x16>
		}
		else if(count4>=500)
    187c:	80 91 8f 00 	lds	r24, 0x008F
    1880:	90 91 90 00 	lds	r25, 0x0090
    1884:	21 e0       	ldi	r18, 0x01	; 1
    1886:	84 3f       	cpi	r24, 0xF4	; 244
    1888:	92 07       	cpc	r25, r18
    188a:	28 f2       	brcs	.-118    	; 0x1816 <main+0x16>
		{
			if(x==0)
    188c:	80 91 8c 00 	lds	r24, 0x008C
    1890:	88 23       	and	r24, r24
    1892:	39 f4       	brne	.+14     	; 0x18a2 <main+0xa2>
			{
				TIMER2_voidSetCTC(240);
    1894:	80 ef       	ldi	r24, 0xF0	; 240
    1896:	0e 94 14 09 	call	0x1228	; 0x1228 <TIMER2_voidSetCTC>
				x=1;
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	80 93 8c 00 	sts	0x008C, r24
    18a0:	05 c0       	rjmp	.+10     	; 0x18ac <main+0xac>
			}else
			{
				TIMER2_voidSetCTC(30);
    18a2:	8e e1       	ldi	r24, 0x1E	; 30
    18a4:	0e 94 14 09 	call	0x1228	; 0x1228 <TIMER2_voidSetCTC>
				x=0;
    18a8:	10 92 8c 00 	sts	0x008C, r1
			}

			count4=0;
    18ac:	10 92 90 00 	sts	0x0090, r1
    18b0:	10 92 8f 00 	sts	0x008F, r1
    18b4:	b0 cf       	rjmp	.-160    	; 0x1816 <main+0x16>

000018b6 <_exit>:
    18b6:	f8 94       	cli

000018b8 <__stop_program>:
    18b8:	ff cf       	rjmp	.-2      	; 0x18b8 <__stop_program>
