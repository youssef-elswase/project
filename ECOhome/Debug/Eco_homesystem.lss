
Eco_homesystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000075a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001de  00800060  000075a4  00007638  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  0080023e  0080023e  00007816  2**0
                  ALLOC
  3 .stab         0000825c  00000000  00000000  00007818  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002fcd  00000000  00000000  0000fa74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000220  00000000  00000000  00012a41  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000277  00000000  00000000  00012c61  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002953  00000000  00000000  00012ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000016b7  00000000  00000000  0001582b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001570  00000000  00000000  00016ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000240  00000000  00000000  00018454  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000036b  00000000  00000000  00018694  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000bf0  00000000  00000000  000189ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000195ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 9e 32 	jmp	0x653c	; 0x653c <__vector_4>
      14:	0c 94 6b 32 	jmp	0x64d6	; 0x64d6 <__vector_5>
      18:	0c 94 38 32 	jmp	0x6470	; 0x6470 <__vector_6>
      1c:	0c 94 05 32 	jmp	0x640a	; 0x640a <__vector_7>
      20:	0c 94 d2 31 	jmp	0x63a4	; 0x63a4 <__vector_8>
      24:	0c 94 9f 31 	jmp	0x633e	; 0x633e <__vector_9>
      28:	0c 94 6c 31 	jmp	0x62d8	; 0x62d8 <__vector_10>
      2c:	0c 94 39 31 	jmp	0x6272	; 0x6272 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 43 24 	jmp	0x4886	; 0x4886 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ea       	ldi	r30, 0xA4	; 164
      68:	f5 e7       	ldi	r31, 0x75	; 117
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 33       	cpi	r26, 0x3E	; 62
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ae e3       	ldi	r26, 0x3E	; 62
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 36       	cpi	r26, 0x60	; 96
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 be 34 	call	0x697c	; 0x697c <main>
      8a:	0c 94 d0 3a 	jmp	0x75a0	; 0x75a0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 11 05 	call	0xa22	; 0xa22 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__subsf3>
      be:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <__fixsfdi>:
      ea:	ef 92       	push	r14
      ec:	ff 92       	push	r15
      ee:	0f 93       	push	r16
      f0:	1f 93       	push	r17
      f2:	7b 01       	movw	r14, r22
      f4:	8c 01       	movw	r16, r24
      f6:	20 e0       	ldi	r18, 0x00	; 0
      f8:	30 e0       	ldi	r19, 0x00	; 0
      fa:	40 e0       	ldi	r20, 0x00	; 0
      fc:	50 e0       	ldi	r21, 0x00	; 0
      fe:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     102:	88 23       	and	r24, r24
     104:	0c f0       	brlt	.+2      	; 0x108 <__fixsfdi+0x1e>
     106:	5c c0       	rjmp	.+184    	; 0x1c0 <__fixsfdi+0xd6>
     108:	c8 01       	movw	r24, r16
     10a:	b7 01       	movw	r22, r14
     10c:	90 58       	subi	r25, 0x80	; 128
     10e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__fixunssfdi>
     112:	21 95       	neg	r18
     114:	e1 e0       	ldi	r30, 0x01	; 1
     116:	12 16       	cp	r1, r18
     118:	08 f0       	brcs	.+2      	; 0x11c <__fixsfdi+0x32>
     11a:	e0 e0       	ldi	r30, 0x00	; 0
     11c:	31 95       	neg	r19
     11e:	f1 e0       	ldi	r31, 0x01	; 1
     120:	13 16       	cp	r1, r19
     122:	08 f0       	brcs	.+2      	; 0x126 <__fixsfdi+0x3c>
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	e3 2e       	mov	r14, r19
     128:	ee 1a       	sub	r14, r30
     12a:	e1 e0       	ldi	r30, 0x01	; 1
     12c:	3e 15       	cp	r19, r14
     12e:	08 f0       	brcs	.+2      	; 0x132 <__fixsfdi+0x48>
     130:	e0 e0       	ldi	r30, 0x00	; 0
     132:	fe 2b       	or	r31, r30
     134:	41 95       	neg	r20
     136:	a1 e0       	ldi	r26, 0x01	; 1
     138:	14 16       	cp	r1, r20
     13a:	08 f0       	brcs	.+2      	; 0x13e <__fixsfdi+0x54>
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	f4 2e       	mov	r15, r20
     140:	ff 1a       	sub	r15, r31
     142:	e1 e0       	ldi	r30, 0x01	; 1
     144:	4f 15       	cp	r20, r15
     146:	08 f0       	brcs	.+2      	; 0x14a <__fixsfdi+0x60>
     148:	e0 e0       	ldi	r30, 0x00	; 0
     14a:	ae 2b       	or	r26, r30
     14c:	51 95       	neg	r21
     14e:	f1 e0       	ldi	r31, 0x01	; 1
     150:	15 16       	cp	r1, r21
     152:	08 f0       	brcs	.+2      	; 0x156 <__fixsfdi+0x6c>
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	05 2f       	mov	r16, r21
     158:	0a 1b       	sub	r16, r26
     15a:	e1 e0       	ldi	r30, 0x01	; 1
     15c:	50 17       	cp	r21, r16
     15e:	08 f0       	brcs	.+2      	; 0x162 <__fixsfdi+0x78>
     160:	e0 e0       	ldi	r30, 0x00	; 0
     162:	fe 2b       	or	r31, r30
     164:	61 95       	neg	r22
     166:	a1 e0       	ldi	r26, 0x01	; 1
     168:	16 16       	cp	r1, r22
     16a:	08 f0       	brcs	.+2      	; 0x16e <__fixsfdi+0x84>
     16c:	a0 e0       	ldi	r26, 0x00	; 0
     16e:	16 2f       	mov	r17, r22
     170:	1f 1b       	sub	r17, r31
     172:	e1 e0       	ldi	r30, 0x01	; 1
     174:	61 17       	cp	r22, r17
     176:	08 f0       	brcs	.+2      	; 0x17a <__fixsfdi+0x90>
     178:	e0 e0       	ldi	r30, 0x00	; 0
     17a:	ae 2b       	or	r26, r30
     17c:	71 95       	neg	r23
     17e:	f1 e0       	ldi	r31, 0x01	; 1
     180:	17 16       	cp	r1, r23
     182:	08 f0       	brcs	.+2      	; 0x186 <__fixsfdi+0x9c>
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	b7 2f       	mov	r27, r23
     188:	ba 1b       	sub	r27, r26
     18a:	e1 e0       	ldi	r30, 0x01	; 1
     18c:	7b 17       	cp	r23, r27
     18e:	08 f0       	brcs	.+2      	; 0x192 <__fixsfdi+0xa8>
     190:	e0 e0       	ldi	r30, 0x00	; 0
     192:	fe 2b       	or	r31, r30
     194:	81 95       	neg	r24
     196:	a1 e0       	ldi	r26, 0x01	; 1
     198:	18 16       	cp	r1, r24
     19a:	08 f0       	brcs	.+2      	; 0x19e <__fixsfdi+0xb4>
     19c:	a0 e0       	ldi	r26, 0x00	; 0
     19e:	38 2f       	mov	r19, r24
     1a0:	3f 1b       	sub	r19, r31
     1a2:	f3 2f       	mov	r31, r19
     1a4:	e1 e0       	ldi	r30, 0x01	; 1
     1a6:	83 17       	cp	r24, r19
     1a8:	08 f0       	brcs	.+2      	; 0x1ac <__fixsfdi+0xc2>
     1aa:	e0 e0       	ldi	r30, 0x00	; 0
     1ac:	ae 2b       	or	r26, r30
     1ae:	91 95       	neg	r25
     1b0:	3e 2d       	mov	r19, r14
     1b2:	4f 2d       	mov	r20, r15
     1b4:	50 2f       	mov	r21, r16
     1b6:	61 2f       	mov	r22, r17
     1b8:	7b 2f       	mov	r23, r27
     1ba:	8f 2f       	mov	r24, r31
     1bc:	9a 1b       	sub	r25, r26
     1be:	04 c0       	rjmp	.+8      	; 0x1c8 <__fixsfdi+0xde>
     1c0:	c8 01       	movw	r24, r16
     1c2:	b7 01       	movw	r22, r14
     1c4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__fixunssfdi>
     1c8:	1f 91       	pop	r17
     1ca:	0f 91       	pop	r16
     1cc:	ff 90       	pop	r15
     1ce:	ef 90       	pop	r14
     1d0:	08 95       	ret

000001d2 <__fixunssfdi>:
     1d2:	a0 e0       	ldi	r26, 0x00	; 0
     1d4:	b0 e0       	ldi	r27, 0x00	; 0
     1d6:	ef ee       	ldi	r30, 0xEF	; 239
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	0c 94 90 3a 	jmp	0x7520	; 0x7520 <__prologue_saves__>
     1de:	7b 01       	movw	r14, r22
     1e0:	8c 01       	movw	r16, r24
     1e2:	20 e0       	ldi	r18, 0x00	; 0
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	40 e8       	ldi	r20, 0x80	; 128
     1e8:	5f e3       	ldi	r21, 0x3F	; 63
     1ea:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     1ee:	88 23       	and	r24, r24
     1f0:	4c f4       	brge	.+18     	; 0x204 <__fixunssfdi+0x32>
     1f2:	aa 24       	eor	r10, r10
     1f4:	bb 24       	eor	r11, r11
     1f6:	cc 24       	eor	r12, r12
     1f8:	dd 24       	eor	r13, r13
     1fa:	ee 24       	eor	r14, r14
     1fc:	ff 24       	eor	r15, r15
     1fe:	00 e0       	ldi	r16, 0x00	; 0
     200:	10 e0       	ldi	r17, 0x00	; 0
     202:	86 c0       	rjmp	.+268    	; 0x310 <__fixunssfdi+0x13e>
     204:	c8 01       	movw	r24, r16
     206:	b7 01       	movw	r22, r14
     208:	20 e0       	ldi	r18, 0x00	; 0
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	40 e8       	ldi	r20, 0x80	; 128
     20e:	5f e4       	ldi	r21, 0x4F	; 79
     210:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     214:	88 23       	and	r24, r24
     216:	54 f4       	brge	.+20     	; 0x22c <__fixunssfdi+0x5a>
     218:	c8 01       	movw	r24, r16
     21a:	b7 01       	movw	r22, r14
     21c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     220:	5b 01       	movw	r10, r22
     222:	6c 01       	movw	r12, r24
     224:	ee 24       	eor	r14, r14
     226:	ff 24       	eor	r15, r15
     228:	87 01       	movw	r16, r14
     22a:	72 c0       	rjmp	.+228    	; 0x310 <__fixunssfdi+0x13e>
     22c:	c8 01       	movw	r24, r16
     22e:	b7 01       	movw	r22, r14
     230:	20 e0       	ldi	r18, 0x00	; 0
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	40 e8       	ldi	r20, 0x80	; 128
     236:	5f e5       	ldi	r21, 0x5F	; 95
     238:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     23c:	87 fd       	sbrc	r24, 7
     23e:	0f c0       	rjmp	.+30     	; 0x25e <__fixunssfdi+0x8c>
     240:	aa 24       	eor	r10, r10
     242:	aa 94       	dec	r10
     244:	bb 24       	eor	r11, r11
     246:	ba 94       	dec	r11
     248:	cc 24       	eor	r12, r12
     24a:	ca 94       	dec	r12
     24c:	dd 24       	eor	r13, r13
     24e:	da 94       	dec	r13
     250:	ee 24       	eor	r14, r14
     252:	ea 94       	dec	r14
     254:	ff 24       	eor	r15, r15
     256:	fa 94       	dec	r15
     258:	0f ef       	ldi	r16, 0xFF	; 255
     25a:	1f ef       	ldi	r17, 0xFF	; 255
     25c:	59 c0       	rjmp	.+178    	; 0x310 <__fixunssfdi+0x13e>
     25e:	c8 01       	movw	r24, r16
     260:	b7 01       	movw	r22, r14
     262:	20 e0       	ldi	r18, 0x00	; 0
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	40 e8       	ldi	r20, 0x80	; 128
     268:	5f e2       	ldi	r21, 0x2F	; 47
     26a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
     26e:	7b 01       	movw	r14, r22
     270:	8c 01       	movw	r16, r24
     272:	22 24       	eor	r2, r2
     274:	33 24       	eor	r3, r3
     276:	21 01       	movw	r4, r2
     278:	90 e1       	ldi	r25, 0x10	; 16
     27a:	a9 2e       	mov	r10, r25
     27c:	b1 2c       	mov	r11, r1
     27e:	c1 2c       	mov	r12, r1
     280:	d1 2c       	mov	r13, r1
     282:	c0 e0       	ldi	r28, 0x00	; 0
     284:	d0 e0       	ldi	r29, 0x00	; 0
     286:	61 e0       	ldi	r22, 0x01	; 1
     288:	70 e0       	ldi	r23, 0x00	; 0
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0a 2c       	mov	r0, r10
     290:	04 c0       	rjmp	.+8      	; 0x29a <__fixunssfdi+0xc8>
     292:	66 0f       	add	r22, r22
     294:	77 1f       	adc	r23, r23
     296:	88 1f       	adc	r24, r24
     298:	99 1f       	adc	r25, r25
     29a:	0a 94       	dec	r0
     29c:	d2 f7       	brpl	.-12     	; 0x292 <__fixunssfdi+0xc0>
     29e:	0e 94 23 06 	call	0xc46	; 0xc46 <__floatunsisf>
     2a2:	3b 01       	movw	r6, r22
     2a4:	4c 01       	movw	r8, r24
     2a6:	c8 01       	movw	r24, r16
     2a8:	b7 01       	movw	r22, r14
     2aa:	a4 01       	movw	r20, r8
     2ac:	93 01       	movw	r18, r6
     2ae:	0e 94 11 05 	call	0xa22	; 0xa22 <__gesf2>
     2b2:	88 23       	and	r24, r24
     2b4:	64 f0       	brlt	.+24     	; 0x2ce <__fixunssfdi+0xfc>
     2b6:	2a 28       	or	r2, r10
     2b8:	3b 28       	or	r3, r11
     2ba:	4c 28       	or	r4, r12
     2bc:	5d 28       	or	r5, r13
     2be:	c8 01       	movw	r24, r16
     2c0:	b7 01       	movw	r22, r14
     2c2:	a4 01       	movw	r20, r8
     2c4:	93 01       	movw	r18, r6
     2c6:	0e 94 35 04 	call	0x86a	; 0x86a <__divsf3>
     2ca:	7b 01       	movw	r14, r22
     2cc:	8c 01       	movw	r16, r24
     2ce:	d6 94       	lsr	r13
     2d0:	c7 94       	ror	r12
     2d2:	b7 94       	ror	r11
     2d4:	a7 94       	ror	r10
     2d6:	21 96       	adiw	r28, 0x01	; 1
     2d8:	c5 30       	cpi	r28, 0x05	; 5
     2da:	d1 05       	cpc	r29, r1
     2dc:	a1 f6       	brne	.-88     	; 0x286 <__fixunssfdi+0xb4>
     2de:	c8 01       	movw	r24, r16
     2e0:	b7 01       	movw	r22, r14
     2e2:	20 e0       	ldi	r18, 0x00	; 0
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	40 e8       	ldi	r20, 0x80	; 128
     2e8:	5f e4       	ldi	r21, 0x4F	; 79
     2ea:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
     2ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     2f2:	5b 01       	movw	r10, r22
     2f4:	6c 01       	movw	r12, r24
     2f6:	9b 01       	movw	r18, r22
     2f8:	a6 01       	movw	r20, r12
     2fa:	60 e0       	ldi	r22, 0x00	; 0
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	02 2d       	mov	r16, r2
     304:	0e 94 9c 06 	call	0xd38	; 0xd38 <__ashldi3>
     308:	59 01       	movw	r10, r18
     30a:	6a 01       	movw	r12, r20
     30c:	7b 01       	movw	r14, r22
     30e:	8c 01       	movw	r16, r24
     310:	95 01       	movw	r18, r10
     312:	a6 01       	movw	r20, r12
     314:	b7 01       	movw	r22, r14
     316:	c8 01       	movw	r24, r16
     318:	cd b7       	in	r28, 0x3d	; 61
     31a:	de b7       	in	r29, 0x3e	; 62
     31c:	e2 e1       	ldi	r30, 0x12	; 18
     31e:	0c 94 ac 3a 	jmp	0x7558	; 0x7558 <__epilogue_restores__>

00000322 <_fpadd_parts>:
     322:	a0 e0       	ldi	r26, 0x00	; 0
     324:	b0 e0       	ldi	r27, 0x00	; 0
     326:	e7 e9       	ldi	r30, 0x97	; 151
     328:	f1 e0       	ldi	r31, 0x01	; 1
     32a:	0c 94 90 3a 	jmp	0x7520	; 0x7520 <__prologue_saves__>
     32e:	dc 01       	movw	r26, r24
     330:	2b 01       	movw	r4, r22
     332:	fa 01       	movw	r30, r20
     334:	9c 91       	ld	r25, X
     336:	92 30       	cpi	r25, 0x02	; 2
     338:	08 f4       	brcc	.+2      	; 0x33c <_fpadd_parts+0x1a>
     33a:	39 c1       	rjmp	.+626    	; 0x5ae <_fpadd_parts+0x28c>
     33c:	eb 01       	movw	r28, r22
     33e:	88 81       	ld	r24, Y
     340:	82 30       	cpi	r24, 0x02	; 2
     342:	08 f4       	brcc	.+2      	; 0x346 <_fpadd_parts+0x24>
     344:	33 c1       	rjmp	.+614    	; 0x5ac <_fpadd_parts+0x28a>
     346:	94 30       	cpi	r25, 0x04	; 4
     348:	69 f4       	brne	.+26     	; 0x364 <_fpadd_parts+0x42>
     34a:	84 30       	cpi	r24, 0x04	; 4
     34c:	09 f0       	breq	.+2      	; 0x350 <_fpadd_parts+0x2e>
     34e:	2f c1       	rjmp	.+606    	; 0x5ae <_fpadd_parts+0x28c>
     350:	11 96       	adiw	r26, 0x01	; 1
     352:	9c 91       	ld	r25, X
     354:	11 97       	sbiw	r26, 0x01	; 1
     356:	89 81       	ldd	r24, Y+1	; 0x01
     358:	98 17       	cp	r25, r24
     35a:	09 f4       	brne	.+2      	; 0x35e <_fpadd_parts+0x3c>
     35c:	28 c1       	rjmp	.+592    	; 0x5ae <_fpadd_parts+0x28c>
     35e:	ab ef       	ldi	r26, 0xFB	; 251
     360:	b0 e0       	ldi	r27, 0x00	; 0
     362:	25 c1       	rjmp	.+586    	; 0x5ae <_fpadd_parts+0x28c>
     364:	84 30       	cpi	r24, 0x04	; 4
     366:	09 f4       	brne	.+2      	; 0x36a <_fpadd_parts+0x48>
     368:	21 c1       	rjmp	.+578    	; 0x5ac <_fpadd_parts+0x28a>
     36a:	82 30       	cpi	r24, 0x02	; 2
     36c:	a9 f4       	brne	.+42     	; 0x398 <_fpadd_parts+0x76>
     36e:	92 30       	cpi	r25, 0x02	; 2
     370:	09 f0       	breq	.+2      	; 0x374 <_fpadd_parts+0x52>
     372:	1d c1       	rjmp	.+570    	; 0x5ae <_fpadd_parts+0x28c>
     374:	9a 01       	movw	r18, r20
     376:	ad 01       	movw	r20, r26
     378:	88 e0       	ldi	r24, 0x08	; 8
     37a:	ea 01       	movw	r28, r20
     37c:	09 90       	ld	r0, Y+
     37e:	ae 01       	movw	r20, r28
     380:	e9 01       	movw	r28, r18
     382:	09 92       	st	Y+, r0
     384:	9e 01       	movw	r18, r28
     386:	81 50       	subi	r24, 0x01	; 1
     388:	c1 f7       	brne	.-16     	; 0x37a <_fpadd_parts+0x58>
     38a:	e2 01       	movw	r28, r4
     38c:	89 81       	ldd	r24, Y+1	; 0x01
     38e:	11 96       	adiw	r26, 0x01	; 1
     390:	9c 91       	ld	r25, X
     392:	89 23       	and	r24, r25
     394:	81 83       	std	Z+1, r24	; 0x01
     396:	08 c1       	rjmp	.+528    	; 0x5a8 <_fpadd_parts+0x286>
     398:	92 30       	cpi	r25, 0x02	; 2
     39a:	09 f4       	brne	.+2      	; 0x39e <_fpadd_parts+0x7c>
     39c:	07 c1       	rjmp	.+526    	; 0x5ac <_fpadd_parts+0x28a>
     39e:	12 96       	adiw	r26, 0x02	; 2
     3a0:	2d 90       	ld	r2, X+
     3a2:	3c 90       	ld	r3, X
     3a4:	13 97       	sbiw	r26, 0x03	; 3
     3a6:	eb 01       	movw	r28, r22
     3a8:	8a 81       	ldd	r24, Y+2	; 0x02
     3aa:	9b 81       	ldd	r25, Y+3	; 0x03
     3ac:	14 96       	adiw	r26, 0x04	; 4
     3ae:	ad 90       	ld	r10, X+
     3b0:	bd 90       	ld	r11, X+
     3b2:	cd 90       	ld	r12, X+
     3b4:	dc 90       	ld	r13, X
     3b6:	17 97       	sbiw	r26, 0x07	; 7
     3b8:	ec 80       	ldd	r14, Y+4	; 0x04
     3ba:	fd 80       	ldd	r15, Y+5	; 0x05
     3bc:	0e 81       	ldd	r16, Y+6	; 0x06
     3be:	1f 81       	ldd	r17, Y+7	; 0x07
     3c0:	91 01       	movw	r18, r2
     3c2:	28 1b       	sub	r18, r24
     3c4:	39 0b       	sbc	r19, r25
     3c6:	b9 01       	movw	r22, r18
     3c8:	37 ff       	sbrs	r19, 7
     3ca:	04 c0       	rjmp	.+8      	; 0x3d4 <_fpadd_parts+0xb2>
     3cc:	66 27       	eor	r22, r22
     3ce:	77 27       	eor	r23, r23
     3d0:	62 1b       	sub	r22, r18
     3d2:	73 0b       	sbc	r23, r19
     3d4:	60 32       	cpi	r22, 0x20	; 32
     3d6:	71 05       	cpc	r23, r1
     3d8:	0c f0       	brlt	.+2      	; 0x3dc <_fpadd_parts+0xba>
     3da:	61 c0       	rjmp	.+194    	; 0x49e <_fpadd_parts+0x17c>
     3dc:	12 16       	cp	r1, r18
     3de:	13 06       	cpc	r1, r19
     3e0:	6c f5       	brge	.+90     	; 0x43c <_fpadd_parts+0x11a>
     3e2:	37 01       	movw	r6, r14
     3e4:	48 01       	movw	r8, r16
     3e6:	06 2e       	mov	r0, r22
     3e8:	04 c0       	rjmp	.+8      	; 0x3f2 <_fpadd_parts+0xd0>
     3ea:	96 94       	lsr	r9
     3ec:	87 94       	ror	r8
     3ee:	77 94       	ror	r7
     3f0:	67 94       	ror	r6
     3f2:	0a 94       	dec	r0
     3f4:	d2 f7       	brpl	.-12     	; 0x3ea <_fpadd_parts+0xc8>
     3f6:	21 e0       	ldi	r18, 0x01	; 1
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	40 e0       	ldi	r20, 0x00	; 0
     3fc:	50 e0       	ldi	r21, 0x00	; 0
     3fe:	04 c0       	rjmp	.+8      	; 0x408 <_fpadd_parts+0xe6>
     400:	22 0f       	add	r18, r18
     402:	33 1f       	adc	r19, r19
     404:	44 1f       	adc	r20, r20
     406:	55 1f       	adc	r21, r21
     408:	6a 95       	dec	r22
     40a:	d2 f7       	brpl	.-12     	; 0x400 <_fpadd_parts+0xde>
     40c:	21 50       	subi	r18, 0x01	; 1
     40e:	30 40       	sbci	r19, 0x00	; 0
     410:	40 40       	sbci	r20, 0x00	; 0
     412:	50 40       	sbci	r21, 0x00	; 0
     414:	2e 21       	and	r18, r14
     416:	3f 21       	and	r19, r15
     418:	40 23       	and	r20, r16
     41a:	51 23       	and	r21, r17
     41c:	21 15       	cp	r18, r1
     41e:	31 05       	cpc	r19, r1
     420:	41 05       	cpc	r20, r1
     422:	51 05       	cpc	r21, r1
     424:	21 f0       	breq	.+8      	; 0x42e <_fpadd_parts+0x10c>
     426:	21 e0       	ldi	r18, 0x01	; 1
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	40 e0       	ldi	r20, 0x00	; 0
     42c:	50 e0       	ldi	r21, 0x00	; 0
     42e:	79 01       	movw	r14, r18
     430:	8a 01       	movw	r16, r20
     432:	e6 28       	or	r14, r6
     434:	f7 28       	or	r15, r7
     436:	08 29       	or	r16, r8
     438:	19 29       	or	r17, r9
     43a:	3c c0       	rjmp	.+120    	; 0x4b4 <_fpadd_parts+0x192>
     43c:	23 2b       	or	r18, r19
     43e:	d1 f1       	breq	.+116    	; 0x4b4 <_fpadd_parts+0x192>
     440:	26 0e       	add	r2, r22
     442:	37 1e       	adc	r3, r23
     444:	35 01       	movw	r6, r10
     446:	46 01       	movw	r8, r12
     448:	06 2e       	mov	r0, r22
     44a:	04 c0       	rjmp	.+8      	; 0x454 <_fpadd_parts+0x132>
     44c:	96 94       	lsr	r9
     44e:	87 94       	ror	r8
     450:	77 94       	ror	r7
     452:	67 94       	ror	r6
     454:	0a 94       	dec	r0
     456:	d2 f7       	brpl	.-12     	; 0x44c <_fpadd_parts+0x12a>
     458:	21 e0       	ldi	r18, 0x01	; 1
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	40 e0       	ldi	r20, 0x00	; 0
     45e:	50 e0       	ldi	r21, 0x00	; 0
     460:	04 c0       	rjmp	.+8      	; 0x46a <_fpadd_parts+0x148>
     462:	22 0f       	add	r18, r18
     464:	33 1f       	adc	r19, r19
     466:	44 1f       	adc	r20, r20
     468:	55 1f       	adc	r21, r21
     46a:	6a 95       	dec	r22
     46c:	d2 f7       	brpl	.-12     	; 0x462 <_fpadd_parts+0x140>
     46e:	21 50       	subi	r18, 0x01	; 1
     470:	30 40       	sbci	r19, 0x00	; 0
     472:	40 40       	sbci	r20, 0x00	; 0
     474:	50 40       	sbci	r21, 0x00	; 0
     476:	2a 21       	and	r18, r10
     478:	3b 21       	and	r19, r11
     47a:	4c 21       	and	r20, r12
     47c:	5d 21       	and	r21, r13
     47e:	21 15       	cp	r18, r1
     480:	31 05       	cpc	r19, r1
     482:	41 05       	cpc	r20, r1
     484:	51 05       	cpc	r21, r1
     486:	21 f0       	breq	.+8      	; 0x490 <_fpadd_parts+0x16e>
     488:	21 e0       	ldi	r18, 0x01	; 1
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	40 e0       	ldi	r20, 0x00	; 0
     48e:	50 e0       	ldi	r21, 0x00	; 0
     490:	59 01       	movw	r10, r18
     492:	6a 01       	movw	r12, r20
     494:	a6 28       	or	r10, r6
     496:	b7 28       	or	r11, r7
     498:	c8 28       	or	r12, r8
     49a:	d9 28       	or	r13, r9
     49c:	0b c0       	rjmp	.+22     	; 0x4b4 <_fpadd_parts+0x192>
     49e:	82 15       	cp	r24, r2
     4a0:	93 05       	cpc	r25, r3
     4a2:	2c f0       	brlt	.+10     	; 0x4ae <_fpadd_parts+0x18c>
     4a4:	1c 01       	movw	r2, r24
     4a6:	aa 24       	eor	r10, r10
     4a8:	bb 24       	eor	r11, r11
     4aa:	65 01       	movw	r12, r10
     4ac:	03 c0       	rjmp	.+6      	; 0x4b4 <_fpadd_parts+0x192>
     4ae:	ee 24       	eor	r14, r14
     4b0:	ff 24       	eor	r15, r15
     4b2:	87 01       	movw	r16, r14
     4b4:	11 96       	adiw	r26, 0x01	; 1
     4b6:	9c 91       	ld	r25, X
     4b8:	d2 01       	movw	r26, r4
     4ba:	11 96       	adiw	r26, 0x01	; 1
     4bc:	8c 91       	ld	r24, X
     4be:	98 17       	cp	r25, r24
     4c0:	09 f4       	brne	.+2      	; 0x4c4 <_fpadd_parts+0x1a2>
     4c2:	45 c0       	rjmp	.+138    	; 0x54e <_fpadd_parts+0x22c>
     4c4:	99 23       	and	r25, r25
     4c6:	39 f0       	breq	.+14     	; 0x4d6 <_fpadd_parts+0x1b4>
     4c8:	a8 01       	movw	r20, r16
     4ca:	97 01       	movw	r18, r14
     4cc:	2a 19       	sub	r18, r10
     4ce:	3b 09       	sbc	r19, r11
     4d0:	4c 09       	sbc	r20, r12
     4d2:	5d 09       	sbc	r21, r13
     4d4:	06 c0       	rjmp	.+12     	; 0x4e2 <_fpadd_parts+0x1c0>
     4d6:	a6 01       	movw	r20, r12
     4d8:	95 01       	movw	r18, r10
     4da:	2e 19       	sub	r18, r14
     4dc:	3f 09       	sbc	r19, r15
     4de:	40 0b       	sbc	r20, r16
     4e0:	51 0b       	sbc	r21, r17
     4e2:	57 fd       	sbrc	r21, 7
     4e4:	08 c0       	rjmp	.+16     	; 0x4f6 <_fpadd_parts+0x1d4>
     4e6:	11 82       	std	Z+1, r1	; 0x01
     4e8:	33 82       	std	Z+3, r3	; 0x03
     4ea:	22 82       	std	Z+2, r2	; 0x02
     4ec:	24 83       	std	Z+4, r18	; 0x04
     4ee:	35 83       	std	Z+5, r19	; 0x05
     4f0:	46 83       	std	Z+6, r20	; 0x06
     4f2:	57 83       	std	Z+7, r21	; 0x07
     4f4:	1d c0       	rjmp	.+58     	; 0x530 <_fpadd_parts+0x20e>
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	81 83       	std	Z+1, r24	; 0x01
     4fa:	33 82       	std	Z+3, r3	; 0x03
     4fc:	22 82       	std	Z+2, r2	; 0x02
     4fe:	88 27       	eor	r24, r24
     500:	99 27       	eor	r25, r25
     502:	dc 01       	movw	r26, r24
     504:	82 1b       	sub	r24, r18
     506:	93 0b       	sbc	r25, r19
     508:	a4 0b       	sbc	r26, r20
     50a:	b5 0b       	sbc	r27, r21
     50c:	84 83       	std	Z+4, r24	; 0x04
     50e:	95 83       	std	Z+5, r25	; 0x05
     510:	a6 83       	std	Z+6, r26	; 0x06
     512:	b7 83       	std	Z+7, r27	; 0x07
     514:	0d c0       	rjmp	.+26     	; 0x530 <_fpadd_parts+0x20e>
     516:	22 0f       	add	r18, r18
     518:	33 1f       	adc	r19, r19
     51a:	44 1f       	adc	r20, r20
     51c:	55 1f       	adc	r21, r21
     51e:	24 83       	std	Z+4, r18	; 0x04
     520:	35 83       	std	Z+5, r19	; 0x05
     522:	46 83       	std	Z+6, r20	; 0x06
     524:	57 83       	std	Z+7, r21	; 0x07
     526:	82 81       	ldd	r24, Z+2	; 0x02
     528:	93 81       	ldd	r25, Z+3	; 0x03
     52a:	01 97       	sbiw	r24, 0x01	; 1
     52c:	93 83       	std	Z+3, r25	; 0x03
     52e:	82 83       	std	Z+2, r24	; 0x02
     530:	24 81       	ldd	r18, Z+4	; 0x04
     532:	35 81       	ldd	r19, Z+5	; 0x05
     534:	46 81       	ldd	r20, Z+6	; 0x06
     536:	57 81       	ldd	r21, Z+7	; 0x07
     538:	da 01       	movw	r26, r20
     53a:	c9 01       	movw	r24, r18
     53c:	01 97       	sbiw	r24, 0x01	; 1
     53e:	a1 09       	sbc	r26, r1
     540:	b1 09       	sbc	r27, r1
     542:	8f 5f       	subi	r24, 0xFF	; 255
     544:	9f 4f       	sbci	r25, 0xFF	; 255
     546:	af 4f       	sbci	r26, 0xFF	; 255
     548:	bf 43       	sbci	r27, 0x3F	; 63
     54a:	28 f3       	brcs	.-54     	; 0x516 <_fpadd_parts+0x1f4>
     54c:	0b c0       	rjmp	.+22     	; 0x564 <_fpadd_parts+0x242>
     54e:	91 83       	std	Z+1, r25	; 0x01
     550:	33 82       	std	Z+3, r3	; 0x03
     552:	22 82       	std	Z+2, r2	; 0x02
     554:	ea 0c       	add	r14, r10
     556:	fb 1c       	adc	r15, r11
     558:	0c 1d       	adc	r16, r12
     55a:	1d 1d       	adc	r17, r13
     55c:	e4 82       	std	Z+4, r14	; 0x04
     55e:	f5 82       	std	Z+5, r15	; 0x05
     560:	06 83       	std	Z+6, r16	; 0x06
     562:	17 83       	std	Z+7, r17	; 0x07
     564:	83 e0       	ldi	r24, 0x03	; 3
     566:	80 83       	st	Z, r24
     568:	24 81       	ldd	r18, Z+4	; 0x04
     56a:	35 81       	ldd	r19, Z+5	; 0x05
     56c:	46 81       	ldd	r20, Z+6	; 0x06
     56e:	57 81       	ldd	r21, Z+7	; 0x07
     570:	57 ff       	sbrs	r21, 7
     572:	1a c0       	rjmp	.+52     	; 0x5a8 <_fpadd_parts+0x286>
     574:	c9 01       	movw	r24, r18
     576:	aa 27       	eor	r26, r26
     578:	97 fd       	sbrc	r25, 7
     57a:	a0 95       	com	r26
     57c:	ba 2f       	mov	r27, r26
     57e:	81 70       	andi	r24, 0x01	; 1
     580:	90 70       	andi	r25, 0x00	; 0
     582:	a0 70       	andi	r26, 0x00	; 0
     584:	b0 70       	andi	r27, 0x00	; 0
     586:	56 95       	lsr	r21
     588:	47 95       	ror	r20
     58a:	37 95       	ror	r19
     58c:	27 95       	ror	r18
     58e:	82 2b       	or	r24, r18
     590:	93 2b       	or	r25, r19
     592:	a4 2b       	or	r26, r20
     594:	b5 2b       	or	r27, r21
     596:	84 83       	std	Z+4, r24	; 0x04
     598:	95 83       	std	Z+5, r25	; 0x05
     59a:	a6 83       	std	Z+6, r26	; 0x06
     59c:	b7 83       	std	Z+7, r27	; 0x07
     59e:	82 81       	ldd	r24, Z+2	; 0x02
     5a0:	93 81       	ldd	r25, Z+3	; 0x03
     5a2:	01 96       	adiw	r24, 0x01	; 1
     5a4:	93 83       	std	Z+3, r25	; 0x03
     5a6:	82 83       	std	Z+2, r24	; 0x02
     5a8:	df 01       	movw	r26, r30
     5aa:	01 c0       	rjmp	.+2      	; 0x5ae <_fpadd_parts+0x28c>
     5ac:	d2 01       	movw	r26, r4
     5ae:	cd 01       	movw	r24, r26
     5b0:	cd b7       	in	r28, 0x3d	; 61
     5b2:	de b7       	in	r29, 0x3e	; 62
     5b4:	e2 e1       	ldi	r30, 0x12	; 18
     5b6:	0c 94 ac 3a 	jmp	0x7558	; 0x7558 <__epilogue_restores__>

000005ba <__subsf3>:
     5ba:	a0 e2       	ldi	r26, 0x20	; 32
     5bc:	b0 e0       	ldi	r27, 0x00	; 0
     5be:	e3 ee       	ldi	r30, 0xE3	; 227
     5c0:	f2 e0       	ldi	r31, 0x02	; 2
     5c2:	0c 94 9c 3a 	jmp	0x7538	; 0x7538 <__prologue_saves__+0x18>
     5c6:	69 83       	std	Y+1, r22	; 0x01
     5c8:	7a 83       	std	Y+2, r23	; 0x02
     5ca:	8b 83       	std	Y+3, r24	; 0x03
     5cc:	9c 83       	std	Y+4, r25	; 0x04
     5ce:	2d 83       	std	Y+5, r18	; 0x05
     5d0:	3e 83       	std	Y+6, r19	; 0x06
     5d2:	4f 83       	std	Y+7, r20	; 0x07
     5d4:	58 87       	std	Y+8, r21	; 0x08
     5d6:	e9 e0       	ldi	r30, 0x09	; 9
     5d8:	ee 2e       	mov	r14, r30
     5da:	f1 2c       	mov	r15, r1
     5dc:	ec 0e       	add	r14, r28
     5de:	fd 1e       	adc	r15, r29
     5e0:	ce 01       	movw	r24, r28
     5e2:	01 96       	adiw	r24, 0x01	; 1
     5e4:	b7 01       	movw	r22, r14
     5e6:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     5ea:	8e 01       	movw	r16, r28
     5ec:	0f 5e       	subi	r16, 0xEF	; 239
     5ee:	1f 4f       	sbci	r17, 0xFF	; 255
     5f0:	ce 01       	movw	r24, r28
     5f2:	05 96       	adiw	r24, 0x05	; 5
     5f4:	b8 01       	movw	r22, r16
     5f6:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     5fa:	8a 89       	ldd	r24, Y+18	; 0x12
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	89 27       	eor	r24, r25
     600:	8a 8b       	std	Y+18, r24	; 0x12
     602:	c7 01       	movw	r24, r14
     604:	b8 01       	movw	r22, r16
     606:	ae 01       	movw	r20, r28
     608:	47 5e       	subi	r20, 0xE7	; 231
     60a:	5f 4f       	sbci	r21, 0xFF	; 255
     60c:	0e 94 91 01 	call	0x322	; 0x322 <_fpadd_parts>
     610:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     614:	a0 96       	adiw	r28, 0x20	; 32
     616:	e6 e0       	ldi	r30, 0x06	; 6
     618:	0c 94 b8 3a 	jmp	0x7570	; 0x7570 <__epilogue_restores__+0x18>

0000061c <__addsf3>:
     61c:	a0 e2       	ldi	r26, 0x20	; 32
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	e4 e1       	ldi	r30, 0x14	; 20
     622:	f3 e0       	ldi	r31, 0x03	; 3
     624:	0c 94 9c 3a 	jmp	0x7538	; 0x7538 <__prologue_saves__+0x18>
     628:	69 83       	std	Y+1, r22	; 0x01
     62a:	7a 83       	std	Y+2, r23	; 0x02
     62c:	8b 83       	std	Y+3, r24	; 0x03
     62e:	9c 83       	std	Y+4, r25	; 0x04
     630:	2d 83       	std	Y+5, r18	; 0x05
     632:	3e 83       	std	Y+6, r19	; 0x06
     634:	4f 83       	std	Y+7, r20	; 0x07
     636:	58 87       	std	Y+8, r21	; 0x08
     638:	f9 e0       	ldi	r31, 0x09	; 9
     63a:	ef 2e       	mov	r14, r31
     63c:	f1 2c       	mov	r15, r1
     63e:	ec 0e       	add	r14, r28
     640:	fd 1e       	adc	r15, r29
     642:	ce 01       	movw	r24, r28
     644:	01 96       	adiw	r24, 0x01	; 1
     646:	b7 01       	movw	r22, r14
     648:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     64c:	8e 01       	movw	r16, r28
     64e:	0f 5e       	subi	r16, 0xEF	; 239
     650:	1f 4f       	sbci	r17, 0xFF	; 255
     652:	ce 01       	movw	r24, r28
     654:	05 96       	adiw	r24, 0x05	; 5
     656:	b8 01       	movw	r22, r16
     658:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     65c:	c7 01       	movw	r24, r14
     65e:	b8 01       	movw	r22, r16
     660:	ae 01       	movw	r20, r28
     662:	47 5e       	subi	r20, 0xE7	; 231
     664:	5f 4f       	sbci	r21, 0xFF	; 255
     666:	0e 94 91 01 	call	0x322	; 0x322 <_fpadd_parts>
     66a:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     66e:	a0 96       	adiw	r28, 0x20	; 32
     670:	e6 e0       	ldi	r30, 0x06	; 6
     672:	0c 94 b8 3a 	jmp	0x7570	; 0x7570 <__epilogue_restores__+0x18>

00000676 <__mulsf3>:
     676:	a0 e2       	ldi	r26, 0x20	; 32
     678:	b0 e0       	ldi	r27, 0x00	; 0
     67a:	e1 e4       	ldi	r30, 0x41	; 65
     67c:	f3 e0       	ldi	r31, 0x03	; 3
     67e:	0c 94 90 3a 	jmp	0x7520	; 0x7520 <__prologue_saves__>
     682:	69 83       	std	Y+1, r22	; 0x01
     684:	7a 83       	std	Y+2, r23	; 0x02
     686:	8b 83       	std	Y+3, r24	; 0x03
     688:	9c 83       	std	Y+4, r25	; 0x04
     68a:	2d 83       	std	Y+5, r18	; 0x05
     68c:	3e 83       	std	Y+6, r19	; 0x06
     68e:	4f 83       	std	Y+7, r20	; 0x07
     690:	58 87       	std	Y+8, r21	; 0x08
     692:	ce 01       	movw	r24, r28
     694:	01 96       	adiw	r24, 0x01	; 1
     696:	be 01       	movw	r22, r28
     698:	67 5f       	subi	r22, 0xF7	; 247
     69a:	7f 4f       	sbci	r23, 0xFF	; 255
     69c:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     6a0:	ce 01       	movw	r24, r28
     6a2:	05 96       	adiw	r24, 0x05	; 5
     6a4:	be 01       	movw	r22, r28
     6a6:	6f 5e       	subi	r22, 0xEF	; 239
     6a8:	7f 4f       	sbci	r23, 0xFF	; 255
     6aa:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     6ae:	99 85       	ldd	r25, Y+9	; 0x09
     6b0:	92 30       	cpi	r25, 0x02	; 2
     6b2:	88 f0       	brcs	.+34     	; 0x6d6 <__mulsf3+0x60>
     6b4:	89 89       	ldd	r24, Y+17	; 0x11
     6b6:	82 30       	cpi	r24, 0x02	; 2
     6b8:	c8 f0       	brcs	.+50     	; 0x6ec <__mulsf3+0x76>
     6ba:	94 30       	cpi	r25, 0x04	; 4
     6bc:	19 f4       	brne	.+6      	; 0x6c4 <__mulsf3+0x4e>
     6be:	82 30       	cpi	r24, 0x02	; 2
     6c0:	51 f4       	brne	.+20     	; 0x6d6 <__mulsf3+0x60>
     6c2:	04 c0       	rjmp	.+8      	; 0x6cc <__mulsf3+0x56>
     6c4:	84 30       	cpi	r24, 0x04	; 4
     6c6:	29 f4       	brne	.+10     	; 0x6d2 <__mulsf3+0x5c>
     6c8:	92 30       	cpi	r25, 0x02	; 2
     6ca:	81 f4       	brne	.+32     	; 0x6ec <__mulsf3+0x76>
     6cc:	8b ef       	ldi	r24, 0xFB	; 251
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	c6 c0       	rjmp	.+396    	; 0x85e <__mulsf3+0x1e8>
     6d2:	92 30       	cpi	r25, 0x02	; 2
     6d4:	49 f4       	brne	.+18     	; 0x6e8 <__mulsf3+0x72>
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	9a 85       	ldd	r25, Y+10	; 0x0a
     6da:	8a 89       	ldd	r24, Y+18	; 0x12
     6dc:	98 13       	cpse	r25, r24
     6de:	21 e0       	ldi	r18, 0x01	; 1
     6e0:	2a 87       	std	Y+10, r18	; 0x0a
     6e2:	ce 01       	movw	r24, r28
     6e4:	09 96       	adiw	r24, 0x09	; 9
     6e6:	bb c0       	rjmp	.+374    	; 0x85e <__mulsf3+0x1e8>
     6e8:	82 30       	cpi	r24, 0x02	; 2
     6ea:	49 f4       	brne	.+18     	; 0x6fe <__mulsf3+0x88>
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	9a 85       	ldd	r25, Y+10	; 0x0a
     6f0:	8a 89       	ldd	r24, Y+18	; 0x12
     6f2:	98 13       	cpse	r25, r24
     6f4:	21 e0       	ldi	r18, 0x01	; 1
     6f6:	2a 8b       	std	Y+18, r18	; 0x12
     6f8:	ce 01       	movw	r24, r28
     6fa:	41 96       	adiw	r24, 0x11	; 17
     6fc:	b0 c0       	rjmp	.+352    	; 0x85e <__mulsf3+0x1e8>
     6fe:	2d 84       	ldd	r2, Y+13	; 0x0d
     700:	3e 84       	ldd	r3, Y+14	; 0x0e
     702:	4f 84       	ldd	r4, Y+15	; 0x0f
     704:	58 88       	ldd	r5, Y+16	; 0x10
     706:	6d 88       	ldd	r6, Y+21	; 0x15
     708:	7e 88       	ldd	r7, Y+22	; 0x16
     70a:	8f 88       	ldd	r8, Y+23	; 0x17
     70c:	98 8c       	ldd	r9, Y+24	; 0x18
     70e:	ee 24       	eor	r14, r14
     710:	ff 24       	eor	r15, r15
     712:	87 01       	movw	r16, r14
     714:	aa 24       	eor	r10, r10
     716:	bb 24       	eor	r11, r11
     718:	65 01       	movw	r12, r10
     71a:	40 e0       	ldi	r20, 0x00	; 0
     71c:	50 e0       	ldi	r21, 0x00	; 0
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	e0 e0       	ldi	r30, 0x00	; 0
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	c1 01       	movw	r24, r2
     728:	81 70       	andi	r24, 0x01	; 1
     72a:	90 70       	andi	r25, 0x00	; 0
     72c:	89 2b       	or	r24, r25
     72e:	e9 f0       	breq	.+58     	; 0x76a <__mulsf3+0xf4>
     730:	e6 0c       	add	r14, r6
     732:	f7 1c       	adc	r15, r7
     734:	08 1d       	adc	r16, r8
     736:	19 1d       	adc	r17, r9
     738:	9a 01       	movw	r18, r20
     73a:	ab 01       	movw	r20, r22
     73c:	2a 0d       	add	r18, r10
     73e:	3b 1d       	adc	r19, r11
     740:	4c 1d       	adc	r20, r12
     742:	5d 1d       	adc	r21, r13
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	a0 e0       	ldi	r26, 0x00	; 0
     74a:	b0 e0       	ldi	r27, 0x00	; 0
     74c:	e6 14       	cp	r14, r6
     74e:	f7 04       	cpc	r15, r7
     750:	08 05       	cpc	r16, r8
     752:	19 05       	cpc	r17, r9
     754:	20 f4       	brcc	.+8      	; 0x75e <__mulsf3+0xe8>
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	a0 e0       	ldi	r26, 0x00	; 0
     75c:	b0 e0       	ldi	r27, 0x00	; 0
     75e:	ba 01       	movw	r22, r20
     760:	a9 01       	movw	r20, r18
     762:	48 0f       	add	r20, r24
     764:	59 1f       	adc	r21, r25
     766:	6a 1f       	adc	r22, r26
     768:	7b 1f       	adc	r23, r27
     76a:	aa 0c       	add	r10, r10
     76c:	bb 1c       	adc	r11, r11
     76e:	cc 1c       	adc	r12, r12
     770:	dd 1c       	adc	r13, r13
     772:	97 fe       	sbrs	r9, 7
     774:	08 c0       	rjmp	.+16     	; 0x786 <__mulsf3+0x110>
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	a0 e0       	ldi	r26, 0x00	; 0
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	a8 2a       	or	r10, r24
     780:	b9 2a       	or	r11, r25
     782:	ca 2a       	or	r12, r26
     784:	db 2a       	or	r13, r27
     786:	31 96       	adiw	r30, 0x01	; 1
     788:	e0 32       	cpi	r30, 0x20	; 32
     78a:	f1 05       	cpc	r31, r1
     78c:	49 f0       	breq	.+18     	; 0x7a0 <__mulsf3+0x12a>
     78e:	66 0c       	add	r6, r6
     790:	77 1c       	adc	r7, r7
     792:	88 1c       	adc	r8, r8
     794:	99 1c       	adc	r9, r9
     796:	56 94       	lsr	r5
     798:	47 94       	ror	r4
     79a:	37 94       	ror	r3
     79c:	27 94       	ror	r2
     79e:	c3 cf       	rjmp	.-122    	; 0x726 <__mulsf3+0xb0>
     7a0:	fa 85       	ldd	r31, Y+10	; 0x0a
     7a2:	ea 89       	ldd	r30, Y+18	; 0x12
     7a4:	2b 89       	ldd	r18, Y+19	; 0x13
     7a6:	3c 89       	ldd	r19, Y+20	; 0x14
     7a8:	8b 85       	ldd	r24, Y+11	; 0x0b
     7aa:	9c 85       	ldd	r25, Y+12	; 0x0c
     7ac:	28 0f       	add	r18, r24
     7ae:	39 1f       	adc	r19, r25
     7b0:	2e 5f       	subi	r18, 0xFE	; 254
     7b2:	3f 4f       	sbci	r19, 0xFF	; 255
     7b4:	17 c0       	rjmp	.+46     	; 0x7e4 <__mulsf3+0x16e>
     7b6:	ca 01       	movw	r24, r20
     7b8:	81 70       	andi	r24, 0x01	; 1
     7ba:	90 70       	andi	r25, 0x00	; 0
     7bc:	89 2b       	or	r24, r25
     7be:	61 f0       	breq	.+24     	; 0x7d8 <__mulsf3+0x162>
     7c0:	16 95       	lsr	r17
     7c2:	07 95       	ror	r16
     7c4:	f7 94       	ror	r15
     7c6:	e7 94       	ror	r14
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	a0 e0       	ldi	r26, 0x00	; 0
     7ce:	b0 e8       	ldi	r27, 0x80	; 128
     7d0:	e8 2a       	or	r14, r24
     7d2:	f9 2a       	or	r15, r25
     7d4:	0a 2b       	or	r16, r26
     7d6:	1b 2b       	or	r17, r27
     7d8:	76 95       	lsr	r23
     7da:	67 95       	ror	r22
     7dc:	57 95       	ror	r21
     7de:	47 95       	ror	r20
     7e0:	2f 5f       	subi	r18, 0xFF	; 255
     7e2:	3f 4f       	sbci	r19, 0xFF	; 255
     7e4:	77 fd       	sbrc	r23, 7
     7e6:	e7 cf       	rjmp	.-50     	; 0x7b6 <__mulsf3+0x140>
     7e8:	0c c0       	rjmp	.+24     	; 0x802 <__mulsf3+0x18c>
     7ea:	44 0f       	add	r20, r20
     7ec:	55 1f       	adc	r21, r21
     7ee:	66 1f       	adc	r22, r22
     7f0:	77 1f       	adc	r23, r23
     7f2:	17 fd       	sbrc	r17, 7
     7f4:	41 60       	ori	r20, 0x01	; 1
     7f6:	ee 0c       	add	r14, r14
     7f8:	ff 1c       	adc	r15, r15
     7fa:	00 1f       	adc	r16, r16
     7fc:	11 1f       	adc	r17, r17
     7fe:	21 50       	subi	r18, 0x01	; 1
     800:	30 40       	sbci	r19, 0x00	; 0
     802:	40 30       	cpi	r20, 0x00	; 0
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	59 07       	cpc	r21, r25
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	69 07       	cpc	r22, r25
     80c:	90 e4       	ldi	r25, 0x40	; 64
     80e:	79 07       	cpc	r23, r25
     810:	60 f3       	brcs	.-40     	; 0x7ea <__mulsf3+0x174>
     812:	2b 8f       	std	Y+27, r18	; 0x1b
     814:	3c 8f       	std	Y+28, r19	; 0x1c
     816:	db 01       	movw	r26, r22
     818:	ca 01       	movw	r24, r20
     81a:	8f 77       	andi	r24, 0x7F	; 127
     81c:	90 70       	andi	r25, 0x00	; 0
     81e:	a0 70       	andi	r26, 0x00	; 0
     820:	b0 70       	andi	r27, 0x00	; 0
     822:	80 34       	cpi	r24, 0x40	; 64
     824:	91 05       	cpc	r25, r1
     826:	a1 05       	cpc	r26, r1
     828:	b1 05       	cpc	r27, r1
     82a:	61 f4       	brne	.+24     	; 0x844 <__mulsf3+0x1ce>
     82c:	47 fd       	sbrc	r20, 7
     82e:	0a c0       	rjmp	.+20     	; 0x844 <__mulsf3+0x1ce>
     830:	e1 14       	cp	r14, r1
     832:	f1 04       	cpc	r15, r1
     834:	01 05       	cpc	r16, r1
     836:	11 05       	cpc	r17, r1
     838:	29 f0       	breq	.+10     	; 0x844 <__mulsf3+0x1ce>
     83a:	40 5c       	subi	r20, 0xC0	; 192
     83c:	5f 4f       	sbci	r21, 0xFF	; 255
     83e:	6f 4f       	sbci	r22, 0xFF	; 255
     840:	7f 4f       	sbci	r23, 0xFF	; 255
     842:	40 78       	andi	r20, 0x80	; 128
     844:	1a 8e       	std	Y+26, r1	; 0x1a
     846:	fe 17       	cp	r31, r30
     848:	11 f0       	breq	.+4      	; 0x84e <__mulsf3+0x1d8>
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	8a 8f       	std	Y+26, r24	; 0x1a
     84e:	4d 8f       	std	Y+29, r20	; 0x1d
     850:	5e 8f       	std	Y+30, r21	; 0x1e
     852:	6f 8f       	std	Y+31, r22	; 0x1f
     854:	78 a3       	std	Y+32, r23	; 0x20
     856:	83 e0       	ldi	r24, 0x03	; 3
     858:	89 8f       	std	Y+25, r24	; 0x19
     85a:	ce 01       	movw	r24, r28
     85c:	49 96       	adiw	r24, 0x19	; 25
     85e:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     862:	a0 96       	adiw	r28, 0x20	; 32
     864:	e2 e1       	ldi	r30, 0x12	; 18
     866:	0c 94 ac 3a 	jmp	0x7558	; 0x7558 <__epilogue_restores__>

0000086a <__divsf3>:
     86a:	a8 e1       	ldi	r26, 0x18	; 24
     86c:	b0 e0       	ldi	r27, 0x00	; 0
     86e:	eb e3       	ldi	r30, 0x3B	; 59
     870:	f4 e0       	ldi	r31, 0x04	; 4
     872:	0c 94 98 3a 	jmp	0x7530	; 0x7530 <__prologue_saves__+0x10>
     876:	69 83       	std	Y+1, r22	; 0x01
     878:	7a 83       	std	Y+2, r23	; 0x02
     87a:	8b 83       	std	Y+3, r24	; 0x03
     87c:	9c 83       	std	Y+4, r25	; 0x04
     87e:	2d 83       	std	Y+5, r18	; 0x05
     880:	3e 83       	std	Y+6, r19	; 0x06
     882:	4f 83       	std	Y+7, r20	; 0x07
     884:	58 87       	std	Y+8, r21	; 0x08
     886:	b9 e0       	ldi	r27, 0x09	; 9
     888:	eb 2e       	mov	r14, r27
     88a:	f1 2c       	mov	r15, r1
     88c:	ec 0e       	add	r14, r28
     88e:	fd 1e       	adc	r15, r29
     890:	ce 01       	movw	r24, r28
     892:	01 96       	adiw	r24, 0x01	; 1
     894:	b7 01       	movw	r22, r14
     896:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     89a:	8e 01       	movw	r16, r28
     89c:	0f 5e       	subi	r16, 0xEF	; 239
     89e:	1f 4f       	sbci	r17, 0xFF	; 255
     8a0:	ce 01       	movw	r24, r28
     8a2:	05 96       	adiw	r24, 0x05	; 5
     8a4:	b8 01       	movw	r22, r16
     8a6:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     8aa:	29 85       	ldd	r18, Y+9	; 0x09
     8ac:	22 30       	cpi	r18, 0x02	; 2
     8ae:	08 f4       	brcc	.+2      	; 0x8b2 <__divsf3+0x48>
     8b0:	7e c0       	rjmp	.+252    	; 0x9ae <__divsf3+0x144>
     8b2:	39 89       	ldd	r19, Y+17	; 0x11
     8b4:	32 30       	cpi	r19, 0x02	; 2
     8b6:	10 f4       	brcc	.+4      	; 0x8bc <__divsf3+0x52>
     8b8:	b8 01       	movw	r22, r16
     8ba:	7c c0       	rjmp	.+248    	; 0x9b4 <__divsf3+0x14a>
     8bc:	8a 85       	ldd	r24, Y+10	; 0x0a
     8be:	9a 89       	ldd	r25, Y+18	; 0x12
     8c0:	89 27       	eor	r24, r25
     8c2:	8a 87       	std	Y+10, r24	; 0x0a
     8c4:	24 30       	cpi	r18, 0x04	; 4
     8c6:	11 f0       	breq	.+4      	; 0x8cc <__divsf3+0x62>
     8c8:	22 30       	cpi	r18, 0x02	; 2
     8ca:	31 f4       	brne	.+12     	; 0x8d8 <__divsf3+0x6e>
     8cc:	23 17       	cp	r18, r19
     8ce:	09 f0       	breq	.+2      	; 0x8d2 <__divsf3+0x68>
     8d0:	6e c0       	rjmp	.+220    	; 0x9ae <__divsf3+0x144>
     8d2:	6b ef       	ldi	r22, 0xFB	; 251
     8d4:	70 e0       	ldi	r23, 0x00	; 0
     8d6:	6e c0       	rjmp	.+220    	; 0x9b4 <__divsf3+0x14a>
     8d8:	34 30       	cpi	r19, 0x04	; 4
     8da:	39 f4       	brne	.+14     	; 0x8ea <__divsf3+0x80>
     8dc:	1d 86       	std	Y+13, r1	; 0x0d
     8de:	1e 86       	std	Y+14, r1	; 0x0e
     8e0:	1f 86       	std	Y+15, r1	; 0x0f
     8e2:	18 8a       	std	Y+16, r1	; 0x10
     8e4:	1c 86       	std	Y+12, r1	; 0x0c
     8e6:	1b 86       	std	Y+11, r1	; 0x0b
     8e8:	04 c0       	rjmp	.+8      	; 0x8f2 <__divsf3+0x88>
     8ea:	32 30       	cpi	r19, 0x02	; 2
     8ec:	21 f4       	brne	.+8      	; 0x8f6 <__divsf3+0x8c>
     8ee:	84 e0       	ldi	r24, 0x04	; 4
     8f0:	89 87       	std	Y+9, r24	; 0x09
     8f2:	b7 01       	movw	r22, r14
     8f4:	5f c0       	rjmp	.+190    	; 0x9b4 <__divsf3+0x14a>
     8f6:	2b 85       	ldd	r18, Y+11	; 0x0b
     8f8:	3c 85       	ldd	r19, Y+12	; 0x0c
     8fa:	8b 89       	ldd	r24, Y+19	; 0x13
     8fc:	9c 89       	ldd	r25, Y+20	; 0x14
     8fe:	28 1b       	sub	r18, r24
     900:	39 0b       	sbc	r19, r25
     902:	3c 87       	std	Y+12, r19	; 0x0c
     904:	2b 87       	std	Y+11, r18	; 0x0b
     906:	ed 84       	ldd	r14, Y+13	; 0x0d
     908:	fe 84       	ldd	r15, Y+14	; 0x0e
     90a:	0f 85       	ldd	r16, Y+15	; 0x0f
     90c:	18 89       	ldd	r17, Y+16	; 0x10
     90e:	ad 88       	ldd	r10, Y+21	; 0x15
     910:	be 88       	ldd	r11, Y+22	; 0x16
     912:	cf 88       	ldd	r12, Y+23	; 0x17
     914:	d8 8c       	ldd	r13, Y+24	; 0x18
     916:	ea 14       	cp	r14, r10
     918:	fb 04       	cpc	r15, r11
     91a:	0c 05       	cpc	r16, r12
     91c:	1d 05       	cpc	r17, r13
     91e:	40 f4       	brcc	.+16     	; 0x930 <__divsf3+0xc6>
     920:	ee 0c       	add	r14, r14
     922:	ff 1c       	adc	r15, r15
     924:	00 1f       	adc	r16, r16
     926:	11 1f       	adc	r17, r17
     928:	21 50       	subi	r18, 0x01	; 1
     92a:	30 40       	sbci	r19, 0x00	; 0
     92c:	3c 87       	std	Y+12, r19	; 0x0c
     92e:	2b 87       	std	Y+11, r18	; 0x0b
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	40 e0       	ldi	r20, 0x00	; 0
     936:	50 e0       	ldi	r21, 0x00	; 0
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e4       	ldi	r27, 0x40	; 64
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	ea 14       	cp	r14, r10
     946:	fb 04       	cpc	r15, r11
     948:	0c 05       	cpc	r16, r12
     94a:	1d 05       	cpc	r17, r13
     94c:	40 f0       	brcs	.+16     	; 0x95e <__divsf3+0xf4>
     94e:	28 2b       	or	r18, r24
     950:	39 2b       	or	r19, r25
     952:	4a 2b       	or	r20, r26
     954:	5b 2b       	or	r21, r27
     956:	ea 18       	sub	r14, r10
     958:	fb 08       	sbc	r15, r11
     95a:	0c 09       	sbc	r16, r12
     95c:	1d 09       	sbc	r17, r13
     95e:	b6 95       	lsr	r27
     960:	a7 95       	ror	r26
     962:	97 95       	ror	r25
     964:	87 95       	ror	r24
     966:	ee 0c       	add	r14, r14
     968:	ff 1c       	adc	r15, r15
     96a:	00 1f       	adc	r16, r16
     96c:	11 1f       	adc	r17, r17
     96e:	6f 5f       	subi	r22, 0xFF	; 255
     970:	7f 4f       	sbci	r23, 0xFF	; 255
     972:	6f 31       	cpi	r22, 0x1F	; 31
     974:	71 05       	cpc	r23, r1
     976:	31 f7       	brne	.-52     	; 0x944 <__divsf3+0xda>
     978:	da 01       	movw	r26, r20
     97a:	c9 01       	movw	r24, r18
     97c:	8f 77       	andi	r24, 0x7F	; 127
     97e:	90 70       	andi	r25, 0x00	; 0
     980:	a0 70       	andi	r26, 0x00	; 0
     982:	b0 70       	andi	r27, 0x00	; 0
     984:	80 34       	cpi	r24, 0x40	; 64
     986:	91 05       	cpc	r25, r1
     988:	a1 05       	cpc	r26, r1
     98a:	b1 05       	cpc	r27, r1
     98c:	61 f4       	brne	.+24     	; 0x9a6 <__divsf3+0x13c>
     98e:	27 fd       	sbrc	r18, 7
     990:	0a c0       	rjmp	.+20     	; 0x9a6 <__divsf3+0x13c>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	29 f0       	breq	.+10     	; 0x9a6 <__divsf3+0x13c>
     99c:	20 5c       	subi	r18, 0xC0	; 192
     99e:	3f 4f       	sbci	r19, 0xFF	; 255
     9a0:	4f 4f       	sbci	r20, 0xFF	; 255
     9a2:	5f 4f       	sbci	r21, 0xFF	; 255
     9a4:	20 78       	andi	r18, 0x80	; 128
     9a6:	2d 87       	std	Y+13, r18	; 0x0d
     9a8:	3e 87       	std	Y+14, r19	; 0x0e
     9aa:	4f 87       	std	Y+15, r20	; 0x0f
     9ac:	58 8b       	std	Y+16, r21	; 0x10
     9ae:	be 01       	movw	r22, r28
     9b0:	67 5f       	subi	r22, 0xF7	; 247
     9b2:	7f 4f       	sbci	r23, 0xFF	; 255
     9b4:	cb 01       	movw	r24, r22
     9b6:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     9ba:	68 96       	adiw	r28, 0x18	; 24
     9bc:	ea e0       	ldi	r30, 0x0A	; 10
     9be:	0c 94 b4 3a 	jmp	0x7568	; 0x7568 <__epilogue_restores__+0x10>

000009c2 <__gtsf2>:
     9c2:	a8 e1       	ldi	r26, 0x18	; 24
     9c4:	b0 e0       	ldi	r27, 0x00	; 0
     9c6:	e7 ee       	ldi	r30, 0xE7	; 231
     9c8:	f4 e0       	ldi	r31, 0x04	; 4
     9ca:	0c 94 9c 3a 	jmp	0x7538	; 0x7538 <__prologue_saves__+0x18>
     9ce:	69 83       	std	Y+1, r22	; 0x01
     9d0:	7a 83       	std	Y+2, r23	; 0x02
     9d2:	8b 83       	std	Y+3, r24	; 0x03
     9d4:	9c 83       	std	Y+4, r25	; 0x04
     9d6:	2d 83       	std	Y+5, r18	; 0x05
     9d8:	3e 83       	std	Y+6, r19	; 0x06
     9da:	4f 83       	std	Y+7, r20	; 0x07
     9dc:	58 87       	std	Y+8, r21	; 0x08
     9de:	89 e0       	ldi	r24, 0x09	; 9
     9e0:	e8 2e       	mov	r14, r24
     9e2:	f1 2c       	mov	r15, r1
     9e4:	ec 0e       	add	r14, r28
     9e6:	fd 1e       	adc	r15, r29
     9e8:	ce 01       	movw	r24, r28
     9ea:	01 96       	adiw	r24, 0x01	; 1
     9ec:	b7 01       	movw	r22, r14
     9ee:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     9f2:	8e 01       	movw	r16, r28
     9f4:	0f 5e       	subi	r16, 0xEF	; 239
     9f6:	1f 4f       	sbci	r17, 0xFF	; 255
     9f8:	ce 01       	movw	r24, r28
     9fa:	05 96       	adiw	r24, 0x05	; 5
     9fc:	b8 01       	movw	r22, r16
     9fe:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     a02:	89 85       	ldd	r24, Y+9	; 0x09
     a04:	82 30       	cpi	r24, 0x02	; 2
     a06:	40 f0       	brcs	.+16     	; 0xa18 <__gtsf2+0x56>
     a08:	89 89       	ldd	r24, Y+17	; 0x11
     a0a:	82 30       	cpi	r24, 0x02	; 2
     a0c:	28 f0       	brcs	.+10     	; 0xa18 <__gtsf2+0x56>
     a0e:	c7 01       	movw	r24, r14
     a10:	b8 01       	movw	r22, r16
     a12:	0e 94 b7 08 	call	0x116e	; 0x116e <__fpcmp_parts_f>
     a16:	01 c0       	rjmp	.+2      	; 0xa1a <__gtsf2+0x58>
     a18:	8f ef       	ldi	r24, 0xFF	; 255
     a1a:	68 96       	adiw	r28, 0x18	; 24
     a1c:	e6 e0       	ldi	r30, 0x06	; 6
     a1e:	0c 94 b8 3a 	jmp	0x7570	; 0x7570 <__epilogue_restores__+0x18>

00000a22 <__gesf2>:
     a22:	a8 e1       	ldi	r26, 0x18	; 24
     a24:	b0 e0       	ldi	r27, 0x00	; 0
     a26:	e7 e1       	ldi	r30, 0x17	; 23
     a28:	f5 e0       	ldi	r31, 0x05	; 5
     a2a:	0c 94 9c 3a 	jmp	0x7538	; 0x7538 <__prologue_saves__+0x18>
     a2e:	69 83       	std	Y+1, r22	; 0x01
     a30:	7a 83       	std	Y+2, r23	; 0x02
     a32:	8b 83       	std	Y+3, r24	; 0x03
     a34:	9c 83       	std	Y+4, r25	; 0x04
     a36:	2d 83       	std	Y+5, r18	; 0x05
     a38:	3e 83       	std	Y+6, r19	; 0x06
     a3a:	4f 83       	std	Y+7, r20	; 0x07
     a3c:	58 87       	std	Y+8, r21	; 0x08
     a3e:	89 e0       	ldi	r24, 0x09	; 9
     a40:	e8 2e       	mov	r14, r24
     a42:	f1 2c       	mov	r15, r1
     a44:	ec 0e       	add	r14, r28
     a46:	fd 1e       	adc	r15, r29
     a48:	ce 01       	movw	r24, r28
     a4a:	01 96       	adiw	r24, 0x01	; 1
     a4c:	b7 01       	movw	r22, r14
     a4e:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     a52:	8e 01       	movw	r16, r28
     a54:	0f 5e       	subi	r16, 0xEF	; 239
     a56:	1f 4f       	sbci	r17, 0xFF	; 255
     a58:	ce 01       	movw	r24, r28
     a5a:	05 96       	adiw	r24, 0x05	; 5
     a5c:	b8 01       	movw	r22, r16
     a5e:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     a62:	89 85       	ldd	r24, Y+9	; 0x09
     a64:	82 30       	cpi	r24, 0x02	; 2
     a66:	40 f0       	brcs	.+16     	; 0xa78 <__gesf2+0x56>
     a68:	89 89       	ldd	r24, Y+17	; 0x11
     a6a:	82 30       	cpi	r24, 0x02	; 2
     a6c:	28 f0       	brcs	.+10     	; 0xa78 <__gesf2+0x56>
     a6e:	c7 01       	movw	r24, r14
     a70:	b8 01       	movw	r22, r16
     a72:	0e 94 b7 08 	call	0x116e	; 0x116e <__fpcmp_parts_f>
     a76:	01 c0       	rjmp	.+2      	; 0xa7a <__gesf2+0x58>
     a78:	8f ef       	ldi	r24, 0xFF	; 255
     a7a:	68 96       	adiw	r28, 0x18	; 24
     a7c:	e6 e0       	ldi	r30, 0x06	; 6
     a7e:	0c 94 b8 3a 	jmp	0x7570	; 0x7570 <__epilogue_restores__+0x18>

00000a82 <__ltsf2>:
     a82:	a8 e1       	ldi	r26, 0x18	; 24
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	e7 e4       	ldi	r30, 0x47	; 71
     a88:	f5 e0       	ldi	r31, 0x05	; 5
     a8a:	0c 94 9c 3a 	jmp	0x7538	; 0x7538 <__prologue_saves__+0x18>
     a8e:	69 83       	std	Y+1, r22	; 0x01
     a90:	7a 83       	std	Y+2, r23	; 0x02
     a92:	8b 83       	std	Y+3, r24	; 0x03
     a94:	9c 83       	std	Y+4, r25	; 0x04
     a96:	2d 83       	std	Y+5, r18	; 0x05
     a98:	3e 83       	std	Y+6, r19	; 0x06
     a9a:	4f 83       	std	Y+7, r20	; 0x07
     a9c:	58 87       	std	Y+8, r21	; 0x08
     a9e:	89 e0       	ldi	r24, 0x09	; 9
     aa0:	e8 2e       	mov	r14, r24
     aa2:	f1 2c       	mov	r15, r1
     aa4:	ec 0e       	add	r14, r28
     aa6:	fd 1e       	adc	r15, r29
     aa8:	ce 01       	movw	r24, r28
     aaa:	01 96       	adiw	r24, 0x01	; 1
     aac:	b7 01       	movw	r22, r14
     aae:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     ab2:	8e 01       	movw	r16, r28
     ab4:	0f 5e       	subi	r16, 0xEF	; 239
     ab6:	1f 4f       	sbci	r17, 0xFF	; 255
     ab8:	ce 01       	movw	r24, r28
     aba:	05 96       	adiw	r24, 0x05	; 5
     abc:	b8 01       	movw	r22, r16
     abe:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     ac2:	89 85       	ldd	r24, Y+9	; 0x09
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	40 f0       	brcs	.+16     	; 0xad8 <__ltsf2+0x56>
     ac8:	89 89       	ldd	r24, Y+17	; 0x11
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	28 f0       	brcs	.+10     	; 0xad8 <__ltsf2+0x56>
     ace:	c7 01       	movw	r24, r14
     ad0:	b8 01       	movw	r22, r16
     ad2:	0e 94 b7 08 	call	0x116e	; 0x116e <__fpcmp_parts_f>
     ad6:	01 c0       	rjmp	.+2      	; 0xada <__ltsf2+0x58>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	68 96       	adiw	r28, 0x18	; 24
     adc:	e6 e0       	ldi	r30, 0x06	; 6
     ade:	0c 94 b8 3a 	jmp	0x7570	; 0x7570 <__epilogue_restores__+0x18>

00000ae2 <__floatsisf>:
     ae2:	a8 e0       	ldi	r26, 0x08	; 8
     ae4:	b0 e0       	ldi	r27, 0x00	; 0
     ae6:	e7 e7       	ldi	r30, 0x77	; 119
     ae8:	f5 e0       	ldi	r31, 0x05	; 5
     aea:	0c 94 99 3a 	jmp	0x7532	; 0x7532 <__prologue_saves__+0x12>
     aee:	9b 01       	movw	r18, r22
     af0:	ac 01       	movw	r20, r24
     af2:	83 e0       	ldi	r24, 0x03	; 3
     af4:	89 83       	std	Y+1, r24	; 0x01
     af6:	da 01       	movw	r26, r20
     af8:	c9 01       	movw	r24, r18
     afa:	88 27       	eor	r24, r24
     afc:	b7 fd       	sbrc	r27, 7
     afe:	83 95       	inc	r24
     b00:	99 27       	eor	r25, r25
     b02:	aa 27       	eor	r26, r26
     b04:	bb 27       	eor	r27, r27
     b06:	b8 2e       	mov	r11, r24
     b08:	21 15       	cp	r18, r1
     b0a:	31 05       	cpc	r19, r1
     b0c:	41 05       	cpc	r20, r1
     b0e:	51 05       	cpc	r21, r1
     b10:	19 f4       	brne	.+6      	; 0xb18 <__floatsisf+0x36>
     b12:	82 e0       	ldi	r24, 0x02	; 2
     b14:	89 83       	std	Y+1, r24	; 0x01
     b16:	3a c0       	rjmp	.+116    	; 0xb8c <__floatsisf+0xaa>
     b18:	88 23       	and	r24, r24
     b1a:	a9 f0       	breq	.+42     	; 0xb46 <__floatsisf+0x64>
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	38 07       	cpc	r19, r24
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	48 07       	cpc	r20, r24
     b26:	80 e8       	ldi	r24, 0x80	; 128
     b28:	58 07       	cpc	r21, r24
     b2a:	29 f4       	brne	.+10     	; 0xb36 <__floatsisf+0x54>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	9f ec       	ldi	r25, 0xCF	; 207
     b34:	30 c0       	rjmp	.+96     	; 0xb96 <__floatsisf+0xb4>
     b36:	ee 24       	eor	r14, r14
     b38:	ff 24       	eor	r15, r15
     b3a:	87 01       	movw	r16, r14
     b3c:	e2 1a       	sub	r14, r18
     b3e:	f3 0a       	sbc	r15, r19
     b40:	04 0b       	sbc	r16, r20
     b42:	15 0b       	sbc	r17, r21
     b44:	02 c0       	rjmp	.+4      	; 0xb4a <__floatsisf+0x68>
     b46:	79 01       	movw	r14, r18
     b48:	8a 01       	movw	r16, r20
     b4a:	8e e1       	ldi	r24, 0x1E	; 30
     b4c:	c8 2e       	mov	r12, r24
     b4e:	d1 2c       	mov	r13, r1
     b50:	dc 82       	std	Y+4, r13	; 0x04
     b52:	cb 82       	std	Y+3, r12	; 0x03
     b54:	ed 82       	std	Y+5, r14	; 0x05
     b56:	fe 82       	std	Y+6, r15	; 0x06
     b58:	0f 83       	std	Y+7, r16	; 0x07
     b5a:	18 87       	std	Y+8, r17	; 0x08
     b5c:	c8 01       	movw	r24, r16
     b5e:	b7 01       	movw	r22, r14
     b60:	0e 94 1b 07 	call	0xe36	; 0xe36 <__clzsi2>
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	18 16       	cp	r1, r24
     b68:	19 06       	cpc	r1, r25
     b6a:	84 f4       	brge	.+32     	; 0xb8c <__floatsisf+0xaa>
     b6c:	08 2e       	mov	r0, r24
     b6e:	04 c0       	rjmp	.+8      	; 0xb78 <__floatsisf+0x96>
     b70:	ee 0c       	add	r14, r14
     b72:	ff 1c       	adc	r15, r15
     b74:	00 1f       	adc	r16, r16
     b76:	11 1f       	adc	r17, r17
     b78:	0a 94       	dec	r0
     b7a:	d2 f7       	brpl	.-12     	; 0xb70 <__floatsisf+0x8e>
     b7c:	ed 82       	std	Y+5, r14	; 0x05
     b7e:	fe 82       	std	Y+6, r15	; 0x06
     b80:	0f 83       	std	Y+7, r16	; 0x07
     b82:	18 87       	std	Y+8, r17	; 0x08
     b84:	c8 1a       	sub	r12, r24
     b86:	d9 0a       	sbc	r13, r25
     b88:	dc 82       	std	Y+4, r13	; 0x04
     b8a:	cb 82       	std	Y+3, r12	; 0x03
     b8c:	ba 82       	std	Y+2, r11	; 0x02
     b8e:	ce 01       	movw	r24, r28
     b90:	01 96       	adiw	r24, 0x01	; 1
     b92:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     b96:	28 96       	adiw	r28, 0x08	; 8
     b98:	e9 e0       	ldi	r30, 0x09	; 9
     b9a:	0c 94 b5 3a 	jmp	0x756a	; 0x756a <__epilogue_restores__+0x12>

00000b9e <__fixsfsi>:
     b9e:	ac e0       	ldi	r26, 0x0C	; 12
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	e5 ed       	ldi	r30, 0xD5	; 213
     ba4:	f5 e0       	ldi	r31, 0x05	; 5
     ba6:	0c 94 a0 3a 	jmp	0x7540	; 0x7540 <__prologue_saves__+0x20>
     baa:	69 83       	std	Y+1, r22	; 0x01
     bac:	7a 83       	std	Y+2, r23	; 0x02
     bae:	8b 83       	std	Y+3, r24	; 0x03
     bb0:	9c 83       	std	Y+4, r25	; 0x04
     bb2:	ce 01       	movw	r24, r28
     bb4:	01 96       	adiw	r24, 0x01	; 1
     bb6:	be 01       	movw	r22, r28
     bb8:	6b 5f       	subi	r22, 0xFB	; 251
     bba:	7f 4f       	sbci	r23, 0xFF	; 255
     bbc:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     bc0:	8d 81       	ldd	r24, Y+5	; 0x05
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	61 f1       	breq	.+88     	; 0xc1e <__fixsfsi+0x80>
     bc6:	82 30       	cpi	r24, 0x02	; 2
     bc8:	50 f1       	brcs	.+84     	; 0xc1e <__fixsfsi+0x80>
     bca:	84 30       	cpi	r24, 0x04	; 4
     bcc:	21 f4       	brne	.+8      	; 0xbd6 <__fixsfsi+0x38>
     bce:	8e 81       	ldd	r24, Y+6	; 0x06
     bd0:	88 23       	and	r24, r24
     bd2:	51 f1       	breq	.+84     	; 0xc28 <__fixsfsi+0x8a>
     bd4:	2e c0       	rjmp	.+92     	; 0xc32 <__fixsfsi+0x94>
     bd6:	2f 81       	ldd	r18, Y+7	; 0x07
     bd8:	38 85       	ldd	r19, Y+8	; 0x08
     bda:	37 fd       	sbrc	r19, 7
     bdc:	20 c0       	rjmp	.+64     	; 0xc1e <__fixsfsi+0x80>
     bde:	6e 81       	ldd	r22, Y+6	; 0x06
     be0:	2f 31       	cpi	r18, 0x1F	; 31
     be2:	31 05       	cpc	r19, r1
     be4:	1c f0       	brlt	.+6      	; 0xbec <__fixsfsi+0x4e>
     be6:	66 23       	and	r22, r22
     be8:	f9 f0       	breq	.+62     	; 0xc28 <__fixsfsi+0x8a>
     bea:	23 c0       	rjmp	.+70     	; 0xc32 <__fixsfsi+0x94>
     bec:	8e e1       	ldi	r24, 0x1E	; 30
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	82 1b       	sub	r24, r18
     bf2:	93 0b       	sbc	r25, r19
     bf4:	29 85       	ldd	r18, Y+9	; 0x09
     bf6:	3a 85       	ldd	r19, Y+10	; 0x0a
     bf8:	4b 85       	ldd	r20, Y+11	; 0x0b
     bfa:	5c 85       	ldd	r21, Y+12	; 0x0c
     bfc:	04 c0       	rjmp	.+8      	; 0xc06 <__fixsfsi+0x68>
     bfe:	56 95       	lsr	r21
     c00:	47 95       	ror	r20
     c02:	37 95       	ror	r19
     c04:	27 95       	ror	r18
     c06:	8a 95       	dec	r24
     c08:	d2 f7       	brpl	.-12     	; 0xbfe <__fixsfsi+0x60>
     c0a:	66 23       	and	r22, r22
     c0c:	b1 f0       	breq	.+44     	; 0xc3a <__fixsfsi+0x9c>
     c0e:	50 95       	com	r21
     c10:	40 95       	com	r20
     c12:	30 95       	com	r19
     c14:	21 95       	neg	r18
     c16:	3f 4f       	sbci	r19, 0xFF	; 255
     c18:	4f 4f       	sbci	r20, 0xFF	; 255
     c1a:	5f 4f       	sbci	r21, 0xFF	; 255
     c1c:	0e c0       	rjmp	.+28     	; 0xc3a <__fixsfsi+0x9c>
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	40 e0       	ldi	r20, 0x00	; 0
     c24:	50 e0       	ldi	r21, 0x00	; 0
     c26:	09 c0       	rjmp	.+18     	; 0xc3a <__fixsfsi+0x9c>
     c28:	2f ef       	ldi	r18, 0xFF	; 255
     c2a:	3f ef       	ldi	r19, 0xFF	; 255
     c2c:	4f ef       	ldi	r20, 0xFF	; 255
     c2e:	5f e7       	ldi	r21, 0x7F	; 127
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__fixsfsi+0x9c>
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	40 e0       	ldi	r20, 0x00	; 0
     c38:	50 e8       	ldi	r21, 0x80	; 128
     c3a:	b9 01       	movw	r22, r18
     c3c:	ca 01       	movw	r24, r20
     c3e:	2c 96       	adiw	r28, 0x0c	; 12
     c40:	e2 e0       	ldi	r30, 0x02	; 2
     c42:	0c 94 bc 3a 	jmp	0x7578	; 0x7578 <__epilogue_restores__+0x20>

00000c46 <__floatunsisf>:
     c46:	a8 e0       	ldi	r26, 0x08	; 8
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	e9 e2       	ldi	r30, 0x29	; 41
     c4c:	f6 e0       	ldi	r31, 0x06	; 6
     c4e:	0c 94 98 3a 	jmp	0x7530	; 0x7530 <__prologue_saves__+0x10>
     c52:	7b 01       	movw	r14, r22
     c54:	8c 01       	movw	r16, r24
     c56:	61 15       	cp	r22, r1
     c58:	71 05       	cpc	r23, r1
     c5a:	81 05       	cpc	r24, r1
     c5c:	91 05       	cpc	r25, r1
     c5e:	19 f4       	brne	.+6      	; 0xc66 <__floatunsisf+0x20>
     c60:	82 e0       	ldi	r24, 0x02	; 2
     c62:	89 83       	std	Y+1, r24	; 0x01
     c64:	60 c0       	rjmp	.+192    	; 0xd26 <__floatunsisf+0xe0>
     c66:	83 e0       	ldi	r24, 0x03	; 3
     c68:	89 83       	std	Y+1, r24	; 0x01
     c6a:	8e e1       	ldi	r24, 0x1E	; 30
     c6c:	c8 2e       	mov	r12, r24
     c6e:	d1 2c       	mov	r13, r1
     c70:	dc 82       	std	Y+4, r13	; 0x04
     c72:	cb 82       	std	Y+3, r12	; 0x03
     c74:	ed 82       	std	Y+5, r14	; 0x05
     c76:	fe 82       	std	Y+6, r15	; 0x06
     c78:	0f 83       	std	Y+7, r16	; 0x07
     c7a:	18 87       	std	Y+8, r17	; 0x08
     c7c:	c8 01       	movw	r24, r16
     c7e:	b7 01       	movw	r22, r14
     c80:	0e 94 1b 07 	call	0xe36	; 0xe36 <__clzsi2>
     c84:	fc 01       	movw	r30, r24
     c86:	31 97       	sbiw	r30, 0x01	; 1
     c88:	f7 ff       	sbrs	r31, 7
     c8a:	3b c0       	rjmp	.+118    	; 0xd02 <__floatunsisf+0xbc>
     c8c:	22 27       	eor	r18, r18
     c8e:	33 27       	eor	r19, r19
     c90:	2e 1b       	sub	r18, r30
     c92:	3f 0b       	sbc	r19, r31
     c94:	57 01       	movw	r10, r14
     c96:	68 01       	movw	r12, r16
     c98:	02 2e       	mov	r0, r18
     c9a:	04 c0       	rjmp	.+8      	; 0xca4 <__floatunsisf+0x5e>
     c9c:	d6 94       	lsr	r13
     c9e:	c7 94       	ror	r12
     ca0:	b7 94       	ror	r11
     ca2:	a7 94       	ror	r10
     ca4:	0a 94       	dec	r0
     ca6:	d2 f7       	brpl	.-12     	; 0xc9c <__floatunsisf+0x56>
     ca8:	40 e0       	ldi	r20, 0x00	; 0
     caa:	50 e0       	ldi	r21, 0x00	; 0
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	a0 e0       	ldi	r26, 0x00	; 0
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	04 c0       	rjmp	.+8      	; 0xcc2 <__floatunsisf+0x7c>
     cba:	88 0f       	add	r24, r24
     cbc:	99 1f       	adc	r25, r25
     cbe:	aa 1f       	adc	r26, r26
     cc0:	bb 1f       	adc	r27, r27
     cc2:	2a 95       	dec	r18
     cc4:	d2 f7       	brpl	.-12     	; 0xcba <__floatunsisf+0x74>
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	a1 09       	sbc	r26, r1
     cca:	b1 09       	sbc	r27, r1
     ccc:	8e 21       	and	r24, r14
     cce:	9f 21       	and	r25, r15
     cd0:	a0 23       	and	r26, r16
     cd2:	b1 23       	and	r27, r17
     cd4:	00 97       	sbiw	r24, 0x00	; 0
     cd6:	a1 05       	cpc	r26, r1
     cd8:	b1 05       	cpc	r27, r1
     cda:	21 f0       	breq	.+8      	; 0xce4 <__floatunsisf+0x9e>
     cdc:	41 e0       	ldi	r20, 0x01	; 1
     cde:	50 e0       	ldi	r21, 0x00	; 0
     ce0:	60 e0       	ldi	r22, 0x00	; 0
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	4a 29       	or	r20, r10
     ce6:	5b 29       	or	r21, r11
     ce8:	6c 29       	or	r22, r12
     cea:	7d 29       	or	r23, r13
     cec:	4d 83       	std	Y+5, r20	; 0x05
     cee:	5e 83       	std	Y+6, r21	; 0x06
     cf0:	6f 83       	std	Y+7, r22	; 0x07
     cf2:	78 87       	std	Y+8, r23	; 0x08
     cf4:	8e e1       	ldi	r24, 0x1E	; 30
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	8e 1b       	sub	r24, r30
     cfa:	9f 0b       	sbc	r25, r31
     cfc:	9c 83       	std	Y+4, r25	; 0x04
     cfe:	8b 83       	std	Y+3, r24	; 0x03
     d00:	12 c0       	rjmp	.+36     	; 0xd26 <__floatunsisf+0xe0>
     d02:	30 97       	sbiw	r30, 0x00	; 0
     d04:	81 f0       	breq	.+32     	; 0xd26 <__floatunsisf+0xe0>
     d06:	0e 2e       	mov	r0, r30
     d08:	04 c0       	rjmp	.+8      	; 0xd12 <__floatunsisf+0xcc>
     d0a:	ee 0c       	add	r14, r14
     d0c:	ff 1c       	adc	r15, r15
     d0e:	00 1f       	adc	r16, r16
     d10:	11 1f       	adc	r17, r17
     d12:	0a 94       	dec	r0
     d14:	d2 f7       	brpl	.-12     	; 0xd0a <__floatunsisf+0xc4>
     d16:	ed 82       	std	Y+5, r14	; 0x05
     d18:	fe 82       	std	Y+6, r15	; 0x06
     d1a:	0f 83       	std	Y+7, r16	; 0x07
     d1c:	18 87       	std	Y+8, r17	; 0x08
     d1e:	ce 1a       	sub	r12, r30
     d20:	df 0a       	sbc	r13, r31
     d22:	dc 82       	std	Y+4, r13	; 0x04
     d24:	cb 82       	std	Y+3, r12	; 0x03
     d26:	1a 82       	std	Y+2, r1	; 0x02
     d28:	ce 01       	movw	r24, r28
     d2a:	01 96       	adiw	r24, 0x01	; 1
     d2c:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     d30:	28 96       	adiw	r28, 0x08	; 8
     d32:	ea e0       	ldi	r30, 0x0A	; 10
     d34:	0c 94 b4 3a 	jmp	0x7568	; 0x7568 <__epilogue_restores__+0x10>

00000d38 <__ashldi3>:
     d38:	ef 92       	push	r14
     d3a:	ff 92       	push	r15
     d3c:	0f 93       	push	r16
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
     d46:	60 97       	sbiw	r28, 0x10	; 16
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	f8 94       	cli
     d4c:	de bf       	out	0x3e, r29	; 62
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	cd bf       	out	0x3d, r28	; 61
     d52:	a8 2f       	mov	r26, r24
     d54:	00 23       	and	r16, r16
     d56:	09 f4       	brne	.+2      	; 0xd5a <__ashldi3+0x22>
     d58:	61 c0       	rjmp	.+194    	; 0xe1c <__ashldi3+0xe4>
     d5a:	7e 01       	movw	r14, r28
     d5c:	08 94       	sec
     d5e:	e1 1c       	adc	r14, r1
     d60:	f1 1c       	adc	r15, r1
     d62:	88 e0       	ldi	r24, 0x08	; 8
     d64:	f7 01       	movw	r30, r14
     d66:	11 92       	st	Z+, r1
     d68:	8a 95       	dec	r24
     d6a:	e9 f7       	brne	.-6      	; 0xd66 <__ashldi3+0x2e>
     d6c:	29 83       	std	Y+1, r18	; 0x01
     d6e:	3a 83       	std	Y+2, r19	; 0x02
     d70:	4b 83       	std	Y+3, r20	; 0x03
     d72:	5c 83       	std	Y+4, r21	; 0x04
     d74:	6d 83       	std	Y+5, r22	; 0x05
     d76:	7e 83       	std	Y+6, r23	; 0x06
     d78:	af 83       	std	Y+7, r26	; 0x07
     d7a:	98 87       	std	Y+8, r25	; 0x08
     d7c:	80 e2       	ldi	r24, 0x20	; 32
     d7e:	80 1b       	sub	r24, r16
     d80:	e8 2f       	mov	r30, r24
     d82:	ff 27       	eor	r31, r31
     d84:	e7 fd       	sbrc	r30, 7
     d86:	f0 95       	com	r31
     d88:	49 81       	ldd	r20, Y+1	; 0x01
     d8a:	5a 81       	ldd	r21, Y+2	; 0x02
     d8c:	6b 81       	ldd	r22, Y+3	; 0x03
     d8e:	7c 81       	ldd	r23, Y+4	; 0x04
     d90:	18 16       	cp	r1, r24
     d92:	84 f0       	brlt	.+32     	; 0xdb4 <__ashldi3+0x7c>
     d94:	19 86       	std	Y+9, r1	; 0x09
     d96:	1a 86       	std	Y+10, r1	; 0x0a
     d98:	1b 86       	std	Y+11, r1	; 0x0b
     d9a:	1c 86       	std	Y+12, r1	; 0x0c
     d9c:	88 27       	eor	r24, r24
     d9e:	99 27       	eor	r25, r25
     da0:	8e 1b       	sub	r24, r30
     da2:	9f 0b       	sbc	r25, r31
     da4:	04 c0       	rjmp	.+8      	; 0xdae <__ashldi3+0x76>
     da6:	44 0f       	add	r20, r20
     da8:	55 1f       	adc	r21, r21
     daa:	66 1f       	adc	r22, r22
     dac:	77 1f       	adc	r23, r23
     dae:	8a 95       	dec	r24
     db0:	d2 f7       	brpl	.-12     	; 0xda6 <__ashldi3+0x6e>
     db2:	28 c0       	rjmp	.+80     	; 0xe04 <__ashldi3+0xcc>
     db4:	20 2f       	mov	r18, r16
     db6:	33 27       	eor	r19, r19
     db8:	27 fd       	sbrc	r18, 7
     dba:	30 95       	com	r19
     dbc:	db 01       	movw	r26, r22
     dbe:	ca 01       	movw	r24, r20
     dc0:	02 2e       	mov	r0, r18
     dc2:	04 c0       	rjmp	.+8      	; 0xdcc <__ashldi3+0x94>
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	aa 1f       	adc	r26, r26
     dca:	bb 1f       	adc	r27, r27
     dcc:	0a 94       	dec	r0
     dce:	d2 f7       	brpl	.-12     	; 0xdc4 <__ashldi3+0x8c>
     dd0:	89 87       	std	Y+9, r24	; 0x09
     dd2:	9a 87       	std	Y+10, r25	; 0x0a
     dd4:	ab 87       	std	Y+11, r26	; 0x0b
     dd6:	bc 87       	std	Y+12, r27	; 0x0c
     dd8:	04 c0       	rjmp	.+8      	; 0xde2 <__ashldi3+0xaa>
     dda:	76 95       	lsr	r23
     ddc:	67 95       	ror	r22
     dde:	57 95       	ror	r21
     de0:	47 95       	ror	r20
     de2:	ea 95       	dec	r30
     de4:	d2 f7       	brpl	.-12     	; 0xdda <__ashldi3+0xa2>
     de6:	8d 81       	ldd	r24, Y+5	; 0x05
     de8:	9e 81       	ldd	r25, Y+6	; 0x06
     dea:	af 81       	ldd	r26, Y+7	; 0x07
     dec:	b8 85       	ldd	r27, Y+8	; 0x08
     dee:	04 c0       	rjmp	.+8      	; 0xdf8 <__ashldi3+0xc0>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	aa 1f       	adc	r26, r26
     df6:	bb 1f       	adc	r27, r27
     df8:	2a 95       	dec	r18
     dfa:	d2 f7       	brpl	.-12     	; 0xdf0 <__ashldi3+0xb8>
     dfc:	48 2b       	or	r20, r24
     dfe:	59 2b       	or	r21, r25
     e00:	6a 2b       	or	r22, r26
     e02:	7b 2b       	or	r23, r27
     e04:	4d 87       	std	Y+13, r20	; 0x0d
     e06:	5e 87       	std	Y+14, r21	; 0x0e
     e08:	6f 87       	std	Y+15, r22	; 0x0f
     e0a:	78 8b       	std	Y+16, r23	; 0x10
     e0c:	29 85       	ldd	r18, Y+9	; 0x09
     e0e:	3a 85       	ldd	r19, Y+10	; 0x0a
     e10:	4b 85       	ldd	r20, Y+11	; 0x0b
     e12:	5c 85       	ldd	r21, Y+12	; 0x0c
     e14:	6d 85       	ldd	r22, Y+13	; 0x0d
     e16:	7e 85       	ldd	r23, Y+14	; 0x0e
     e18:	af 85       	ldd	r26, Y+15	; 0x0f
     e1a:	98 89       	ldd	r25, Y+16	; 0x10
     e1c:	8a 2f       	mov	r24, r26
     e1e:	60 96       	adiw	r28, 0x10	; 16
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	f8 94       	cli
     e24:	de bf       	out	0x3e, r29	; 62
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	cd bf       	out	0x3d, r28	; 61
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	0f 91       	pop	r16
     e30:	ff 90       	pop	r15
     e32:	ef 90       	pop	r14
     e34:	08 95       	ret

00000e36 <__clzsi2>:
     e36:	ef 92       	push	r14
     e38:	ff 92       	push	r15
     e3a:	0f 93       	push	r16
     e3c:	1f 93       	push	r17
     e3e:	7b 01       	movw	r14, r22
     e40:	8c 01       	movw	r16, r24
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	e8 16       	cp	r14, r24
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	f8 06       	cpc	r15, r24
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	08 07       	cpc	r16, r24
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	18 07       	cpc	r17, r24
     e52:	88 f4       	brcc	.+34     	; 0xe76 <__clzsi2+0x40>
     e54:	8f ef       	ldi	r24, 0xFF	; 255
     e56:	e8 16       	cp	r14, r24
     e58:	f1 04       	cpc	r15, r1
     e5a:	01 05       	cpc	r16, r1
     e5c:	11 05       	cpc	r17, r1
     e5e:	31 f0       	breq	.+12     	; 0xe6c <__clzsi2+0x36>
     e60:	28 f0       	brcs	.+10     	; 0xe6c <__clzsi2+0x36>
     e62:	88 e0       	ldi	r24, 0x08	; 8
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	a0 e0       	ldi	r26, 0x00	; 0
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	17 c0       	rjmp	.+46     	; 0xe9a <__clzsi2+0x64>
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	a0 e0       	ldi	r26, 0x00	; 0
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	12 c0       	rjmp	.+36     	; 0xe9a <__clzsi2+0x64>
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	e8 16       	cp	r14, r24
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	f8 06       	cpc	r15, r24
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	08 07       	cpc	r16, r24
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	18 07       	cpc	r17, r24
     e86:	28 f0       	brcs	.+10     	; 0xe92 <__clzsi2+0x5c>
     e88:	88 e1       	ldi	r24, 0x18	; 24
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	a0 e0       	ldi	r26, 0x00	; 0
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	04 c0       	rjmp	.+8      	; 0xe9a <__clzsi2+0x64>
     e92:	80 e1       	ldi	r24, 0x10	; 16
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	a0 e0       	ldi	r26, 0x00	; 0
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	20 e2       	ldi	r18, 0x20	; 32
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	40 e0       	ldi	r20, 0x00	; 0
     ea0:	50 e0       	ldi	r21, 0x00	; 0
     ea2:	28 1b       	sub	r18, r24
     ea4:	39 0b       	sbc	r19, r25
     ea6:	4a 0b       	sbc	r20, r26
     ea8:	5b 0b       	sbc	r21, r27
     eaa:	04 c0       	rjmp	.+8      	; 0xeb4 <__clzsi2+0x7e>
     eac:	16 95       	lsr	r17
     eae:	07 95       	ror	r16
     eb0:	f7 94       	ror	r15
     eb2:	e7 94       	ror	r14
     eb4:	8a 95       	dec	r24
     eb6:	d2 f7       	brpl	.-12     	; 0xeac <__clzsi2+0x76>
     eb8:	f7 01       	movw	r30, r14
     eba:	ed 5f       	subi	r30, 0xFD	; 253
     ebc:	fe 4f       	sbci	r31, 0xFE	; 254
     ebe:	80 81       	ld	r24, Z
     ec0:	28 1b       	sub	r18, r24
     ec2:	31 09       	sbc	r19, r1
     ec4:	41 09       	sbc	r20, r1
     ec6:	51 09       	sbc	r21, r1
     ec8:	c9 01       	movw	r24, r18
     eca:	1f 91       	pop	r17
     ecc:	0f 91       	pop	r16
     ece:	ff 90       	pop	r15
     ed0:	ef 90       	pop	r14
     ed2:	08 95       	ret

00000ed4 <__pack_f>:
     ed4:	df 92       	push	r13
     ed6:	ef 92       	push	r14
     ed8:	ff 92       	push	r15
     eda:	0f 93       	push	r16
     edc:	1f 93       	push	r17
     ede:	fc 01       	movw	r30, r24
     ee0:	e4 80       	ldd	r14, Z+4	; 0x04
     ee2:	f5 80       	ldd	r15, Z+5	; 0x05
     ee4:	06 81       	ldd	r16, Z+6	; 0x06
     ee6:	17 81       	ldd	r17, Z+7	; 0x07
     ee8:	d1 80       	ldd	r13, Z+1	; 0x01
     eea:	80 81       	ld	r24, Z
     eec:	82 30       	cpi	r24, 0x02	; 2
     eee:	48 f4       	brcc	.+18     	; 0xf02 <__pack_f+0x2e>
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	a0 e1       	ldi	r26, 0x10	; 16
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e8 2a       	or	r14, r24
     efa:	f9 2a       	or	r15, r25
     efc:	0a 2b       	or	r16, r26
     efe:	1b 2b       	or	r17, r27
     f00:	a5 c0       	rjmp	.+330    	; 0x104c <__pack_f+0x178>
     f02:	84 30       	cpi	r24, 0x04	; 4
     f04:	09 f4       	brne	.+2      	; 0xf08 <__pack_f+0x34>
     f06:	9f c0       	rjmp	.+318    	; 0x1046 <__pack_f+0x172>
     f08:	82 30       	cpi	r24, 0x02	; 2
     f0a:	21 f4       	brne	.+8      	; 0xf14 <__pack_f+0x40>
     f0c:	ee 24       	eor	r14, r14
     f0e:	ff 24       	eor	r15, r15
     f10:	87 01       	movw	r16, r14
     f12:	05 c0       	rjmp	.+10     	; 0xf1e <__pack_f+0x4a>
     f14:	e1 14       	cp	r14, r1
     f16:	f1 04       	cpc	r15, r1
     f18:	01 05       	cpc	r16, r1
     f1a:	11 05       	cpc	r17, r1
     f1c:	19 f4       	brne	.+6      	; 0xf24 <__pack_f+0x50>
     f1e:	e0 e0       	ldi	r30, 0x00	; 0
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	96 c0       	rjmp	.+300    	; 0x1050 <__pack_f+0x17c>
     f24:	62 81       	ldd	r22, Z+2	; 0x02
     f26:	73 81       	ldd	r23, Z+3	; 0x03
     f28:	9f ef       	ldi	r25, 0xFF	; 255
     f2a:	62 38       	cpi	r22, 0x82	; 130
     f2c:	79 07       	cpc	r23, r25
     f2e:	0c f0       	brlt	.+2      	; 0xf32 <__pack_f+0x5e>
     f30:	5b c0       	rjmp	.+182    	; 0xfe8 <__pack_f+0x114>
     f32:	22 e8       	ldi	r18, 0x82	; 130
     f34:	3f ef       	ldi	r19, 0xFF	; 255
     f36:	26 1b       	sub	r18, r22
     f38:	37 0b       	sbc	r19, r23
     f3a:	2a 31       	cpi	r18, 0x1A	; 26
     f3c:	31 05       	cpc	r19, r1
     f3e:	2c f0       	brlt	.+10     	; 0xf4a <__pack_f+0x76>
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	40 e0       	ldi	r20, 0x00	; 0
     f46:	50 e0       	ldi	r21, 0x00	; 0
     f48:	2a c0       	rjmp	.+84     	; 0xf9e <__pack_f+0xca>
     f4a:	b8 01       	movw	r22, r16
     f4c:	a7 01       	movw	r20, r14
     f4e:	02 2e       	mov	r0, r18
     f50:	04 c0       	rjmp	.+8      	; 0xf5a <__pack_f+0x86>
     f52:	76 95       	lsr	r23
     f54:	67 95       	ror	r22
     f56:	57 95       	ror	r21
     f58:	47 95       	ror	r20
     f5a:	0a 94       	dec	r0
     f5c:	d2 f7       	brpl	.-12     	; 0xf52 <__pack_f+0x7e>
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	a0 e0       	ldi	r26, 0x00	; 0
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	04 c0       	rjmp	.+8      	; 0xf70 <__pack_f+0x9c>
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	aa 1f       	adc	r26, r26
     f6e:	bb 1f       	adc	r27, r27
     f70:	2a 95       	dec	r18
     f72:	d2 f7       	brpl	.-12     	; 0xf68 <__pack_f+0x94>
     f74:	01 97       	sbiw	r24, 0x01	; 1
     f76:	a1 09       	sbc	r26, r1
     f78:	b1 09       	sbc	r27, r1
     f7a:	8e 21       	and	r24, r14
     f7c:	9f 21       	and	r25, r15
     f7e:	a0 23       	and	r26, r16
     f80:	b1 23       	and	r27, r17
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	a1 05       	cpc	r26, r1
     f86:	b1 05       	cpc	r27, r1
     f88:	21 f0       	breq	.+8      	; 0xf92 <__pack_f+0xbe>
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	a0 e0       	ldi	r26, 0x00	; 0
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	9a 01       	movw	r18, r20
     f94:	ab 01       	movw	r20, r22
     f96:	28 2b       	or	r18, r24
     f98:	39 2b       	or	r19, r25
     f9a:	4a 2b       	or	r20, r26
     f9c:	5b 2b       	or	r21, r27
     f9e:	da 01       	movw	r26, r20
     fa0:	c9 01       	movw	r24, r18
     fa2:	8f 77       	andi	r24, 0x7F	; 127
     fa4:	90 70       	andi	r25, 0x00	; 0
     fa6:	a0 70       	andi	r26, 0x00	; 0
     fa8:	b0 70       	andi	r27, 0x00	; 0
     faa:	80 34       	cpi	r24, 0x40	; 64
     fac:	91 05       	cpc	r25, r1
     fae:	a1 05       	cpc	r26, r1
     fb0:	b1 05       	cpc	r27, r1
     fb2:	39 f4       	brne	.+14     	; 0xfc2 <__pack_f+0xee>
     fb4:	27 ff       	sbrs	r18, 7
     fb6:	09 c0       	rjmp	.+18     	; 0xfca <__pack_f+0xf6>
     fb8:	20 5c       	subi	r18, 0xC0	; 192
     fba:	3f 4f       	sbci	r19, 0xFF	; 255
     fbc:	4f 4f       	sbci	r20, 0xFF	; 255
     fbe:	5f 4f       	sbci	r21, 0xFF	; 255
     fc0:	04 c0       	rjmp	.+8      	; 0xfca <__pack_f+0xf6>
     fc2:	21 5c       	subi	r18, 0xC1	; 193
     fc4:	3f 4f       	sbci	r19, 0xFF	; 255
     fc6:	4f 4f       	sbci	r20, 0xFF	; 255
     fc8:	5f 4f       	sbci	r21, 0xFF	; 255
     fca:	e0 e0       	ldi	r30, 0x00	; 0
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	20 30       	cpi	r18, 0x00	; 0
     fd0:	a0 e0       	ldi	r26, 0x00	; 0
     fd2:	3a 07       	cpc	r19, r26
     fd4:	a0 e0       	ldi	r26, 0x00	; 0
     fd6:	4a 07       	cpc	r20, r26
     fd8:	a0 e4       	ldi	r26, 0x40	; 64
     fda:	5a 07       	cpc	r21, r26
     fdc:	10 f0       	brcs	.+4      	; 0xfe2 <__pack_f+0x10e>
     fde:	e1 e0       	ldi	r30, 0x01	; 1
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	79 01       	movw	r14, r18
     fe4:	8a 01       	movw	r16, r20
     fe6:	27 c0       	rjmp	.+78     	; 0x1036 <__pack_f+0x162>
     fe8:	60 38       	cpi	r22, 0x80	; 128
     fea:	71 05       	cpc	r23, r1
     fec:	64 f5       	brge	.+88     	; 0x1046 <__pack_f+0x172>
     fee:	fb 01       	movw	r30, r22
     ff0:	e1 58       	subi	r30, 0x81	; 129
     ff2:	ff 4f       	sbci	r31, 0xFF	; 255
     ff4:	d8 01       	movw	r26, r16
     ff6:	c7 01       	movw	r24, r14
     ff8:	8f 77       	andi	r24, 0x7F	; 127
     ffa:	90 70       	andi	r25, 0x00	; 0
     ffc:	a0 70       	andi	r26, 0x00	; 0
     ffe:	b0 70       	andi	r27, 0x00	; 0
    1000:	80 34       	cpi	r24, 0x40	; 64
    1002:	91 05       	cpc	r25, r1
    1004:	a1 05       	cpc	r26, r1
    1006:	b1 05       	cpc	r27, r1
    1008:	39 f4       	brne	.+14     	; 0x1018 <__pack_f+0x144>
    100a:	e7 fe       	sbrs	r14, 7
    100c:	0d c0       	rjmp	.+26     	; 0x1028 <__pack_f+0x154>
    100e:	80 e4       	ldi	r24, 0x40	; 64
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	a0 e0       	ldi	r26, 0x00	; 0
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	04 c0       	rjmp	.+8      	; 0x1020 <__pack_f+0x14c>
    1018:	8f e3       	ldi	r24, 0x3F	; 63
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	a0 e0       	ldi	r26, 0x00	; 0
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e8 0e       	add	r14, r24
    1022:	f9 1e       	adc	r15, r25
    1024:	0a 1f       	adc	r16, r26
    1026:	1b 1f       	adc	r17, r27
    1028:	17 ff       	sbrs	r17, 7
    102a:	05 c0       	rjmp	.+10     	; 0x1036 <__pack_f+0x162>
    102c:	16 95       	lsr	r17
    102e:	07 95       	ror	r16
    1030:	f7 94       	ror	r15
    1032:	e7 94       	ror	r14
    1034:	31 96       	adiw	r30, 0x01	; 1
    1036:	87 e0       	ldi	r24, 0x07	; 7
    1038:	16 95       	lsr	r17
    103a:	07 95       	ror	r16
    103c:	f7 94       	ror	r15
    103e:	e7 94       	ror	r14
    1040:	8a 95       	dec	r24
    1042:	d1 f7       	brne	.-12     	; 0x1038 <__pack_f+0x164>
    1044:	05 c0       	rjmp	.+10     	; 0x1050 <__pack_f+0x17c>
    1046:	ee 24       	eor	r14, r14
    1048:	ff 24       	eor	r15, r15
    104a:	87 01       	movw	r16, r14
    104c:	ef ef       	ldi	r30, 0xFF	; 255
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	6e 2f       	mov	r22, r30
    1052:	67 95       	ror	r22
    1054:	66 27       	eor	r22, r22
    1056:	67 95       	ror	r22
    1058:	90 2f       	mov	r25, r16
    105a:	9f 77       	andi	r25, 0x7F	; 127
    105c:	d7 94       	ror	r13
    105e:	dd 24       	eor	r13, r13
    1060:	d7 94       	ror	r13
    1062:	8e 2f       	mov	r24, r30
    1064:	86 95       	lsr	r24
    1066:	49 2f       	mov	r20, r25
    1068:	46 2b       	or	r20, r22
    106a:	58 2f       	mov	r21, r24
    106c:	5d 29       	or	r21, r13
    106e:	b7 01       	movw	r22, r14
    1070:	ca 01       	movw	r24, r20
    1072:	1f 91       	pop	r17
    1074:	0f 91       	pop	r16
    1076:	ff 90       	pop	r15
    1078:	ef 90       	pop	r14
    107a:	df 90       	pop	r13
    107c:	08 95       	ret

0000107e <__unpack_f>:
    107e:	fc 01       	movw	r30, r24
    1080:	db 01       	movw	r26, r22
    1082:	40 81       	ld	r20, Z
    1084:	51 81       	ldd	r21, Z+1	; 0x01
    1086:	22 81       	ldd	r18, Z+2	; 0x02
    1088:	62 2f       	mov	r22, r18
    108a:	6f 77       	andi	r22, 0x7F	; 127
    108c:	70 e0       	ldi	r23, 0x00	; 0
    108e:	22 1f       	adc	r18, r18
    1090:	22 27       	eor	r18, r18
    1092:	22 1f       	adc	r18, r18
    1094:	93 81       	ldd	r25, Z+3	; 0x03
    1096:	89 2f       	mov	r24, r25
    1098:	88 0f       	add	r24, r24
    109a:	82 2b       	or	r24, r18
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	99 1f       	adc	r25, r25
    10a2:	99 27       	eor	r25, r25
    10a4:	99 1f       	adc	r25, r25
    10a6:	11 96       	adiw	r26, 0x01	; 1
    10a8:	9c 93       	st	X, r25
    10aa:	11 97       	sbiw	r26, 0x01	; 1
    10ac:	21 15       	cp	r18, r1
    10ae:	31 05       	cpc	r19, r1
    10b0:	a9 f5       	brne	.+106    	; 0x111c <__unpack_f+0x9e>
    10b2:	41 15       	cp	r20, r1
    10b4:	51 05       	cpc	r21, r1
    10b6:	61 05       	cpc	r22, r1
    10b8:	71 05       	cpc	r23, r1
    10ba:	11 f4       	brne	.+4      	; 0x10c0 <__unpack_f+0x42>
    10bc:	82 e0       	ldi	r24, 0x02	; 2
    10be:	37 c0       	rjmp	.+110    	; 0x112e <__unpack_f+0xb0>
    10c0:	82 e8       	ldi	r24, 0x82	; 130
    10c2:	9f ef       	ldi	r25, 0xFF	; 255
    10c4:	13 96       	adiw	r26, 0x03	; 3
    10c6:	9c 93       	st	X, r25
    10c8:	8e 93       	st	-X, r24
    10ca:	12 97       	sbiw	r26, 0x02	; 2
    10cc:	9a 01       	movw	r18, r20
    10ce:	ab 01       	movw	r20, r22
    10d0:	67 e0       	ldi	r22, 0x07	; 7
    10d2:	22 0f       	add	r18, r18
    10d4:	33 1f       	adc	r19, r19
    10d6:	44 1f       	adc	r20, r20
    10d8:	55 1f       	adc	r21, r21
    10da:	6a 95       	dec	r22
    10dc:	d1 f7       	brne	.-12     	; 0x10d2 <__unpack_f+0x54>
    10de:	83 e0       	ldi	r24, 0x03	; 3
    10e0:	8c 93       	st	X, r24
    10e2:	0d c0       	rjmp	.+26     	; 0x10fe <__unpack_f+0x80>
    10e4:	22 0f       	add	r18, r18
    10e6:	33 1f       	adc	r19, r19
    10e8:	44 1f       	adc	r20, r20
    10ea:	55 1f       	adc	r21, r21
    10ec:	12 96       	adiw	r26, 0x02	; 2
    10ee:	8d 91       	ld	r24, X+
    10f0:	9c 91       	ld	r25, X
    10f2:	13 97       	sbiw	r26, 0x03	; 3
    10f4:	01 97       	sbiw	r24, 0x01	; 1
    10f6:	13 96       	adiw	r26, 0x03	; 3
    10f8:	9c 93       	st	X, r25
    10fa:	8e 93       	st	-X, r24
    10fc:	12 97       	sbiw	r26, 0x02	; 2
    10fe:	20 30       	cpi	r18, 0x00	; 0
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	38 07       	cpc	r19, r24
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	48 07       	cpc	r20, r24
    1108:	80 e4       	ldi	r24, 0x40	; 64
    110a:	58 07       	cpc	r21, r24
    110c:	58 f3       	brcs	.-42     	; 0x10e4 <__unpack_f+0x66>
    110e:	14 96       	adiw	r26, 0x04	; 4
    1110:	2d 93       	st	X+, r18
    1112:	3d 93       	st	X+, r19
    1114:	4d 93       	st	X+, r20
    1116:	5c 93       	st	X, r21
    1118:	17 97       	sbiw	r26, 0x07	; 7
    111a:	08 95       	ret
    111c:	2f 3f       	cpi	r18, 0xFF	; 255
    111e:	31 05       	cpc	r19, r1
    1120:	79 f4       	brne	.+30     	; 0x1140 <__unpack_f+0xc2>
    1122:	41 15       	cp	r20, r1
    1124:	51 05       	cpc	r21, r1
    1126:	61 05       	cpc	r22, r1
    1128:	71 05       	cpc	r23, r1
    112a:	19 f4       	brne	.+6      	; 0x1132 <__unpack_f+0xb4>
    112c:	84 e0       	ldi	r24, 0x04	; 4
    112e:	8c 93       	st	X, r24
    1130:	08 95       	ret
    1132:	64 ff       	sbrs	r22, 4
    1134:	03 c0       	rjmp	.+6      	; 0x113c <__unpack_f+0xbe>
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	8c 93       	st	X, r24
    113a:	12 c0       	rjmp	.+36     	; 0x1160 <__unpack_f+0xe2>
    113c:	1c 92       	st	X, r1
    113e:	10 c0       	rjmp	.+32     	; 0x1160 <__unpack_f+0xe2>
    1140:	2f 57       	subi	r18, 0x7F	; 127
    1142:	30 40       	sbci	r19, 0x00	; 0
    1144:	13 96       	adiw	r26, 0x03	; 3
    1146:	3c 93       	st	X, r19
    1148:	2e 93       	st	-X, r18
    114a:	12 97       	sbiw	r26, 0x02	; 2
    114c:	83 e0       	ldi	r24, 0x03	; 3
    114e:	8c 93       	st	X, r24
    1150:	87 e0       	ldi	r24, 0x07	; 7
    1152:	44 0f       	add	r20, r20
    1154:	55 1f       	adc	r21, r21
    1156:	66 1f       	adc	r22, r22
    1158:	77 1f       	adc	r23, r23
    115a:	8a 95       	dec	r24
    115c:	d1 f7       	brne	.-12     	; 0x1152 <__unpack_f+0xd4>
    115e:	70 64       	ori	r23, 0x40	; 64
    1160:	14 96       	adiw	r26, 0x04	; 4
    1162:	4d 93       	st	X+, r20
    1164:	5d 93       	st	X+, r21
    1166:	6d 93       	st	X+, r22
    1168:	7c 93       	st	X, r23
    116a:	17 97       	sbiw	r26, 0x07	; 7
    116c:	08 95       	ret

0000116e <__fpcmp_parts_f>:
    116e:	1f 93       	push	r17
    1170:	dc 01       	movw	r26, r24
    1172:	fb 01       	movw	r30, r22
    1174:	9c 91       	ld	r25, X
    1176:	92 30       	cpi	r25, 0x02	; 2
    1178:	08 f4       	brcc	.+2      	; 0x117c <__fpcmp_parts_f+0xe>
    117a:	47 c0       	rjmp	.+142    	; 0x120a <__fpcmp_parts_f+0x9c>
    117c:	80 81       	ld	r24, Z
    117e:	82 30       	cpi	r24, 0x02	; 2
    1180:	08 f4       	brcc	.+2      	; 0x1184 <__fpcmp_parts_f+0x16>
    1182:	43 c0       	rjmp	.+134    	; 0x120a <__fpcmp_parts_f+0x9c>
    1184:	94 30       	cpi	r25, 0x04	; 4
    1186:	51 f4       	brne	.+20     	; 0x119c <__fpcmp_parts_f+0x2e>
    1188:	11 96       	adiw	r26, 0x01	; 1
    118a:	1c 91       	ld	r17, X
    118c:	84 30       	cpi	r24, 0x04	; 4
    118e:	99 f5       	brne	.+102    	; 0x11f6 <__fpcmp_parts_f+0x88>
    1190:	81 81       	ldd	r24, Z+1	; 0x01
    1192:	68 2f       	mov	r22, r24
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	61 1b       	sub	r22, r17
    1198:	71 09       	sbc	r23, r1
    119a:	3f c0       	rjmp	.+126    	; 0x121a <__fpcmp_parts_f+0xac>
    119c:	84 30       	cpi	r24, 0x04	; 4
    119e:	21 f0       	breq	.+8      	; 0x11a8 <__fpcmp_parts_f+0x3a>
    11a0:	92 30       	cpi	r25, 0x02	; 2
    11a2:	31 f4       	brne	.+12     	; 0x11b0 <__fpcmp_parts_f+0x42>
    11a4:	82 30       	cpi	r24, 0x02	; 2
    11a6:	b9 f1       	breq	.+110    	; 0x1216 <__fpcmp_parts_f+0xa8>
    11a8:	81 81       	ldd	r24, Z+1	; 0x01
    11aa:	88 23       	and	r24, r24
    11ac:	89 f1       	breq	.+98     	; 0x1210 <__fpcmp_parts_f+0xa2>
    11ae:	2d c0       	rjmp	.+90     	; 0x120a <__fpcmp_parts_f+0x9c>
    11b0:	11 96       	adiw	r26, 0x01	; 1
    11b2:	1c 91       	ld	r17, X
    11b4:	11 97       	sbiw	r26, 0x01	; 1
    11b6:	82 30       	cpi	r24, 0x02	; 2
    11b8:	f1 f0       	breq	.+60     	; 0x11f6 <__fpcmp_parts_f+0x88>
    11ba:	81 81       	ldd	r24, Z+1	; 0x01
    11bc:	18 17       	cp	r17, r24
    11be:	d9 f4       	brne	.+54     	; 0x11f6 <__fpcmp_parts_f+0x88>
    11c0:	12 96       	adiw	r26, 0x02	; 2
    11c2:	2d 91       	ld	r18, X+
    11c4:	3c 91       	ld	r19, X
    11c6:	13 97       	sbiw	r26, 0x03	; 3
    11c8:	82 81       	ldd	r24, Z+2	; 0x02
    11ca:	93 81       	ldd	r25, Z+3	; 0x03
    11cc:	82 17       	cp	r24, r18
    11ce:	93 07       	cpc	r25, r19
    11d0:	94 f0       	brlt	.+36     	; 0x11f6 <__fpcmp_parts_f+0x88>
    11d2:	28 17       	cp	r18, r24
    11d4:	39 07       	cpc	r19, r25
    11d6:	bc f0       	brlt	.+46     	; 0x1206 <__fpcmp_parts_f+0x98>
    11d8:	14 96       	adiw	r26, 0x04	; 4
    11da:	8d 91       	ld	r24, X+
    11dc:	9d 91       	ld	r25, X+
    11de:	0d 90       	ld	r0, X+
    11e0:	bc 91       	ld	r27, X
    11e2:	a0 2d       	mov	r26, r0
    11e4:	24 81       	ldd	r18, Z+4	; 0x04
    11e6:	35 81       	ldd	r19, Z+5	; 0x05
    11e8:	46 81       	ldd	r20, Z+6	; 0x06
    11ea:	57 81       	ldd	r21, Z+7	; 0x07
    11ec:	28 17       	cp	r18, r24
    11ee:	39 07       	cpc	r19, r25
    11f0:	4a 07       	cpc	r20, r26
    11f2:	5b 07       	cpc	r21, r27
    11f4:	18 f4       	brcc	.+6      	; 0x11fc <__fpcmp_parts_f+0x8e>
    11f6:	11 23       	and	r17, r17
    11f8:	41 f0       	breq	.+16     	; 0x120a <__fpcmp_parts_f+0x9c>
    11fa:	0a c0       	rjmp	.+20     	; 0x1210 <__fpcmp_parts_f+0xa2>
    11fc:	82 17       	cp	r24, r18
    11fe:	93 07       	cpc	r25, r19
    1200:	a4 07       	cpc	r26, r20
    1202:	b5 07       	cpc	r27, r21
    1204:	40 f4       	brcc	.+16     	; 0x1216 <__fpcmp_parts_f+0xa8>
    1206:	11 23       	and	r17, r17
    1208:	19 f0       	breq	.+6      	; 0x1210 <__fpcmp_parts_f+0xa2>
    120a:	61 e0       	ldi	r22, 0x01	; 1
    120c:	70 e0       	ldi	r23, 0x00	; 0
    120e:	05 c0       	rjmp	.+10     	; 0x121a <__fpcmp_parts_f+0xac>
    1210:	6f ef       	ldi	r22, 0xFF	; 255
    1212:	7f ef       	ldi	r23, 0xFF	; 255
    1214:	02 c0       	rjmp	.+4      	; 0x121a <__fpcmp_parts_f+0xac>
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	cb 01       	movw	r24, r22
    121c:	1f 91       	pop	r17
    121e:	08 95       	ret

00001220 <BUZ_vInit>:
* Parameters :
            => struct has the BUZ porn , pin , status
* return : void
*/
void BUZ_vInit(BUZ_config BUZ_Configuration)
{
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	00 d0       	rcall	.+0      	; 0x1226 <BUZ_vInit+0x6>
    1226:	0f 92       	push	r0
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	69 83       	std	Y+1, r22	; 0x01
    122e:	7a 83       	std	Y+2, r23	; 0x02
    1230:	8b 83       	std	Y+3, r24	; 0x03

	DIO_enumSetPinDirection(BUZ_Configuration.PortName, BUZ_Configuration.PinNumber, DIO_PIN_OUTPUT);
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	9a 81       	ldd	r25, Y+2	; 0x02
    1236:	69 2f       	mov	r22, r25
    1238:	41 e0       	ldi	r20, 0x01	; 1
    123a:	0e 94 fe 24 	call	0x49fc	; 0x49fc <DIO_enumSetPinDirection>
}
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	cf 91       	pop	r28
    1246:	df 91       	pop	r29
    1248:	08 95       	ret

0000124a <BUZ_vOn>:
* Parameters :
            => struct has the BUZ porn , pin , status
* return : void
*/
void BUZ_vOn(BUZ_config BUZ_Configuration)
{
    124a:	df 93       	push	r29
    124c:	cf 93       	push	r28
    124e:	00 d0       	rcall	.+0      	; 0x1250 <BUZ_vOn+0x6>
    1250:	0f 92       	push	r0
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
    1256:	69 83       	std	Y+1, r22	; 0x01
    1258:	7a 83       	std	Y+2, r23	; 0x02
    125a:	8b 83       	std	Y+3, r24	; 0x03

  if (BUZ_Configuration.ActiveState == ACTIVE_HIGH)
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	81 30       	cpi	r24, 0x01	; 1
    1260:	39 f4       	brne	.+14     	; 0x1270 <BUZ_vOn+0x26>
  {

	  DIO_enumWritePinValue(BUZ_Configuration.PortName, BUZ_Configuration.PinNumber, DIO_PIN_OUTPUT);
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	9a 81       	ldd	r25, Y+2	; 0x02
    1266:	69 2f       	mov	r22, r25
    1268:	41 e0       	ldi	r20, 0x01	; 1
    126a:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <DIO_enumWritePinValue>
    126e:	09 c0       	rjmp	.+18     	; 0x1282 <BUZ_vOn+0x38>
  }
  else if (BUZ_Configuration.ActiveState == ACTIVE_LOW)
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	88 23       	and	r24, r24
    1274:	31 f4       	brne	.+12     	; 0x1282 <BUZ_vOn+0x38>
  {

	  DIO_enumWritePinValue(BUZ_Configuration.PortName, BUZ_Configuration.PinNumber, DIO_PIN_OUTPUT);
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	9a 81       	ldd	r25, Y+2	; 0x02
    127a:	69 2f       	mov	r22, r25
    127c:	41 e0       	ldi	r20, 0x01	; 1
    127e:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <DIO_enumWritePinValue>
  }
}
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	cf 91       	pop	r28
    128a:	df 91       	pop	r29
    128c:	08 95       	ret

0000128e <BUZ_vOff>:
* Parameters :
              => struct has the BUZ porn , pin , status
* return : void
*/
void BUZ_vOff(BUZ_config BUZ_Configuration)
{
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	00 d0       	rcall	.+0      	; 0x1294 <BUZ_vOff+0x6>
    1294:	0f 92       	push	r0
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
    129a:	69 83       	std	Y+1, r22	; 0x01
    129c:	7a 83       	std	Y+2, r23	; 0x02
    129e:	8b 83       	std	Y+3, r24	; 0x03

  if (BUZ_Configuration.ActiveState == ACTIVE_HIGH)
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	81 30       	cpi	r24, 0x01	; 1
    12a4:	39 f4       	brne	.+14     	; 0x12b4 <BUZ_vOff+0x26>
  {

	  DIO_enumWritePinValue(BUZ_Configuration.PortName, BUZ_Configuration.PinNumber, DIO_PIN_OUTPUT);
    12a6:	89 81       	ldd	r24, Y+1	; 0x01
    12a8:	9a 81       	ldd	r25, Y+2	; 0x02
    12aa:	69 2f       	mov	r22, r25
    12ac:	41 e0       	ldi	r20, 0x01	; 1
    12ae:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <DIO_enumWritePinValue>
    12b2:	09 c0       	rjmp	.+18     	; 0x12c6 <BUZ_vOff+0x38>
  }
  else if (BUZ_Configuration.ActiveState == ACTIVE_LOW)
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	88 23       	and	r24, r24
    12b8:	31 f4       	brne	.+12     	; 0x12c6 <BUZ_vOff+0x38>
  {

	  DIO_enumWritePinValue(BUZ_Configuration.PortName, BUZ_Configuration.PinNumber, DIO_PIN_OUTPUT);
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	9a 81       	ldd	r25, Y+2	; 0x02
    12be:	69 2f       	mov	r22, r25
    12c0:	41 e0       	ldi	r20, 0x01	; 1
    12c2:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <DIO_enumWritePinValue>
  }
}
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	08 95       	ret

000012d2 <BUZ_vTog>:
* Parameters :
            => struct has the BUZ porn , pin , status
* return : void
*/
void BUZ_vTog(BUZ_config BUZ_Configuration)
{
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	00 d0       	rcall	.+0      	; 0x12d8 <BUZ_vTog+0x6>
    12d8:	0f 92       	push	r0
    12da:	cd b7       	in	r28, 0x3d	; 61
    12dc:	de b7       	in	r29, 0x3e	; 62
    12de:	69 83       	std	Y+1, r22	; 0x01
    12e0:	7a 83       	std	Y+2, r23	; 0x02
    12e2:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumTogglePinValue(BUZ_Configuration.PortName, BUZ_Configuration.PinNumber);
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	9a 81       	ldd	r25, Y+2	; 0x02
    12e8:	69 2f       	mov	r22, r25
    12ea:	0e 94 e1 27 	call	0x4fc2	; 0x4fc2 <DIO_enumTogglePinValue>
}
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	0f 90       	pop	r0
    12f4:	cf 91       	pop	r28
    12f6:	df 91       	pop	r29
    12f8:	08 95       	ret

000012fa <CLCD_voidInit>:
#include "CLCD_config.h"
#include "CLCD_intreface.h"
#include "CLCD_private.h"
#include "CLCD_extrachar.h"

void CLCD_voidInit(void) {
    12fa:	0f 93       	push	r16
    12fc:	1f 93       	push	r17
    12fe:	df 93       	push	r29
    1300:	cf 93       	push	r28
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
    1306:	c4 55       	subi	r28, 0x54	; 84
    1308:	d0 40       	sbci	r29, 0x00	; 0
    130a:	0f b6       	in	r0, 0x3f	; 63
    130c:	f8 94       	cli
    130e:	de bf       	out	0x3e, r29	; 62
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	cd bf       	out	0x3d, r28	; 61
    1314:	fe 01       	movw	r30, r28
    1316:	ef 5a       	subi	r30, 0xAF	; 175
    1318:	ff 4f       	sbci	r31, 0xFF	; 255
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	a8 e4       	ldi	r26, 0x48	; 72
    1320:	b2 e4       	ldi	r27, 0x42	; 66
    1322:	80 83       	st	Z, r24
    1324:	91 83       	std	Z+1, r25	; 0x01
    1326:	a2 83       	std	Z+2, r26	; 0x02
    1328:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    132a:	8e 01       	movw	r16, r28
    132c:	03 5b       	subi	r16, 0xB3	; 179
    132e:	1f 4f       	sbci	r17, 0xFF	; 255
    1330:	fe 01       	movw	r30, r28
    1332:	ef 5a       	subi	r30, 0xAF	; 175
    1334:	ff 4f       	sbci	r31, 0xFF	; 255
    1336:	60 81       	ld	r22, Z
    1338:	71 81       	ldd	r23, Z+1	; 0x01
    133a:	82 81       	ldd	r24, Z+2	; 0x02
    133c:	93 81       	ldd	r25, Z+3	; 0x03
    133e:	20 e0       	ldi	r18, 0x00	; 0
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	4a ef       	ldi	r20, 0xFA	; 250
    1344:	54 e4       	ldi	r21, 0x44	; 68
    1346:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    134a:	dc 01       	movw	r26, r24
    134c:	cb 01       	movw	r24, r22
    134e:	f8 01       	movw	r30, r16
    1350:	80 83       	st	Z, r24
    1352:	91 83       	std	Z+1, r25	; 0x01
    1354:	a2 83       	std	Z+2, r26	; 0x02
    1356:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1358:	fe 01       	movw	r30, r28
    135a:	e3 5b       	subi	r30, 0xB3	; 179
    135c:	ff 4f       	sbci	r31, 0xFF	; 255
    135e:	60 81       	ld	r22, Z
    1360:	71 81       	ldd	r23, Z+1	; 0x01
    1362:	82 81       	ldd	r24, Z+2	; 0x02
    1364:	93 81       	ldd	r25, Z+3	; 0x03
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	40 e8       	ldi	r20, 0x80	; 128
    136c:	5f e3       	ldi	r21, 0x3F	; 63
    136e:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    1372:	88 23       	and	r24, r24
    1374:	44 f4       	brge	.+16     	; 0x1386 <CLCD_voidInit+0x8c>
		__ticks = 1;
    1376:	fe 01       	movw	r30, r28
    1378:	e5 5b       	subi	r30, 0xB5	; 181
    137a:	ff 4f       	sbci	r31, 0xFF	; 255
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	91 83       	std	Z+1, r25	; 0x01
    1382:	80 83       	st	Z, r24
    1384:	64 c0       	rjmp	.+200    	; 0x144e <CLCD_voidInit+0x154>
	else if (__tmp > 65535)
    1386:	fe 01       	movw	r30, r28
    1388:	e3 5b       	subi	r30, 0xB3	; 179
    138a:	ff 4f       	sbci	r31, 0xFF	; 255
    138c:	60 81       	ld	r22, Z
    138e:	71 81       	ldd	r23, Z+1	; 0x01
    1390:	82 81       	ldd	r24, Z+2	; 0x02
    1392:	93 81       	ldd	r25, Z+3	; 0x03
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	3f ef       	ldi	r19, 0xFF	; 255
    1398:	4f e7       	ldi	r20, 0x7F	; 127
    139a:	57 e4       	ldi	r21, 0x47	; 71
    139c:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    13a0:	18 16       	cp	r1, r24
    13a2:	0c f0       	brlt	.+2      	; 0x13a6 <CLCD_voidInit+0xac>
    13a4:	43 c0       	rjmp	.+134    	; 0x142c <CLCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13a6:	fe 01       	movw	r30, r28
    13a8:	ef 5a       	subi	r30, 0xAF	; 175
    13aa:	ff 4f       	sbci	r31, 0xFF	; 255
    13ac:	60 81       	ld	r22, Z
    13ae:	71 81       	ldd	r23, Z+1	; 0x01
    13b0:	82 81       	ldd	r24, Z+2	; 0x02
    13b2:	93 81       	ldd	r25, Z+3	; 0x03
    13b4:	20 e0       	ldi	r18, 0x00	; 0
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	40 e2       	ldi	r20, 0x20	; 32
    13ba:	51 e4       	ldi	r21, 0x41	; 65
    13bc:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	8e 01       	movw	r16, r28
    13c6:	05 5b       	subi	r16, 0xB5	; 181
    13c8:	1f 4f       	sbci	r17, 0xFF	; 255
    13ca:	bc 01       	movw	r22, r24
    13cc:	cd 01       	movw	r24, r26
    13ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d2:	dc 01       	movw	r26, r24
    13d4:	cb 01       	movw	r24, r22
    13d6:	f8 01       	movw	r30, r16
    13d8:	91 83       	std	Z+1, r25	; 0x01
    13da:	80 83       	st	Z, r24
    13dc:	1f c0       	rjmp	.+62     	; 0x141c <CLCD_voidInit+0x122>
    13de:	fe 01       	movw	r30, r28
    13e0:	e7 5b       	subi	r30, 0xB7	; 183
    13e2:	ff 4f       	sbci	r31, 0xFF	; 255
    13e4:	88 ec       	ldi	r24, 0xC8	; 200
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	91 83       	std	Z+1, r25	; 0x01
    13ea:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13ec:	fe 01       	movw	r30, r28
    13ee:	e7 5b       	subi	r30, 0xB7	; 183
    13f0:	ff 4f       	sbci	r31, 0xFF	; 255
    13f2:	80 81       	ld	r24, Z
    13f4:	91 81       	ldd	r25, Z+1	; 0x01
    13f6:	01 97       	sbiw	r24, 0x01	; 1
    13f8:	f1 f7       	brne	.-4      	; 0x13f6 <CLCD_voidInit+0xfc>
    13fa:	fe 01       	movw	r30, r28
    13fc:	e7 5b       	subi	r30, 0xB7	; 183
    13fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1400:	91 83       	std	Z+1, r25	; 0x01
    1402:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1404:	de 01       	movw	r26, r28
    1406:	a5 5b       	subi	r26, 0xB5	; 181
    1408:	bf 4f       	sbci	r27, 0xFF	; 255
    140a:	fe 01       	movw	r30, r28
    140c:	e5 5b       	subi	r30, 0xB5	; 181
    140e:	ff 4f       	sbci	r31, 0xFF	; 255
    1410:	80 81       	ld	r24, Z
    1412:	91 81       	ldd	r25, Z+1	; 0x01
    1414:	01 97       	sbiw	r24, 0x01	; 1
    1416:	11 96       	adiw	r26, 0x01	; 1
    1418:	9c 93       	st	X, r25
    141a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    141c:	fe 01       	movw	r30, r28
    141e:	e5 5b       	subi	r30, 0xB5	; 181
    1420:	ff 4f       	sbci	r31, 0xFF	; 255
    1422:	80 81       	ld	r24, Z
    1424:	91 81       	ldd	r25, Z+1	; 0x01
    1426:	00 97       	sbiw	r24, 0x00	; 0
    1428:	d1 f6       	brne	.-76     	; 0x13de <CLCD_voidInit+0xe4>
    142a:	27 c0       	rjmp	.+78     	; 0x147a <CLCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    142c:	8e 01       	movw	r16, r28
    142e:	05 5b       	subi	r16, 0xB5	; 181
    1430:	1f 4f       	sbci	r17, 0xFF	; 255
    1432:	fe 01       	movw	r30, r28
    1434:	e3 5b       	subi	r30, 0xB3	; 179
    1436:	ff 4f       	sbci	r31, 0xFF	; 255
    1438:	60 81       	ld	r22, Z
    143a:	71 81       	ldd	r23, Z+1	; 0x01
    143c:	82 81       	ldd	r24, Z+2	; 0x02
    143e:	93 81       	ldd	r25, Z+3	; 0x03
    1440:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1444:	dc 01       	movw	r26, r24
    1446:	cb 01       	movw	r24, r22
    1448:	f8 01       	movw	r30, r16
    144a:	91 83       	std	Z+1, r25	; 0x01
    144c:	80 83       	st	Z, r24
    144e:	de 01       	movw	r26, r28
    1450:	a9 5b       	subi	r26, 0xB9	; 185
    1452:	bf 4f       	sbci	r27, 0xFF	; 255
    1454:	fe 01       	movw	r30, r28
    1456:	e5 5b       	subi	r30, 0xB5	; 181
    1458:	ff 4f       	sbci	r31, 0xFF	; 255
    145a:	80 81       	ld	r24, Z
    145c:	91 81       	ldd	r25, Z+1	; 0x01
    145e:	8d 93       	st	X+, r24
    1460:	9c 93       	st	X, r25
    1462:	fe 01       	movw	r30, r28
    1464:	e9 5b       	subi	r30, 0xB9	; 185
    1466:	ff 4f       	sbci	r31, 0xFF	; 255
    1468:	80 81       	ld	r24, Z
    146a:	91 81       	ldd	r25, Z+1	; 0x01
    146c:	01 97       	sbiw	r24, 0x01	; 1
    146e:	f1 f7       	brne	.-4      	; 0x146c <CLCD_voidInit+0x172>
    1470:	fe 01       	movw	r30, r28
    1472:	e9 5b       	subi	r30, 0xB9	; 185
    1474:	ff 4f       	sbci	r31, 0xFF	; 255
    1476:	91 83       	std	Z+1, r25	; 0x01
    1478:	80 83       	st	Z, r24
    DIO_enumSetPinDirection(CLCD_DATA_PORT, DIO_PIN4, DIO_PIN_OUTPUT);
    DIO_enumSetPinDirection(CLCD_DATA_PORT, DIO_PIN5, DIO_PIN_OUTPUT);
    DIO_enumSetPinDirection(CLCD_DATA_PORT, DIO_PIN6, DIO_PIN_OUTPUT);
    DIO_enumSetPinDirection(CLCD_DATA_PORT, DIO_PIN7, DIO_PIN_OUTPUT);
#elif CLCD_DATA_NIBBLE == CLCD_LOW_NIBBLE
    DIO_enumSetPinDirection(CLCD_DATA_PORT, DIO_PIN0, DIO_PIN_OUTPUT);
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	60 e0       	ldi	r22, 0x00	; 0
    147e:	41 e0       	ldi	r20, 0x01	; 1
    1480:	0e 94 fe 24 	call	0x49fc	; 0x49fc <DIO_enumSetPinDirection>
    DIO_enumSetPinDirection(CLCD_DATA_PORT, DIO_PIN1, DIO_PIN_OUTPUT);
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	61 e0       	ldi	r22, 0x01	; 1
    1488:	41 e0       	ldi	r20, 0x01	; 1
    148a:	0e 94 fe 24 	call	0x49fc	; 0x49fc <DIO_enumSetPinDirection>
    DIO_enumSetPinDirection(CLCD_DATA_PORT, DIO_PIN2, DIO_PIN_OUTPUT);
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	62 e0       	ldi	r22, 0x02	; 2
    1492:	41 e0       	ldi	r20, 0x01	; 1
    1494:	0e 94 fe 24 	call	0x49fc	; 0x49fc <DIO_enumSetPinDirection>
    DIO_enumSetPinDirection(CLCD_DATA_PORT, DIO_PIN3, DIO_PIN_OUTPUT);
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	63 e0       	ldi	r22, 0x03	; 3
    149c:	41 e0       	ldi	r20, 0x01	; 1
    149e:	0e 94 fe 24 	call	0x49fc	; 0x49fc <DIO_enumSetPinDirection>
#else
#error "Wrong CLCD_DATA_NIBBLE Config"
#endif

    DIO_enumSetPinDirection(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_OUTPUT);
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	65 e0       	ldi	r22, 0x05	; 5
    14a6:	41 e0       	ldi	r20, 0x01	; 1
    14a8:	0e 94 fe 24 	call	0x49fc	; 0x49fc <DIO_enumSetPinDirection>
    DIO_enumSetPinDirection(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_OUTPUT);
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	66 e0       	ldi	r22, 0x06	; 6
    14b0:	41 e0       	ldi	r20, 0x01	; 1
    14b2:	0e 94 fe 24 	call	0x49fc	; 0x49fc <DIO_enumSetPinDirection>
    DIO_enumSetPinDirection(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_OUTPUT);
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	67 e0       	ldi	r22, 0x07	; 7
    14ba:	41 e0       	ldi	r20, 0x01	; 1
    14bc:	0e 94 fe 24 	call	0x49fc	; 0x49fc <DIO_enumSetPinDirection>

    CLCD_voidsendCommand(lcd_Home);
    14c0:	82 e0       	ldi	r24, 0x02	; 2
    14c2:	0e 94 67 0d 	call	0x1ace	; 0x1ace <CLCD_voidsendCommand>
    14c6:	fe 01       	movw	r30, r28
    14c8:	ed 5b       	subi	r30, 0xBD	; 189
    14ca:	ff 4f       	sbci	r31, 0xFF	; 255
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	a0 e2       	ldi	r26, 0x20	; 32
    14d2:	b1 e4       	ldi	r27, 0x41	; 65
    14d4:	80 83       	st	Z, r24
    14d6:	91 83       	std	Z+1, r25	; 0x01
    14d8:	a2 83       	std	Z+2, r26	; 0x02
    14da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14dc:	8e 01       	movw	r16, r28
    14de:	01 5c       	subi	r16, 0xC1	; 193
    14e0:	1f 4f       	sbci	r17, 0xFF	; 255
    14e2:	fe 01       	movw	r30, r28
    14e4:	ed 5b       	subi	r30, 0xBD	; 189
    14e6:	ff 4f       	sbci	r31, 0xFF	; 255
    14e8:	60 81       	ld	r22, Z
    14ea:	71 81       	ldd	r23, Z+1	; 0x01
    14ec:	82 81       	ldd	r24, Z+2	; 0x02
    14ee:	93 81       	ldd	r25, Z+3	; 0x03
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	4a ef       	ldi	r20, 0xFA	; 250
    14f6:	54 e4       	ldi	r21, 0x44	; 68
    14f8:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    14fc:	dc 01       	movw	r26, r24
    14fe:	cb 01       	movw	r24, r22
    1500:	f8 01       	movw	r30, r16
    1502:	80 83       	st	Z, r24
    1504:	91 83       	std	Z+1, r25	; 0x01
    1506:	a2 83       	std	Z+2, r26	; 0x02
    1508:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    150a:	fe 01       	movw	r30, r28
    150c:	ff 96       	adiw	r30, 0x3f	; 63
    150e:	60 81       	ld	r22, Z
    1510:	71 81       	ldd	r23, Z+1	; 0x01
    1512:	82 81       	ldd	r24, Z+2	; 0x02
    1514:	93 81       	ldd	r25, Z+3	; 0x03
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	40 e8       	ldi	r20, 0x80	; 128
    151c:	5f e3       	ldi	r21, 0x3F	; 63
    151e:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    1522:	88 23       	and	r24, r24
    1524:	2c f4       	brge	.+10     	; 0x1530 <CLCD_voidInit+0x236>
		__ticks = 1;
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	9e af       	std	Y+62, r25	; 0x3e
    152c:	8d af       	std	Y+61, r24	; 0x3d
    152e:	46 c0       	rjmp	.+140    	; 0x15bc <CLCD_voidInit+0x2c2>
	else if (__tmp > 65535)
    1530:	fe 01       	movw	r30, r28
    1532:	ff 96       	adiw	r30, 0x3f	; 63
    1534:	60 81       	ld	r22, Z
    1536:	71 81       	ldd	r23, Z+1	; 0x01
    1538:	82 81       	ldd	r24, Z+2	; 0x02
    153a:	93 81       	ldd	r25, Z+3	; 0x03
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	3f ef       	ldi	r19, 0xFF	; 255
    1540:	4f e7       	ldi	r20, 0x7F	; 127
    1542:	57 e4       	ldi	r21, 0x47	; 71
    1544:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    1548:	18 16       	cp	r1, r24
    154a:	64 f5       	brge	.+88     	; 0x15a4 <CLCD_voidInit+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    154c:	fe 01       	movw	r30, r28
    154e:	ed 5b       	subi	r30, 0xBD	; 189
    1550:	ff 4f       	sbci	r31, 0xFF	; 255
    1552:	60 81       	ld	r22, Z
    1554:	71 81       	ldd	r23, Z+1	; 0x01
    1556:	82 81       	ldd	r24, Z+2	; 0x02
    1558:	93 81       	ldd	r25, Z+3	; 0x03
    155a:	20 e0       	ldi	r18, 0x00	; 0
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	40 e2       	ldi	r20, 0x20	; 32
    1560:	51 e4       	ldi	r21, 0x41	; 65
    1562:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1566:	dc 01       	movw	r26, r24
    1568:	cb 01       	movw	r24, r22
    156a:	bc 01       	movw	r22, r24
    156c:	cd 01       	movw	r24, r26
    156e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1572:	dc 01       	movw	r26, r24
    1574:	cb 01       	movw	r24, r22
    1576:	9e af       	std	Y+62, r25	; 0x3e
    1578:	8d af       	std	Y+61, r24	; 0x3d
    157a:	0f c0       	rjmp	.+30     	; 0x159a <CLCD_voidInit+0x2a0>
    157c:	88 ec       	ldi	r24, 0xC8	; 200
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	9c af       	std	Y+60, r25	; 0x3c
    1582:	8b af       	std	Y+59, r24	; 0x3b
    1584:	8b ad       	ldd	r24, Y+59	; 0x3b
    1586:	9c ad       	ldd	r25, Y+60	; 0x3c
    1588:	01 97       	sbiw	r24, 0x01	; 1
    158a:	f1 f7       	brne	.-4      	; 0x1588 <CLCD_voidInit+0x28e>
    158c:	9c af       	std	Y+60, r25	; 0x3c
    158e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1590:	8d ad       	ldd	r24, Y+61	; 0x3d
    1592:	9e ad       	ldd	r25, Y+62	; 0x3e
    1594:	01 97       	sbiw	r24, 0x01	; 1
    1596:	9e af       	std	Y+62, r25	; 0x3e
    1598:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    159a:	8d ad       	ldd	r24, Y+61	; 0x3d
    159c:	9e ad       	ldd	r25, Y+62	; 0x3e
    159e:	00 97       	sbiw	r24, 0x00	; 0
    15a0:	69 f7       	brne	.-38     	; 0x157c <CLCD_voidInit+0x282>
    15a2:	16 c0       	rjmp	.+44     	; 0x15d0 <CLCD_voidInit+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15a4:	fe 01       	movw	r30, r28
    15a6:	ff 96       	adiw	r30, 0x3f	; 63
    15a8:	60 81       	ld	r22, Z
    15aa:	71 81       	ldd	r23, Z+1	; 0x01
    15ac:	82 81       	ldd	r24, Z+2	; 0x02
    15ae:	93 81       	ldd	r25, Z+3	; 0x03
    15b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b4:	dc 01       	movw	r26, r24
    15b6:	cb 01       	movw	r24, r22
    15b8:	9e af       	std	Y+62, r25	; 0x3e
    15ba:	8d af       	std	Y+61, r24	; 0x3d
    15bc:	8d ad       	ldd	r24, Y+61	; 0x3d
    15be:	9e ad       	ldd	r25, Y+62	; 0x3e
    15c0:	9a af       	std	Y+58, r25	; 0x3a
    15c2:	89 af       	std	Y+57, r24	; 0x39
    15c4:	89 ad       	ldd	r24, Y+57	; 0x39
    15c6:	9a ad       	ldd	r25, Y+58	; 0x3a
    15c8:	01 97       	sbiw	r24, 0x01	; 1
    15ca:	f1 f7       	brne	.-4      	; 0x15c8 <CLCD_voidInit+0x2ce>
    15cc:	9a af       	std	Y+58, r25	; 0x3a
    15ce:	89 af       	std	Y+57, r24	; 0x39
    _delay_ms(10);

    CLCD_voidsendCommand(4);
    15d0:	84 e0       	ldi	r24, 0x04	; 4
    15d2:	0e 94 67 0d 	call	0x1ace	; 0x1ace <CLCD_voidsendCommand>
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	a0 e0       	ldi	r26, 0x00	; 0
    15dc:	b0 e4       	ldi	r27, 0x40	; 64
    15de:	8d ab       	std	Y+53, r24	; 0x35
    15e0:	9e ab       	std	Y+54, r25	; 0x36
    15e2:	af ab       	std	Y+55, r26	; 0x37
    15e4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15e6:	6d a9       	ldd	r22, Y+53	; 0x35
    15e8:	7e a9       	ldd	r23, Y+54	; 0x36
    15ea:	8f a9       	ldd	r24, Y+55	; 0x37
    15ec:	98 ad       	ldd	r25, Y+56	; 0x38
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	4a ef       	ldi	r20, 0xFA	; 250
    15f4:	54 e4       	ldi	r21, 0x44	; 68
    15f6:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    15fa:	dc 01       	movw	r26, r24
    15fc:	cb 01       	movw	r24, r22
    15fe:	89 ab       	std	Y+49, r24	; 0x31
    1600:	9a ab       	std	Y+50, r25	; 0x32
    1602:	ab ab       	std	Y+51, r26	; 0x33
    1604:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1606:	69 a9       	ldd	r22, Y+49	; 0x31
    1608:	7a a9       	ldd	r23, Y+50	; 0x32
    160a:	8b a9       	ldd	r24, Y+51	; 0x33
    160c:	9c a9       	ldd	r25, Y+52	; 0x34
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	40 e8       	ldi	r20, 0x80	; 128
    1614:	5f e3       	ldi	r21, 0x3F	; 63
    1616:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    161a:	88 23       	and	r24, r24
    161c:	2c f4       	brge	.+10     	; 0x1628 <CLCD_voidInit+0x32e>
		__ticks = 1;
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	98 ab       	std	Y+48, r25	; 0x30
    1624:	8f a7       	std	Y+47, r24	; 0x2f
    1626:	3f c0       	rjmp	.+126    	; 0x16a6 <CLCD_voidInit+0x3ac>
	else if (__tmp > 65535)
    1628:	69 a9       	ldd	r22, Y+49	; 0x31
    162a:	7a a9       	ldd	r23, Y+50	; 0x32
    162c:	8b a9       	ldd	r24, Y+51	; 0x33
    162e:	9c a9       	ldd	r25, Y+52	; 0x34
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	3f ef       	ldi	r19, 0xFF	; 255
    1634:	4f e7       	ldi	r20, 0x7F	; 127
    1636:	57 e4       	ldi	r21, 0x47	; 71
    1638:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    163c:	18 16       	cp	r1, r24
    163e:	4c f5       	brge	.+82     	; 0x1692 <CLCD_voidInit+0x398>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1640:	6d a9       	ldd	r22, Y+53	; 0x35
    1642:	7e a9       	ldd	r23, Y+54	; 0x36
    1644:	8f a9       	ldd	r24, Y+55	; 0x37
    1646:	98 ad       	ldd	r25, Y+56	; 0x38
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	40 e2       	ldi	r20, 0x20	; 32
    164e:	51 e4       	ldi	r21, 0x41	; 65
    1650:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1654:	dc 01       	movw	r26, r24
    1656:	cb 01       	movw	r24, r22
    1658:	bc 01       	movw	r22, r24
    165a:	cd 01       	movw	r24, r26
    165c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1660:	dc 01       	movw	r26, r24
    1662:	cb 01       	movw	r24, r22
    1664:	98 ab       	std	Y+48, r25	; 0x30
    1666:	8f a7       	std	Y+47, r24	; 0x2f
    1668:	0f c0       	rjmp	.+30     	; 0x1688 <CLCD_voidInit+0x38e>
    166a:	88 ec       	ldi	r24, 0xC8	; 200
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	9e a7       	std	Y+46, r25	; 0x2e
    1670:	8d a7       	std	Y+45, r24	; 0x2d
    1672:	8d a5       	ldd	r24, Y+45	; 0x2d
    1674:	9e a5       	ldd	r25, Y+46	; 0x2e
    1676:	01 97       	sbiw	r24, 0x01	; 1
    1678:	f1 f7       	brne	.-4      	; 0x1676 <CLCD_voidInit+0x37c>
    167a:	9e a7       	std	Y+46, r25	; 0x2e
    167c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    167e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1680:	98 a9       	ldd	r25, Y+48	; 0x30
    1682:	01 97       	sbiw	r24, 0x01	; 1
    1684:	98 ab       	std	Y+48, r25	; 0x30
    1686:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1688:	8f a5       	ldd	r24, Y+47	; 0x2f
    168a:	98 a9       	ldd	r25, Y+48	; 0x30
    168c:	00 97       	sbiw	r24, 0x00	; 0
    168e:	69 f7       	brne	.-38     	; 0x166a <CLCD_voidInit+0x370>
    1690:	14 c0       	rjmp	.+40     	; 0x16ba <CLCD_voidInit+0x3c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1692:	69 a9       	ldd	r22, Y+49	; 0x31
    1694:	7a a9       	ldd	r23, Y+50	; 0x32
    1696:	8b a9       	ldd	r24, Y+51	; 0x33
    1698:	9c a9       	ldd	r25, Y+52	; 0x34
    169a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	98 ab       	std	Y+48, r25	; 0x30
    16a4:	8f a7       	std	Y+47, r24	; 0x2f
    16a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    16a8:	98 a9       	ldd	r25, Y+48	; 0x30
    16aa:	9c a7       	std	Y+44, r25	; 0x2c
    16ac:	8b a7       	std	Y+43, r24	; 0x2b
    16ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    16b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    16b2:	01 97       	sbiw	r24, 0x01	; 1
    16b4:	f1 f7       	brne	.-4      	; 0x16b2 <CLCD_voidInit+0x3b8>
    16b6:	9c a7       	std	Y+44, r25	; 0x2c
    16b8:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(2);

    CLCD_voidsendCommand(CLCD_DISPLAY_CURSOR);
    16ba:	8e e0       	ldi	r24, 0x0E	; 14
    16bc:	0e 94 67 0d 	call	0x1ace	; 0x1ace <CLCD_voidsendCommand>
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	a0 e0       	ldi	r26, 0x00	; 0
    16c6:	b0 e4       	ldi	r27, 0x40	; 64
    16c8:	8f a3       	std	Y+39, r24	; 0x27
    16ca:	98 a7       	std	Y+40, r25	; 0x28
    16cc:	a9 a7       	std	Y+41, r26	; 0x29
    16ce:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16d0:	6f a1       	ldd	r22, Y+39	; 0x27
    16d2:	78 a5       	ldd	r23, Y+40	; 0x28
    16d4:	89 a5       	ldd	r24, Y+41	; 0x29
    16d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	4a ef       	ldi	r20, 0xFA	; 250
    16de:	54 e4       	ldi	r21, 0x44	; 68
    16e0:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	8b a3       	std	Y+35, r24	; 0x23
    16ea:	9c a3       	std	Y+36, r25	; 0x24
    16ec:	ad a3       	std	Y+37, r26	; 0x25
    16ee:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    16f0:	6b a1       	ldd	r22, Y+35	; 0x23
    16f2:	7c a1       	ldd	r23, Y+36	; 0x24
    16f4:	8d a1       	ldd	r24, Y+37	; 0x25
    16f6:	9e a1       	ldd	r25, Y+38	; 0x26
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	40 e8       	ldi	r20, 0x80	; 128
    16fe:	5f e3       	ldi	r21, 0x3F	; 63
    1700:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    1704:	88 23       	and	r24, r24
    1706:	2c f4       	brge	.+10     	; 0x1712 <CLCD_voidInit+0x418>
		__ticks = 1;
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	9a a3       	std	Y+34, r25	; 0x22
    170e:	89 a3       	std	Y+33, r24	; 0x21
    1710:	3f c0       	rjmp	.+126    	; 0x1790 <CLCD_voidInit+0x496>
	else if (__tmp > 65535)
    1712:	6b a1       	ldd	r22, Y+35	; 0x23
    1714:	7c a1       	ldd	r23, Y+36	; 0x24
    1716:	8d a1       	ldd	r24, Y+37	; 0x25
    1718:	9e a1       	ldd	r25, Y+38	; 0x26
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	3f ef       	ldi	r19, 0xFF	; 255
    171e:	4f e7       	ldi	r20, 0x7F	; 127
    1720:	57 e4       	ldi	r21, 0x47	; 71
    1722:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    1726:	18 16       	cp	r1, r24
    1728:	4c f5       	brge	.+82     	; 0x177c <CLCD_voidInit+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    172a:	6f a1       	ldd	r22, Y+39	; 0x27
    172c:	78 a5       	ldd	r23, Y+40	; 0x28
    172e:	89 a5       	ldd	r24, Y+41	; 0x29
    1730:	9a a5       	ldd	r25, Y+42	; 0x2a
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	40 e2       	ldi	r20, 0x20	; 32
    1738:	51 e4       	ldi	r21, 0x41	; 65
    173a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	bc 01       	movw	r22, r24
    1744:	cd 01       	movw	r24, r26
    1746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	9a a3       	std	Y+34, r25	; 0x22
    1750:	89 a3       	std	Y+33, r24	; 0x21
    1752:	0f c0       	rjmp	.+30     	; 0x1772 <CLCD_voidInit+0x478>
    1754:	88 ec       	ldi	r24, 0xC8	; 200
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	98 a3       	std	Y+32, r25	; 0x20
    175a:	8f 8f       	std	Y+31, r24	; 0x1f
    175c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    175e:	98 a1       	ldd	r25, Y+32	; 0x20
    1760:	01 97       	sbiw	r24, 0x01	; 1
    1762:	f1 f7       	brne	.-4      	; 0x1760 <CLCD_voidInit+0x466>
    1764:	98 a3       	std	Y+32, r25	; 0x20
    1766:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1768:	89 a1       	ldd	r24, Y+33	; 0x21
    176a:	9a a1       	ldd	r25, Y+34	; 0x22
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	9a a3       	std	Y+34, r25	; 0x22
    1770:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1772:	89 a1       	ldd	r24, Y+33	; 0x21
    1774:	9a a1       	ldd	r25, Y+34	; 0x22
    1776:	00 97       	sbiw	r24, 0x00	; 0
    1778:	69 f7       	brne	.-38     	; 0x1754 <CLCD_voidInit+0x45a>
    177a:	14 c0       	rjmp	.+40     	; 0x17a4 <CLCD_voidInit+0x4aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    177c:	6b a1       	ldd	r22, Y+35	; 0x23
    177e:	7c a1       	ldd	r23, Y+36	; 0x24
    1780:	8d a1       	ldd	r24, Y+37	; 0x25
    1782:	9e a1       	ldd	r25, Y+38	; 0x26
    1784:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	9a a3       	std	Y+34, r25	; 0x22
    178e:	89 a3       	std	Y+33, r24	; 0x21
    1790:	89 a1       	ldd	r24, Y+33	; 0x21
    1792:	9a a1       	ldd	r25, Y+34	; 0x22
    1794:	9e 8f       	std	Y+30, r25	; 0x1e
    1796:	8d 8f       	std	Y+29, r24	; 0x1d
    1798:	8d 8d       	ldd	r24, Y+29	; 0x1d
    179a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	f1 f7       	brne	.-4      	; 0x179c <CLCD_voidInit+0x4a2>
    17a0:	9e 8f       	std	Y+30, r25	; 0x1e
    17a2:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(2);

    CLCD_voidClearScreen();
    17a4:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidClearScreen>
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	a0 e0       	ldi	r26, 0x00	; 0
    17ae:	b0 e4       	ldi	r27, 0x40	; 64
    17b0:	89 8f       	std	Y+25, r24	; 0x19
    17b2:	9a 8f       	std	Y+26, r25	; 0x1a
    17b4:	ab 8f       	std	Y+27, r26	; 0x1b
    17b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b8:	69 8d       	ldd	r22, Y+25	; 0x19
    17ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	4a ef       	ldi	r20, 0xFA	; 250
    17c6:	54 e4       	ldi	r21, 0x44	; 68
    17c8:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    17cc:	dc 01       	movw	r26, r24
    17ce:	cb 01       	movw	r24, r22
    17d0:	8d 8b       	std	Y+21, r24	; 0x15
    17d2:	9e 8b       	std	Y+22, r25	; 0x16
    17d4:	af 8b       	std	Y+23, r26	; 0x17
    17d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17d8:	6d 89       	ldd	r22, Y+21	; 0x15
    17da:	7e 89       	ldd	r23, Y+22	; 0x16
    17dc:	8f 89       	ldd	r24, Y+23	; 0x17
    17de:	98 8d       	ldd	r25, Y+24	; 0x18
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	40 e8       	ldi	r20, 0x80	; 128
    17e6:	5f e3       	ldi	r21, 0x3F	; 63
    17e8:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    17ec:	88 23       	and	r24, r24
    17ee:	2c f4       	brge	.+10     	; 0x17fa <CLCD_voidInit+0x500>
		__ticks = 1;
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	9c 8b       	std	Y+20, r25	; 0x14
    17f6:	8b 8b       	std	Y+19, r24	; 0x13
    17f8:	3f c0       	rjmp	.+126    	; 0x1878 <CLCD_voidInit+0x57e>
	else if (__tmp > 65535)
    17fa:	6d 89       	ldd	r22, Y+21	; 0x15
    17fc:	7e 89       	ldd	r23, Y+22	; 0x16
    17fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1800:	98 8d       	ldd	r25, Y+24	; 0x18
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	3f ef       	ldi	r19, 0xFF	; 255
    1806:	4f e7       	ldi	r20, 0x7F	; 127
    1808:	57 e4       	ldi	r21, 0x47	; 71
    180a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    180e:	18 16       	cp	r1, r24
    1810:	4c f5       	brge	.+82     	; 0x1864 <CLCD_voidInit+0x56a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1812:	69 8d       	ldd	r22, Y+25	; 0x19
    1814:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1816:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1818:	9c 8d       	ldd	r25, Y+28	; 0x1c
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	40 e2       	ldi	r20, 0x20	; 32
    1820:	51 e4       	ldi	r21, 0x41	; 65
    1822:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	bc 01       	movw	r22, r24
    182c:	cd 01       	movw	r24, r26
    182e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	9c 8b       	std	Y+20, r25	; 0x14
    1838:	8b 8b       	std	Y+19, r24	; 0x13
    183a:	0f c0       	rjmp	.+30     	; 0x185a <CLCD_voidInit+0x560>
    183c:	88 ec       	ldi	r24, 0xC8	; 200
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	9a 8b       	std	Y+18, r25	; 0x12
    1842:	89 8b       	std	Y+17, r24	; 0x11
    1844:	89 89       	ldd	r24, Y+17	; 0x11
    1846:	9a 89       	ldd	r25, Y+18	; 0x12
    1848:	01 97       	sbiw	r24, 0x01	; 1
    184a:	f1 f7       	brne	.-4      	; 0x1848 <CLCD_voidInit+0x54e>
    184c:	9a 8b       	std	Y+18, r25	; 0x12
    184e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1850:	8b 89       	ldd	r24, Y+19	; 0x13
    1852:	9c 89       	ldd	r25, Y+20	; 0x14
    1854:	01 97       	sbiw	r24, 0x01	; 1
    1856:	9c 8b       	std	Y+20, r25	; 0x14
    1858:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    185a:	8b 89       	ldd	r24, Y+19	; 0x13
    185c:	9c 89       	ldd	r25, Y+20	; 0x14
    185e:	00 97       	sbiw	r24, 0x00	; 0
    1860:	69 f7       	brne	.-38     	; 0x183c <CLCD_voidInit+0x542>
    1862:	14 c0       	rjmp	.+40     	; 0x188c <CLCD_voidInit+0x592>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1864:	6d 89       	ldd	r22, Y+21	; 0x15
    1866:	7e 89       	ldd	r23, Y+22	; 0x16
    1868:	8f 89       	ldd	r24, Y+23	; 0x17
    186a:	98 8d       	ldd	r25, Y+24	; 0x18
    186c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	9c 8b       	std	Y+20, r25	; 0x14
    1876:	8b 8b       	std	Y+19, r24	; 0x13
    1878:	8b 89       	ldd	r24, Y+19	; 0x13
    187a:	9c 89       	ldd	r25, Y+20	; 0x14
    187c:	98 8b       	std	Y+16, r25	; 0x10
    187e:	8f 87       	std	Y+15, r24	; 0x0f
    1880:	8f 85       	ldd	r24, Y+15	; 0x0f
    1882:	98 89       	ldd	r25, Y+16	; 0x10
    1884:	01 97       	sbiw	r24, 0x01	; 1
    1886:	f1 f7       	brne	.-4      	; 0x1884 <CLCD_voidInit+0x58a>
    1888:	98 8b       	std	Y+16, r25	; 0x10
    188a:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);

    CLCD_voidsendCommand(lcd_EntryMode);
    188c:	86 e0       	ldi	r24, 0x06	; 6
    188e:	0e 94 67 0d 	call	0x1ace	; 0x1ace <CLCD_voidsendCommand>
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	a0 e0       	ldi	r26, 0x00	; 0
    1898:	b0 e4       	ldi	r27, 0x40	; 64
    189a:	8b 87       	std	Y+11, r24	; 0x0b
    189c:	9c 87       	std	Y+12, r25	; 0x0c
    189e:	ad 87       	std	Y+13, r26	; 0x0d
    18a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    18a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    18a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    18a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	4a ef       	ldi	r20, 0xFA	; 250
    18b0:	54 e4       	ldi	r21, 0x44	; 68
    18b2:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    18b6:	dc 01       	movw	r26, r24
    18b8:	cb 01       	movw	r24, r22
    18ba:	8f 83       	std	Y+7, r24	; 0x07
    18bc:	98 87       	std	Y+8, r25	; 0x08
    18be:	a9 87       	std	Y+9, r26	; 0x09
    18c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18c2:	6f 81       	ldd	r22, Y+7	; 0x07
    18c4:	78 85       	ldd	r23, Y+8	; 0x08
    18c6:	89 85       	ldd	r24, Y+9	; 0x09
    18c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	40 e8       	ldi	r20, 0x80	; 128
    18d0:	5f e3       	ldi	r21, 0x3F	; 63
    18d2:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    18d6:	88 23       	and	r24, r24
    18d8:	2c f4       	brge	.+10     	; 0x18e4 <CLCD_voidInit+0x5ea>
		__ticks = 1;
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	9e 83       	std	Y+6, r25	; 0x06
    18e0:	8d 83       	std	Y+5, r24	; 0x05
    18e2:	3f c0       	rjmp	.+126    	; 0x1962 <CLCD_voidInit+0x668>
	else if (__tmp > 65535)
    18e4:	6f 81       	ldd	r22, Y+7	; 0x07
    18e6:	78 85       	ldd	r23, Y+8	; 0x08
    18e8:	89 85       	ldd	r24, Y+9	; 0x09
    18ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	3f ef       	ldi	r19, 0xFF	; 255
    18f0:	4f e7       	ldi	r20, 0x7F	; 127
    18f2:	57 e4       	ldi	r21, 0x47	; 71
    18f4:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    18f8:	18 16       	cp	r1, r24
    18fa:	4c f5       	brge	.+82     	; 0x194e <CLCD_voidInit+0x654>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    18fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1900:	8d 85       	ldd	r24, Y+13	; 0x0d
    1902:	9e 85       	ldd	r25, Y+14	; 0x0e
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	40 e2       	ldi	r20, 0x20	; 32
    190a:	51 e4       	ldi	r21, 0x41	; 65
    190c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	bc 01       	movw	r22, r24
    1916:	cd 01       	movw	r24, r26
    1918:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	9e 83       	std	Y+6, r25	; 0x06
    1922:	8d 83       	std	Y+5, r24	; 0x05
    1924:	0f c0       	rjmp	.+30     	; 0x1944 <CLCD_voidInit+0x64a>
    1926:	88 ec       	ldi	r24, 0xC8	; 200
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	9c 83       	std	Y+4, r25	; 0x04
    192c:	8b 83       	std	Y+3, r24	; 0x03
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	9c 81       	ldd	r25, Y+4	; 0x04
    1932:	01 97       	sbiw	r24, 0x01	; 1
    1934:	f1 f7       	brne	.-4      	; 0x1932 <CLCD_voidInit+0x638>
    1936:	9c 83       	std	Y+4, r25	; 0x04
    1938:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    193a:	8d 81       	ldd	r24, Y+5	; 0x05
    193c:	9e 81       	ldd	r25, Y+6	; 0x06
    193e:	01 97       	sbiw	r24, 0x01	; 1
    1940:	9e 83       	std	Y+6, r25	; 0x06
    1942:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1944:	8d 81       	ldd	r24, Y+5	; 0x05
    1946:	9e 81       	ldd	r25, Y+6	; 0x06
    1948:	00 97       	sbiw	r24, 0x00	; 0
    194a:	69 f7       	brne	.-38     	; 0x1926 <CLCD_voidInit+0x62c>
    194c:	14 c0       	rjmp	.+40     	; 0x1976 <CLCD_voidInit+0x67c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    194e:	6f 81       	ldd	r22, Y+7	; 0x07
    1950:	78 85       	ldd	r23, Y+8	; 0x08
    1952:	89 85       	ldd	r24, Y+9	; 0x09
    1954:	9a 85       	ldd	r25, Y+10	; 0x0a
    1956:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    195a:	dc 01       	movw	r26, r24
    195c:	cb 01       	movw	r24, r22
    195e:	9e 83       	std	Y+6, r25	; 0x06
    1960:	8d 83       	std	Y+5, r24	; 0x05
    1962:	8d 81       	ldd	r24, Y+5	; 0x05
    1964:	9e 81       	ldd	r25, Y+6	; 0x06
    1966:	9a 83       	std	Y+2, r25	; 0x02
    1968:	89 83       	std	Y+1, r24	; 0x01
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	9a 81       	ldd	r25, Y+2	; 0x02
    196e:	01 97       	sbiw	r24, 0x01	; 1
    1970:	f1 f7       	brne	.-4      	; 0x196e <CLCD_voidInit+0x674>
    1972:	9a 83       	std	Y+2, r25	; 0x02
    1974:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
#else
#error "Wrong CLCD_MODE config"
#endif
}
    1976:	cc 5a       	subi	r28, 0xAC	; 172
    1978:	df 4f       	sbci	r29, 0xFF	; 255
    197a:	0f b6       	in	r0, 0x3f	; 63
    197c:	f8 94       	cli
    197e:	de bf       	out	0x3e, r29	; 62
    1980:	0f be       	out	0x3f, r0	; 63
    1982:	cd bf       	out	0x3d, r28	; 61
    1984:	cf 91       	pop	r28
    1986:	df 91       	pop	r29
    1988:	1f 91       	pop	r17
    198a:	0f 91       	pop	r16
    198c:	08 95       	ret

0000198e <CLCD_voidsendData>:

void CLCD_voidsendData(u8 copy_u8D1ata) {
    198e:	df 93       	push	r29
    1990:	cf 93       	push	r28
    1992:	cd b7       	in	r28, 0x3d	; 61
    1994:	de b7       	in	r29, 0x3e	; 62
    1996:	2f 97       	sbiw	r28, 0x0f	; 15
    1998:	0f b6       	in	r0, 0x3f	; 63
    199a:	f8 94       	cli
    199c:	de bf       	out	0x3e, r29	; 62
    199e:	0f be       	out	0x3f, r0	; 63
    19a0:	cd bf       	out	0x3d, r28	; 61
    19a2:	8f 87       	std	Y+15, r24	; 0x0f
    DIO_enumWritePortValue(CLCD_DATA_PORT, copy_u8D1ata);
    DIO_enumWritePinValue(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_HIGH);
    DIO_enumWritePinValue(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_LOW);
    CLCD_voidSendFallingEdge();
#elif CLCD_MODE == 4
    DIO_enumWritePinValue(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_HIGH);
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	65 e0       	ldi	r22, 0x05	; 5
    19a8:	41 e0       	ldi	r20, 0x01	; 1
    19aa:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <DIO_enumWritePinValue>
    DIO_enumWritePinValue(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_LOW);
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	66 e0       	ldi	r22, 0x06	; 6
    19b2:	40 e0       	ldi	r20, 0x00	; 0
    19b4:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <DIO_enumWritePinValue>
    DIO_vWriteHighNibble(CLCD_DATA_PORT, (copy_u8D1ata >> 4));
    CLCD_voidSendFallingEdge();
    DIO_vWriteHighNibble(CLCD_DATA_PORT, copy_u8D1ata);
    CLCD_voidSendFallingEdge();
#elif CLCD_DATA_NIBBLE == CLCD_LOW_NIBBLE
    DIO_vWriteLowNibble(CLCD_DATA_PORT, (copy_u8D1ata >> 4));
    19b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    19ba:	98 2f       	mov	r25, r24
    19bc:	92 95       	swap	r25
    19be:	9f 70       	andi	r25, 0x0F	; 15
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	69 2f       	mov	r22, r25
    19c4:	0e 94 0a 2b 	call	0x5614	; 0x5614 <DIO_vWriteLowNibble>
    CLCD_voidSendFallingEdge();
    19c8:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <CLCD_voidSendFallingEdge>
    DIO_vWriteLowNibble(CLCD_DATA_PORT, copy_u8D1ata);
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	6f 85       	ldd	r22, Y+15	; 0x0f
    19d0:	0e 94 0a 2b 	call	0x5614	; 0x5614 <DIO_vWriteLowNibble>
    CLCD_voidSendFallingEdge();
    19d4:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <CLCD_voidSendFallingEdge>
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	a0 e0       	ldi	r26, 0x00	; 0
    19de:	b0 e4       	ldi	r27, 0x40	; 64
    19e0:	8b 87       	std	Y+11, r24	; 0x0b
    19e2:	9c 87       	std	Y+12, r25	; 0x0c
    19e4:	ad 87       	std	Y+13, r26	; 0x0d
    19e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	4a ef       	ldi	r20, 0xFA	; 250
    19f6:	54 e4       	ldi	r21, 0x44	; 68
    19f8:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	8f 83       	std	Y+7, r24	; 0x07
    1a02:	98 87       	std	Y+8, r25	; 0x08
    1a04:	a9 87       	std	Y+9, r26	; 0x09
    1a06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a08:	6f 81       	ldd	r22, Y+7	; 0x07
    1a0a:	78 85       	ldd	r23, Y+8	; 0x08
    1a0c:	89 85       	ldd	r24, Y+9	; 0x09
    1a0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	40 e8       	ldi	r20, 0x80	; 128
    1a16:	5f e3       	ldi	r21, 0x3F	; 63
    1a18:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    1a1c:	88 23       	and	r24, r24
    1a1e:	2c f4       	brge	.+10     	; 0x1a2a <CLCD_voidsendData+0x9c>
		__ticks = 1;
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	9e 83       	std	Y+6, r25	; 0x06
    1a26:	8d 83       	std	Y+5, r24	; 0x05
    1a28:	3f c0       	rjmp	.+126    	; 0x1aa8 <CLCD_voidsendData+0x11a>
	else if (__tmp > 65535)
    1a2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a2c:	78 85       	ldd	r23, Y+8	; 0x08
    1a2e:	89 85       	ldd	r24, Y+9	; 0x09
    1a30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	3f ef       	ldi	r19, 0xFF	; 255
    1a36:	4f e7       	ldi	r20, 0x7F	; 127
    1a38:	57 e4       	ldi	r21, 0x47	; 71
    1a3a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    1a3e:	18 16       	cp	r1, r24
    1a40:	4c f5       	brge	.+82     	; 0x1a94 <CLCD_voidsendData+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a42:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a44:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a48:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	40 e2       	ldi	r20, 0x20	; 32
    1a50:	51 e4       	ldi	r21, 0x41	; 65
    1a52:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	bc 01       	movw	r22, r24
    1a5c:	cd 01       	movw	r24, r26
    1a5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	9e 83       	std	Y+6, r25	; 0x06
    1a68:	8d 83       	std	Y+5, r24	; 0x05
    1a6a:	0f c0       	rjmp	.+30     	; 0x1a8a <CLCD_voidsendData+0xfc>
    1a6c:	88 ec       	ldi	r24, 0xC8	; 200
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	9c 83       	std	Y+4, r25	; 0x04
    1a72:	8b 83       	std	Y+3, r24	; 0x03
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	9c 81       	ldd	r25, Y+4	; 0x04
    1a78:	01 97       	sbiw	r24, 0x01	; 1
    1a7a:	f1 f7       	brne	.-4      	; 0x1a78 <CLCD_voidsendData+0xea>
    1a7c:	9c 83       	std	Y+4, r25	; 0x04
    1a7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a80:	8d 81       	ldd	r24, Y+5	; 0x05
    1a82:	9e 81       	ldd	r25, Y+6	; 0x06
    1a84:	01 97       	sbiw	r24, 0x01	; 1
    1a86:	9e 83       	std	Y+6, r25	; 0x06
    1a88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a8e:	00 97       	sbiw	r24, 0x00	; 0
    1a90:	69 f7       	brne	.-38     	; 0x1a6c <CLCD_voidsendData+0xde>
    1a92:	14 c0       	rjmp	.+40     	; 0x1abc <CLCD_voidsendData+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a94:	6f 81       	ldd	r22, Y+7	; 0x07
    1a96:	78 85       	ldd	r23, Y+8	; 0x08
    1a98:	89 85       	ldd	r24, Y+9	; 0x09
    1a9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	9e 83       	std	Y+6, r25	; 0x06
    1aa6:	8d 83       	std	Y+5, r24	; 0x05
    1aa8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aaa:	9e 81       	ldd	r25, Y+6	; 0x06
    1aac:	9a 83       	std	Y+2, r25	; 0x02
    1aae:	89 83       	std	Y+1, r24	; 0x01
    1ab0:	89 81       	ldd	r24, Y+1	; 0x01
    1ab2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
    1ab6:	f1 f7       	brne	.-4      	; 0x1ab4 <CLCD_voidsendData+0x126>
    1ab8:	9a 83       	std	Y+2, r25	; 0x02
    1aba:	89 83       	std	Y+1, r24	; 0x01
#endif
#else
#error "Wrong CLCD_MODE config"
#endif
    _delay_ms(2);
}
    1abc:	2f 96       	adiw	r28, 0x0f	; 15
    1abe:	0f b6       	in	r0, 0x3f	; 63
    1ac0:	f8 94       	cli
    1ac2:	de bf       	out	0x3e, r29	; 62
    1ac4:	0f be       	out	0x3f, r0	; 63
    1ac6:	cd bf       	out	0x3d, r28	; 61
    1ac8:	cf 91       	pop	r28
    1aca:	df 91       	pop	r29
    1acc:	08 95       	ret

00001ace <CLCD_voidsendCommand>:

void CLCD_voidsendCommand(u8 copy_u8Command) {
    1ace:	df 93       	push	r29
    1ad0:	cf 93       	push	r28
    1ad2:	cd b7       	in	r28, 0x3d	; 61
    1ad4:	de b7       	in	r29, 0x3e	; 62
    1ad6:	2f 97       	sbiw	r28, 0x0f	; 15
    1ad8:	0f b6       	in	r0, 0x3f	; 63
    1ada:	f8 94       	cli
    1adc:	de bf       	out	0x3e, r29	; 62
    1ade:	0f be       	out	0x3f, r0	; 63
    1ae0:	cd bf       	out	0x3d, r28	; 61
    1ae2:	8f 87       	std	Y+15, r24	; 0x0f
    DIO_enumWritePortValue(CLCD_DATA_PORT, copy_u8Command);
    DIO_enumWritePinValue(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_LOW);
    DIO_enumWritePinValue(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_LOW);
    CLCD_voidSendFallingEdge();
#elif CLCD_MODE == 4
    DIO_enumWritePinValue(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_LOW);
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	65 e0       	ldi	r22, 0x05	; 5
    1ae8:	40 e0       	ldi	r20, 0x00	; 0
    1aea:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <DIO_enumWritePinValue>
    DIO_enumWritePinValue(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_LOW);
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	66 e0       	ldi	r22, 0x06	; 6
    1af2:	40 e0       	ldi	r20, 0x00	; 0
    1af4:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <DIO_enumWritePinValue>
    DIO_vWriteHighNibble(CLCD_DATA_PORT, (copy_u8Command >> 4));
    CLCD_voidSendFallingEdge();
    DIO_vWriteHighNibble(CLCD_DATA_PORT, copy_u8Command);
    CLCD_voidSendFallingEdge();
#elif CLCD_DATA_NIBBLE == CLCD_LOW_NIBBLE
    DIO_vWriteLowNibble(CLCD_DATA_PORT, (copy_u8Command >> 4));
    1af8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1afa:	98 2f       	mov	r25, r24
    1afc:	92 95       	swap	r25
    1afe:	9f 70       	andi	r25, 0x0F	; 15
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	69 2f       	mov	r22, r25
    1b04:	0e 94 0a 2b 	call	0x5614	; 0x5614 <DIO_vWriteLowNibble>
    CLCD_voidSendFallingEdge();
    1b08:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <CLCD_voidSendFallingEdge>
    DIO_vWriteLowNibble(CLCD_DATA_PORT, copy_u8Command);
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1b10:	0e 94 0a 2b 	call	0x5614	; 0x5614 <DIO_vWriteLowNibble>
    CLCD_voidSendFallingEdge();
    1b14:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <CLCD_voidSendFallingEdge>
    1b18:	80 e0       	ldi	r24, 0x00	; 0
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	a0 e0       	ldi	r26, 0x00	; 0
    1b1e:	b0 e4       	ldi	r27, 0x40	; 64
    1b20:	8b 87       	std	Y+11, r24	; 0x0b
    1b22:	9c 87       	std	Y+12, r25	; 0x0c
    1b24:	ad 87       	std	Y+13, r26	; 0x0d
    1b26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b30:	20 e0       	ldi	r18, 0x00	; 0
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	4a ef       	ldi	r20, 0xFA	; 250
    1b36:	54 e4       	ldi	r21, 0x44	; 68
    1b38:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1b3c:	dc 01       	movw	r26, r24
    1b3e:	cb 01       	movw	r24, r22
    1b40:	8f 83       	std	Y+7, r24	; 0x07
    1b42:	98 87       	std	Y+8, r25	; 0x08
    1b44:	a9 87       	std	Y+9, r26	; 0x09
    1b46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b48:	6f 81       	ldd	r22, Y+7	; 0x07
    1b4a:	78 85       	ldd	r23, Y+8	; 0x08
    1b4c:	89 85       	ldd	r24, Y+9	; 0x09
    1b4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	40 e8       	ldi	r20, 0x80	; 128
    1b56:	5f e3       	ldi	r21, 0x3F	; 63
    1b58:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    1b5c:	88 23       	and	r24, r24
    1b5e:	2c f4       	brge	.+10     	; 0x1b6a <CLCD_voidsendCommand+0x9c>
		__ticks = 1;
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	9e 83       	std	Y+6, r25	; 0x06
    1b66:	8d 83       	std	Y+5, r24	; 0x05
    1b68:	3f c0       	rjmp	.+126    	; 0x1be8 <CLCD_voidsendCommand+0x11a>
	else if (__tmp > 65535)
    1b6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b6c:	78 85       	ldd	r23, Y+8	; 0x08
    1b6e:	89 85       	ldd	r24, Y+9	; 0x09
    1b70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	3f ef       	ldi	r19, 0xFF	; 255
    1b76:	4f e7       	ldi	r20, 0x7F	; 127
    1b78:	57 e4       	ldi	r21, 0x47	; 71
    1b7a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    1b7e:	18 16       	cp	r1, r24
    1b80:	4c f5       	brge	.+82     	; 0x1bd4 <CLCD_voidsendCommand+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b82:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b84:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	40 e2       	ldi	r20, 0x20	; 32
    1b90:	51 e4       	ldi	r21, 0x41	; 65
    1b92:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1b96:	dc 01       	movw	r26, r24
    1b98:	cb 01       	movw	r24, r22
    1b9a:	bc 01       	movw	r22, r24
    1b9c:	cd 01       	movw	r24, r26
    1b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	9e 83       	std	Y+6, r25	; 0x06
    1ba8:	8d 83       	std	Y+5, r24	; 0x05
    1baa:	0f c0       	rjmp	.+30     	; 0x1bca <CLCD_voidsendCommand+0xfc>
    1bac:	88 ec       	ldi	r24, 0xC8	; 200
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	9c 83       	std	Y+4, r25	; 0x04
    1bb2:	8b 83       	std	Y+3, r24	; 0x03
    1bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb8:	01 97       	sbiw	r24, 0x01	; 1
    1bba:	f1 f7       	brne	.-4      	; 0x1bb8 <CLCD_voidsendCommand+0xea>
    1bbc:	9c 83       	std	Y+4, r25	; 0x04
    1bbe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc4:	01 97       	sbiw	r24, 0x01	; 1
    1bc6:	9e 83       	std	Y+6, r25	; 0x06
    1bc8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bca:	8d 81       	ldd	r24, Y+5	; 0x05
    1bcc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bce:	00 97       	sbiw	r24, 0x00	; 0
    1bd0:	69 f7       	brne	.-38     	; 0x1bac <CLCD_voidsendCommand+0xde>
    1bd2:	14 c0       	rjmp	.+40     	; 0x1bfc <CLCD_voidsendCommand+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd6:	78 85       	ldd	r23, Y+8	; 0x08
    1bd8:	89 85       	ldd	r24, Y+9	; 0x09
    1bda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	9e 83       	std	Y+6, r25	; 0x06
    1be6:	8d 83       	std	Y+5, r24	; 0x05
    1be8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bea:	9e 81       	ldd	r25, Y+6	; 0x06
    1bec:	9a 83       	std	Y+2, r25	; 0x02
    1bee:	89 83       	std	Y+1, r24	; 0x01
    1bf0:	89 81       	ldd	r24, Y+1	; 0x01
    1bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf4:	01 97       	sbiw	r24, 0x01	; 1
    1bf6:	f1 f7       	brne	.-4      	; 0x1bf4 <CLCD_voidsendCommand+0x126>
    1bf8:	9a 83       	std	Y+2, r25	; 0x02
    1bfa:	89 83       	std	Y+1, r24	; 0x01
#endif
#else
#error "Wrong CLCD_MODE config"
#endif
    _delay_ms(2);
}
    1bfc:	2f 96       	adiw	r28, 0x0f	; 15
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	f8 94       	cli
    1c02:	de bf       	out	0x3e, r29	; 62
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	cd bf       	out	0x3d, r28	; 61
    1c08:	cf 91       	pop	r28
    1c0a:	df 91       	pop	r29
    1c0c:	08 95       	ret

00001c0e <CLCD_voidsendString>:

void CLCD_voidsendString(u8 *copy_u8ptrString) {
    1c0e:	df 93       	push	r29
    1c10:	cf 93       	push	r28
    1c12:	00 d0       	rcall	.+0      	; 0x1c14 <CLCD_voidsendString+0x6>
    1c14:	0f 92       	push	r0
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62
    1c1a:	9b 83       	std	Y+3, r25	; 0x03
    1c1c:	8a 83       	std	Y+2, r24	; 0x02
    u8 Loc_Iterator = 0;
    1c1e:	19 82       	std	Y+1, r1	; 0x01
    1c20:	0e c0       	rjmp	.+28     	; 0x1c3e <CLCD_voidsendString+0x30>
    while (copy_u8ptrString[Loc_Iterator] != '\0') {
        CLCD_voidsendData(copy_u8ptrString[Loc_Iterator]);
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	28 2f       	mov	r18, r24
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c2c:	fc 01       	movw	r30, r24
    1c2e:	e2 0f       	add	r30, r18
    1c30:	f3 1f       	adc	r31, r19
    1c32:	80 81       	ld	r24, Z
    1c34:	0e 94 c7 0c 	call	0x198e	; 0x198e <CLCD_voidsendData>
        Loc_Iterator++;
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
    1c3a:	8f 5f       	subi	r24, 0xFF	; 255
    1c3c:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
}

void CLCD_voidsendString(u8 *copy_u8ptrString) {
    u8 Loc_Iterator = 0;
    while (copy_u8ptrString[Loc_Iterator] != '\0') {
    1c3e:	89 81       	ldd	r24, Y+1	; 0x01
    1c40:	28 2f       	mov	r18, r24
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	8a 81       	ldd	r24, Y+2	; 0x02
    1c46:	9b 81       	ldd	r25, Y+3	; 0x03
    1c48:	fc 01       	movw	r30, r24
    1c4a:	e2 0f       	add	r30, r18
    1c4c:	f3 1f       	adc	r31, r19
    1c4e:	80 81       	ld	r24, Z
    1c50:	88 23       	and	r24, r24
    1c52:	39 f7       	brne	.-50     	; 0x1c22 <CLCD_voidsendString+0x14>
        CLCD_voidsendData(copy_u8ptrString[Loc_Iterator]);
        Loc_Iterator++;
    }
}
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
    1c5a:	cf 91       	pop	r28
    1c5c:	df 91       	pop	r29
    1c5e:	08 95       	ret

00001c60 <CLCD_voidSendFallingEdge>:

static void CLCD_voidSendFallingEdge(void) {
    1c60:	df 93       	push	r29
    1c62:	cf 93       	push	r28
    1c64:	cd b7       	in	r28, 0x3d	; 61
    1c66:	de b7       	in	r29, 0x3e	; 62
    1c68:	6c 97       	sbiw	r28, 0x1c	; 28
    1c6a:	0f b6       	in	r0, 0x3f	; 63
    1c6c:	f8 94       	cli
    1c6e:	de bf       	out	0x3e, r29	; 62
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	cd bf       	out	0x3d, r28	; 61
    DIO_enumWritePinValue(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_HIGH);
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	67 e0       	ldi	r22, 0x07	; 7
    1c78:	41 e0       	ldi	r20, 0x01	; 1
    1c7a:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <DIO_enumWritePinValue>
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	a0 e8       	ldi	r26, 0x80	; 128
    1c84:	bf e3       	ldi	r27, 0x3F	; 63
    1c86:	89 8f       	std	Y+25, r24	; 0x19
    1c88:	9a 8f       	std	Y+26, r25	; 0x1a
    1c8a:	ab 8f       	std	Y+27, r26	; 0x1b
    1c8c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c8e:	69 8d       	ldd	r22, Y+25	; 0x19
    1c90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	4a ef       	ldi	r20, 0xFA	; 250
    1c9c:	54 e4       	ldi	r21, 0x44	; 68
    1c9e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	8d 8b       	std	Y+21, r24	; 0x15
    1ca8:	9e 8b       	std	Y+22, r25	; 0x16
    1caa:	af 8b       	std	Y+23, r26	; 0x17
    1cac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cae:	6d 89       	ldd	r22, Y+21	; 0x15
    1cb0:	7e 89       	ldd	r23, Y+22	; 0x16
    1cb2:	8f 89       	ldd	r24, Y+23	; 0x17
    1cb4:	98 8d       	ldd	r25, Y+24	; 0x18
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	40 e8       	ldi	r20, 0x80	; 128
    1cbc:	5f e3       	ldi	r21, 0x3F	; 63
    1cbe:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    1cc2:	88 23       	and	r24, r24
    1cc4:	2c f4       	brge	.+10     	; 0x1cd0 <CLCD_voidSendFallingEdge+0x70>
		__ticks = 1;
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	9c 8b       	std	Y+20, r25	; 0x14
    1ccc:	8b 8b       	std	Y+19, r24	; 0x13
    1cce:	3f c0       	rjmp	.+126    	; 0x1d4e <CLCD_voidSendFallingEdge+0xee>
	else if (__tmp > 65535)
    1cd0:	6d 89       	ldd	r22, Y+21	; 0x15
    1cd2:	7e 89       	ldd	r23, Y+22	; 0x16
    1cd4:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd6:	98 8d       	ldd	r25, Y+24	; 0x18
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	3f ef       	ldi	r19, 0xFF	; 255
    1cdc:	4f e7       	ldi	r20, 0x7F	; 127
    1cde:	57 e4       	ldi	r21, 0x47	; 71
    1ce0:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    1ce4:	18 16       	cp	r1, r24
    1ce6:	4c f5       	brge	.+82     	; 0x1d3a <CLCD_voidSendFallingEdge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce8:	69 8d       	ldd	r22, Y+25	; 0x19
    1cea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	40 e2       	ldi	r20, 0x20	; 32
    1cf6:	51 e4       	ldi	r21, 0x41	; 65
    1cf8:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	bc 01       	movw	r22, r24
    1d02:	cd 01       	movw	r24, r26
    1d04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	9c 8b       	std	Y+20, r25	; 0x14
    1d0e:	8b 8b       	std	Y+19, r24	; 0x13
    1d10:	0f c0       	rjmp	.+30     	; 0x1d30 <CLCD_voidSendFallingEdge+0xd0>
    1d12:	88 ec       	ldi	r24, 0xC8	; 200
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	9a 8b       	std	Y+18, r25	; 0x12
    1d18:	89 8b       	std	Y+17, r24	; 0x11
    1d1a:	89 89       	ldd	r24, Y+17	; 0x11
    1d1c:	9a 89       	ldd	r25, Y+18	; 0x12
    1d1e:	01 97       	sbiw	r24, 0x01	; 1
    1d20:	f1 f7       	brne	.-4      	; 0x1d1e <CLCD_voidSendFallingEdge+0xbe>
    1d22:	9a 8b       	std	Y+18, r25	; 0x12
    1d24:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d26:	8b 89       	ldd	r24, Y+19	; 0x13
    1d28:	9c 89       	ldd	r25, Y+20	; 0x14
    1d2a:	01 97       	sbiw	r24, 0x01	; 1
    1d2c:	9c 8b       	std	Y+20, r25	; 0x14
    1d2e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d30:	8b 89       	ldd	r24, Y+19	; 0x13
    1d32:	9c 89       	ldd	r25, Y+20	; 0x14
    1d34:	00 97       	sbiw	r24, 0x00	; 0
    1d36:	69 f7       	brne	.-38     	; 0x1d12 <CLCD_voidSendFallingEdge+0xb2>
    1d38:	14 c0       	rjmp	.+40     	; 0x1d62 <CLCD_voidSendFallingEdge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d3a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d3c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d3e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d40:	98 8d       	ldd	r25, Y+24	; 0x18
    1d42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	9c 8b       	std	Y+20, r25	; 0x14
    1d4c:	8b 8b       	std	Y+19, r24	; 0x13
    1d4e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d50:	9c 89       	ldd	r25, Y+20	; 0x14
    1d52:	98 8b       	std	Y+16, r25	; 0x10
    1d54:	8f 87       	std	Y+15, r24	; 0x0f
    1d56:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d58:	98 89       	ldd	r25, Y+16	; 0x10
    1d5a:	01 97       	sbiw	r24, 0x01	; 1
    1d5c:	f1 f7       	brne	.-4      	; 0x1d5a <CLCD_voidSendFallingEdge+0xfa>
    1d5e:	98 8b       	std	Y+16, r25	; 0x10
    1d60:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    DIO_enumWritePinValue(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_LOW);
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	67 e0       	ldi	r22, 0x07	; 7
    1d66:	40 e0       	ldi	r20, 0x00	; 0
    1d68:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <DIO_enumWritePinValue>
    1d6c:	80 e0       	ldi	r24, 0x00	; 0
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	a0 e8       	ldi	r26, 0x80	; 128
    1d72:	bf e3       	ldi	r27, 0x3F	; 63
    1d74:	8b 87       	std	Y+11, r24	; 0x0b
    1d76:	9c 87       	std	Y+12, r25	; 0x0c
    1d78:	ad 87       	std	Y+13, r26	; 0x0d
    1d7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	4a ef       	ldi	r20, 0xFA	; 250
    1d8a:	54 e4       	ldi	r21, 0x44	; 68
    1d8c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22
    1d94:	8f 83       	std	Y+7, r24	; 0x07
    1d96:	98 87       	std	Y+8, r25	; 0x08
    1d98:	a9 87       	std	Y+9, r26	; 0x09
    1d9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9e:	78 85       	ldd	r23, Y+8	; 0x08
    1da0:	89 85       	ldd	r24, Y+9	; 0x09
    1da2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	40 e8       	ldi	r20, 0x80	; 128
    1daa:	5f e3       	ldi	r21, 0x3F	; 63
    1dac:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    1db0:	88 23       	and	r24, r24
    1db2:	2c f4       	brge	.+10     	; 0x1dbe <CLCD_voidSendFallingEdge+0x15e>
		__ticks = 1;
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	9e 83       	std	Y+6, r25	; 0x06
    1dba:	8d 83       	std	Y+5, r24	; 0x05
    1dbc:	3f c0       	rjmp	.+126    	; 0x1e3c <CLCD_voidSendFallingEdge+0x1dc>
	else if (__tmp > 65535)
    1dbe:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc0:	78 85       	ldd	r23, Y+8	; 0x08
    1dc2:	89 85       	ldd	r24, Y+9	; 0x09
    1dc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	3f ef       	ldi	r19, 0xFF	; 255
    1dca:	4f e7       	ldi	r20, 0x7F	; 127
    1dcc:	57 e4       	ldi	r21, 0x47	; 71
    1dce:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    1dd2:	18 16       	cp	r1, r24
    1dd4:	4c f5       	brge	.+82     	; 0x1e28 <CLCD_voidSendFallingEdge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dda:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ddc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	40 e2       	ldi	r20, 0x20	; 32
    1de4:	51 e4       	ldi	r21, 0x41	; 65
    1de6:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	bc 01       	movw	r22, r24
    1df0:	cd 01       	movw	r24, r26
    1df2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	9e 83       	std	Y+6, r25	; 0x06
    1dfc:	8d 83       	std	Y+5, r24	; 0x05
    1dfe:	0f c0       	rjmp	.+30     	; 0x1e1e <CLCD_voidSendFallingEdge+0x1be>
    1e00:	88 ec       	ldi	r24, 0xC8	; 200
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	9c 83       	std	Y+4, r25	; 0x04
    1e06:	8b 83       	std	Y+3, r24	; 0x03
    1e08:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0c:	01 97       	sbiw	r24, 0x01	; 1
    1e0e:	f1 f7       	brne	.-4      	; 0x1e0c <CLCD_voidSendFallingEdge+0x1ac>
    1e10:	9c 83       	std	Y+4, r25	; 0x04
    1e12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e14:	8d 81       	ldd	r24, Y+5	; 0x05
    1e16:	9e 81       	ldd	r25, Y+6	; 0x06
    1e18:	01 97       	sbiw	r24, 0x01	; 1
    1e1a:	9e 83       	std	Y+6, r25	; 0x06
    1e1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e20:	9e 81       	ldd	r25, Y+6	; 0x06
    1e22:	00 97       	sbiw	r24, 0x00	; 0
    1e24:	69 f7       	brne	.-38     	; 0x1e00 <CLCD_voidSendFallingEdge+0x1a0>
    1e26:	14 c0       	rjmp	.+40     	; 0x1e50 <CLCD_voidSendFallingEdge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e28:	6f 81       	ldd	r22, Y+7	; 0x07
    1e2a:	78 85       	ldd	r23, Y+8	; 0x08
    1e2c:	89 85       	ldd	r24, Y+9	; 0x09
    1e2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	9e 83       	std	Y+6, r25	; 0x06
    1e3a:	8d 83       	std	Y+5, r24	; 0x05
    1e3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e40:	9a 83       	std	Y+2, r25	; 0x02
    1e42:	89 83       	std	Y+1, r24	; 0x01
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
    1e46:	9a 81       	ldd	r25, Y+2	; 0x02
    1e48:	01 97       	sbiw	r24, 0x01	; 1
    1e4a:	f1 f7       	brne	.-4      	; 0x1e48 <CLCD_voidSendFallingEdge+0x1e8>
    1e4c:	9a 83       	std	Y+2, r25	; 0x02
    1e4e:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
}
    1e50:	6c 96       	adiw	r28, 0x1c	; 28
    1e52:	0f b6       	in	r0, 0x3f	; 63
    1e54:	f8 94       	cli
    1e56:	de bf       	out	0x3e, r29	; 62
    1e58:	0f be       	out	0x3f, r0	; 63
    1e5a:	cd bf       	out	0x3d, r28	; 61
    1e5c:	cf 91       	pop	r28
    1e5e:	df 91       	pop	r29
    1e60:	08 95       	ret

00001e62 <CLCD_voidClearScreen>:

void CLCD_voidClearScreen(void) {
    1e62:	df 93       	push	r29
    1e64:	cf 93       	push	r28
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62
    1e6a:	2e 97       	sbiw	r28, 0x0e	; 14
    1e6c:	0f b6       	in	r0, 0x3f	; 63
    1e6e:	f8 94       	cli
    1e70:	de bf       	out	0x3e, r29	; 62
    1e72:	0f be       	out	0x3f, r0	; 63
    1e74:	cd bf       	out	0x3d, r28	; 61
    CLCD_voidsendCommand(lcd_Clear);
    1e76:	81 e0       	ldi	r24, 0x01	; 1
    1e78:	0e 94 67 0d 	call	0x1ace	; 0x1ace <CLCD_voidsendCommand>
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	a0 e2       	ldi	r26, 0x20	; 32
    1e82:	b1 e4       	ldi	r27, 0x41	; 65
    1e84:	8b 87       	std	Y+11, r24	; 0x0b
    1e86:	9c 87       	std	Y+12, r25	; 0x0c
    1e88:	ad 87       	std	Y+13, r26	; 0x0d
    1e8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	4a ef       	ldi	r20, 0xFA	; 250
    1e9a:	54 e4       	ldi	r21, 0x44	; 68
    1e9c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	8f 83       	std	Y+7, r24	; 0x07
    1ea6:	98 87       	std	Y+8, r25	; 0x08
    1ea8:	a9 87       	std	Y+9, r26	; 0x09
    1eaa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eac:	6f 81       	ldd	r22, Y+7	; 0x07
    1eae:	78 85       	ldd	r23, Y+8	; 0x08
    1eb0:	89 85       	ldd	r24, Y+9	; 0x09
    1eb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb4:	20 e0       	ldi	r18, 0x00	; 0
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	40 e8       	ldi	r20, 0x80	; 128
    1eba:	5f e3       	ldi	r21, 0x3F	; 63
    1ebc:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    1ec0:	88 23       	and	r24, r24
    1ec2:	2c f4       	brge	.+10     	; 0x1ece <CLCD_voidClearScreen+0x6c>
		__ticks = 1;
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	9e 83       	std	Y+6, r25	; 0x06
    1eca:	8d 83       	std	Y+5, r24	; 0x05
    1ecc:	3f c0       	rjmp	.+126    	; 0x1f4c <CLCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    1ece:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed0:	78 85       	ldd	r23, Y+8	; 0x08
    1ed2:	89 85       	ldd	r24, Y+9	; 0x09
    1ed4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	3f ef       	ldi	r19, 0xFF	; 255
    1eda:	4f e7       	ldi	r20, 0x7F	; 127
    1edc:	57 e4       	ldi	r21, 0x47	; 71
    1ede:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    1ee2:	18 16       	cp	r1, r24
    1ee4:	4c f5       	brge	.+82     	; 0x1f38 <CLCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ee8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	40 e2       	ldi	r20, 0x20	; 32
    1ef4:	51 e4       	ldi	r21, 0x41	; 65
    1ef6:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1efa:	dc 01       	movw	r26, r24
    1efc:	cb 01       	movw	r24, r22
    1efe:	bc 01       	movw	r22, r24
    1f00:	cd 01       	movw	r24, r26
    1f02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f06:	dc 01       	movw	r26, r24
    1f08:	cb 01       	movw	r24, r22
    1f0a:	9e 83       	std	Y+6, r25	; 0x06
    1f0c:	8d 83       	std	Y+5, r24	; 0x05
    1f0e:	0f c0       	rjmp	.+30     	; 0x1f2e <CLCD_voidClearScreen+0xcc>
    1f10:	88 ec       	ldi	r24, 0xC8	; 200
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	9c 83       	std	Y+4, r25	; 0x04
    1f16:	8b 83       	std	Y+3, r24	; 0x03
    1f18:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1c:	01 97       	sbiw	r24, 0x01	; 1
    1f1e:	f1 f7       	brne	.-4      	; 0x1f1c <CLCD_voidClearScreen+0xba>
    1f20:	9c 83       	std	Y+4, r25	; 0x04
    1f22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f24:	8d 81       	ldd	r24, Y+5	; 0x05
    1f26:	9e 81       	ldd	r25, Y+6	; 0x06
    1f28:	01 97       	sbiw	r24, 0x01	; 1
    1f2a:	9e 83       	std	Y+6, r25	; 0x06
    1f2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f30:	9e 81       	ldd	r25, Y+6	; 0x06
    1f32:	00 97       	sbiw	r24, 0x00	; 0
    1f34:	69 f7       	brne	.-38     	; 0x1f10 <CLCD_voidClearScreen+0xae>
    1f36:	14 c0       	rjmp	.+40     	; 0x1f60 <CLCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f38:	6f 81       	ldd	r22, Y+7	; 0x07
    1f3a:	78 85       	ldd	r23, Y+8	; 0x08
    1f3c:	89 85       	ldd	r24, Y+9	; 0x09
    1f3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	9e 83       	std	Y+6, r25	; 0x06
    1f4a:	8d 83       	std	Y+5, r24	; 0x05
    1f4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f50:	9a 83       	std	Y+2, r25	; 0x02
    1f52:	89 83       	std	Y+1, r24	; 0x01
    1f54:	89 81       	ldd	r24, Y+1	; 0x01
    1f56:	9a 81       	ldd	r25, Y+2	; 0x02
    1f58:	01 97       	sbiw	r24, 0x01	; 1
    1f5a:	f1 f7       	brne	.-4      	; 0x1f58 <CLCD_voidClearScreen+0xf6>
    1f5c:	9a 83       	std	Y+2, r25	; 0x02
    1f5e:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(10);
}
    1f60:	2e 96       	adiw	r28, 0x0e	; 14
    1f62:	0f b6       	in	r0, 0x3f	; 63
    1f64:	f8 94       	cli
    1f66:	de bf       	out	0x3e, r29	; 62
    1f68:	0f be       	out	0x3f, r0	; 63
    1f6a:	cd bf       	out	0x3d, r28	; 61
    1f6c:	cf 91       	pop	r28
    1f6e:	df 91       	pop	r29
    1f70:	08 95       	ret

00001f72 <CLCD_voidSetPosition>:

void CLCD_voidSetPosition(u8 copy_u8Row, u8 copy_u8Col) {
    1f72:	df 93       	push	r29
    1f74:	cf 93       	push	r28
    1f76:	cd b7       	in	r28, 0x3d	; 61
    1f78:	de b7       	in	r29, 0x3e	; 62
    1f7a:	61 97       	sbiw	r28, 0x11	; 17
    1f7c:	0f b6       	in	r0, 0x3f	; 63
    1f7e:	f8 94       	cli
    1f80:	de bf       	out	0x3e, r29	; 62
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	cd bf       	out	0x3d, r28	; 61
    1f86:	88 8b       	std	Y+16, r24	; 0x10
    1f88:	69 8b       	std	Y+17, r22	; 0x11
    u8 loc_u8data;
    if ((copy_u8Row > 2) || (copy_u8Row < 1) || (copy_u8Col > 16) || (copy_u8Col < 1)) {
    1f8a:	88 89       	ldd	r24, Y+16	; 0x10
    1f8c:	83 30       	cpi	r24, 0x03	; 3
    1f8e:	48 f4       	brcc	.+18     	; 0x1fa2 <CLCD_voidSetPosition+0x30>
    1f90:	88 89       	ldd	r24, Y+16	; 0x10
    1f92:	88 23       	and	r24, r24
    1f94:	31 f0       	breq	.+12     	; 0x1fa2 <CLCD_voidSetPosition+0x30>
    1f96:	89 89       	ldd	r24, Y+17	; 0x11
    1f98:	81 31       	cpi	r24, 0x11	; 17
    1f9a:	18 f4       	brcc	.+6      	; 0x1fa2 <CLCD_voidSetPosition+0x30>
    1f9c:	89 89       	ldd	r24, Y+17	; 0x11
    1f9e:	88 23       	and	r24, r24
    1fa0:	19 f4       	brne	.+6      	; 0x1fa8 <CLCD_voidSetPosition+0x36>
        loc_u8data = lcd_SetCursor;
    1fa2:	80 e8       	ldi	r24, 0x80	; 128
    1fa4:	8f 87       	std	Y+15, r24	; 0x0f
    1fa6:	0d c0       	rjmp	.+26     	; 0x1fc2 <CLCD_voidSetPosition+0x50>
    } else if (copy_u8Row == CLCD_Row_1) {
    1fa8:	88 89       	ldd	r24, Y+16	; 0x10
    1faa:	81 30       	cpi	r24, 0x01	; 1
    1fac:	21 f4       	brne	.+8      	; 0x1fb6 <CLCD_voidSetPosition+0x44>
        loc_u8data = (lcd_SetCursor) + (copy_u8Col - 1);
    1fae:	89 89       	ldd	r24, Y+17	; 0x11
    1fb0:	81 58       	subi	r24, 0x81	; 129
    1fb2:	8f 87       	std	Y+15, r24	; 0x0f
    1fb4:	06 c0       	rjmp	.+12     	; 0x1fc2 <CLCD_voidSetPosition+0x50>
    } else if (copy_u8Row == CLCD_Row_2) {
    1fb6:	88 89       	ldd	r24, Y+16	; 0x10
    1fb8:	82 30       	cpi	r24, 0x02	; 2
    1fba:	19 f4       	brne	.+6      	; 0x1fc2 <CLCD_voidSetPosition+0x50>
        loc_u8data = (lcd_SetCursor) + 64 + (copy_u8Col - 1);
    1fbc:	89 89       	ldd	r24, Y+17	; 0x11
    1fbe:	81 54       	subi	r24, 0x41	; 65
    1fc0:	8f 87       	std	Y+15, r24	; 0x0f
    }
    CLCD_voidsendCommand(loc_u8data);
    1fc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fc4:	0e 94 67 0d 	call	0x1ace	; 0x1ace <CLCD_voidsendCommand>
    1fc8:	80 e0       	ldi	r24, 0x00	; 0
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	a0 e8       	ldi	r26, 0x80	; 128
    1fce:	bf e3       	ldi	r27, 0x3F	; 63
    1fd0:	8b 87       	std	Y+11, r24	; 0x0b
    1fd2:	9c 87       	std	Y+12, r25	; 0x0c
    1fd4:	ad 87       	std	Y+13, r26	; 0x0d
    1fd6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fda:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fde:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	4a ef       	ldi	r20, 0xFA	; 250
    1fe6:	54 e4       	ldi	r21, 0x44	; 68
    1fe8:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1fec:	dc 01       	movw	r26, r24
    1fee:	cb 01       	movw	r24, r22
    1ff0:	8f 83       	std	Y+7, r24	; 0x07
    1ff2:	98 87       	std	Y+8, r25	; 0x08
    1ff4:	a9 87       	std	Y+9, r26	; 0x09
    1ff6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ff8:	6f 81       	ldd	r22, Y+7	; 0x07
    1ffa:	78 85       	ldd	r23, Y+8	; 0x08
    1ffc:	89 85       	ldd	r24, Y+9	; 0x09
    1ffe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	40 e8       	ldi	r20, 0x80	; 128
    2006:	5f e3       	ldi	r21, 0x3F	; 63
    2008:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    200c:	88 23       	and	r24, r24
    200e:	2c f4       	brge	.+10     	; 0x201a <CLCD_voidSetPosition+0xa8>
		__ticks = 1;
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	9e 83       	std	Y+6, r25	; 0x06
    2016:	8d 83       	std	Y+5, r24	; 0x05
    2018:	3f c0       	rjmp	.+126    	; 0x2098 <CLCD_voidSetPosition+0x126>
	else if (__tmp > 65535)
    201a:	6f 81       	ldd	r22, Y+7	; 0x07
    201c:	78 85       	ldd	r23, Y+8	; 0x08
    201e:	89 85       	ldd	r24, Y+9	; 0x09
    2020:	9a 85       	ldd	r25, Y+10	; 0x0a
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	3f ef       	ldi	r19, 0xFF	; 255
    2026:	4f e7       	ldi	r20, 0x7F	; 127
    2028:	57 e4       	ldi	r21, 0x47	; 71
    202a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    202e:	18 16       	cp	r1, r24
    2030:	4c f5       	brge	.+82     	; 0x2084 <CLCD_voidSetPosition+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2032:	6b 85       	ldd	r22, Y+11	; 0x0b
    2034:	7c 85       	ldd	r23, Y+12	; 0x0c
    2036:	8d 85       	ldd	r24, Y+13	; 0x0d
    2038:	9e 85       	ldd	r25, Y+14	; 0x0e
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	40 e2       	ldi	r20, 0x20	; 32
    2040:	51 e4       	ldi	r21, 0x41	; 65
    2042:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	bc 01       	movw	r22, r24
    204c:	cd 01       	movw	r24, r26
    204e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2052:	dc 01       	movw	r26, r24
    2054:	cb 01       	movw	r24, r22
    2056:	9e 83       	std	Y+6, r25	; 0x06
    2058:	8d 83       	std	Y+5, r24	; 0x05
    205a:	0f c0       	rjmp	.+30     	; 0x207a <CLCD_voidSetPosition+0x108>
    205c:	88 ec       	ldi	r24, 0xC8	; 200
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	9c 83       	std	Y+4, r25	; 0x04
    2062:	8b 83       	std	Y+3, r24	; 0x03
    2064:	8b 81       	ldd	r24, Y+3	; 0x03
    2066:	9c 81       	ldd	r25, Y+4	; 0x04
    2068:	01 97       	sbiw	r24, 0x01	; 1
    206a:	f1 f7       	brne	.-4      	; 0x2068 <CLCD_voidSetPosition+0xf6>
    206c:	9c 83       	std	Y+4, r25	; 0x04
    206e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2070:	8d 81       	ldd	r24, Y+5	; 0x05
    2072:	9e 81       	ldd	r25, Y+6	; 0x06
    2074:	01 97       	sbiw	r24, 0x01	; 1
    2076:	9e 83       	std	Y+6, r25	; 0x06
    2078:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207a:	8d 81       	ldd	r24, Y+5	; 0x05
    207c:	9e 81       	ldd	r25, Y+6	; 0x06
    207e:	00 97       	sbiw	r24, 0x00	; 0
    2080:	69 f7       	brne	.-38     	; 0x205c <CLCD_voidSetPosition+0xea>
    2082:	14 c0       	rjmp	.+40     	; 0x20ac <CLCD_voidSetPosition+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2084:	6f 81       	ldd	r22, Y+7	; 0x07
    2086:	78 85       	ldd	r23, Y+8	; 0x08
    2088:	89 85       	ldd	r24, Y+9	; 0x09
    208a:	9a 85       	ldd	r25, Y+10	; 0x0a
    208c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	9e 83       	std	Y+6, r25	; 0x06
    2096:	8d 83       	std	Y+5, r24	; 0x05
    2098:	8d 81       	ldd	r24, Y+5	; 0x05
    209a:	9e 81       	ldd	r25, Y+6	; 0x06
    209c:	9a 83       	std	Y+2, r25	; 0x02
    209e:	89 83       	std	Y+1, r24	; 0x01
    20a0:	89 81       	ldd	r24, Y+1	; 0x01
    20a2:	9a 81       	ldd	r25, Y+2	; 0x02
    20a4:	01 97       	sbiw	r24, 0x01	; 1
    20a6:	f1 f7       	brne	.-4      	; 0x20a4 <CLCD_voidSetPosition+0x132>
    20a8:	9a 83       	std	Y+2, r25	; 0x02
    20aa:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
}
    20ac:	61 96       	adiw	r28, 0x11	; 17
    20ae:	0f b6       	in	r0, 0x3f	; 63
    20b0:	f8 94       	cli
    20b2:	de bf       	out	0x3e, r29	; 62
    20b4:	0f be       	out	0x3f, r0	; 63
    20b6:	cd bf       	out	0x3d, r28	; 61
    20b8:	cf 91       	pop	r28
    20ba:	df 91       	pop	r29
    20bc:	08 95       	ret

000020be <CLCD_voidSendExtraChar>:

void CLCD_voidSendExtraChar(u8 copy_u8Row, u8 copy_u8Col) {
    20be:	df 93       	push	r29
    20c0:	cf 93       	push	r28
    20c2:	00 d0       	rcall	.+0      	; 0x20c4 <CLCD_voidSendExtraChar+0x6>
    20c4:	0f 92       	push	r0
    20c6:	cd b7       	in	r28, 0x3d	; 61
    20c8:	de b7       	in	r29, 0x3e	; 62
    20ca:	8a 83       	std	Y+2, r24	; 0x02
    20cc:	6b 83       	std	Y+3, r22	; 0x03
    u8 loc_u8Iterator = 0;
    20ce:	19 82       	std	Y+1, r1	; 0x01
    CLCD_voidsendCommand(lcd_CGRAM);
    20d0:	80 e4       	ldi	r24, 0x40	; 64
    20d2:	0e 94 67 0d 	call	0x1ace	; 0x1ace <CLCD_voidsendCommand>
    for (loc_u8Iterator = 0; loc_u8Iterator < sizeof(CLCD_u8ExtraChar) / sizeof(CLCD_u8ExtraChar[0]); loc_u8Iterator++) {
    20d6:	19 82       	std	Y+1, r1	; 0x01
    20d8:	0c c0       	rjmp	.+24     	; 0x20f2 <CLCD_voidSendExtraChar+0x34>
        CLCD_voidsendData(CLCD_u8ExtraChar[loc_u8Iterator]);
    20da:	89 81       	ldd	r24, Y+1	; 0x01
    20dc:	88 2f       	mov	r24, r24
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	fc 01       	movw	r30, r24
    20e2:	ed 5f       	subi	r30, 0xFD	; 253
    20e4:	fd 4f       	sbci	r31, 0xFD	; 253
    20e6:	80 81       	ld	r24, Z
    20e8:	0e 94 c7 0c 	call	0x198e	; 0x198e <CLCD_voidsendData>
}

void CLCD_voidSendExtraChar(u8 copy_u8Row, u8 copy_u8Col) {
    u8 loc_u8Iterator = 0;
    CLCD_voidsendCommand(lcd_CGRAM);
    for (loc_u8Iterator = 0; loc_u8Iterator < sizeof(CLCD_u8ExtraChar) / sizeof(CLCD_u8ExtraChar[0]); loc_u8Iterator++) {
    20ec:	89 81       	ldd	r24, Y+1	; 0x01
    20ee:	8f 5f       	subi	r24, 0xFF	; 255
    20f0:	89 83       	std	Y+1, r24	; 0x01
    20f2:	89 81       	ldd	r24, Y+1	; 0x01
    20f4:	88 31       	cpi	r24, 0x18	; 24
    20f6:	88 f3       	brcs	.-30     	; 0x20da <CLCD_voidSendExtraChar+0x1c>
        CLCD_voidsendData(CLCD_u8ExtraChar[loc_u8Iterator]);
    }
    CLCD_voidSetPosition(copy_u8Row, copy_u8Col);
    20f8:	8a 81       	ldd	r24, Y+2	; 0x02
    20fa:	6b 81       	ldd	r22, Y+3	; 0x03
    20fc:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <CLCD_voidSetPosition>
    for (loc_u8Iterator = 0; loc_u8Iterator < 8; loc_u8Iterator++) {
    2100:	19 82       	std	Y+1, r1	; 0x01
    2102:	06 c0       	rjmp	.+12     	; 0x2110 <CLCD_voidSendExtraChar+0x52>
        CLCD_voidsendData(loc_u8Iterator);
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	0e 94 c7 0c 	call	0x198e	; 0x198e <CLCD_voidsendData>
    CLCD_voidsendCommand(lcd_CGRAM);
    for (loc_u8Iterator = 0; loc_u8Iterator < sizeof(CLCD_u8ExtraChar) / sizeof(CLCD_u8ExtraChar[0]); loc_u8Iterator++) {
        CLCD_voidsendData(CLCD_u8ExtraChar[loc_u8Iterator]);
    }
    CLCD_voidSetPosition(copy_u8Row, copy_u8Col);
    for (loc_u8Iterator = 0; loc_u8Iterator < 8; loc_u8Iterator++) {
    210a:	89 81       	ldd	r24, Y+1	; 0x01
    210c:	8f 5f       	subi	r24, 0xFF	; 255
    210e:	89 83       	std	Y+1, r24	; 0x01
    2110:	89 81       	ldd	r24, Y+1	; 0x01
    2112:	88 30       	cpi	r24, 0x08	; 8
    2114:	b8 f3       	brcs	.-18     	; 0x2104 <CLCD_voidSendExtraChar+0x46>
        CLCD_voidsendData(loc_u8Iterator);
    }
}
    2116:	0f 90       	pop	r0
    2118:	0f 90       	pop	r0
    211a:	0f 90       	pop	r0
    211c:	cf 91       	pop	r28
    211e:	df 91       	pop	r29
    2120:	08 95       	ret

00002122 <CLCD_vSendIntNumber>:

void CLCD_vSendIntNumber(s32 Copy_s32Number) {
    2122:	ef 92       	push	r14
    2124:	ff 92       	push	r15
    2126:	0f 93       	push	r16
    2128:	1f 93       	push	r17
    212a:	df 93       	push	r29
    212c:	cf 93       	push	r28
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62
    2132:	28 97       	sbiw	r28, 0x08	; 8
    2134:	0f b6       	in	r0, 0x3f	; 63
    2136:	f8 94       	cli
    2138:	de bf       	out	0x3e, r29	; 62
    213a:	0f be       	out	0x3f, r0	; 63
    213c:	cd bf       	out	0x3d, r28	; 61
    213e:	6d 83       	std	Y+5, r22	; 0x05
    2140:	7e 83       	std	Y+6, r23	; 0x06
    2142:	8f 83       	std	Y+7, r24	; 0x07
    2144:	98 87       	std	Y+8, r25	; 0x08
    u32 LOC_u32Reverse = 1;
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	a0 e0       	ldi	r26, 0x00	; 0
    214c:	b0 e0       	ldi	r27, 0x00	; 0
    214e:	89 83       	std	Y+1, r24	; 0x01
    2150:	9a 83       	std	Y+2, r25	; 0x02
    2152:	ab 83       	std	Y+3, r26	; 0x03
    2154:	bc 83       	std	Y+4, r27	; 0x04
    if (Copy_s32Number == 0) {
    2156:	8d 81       	ldd	r24, Y+5	; 0x05
    2158:	9e 81       	ldd	r25, Y+6	; 0x06
    215a:	af 81       	ldd	r26, Y+7	; 0x07
    215c:	b8 85       	ldd	r27, Y+8	; 0x08
    215e:	00 97       	sbiw	r24, 0x00	; 0
    2160:	a1 05       	cpc	r26, r1
    2162:	b1 05       	cpc	r27, r1
    2164:	21 f4       	brne	.+8      	; 0x216e <CLCD_vSendIntNumber+0x4c>
        CLCD_voidsendData('0');
    2166:	80 e3       	ldi	r24, 0x30	; 48
    2168:	0e 94 c7 0c 	call	0x198e	; 0x198e <CLCD_voidsendData>
    216c:	85 c0       	rjmp	.+266    	; 0x2278 <CLCD_vSendIntNumber+0x156>
    } else {
        if (Copy_s32Number < 0) {
    216e:	8d 81       	ldd	r24, Y+5	; 0x05
    2170:	9e 81       	ldd	r25, Y+6	; 0x06
    2172:	af 81       	ldd	r26, Y+7	; 0x07
    2174:	b8 85       	ldd	r27, Y+8	; 0x08
    2176:	bb 23       	and	r27, r27
    2178:	0c f0       	brlt	.+2      	; 0x217c <CLCD_vSendIntNumber+0x5a>
    217a:	49 c0       	rjmp	.+146    	; 0x220e <CLCD_vSendIntNumber+0xec>
            CLCD_voidsendData('-');
    217c:	8d e2       	ldi	r24, 0x2D	; 45
    217e:	0e 94 c7 0c 	call	0x198e	; 0x198e <CLCD_voidsendData>
            Copy_s32Number = (-1 * Copy_s32Number);
    2182:	8d 81       	ldd	r24, Y+5	; 0x05
    2184:	9e 81       	ldd	r25, Y+6	; 0x06
    2186:	af 81       	ldd	r26, Y+7	; 0x07
    2188:	b8 85       	ldd	r27, Y+8	; 0x08
    218a:	b0 95       	com	r27
    218c:	a0 95       	com	r26
    218e:	90 95       	com	r25
    2190:	81 95       	neg	r24
    2192:	9f 4f       	sbci	r25, 0xFF	; 255
    2194:	af 4f       	sbci	r26, 0xFF	; 255
    2196:	bf 4f       	sbci	r27, 0xFF	; 255
    2198:	8d 83       	std	Y+5, r24	; 0x05
    219a:	9e 83       	std	Y+6, r25	; 0x06
    219c:	af 83       	std	Y+7, r26	; 0x07
    219e:	b8 87       	std	Y+8, r27	; 0x08
    21a0:	36 c0       	rjmp	.+108    	; 0x220e <CLCD_vSendIntNumber+0xec>
        }
        while (Copy_s32Number != 0) {
            LOC_u32Reverse = (LOC_u32Reverse * 10) + (Copy_s32Number % 10);
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	9a 81       	ldd	r25, Y+2	; 0x02
    21a6:	ab 81       	ldd	r26, Y+3	; 0x03
    21a8:	bc 81       	ldd	r27, Y+4	; 0x04
    21aa:	2a e0       	ldi	r18, 0x0A	; 10
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	40 e0       	ldi	r20, 0x00	; 0
    21b0:	50 e0       	ldi	r21, 0x00	; 0
    21b2:	bc 01       	movw	r22, r24
    21b4:	cd 01       	movw	r24, r26
    21b6:	0e 94 20 3a 	call	0x7440	; 0x7440 <__mulsi3>
    21ba:	7b 01       	movw	r14, r22
    21bc:	8c 01       	movw	r16, r24
    21be:	8d 81       	ldd	r24, Y+5	; 0x05
    21c0:	9e 81       	ldd	r25, Y+6	; 0x06
    21c2:	af 81       	ldd	r26, Y+7	; 0x07
    21c4:	b8 85       	ldd	r27, Y+8	; 0x08
    21c6:	2a e0       	ldi	r18, 0x0A	; 10
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	40 e0       	ldi	r20, 0x00	; 0
    21cc:	50 e0       	ldi	r21, 0x00	; 0
    21ce:	bc 01       	movw	r22, r24
    21d0:	cd 01       	movw	r24, r26
    21d2:	0e 94 75 3a 	call	0x74ea	; 0x74ea <__divmodsi4>
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
    21da:	8e 0d       	add	r24, r14
    21dc:	9f 1d       	adc	r25, r15
    21de:	a0 1f       	adc	r26, r16
    21e0:	b1 1f       	adc	r27, r17
    21e2:	89 83       	std	Y+1, r24	; 0x01
    21e4:	9a 83       	std	Y+2, r25	; 0x02
    21e6:	ab 83       	std	Y+3, r26	; 0x03
    21e8:	bc 83       	std	Y+4, r27	; 0x04
            Copy_s32Number /= 10;
    21ea:	8d 81       	ldd	r24, Y+5	; 0x05
    21ec:	9e 81       	ldd	r25, Y+6	; 0x06
    21ee:	af 81       	ldd	r26, Y+7	; 0x07
    21f0:	b8 85       	ldd	r27, Y+8	; 0x08
    21f2:	2a e0       	ldi	r18, 0x0A	; 10
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	40 e0       	ldi	r20, 0x00	; 0
    21f8:	50 e0       	ldi	r21, 0x00	; 0
    21fa:	bc 01       	movw	r22, r24
    21fc:	cd 01       	movw	r24, r26
    21fe:	0e 94 75 3a 	call	0x74ea	; 0x74ea <__divmodsi4>
    2202:	da 01       	movw	r26, r20
    2204:	c9 01       	movw	r24, r18
    2206:	8d 83       	std	Y+5, r24	; 0x05
    2208:	9e 83       	std	Y+6, r25	; 0x06
    220a:	af 83       	std	Y+7, r26	; 0x07
    220c:	b8 87       	std	Y+8, r27	; 0x08
    } else {
        if (Copy_s32Number < 0) {
            CLCD_voidsendData('-');
            Copy_s32Number = (-1 * Copy_s32Number);
        }
        while (Copy_s32Number != 0) {
    220e:	8d 81       	ldd	r24, Y+5	; 0x05
    2210:	9e 81       	ldd	r25, Y+6	; 0x06
    2212:	af 81       	ldd	r26, Y+7	; 0x07
    2214:	b8 85       	ldd	r27, Y+8	; 0x08
    2216:	00 97       	sbiw	r24, 0x00	; 0
    2218:	a1 05       	cpc	r26, r1
    221a:	b1 05       	cpc	r27, r1
    221c:	11 f6       	brne	.-124    	; 0x21a2 <CLCD_vSendIntNumber+0x80>
    221e:	23 c0       	rjmp	.+70     	; 0x2266 <CLCD_vSendIntNumber+0x144>
            LOC_u32Reverse = (LOC_u32Reverse * 10) + (Copy_s32Number % 10);
            Copy_s32Number /= 10;
        }
        while (LOC_u32Reverse != 1) {
            CLCD_voidsendData((LOC_u32Reverse % 10) + 48);
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	9a 81       	ldd	r25, Y+2	; 0x02
    2224:	ab 81       	ldd	r26, Y+3	; 0x03
    2226:	bc 81       	ldd	r27, Y+4	; 0x04
    2228:	2a e0       	ldi	r18, 0x0A	; 10
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	40 e0       	ldi	r20, 0x00	; 0
    222e:	50 e0       	ldi	r21, 0x00	; 0
    2230:	bc 01       	movw	r22, r24
    2232:	cd 01       	movw	r24, r26
    2234:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <__udivmodsi4>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	80 5d       	subi	r24, 0xD0	; 208
    223e:	0e 94 c7 0c 	call	0x198e	; 0x198e <CLCD_voidsendData>
            LOC_u32Reverse /= 10;
    2242:	89 81       	ldd	r24, Y+1	; 0x01
    2244:	9a 81       	ldd	r25, Y+2	; 0x02
    2246:	ab 81       	ldd	r26, Y+3	; 0x03
    2248:	bc 81       	ldd	r27, Y+4	; 0x04
    224a:	2a e0       	ldi	r18, 0x0A	; 10
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	40 e0       	ldi	r20, 0x00	; 0
    2250:	50 e0       	ldi	r21, 0x00	; 0
    2252:	bc 01       	movw	r22, r24
    2254:	cd 01       	movw	r24, r26
    2256:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <__udivmodsi4>
    225a:	da 01       	movw	r26, r20
    225c:	c9 01       	movw	r24, r18
    225e:	89 83       	std	Y+1, r24	; 0x01
    2260:	9a 83       	std	Y+2, r25	; 0x02
    2262:	ab 83       	std	Y+3, r26	; 0x03
    2264:	bc 83       	std	Y+4, r27	; 0x04
        }
        while (Copy_s32Number != 0) {
            LOC_u32Reverse = (LOC_u32Reverse * 10) + (Copy_s32Number % 10);
            Copy_s32Number /= 10;
        }
        while (LOC_u32Reverse != 1) {
    2266:	89 81       	ldd	r24, Y+1	; 0x01
    2268:	9a 81       	ldd	r25, Y+2	; 0x02
    226a:	ab 81       	ldd	r26, Y+3	; 0x03
    226c:	bc 81       	ldd	r27, Y+4	; 0x04
    226e:	81 30       	cpi	r24, 0x01	; 1
    2270:	91 05       	cpc	r25, r1
    2272:	a1 05       	cpc	r26, r1
    2274:	b1 05       	cpc	r27, r1
    2276:	a1 f6       	brne	.-88     	; 0x2220 <CLCD_vSendIntNumber+0xfe>
            CLCD_voidsendData((LOC_u32Reverse % 10) + 48);
            LOC_u32Reverse /= 10;
        }
    }
}
    2278:	28 96       	adiw	r28, 0x08	; 8
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	f8 94       	cli
    227e:	de bf       	out	0x3e, r29	; 62
    2280:	0f be       	out	0x3f, r0	; 63
    2282:	cd bf       	out	0x3d, r28	; 61
    2284:	cf 91       	pop	r28
    2286:	df 91       	pop	r29
    2288:	1f 91       	pop	r17
    228a:	0f 91       	pop	r16
    228c:	ff 90       	pop	r15
    228e:	ef 90       	pop	r14
    2290:	08 95       	ret

00002292 <CLCD_vSendFloatNumber>:

void CLCD_vSendFloatNumber(f64 Copy_f64Number) {
    2292:	af 92       	push	r10
    2294:	bf 92       	push	r11
    2296:	cf 92       	push	r12
    2298:	df 92       	push	r13
    229a:	ef 92       	push	r14
    229c:	ff 92       	push	r15
    229e:	0f 93       	push	r16
    22a0:	1f 93       	push	r17
    22a2:	df 93       	push	r29
    22a4:	cf 93       	push	r28
    22a6:	00 d0       	rcall	.+0      	; 0x22a8 <CLCD_vSendFloatNumber+0x16>
    22a8:	00 d0       	rcall	.+0      	; 0x22aa <CLCD_vSendFloatNumber+0x18>
    22aa:	cd b7       	in	r28, 0x3d	; 61
    22ac:	de b7       	in	r29, 0x3e	; 62
    22ae:	69 83       	std	Y+1, r22	; 0x01
    22b0:	7a 83       	std	Y+2, r23	; 0x02
    22b2:	8b 83       	std	Y+3, r24	; 0x03
    22b4:	9c 83       	std	Y+4, r25	; 0x04
    CLCD_vSendIntNumber((s32)Copy_f64Number);
    22b6:	69 81       	ldd	r22, Y+1	; 0x01
    22b8:	7a 81       	ldd	r23, Y+2	; 0x02
    22ba:	8b 81       	ldd	r24, Y+3	; 0x03
    22bc:	9c 81       	ldd	r25, Y+4	; 0x04
    22be:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
    22c2:	dc 01       	movw	r26, r24
    22c4:	cb 01       	movw	r24, r22
    22c6:	bc 01       	movw	r22, r24
    22c8:	cd 01       	movw	r24, r26
    22ca:	0e 94 91 10 	call	0x2122	; 0x2122 <CLCD_vSendIntNumber>
    if (Copy_f64Number < 0) {
    22ce:	69 81       	ldd	r22, Y+1	; 0x01
    22d0:	7a 81       	ldd	r23, Y+2	; 0x02
    22d2:	8b 81       	ldd	r24, Y+3	; 0x03
    22d4:	9c 81       	ldd	r25, Y+4	; 0x04
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	40 e0       	ldi	r20, 0x00	; 0
    22dc:	50 e0       	ldi	r21, 0x00	; 0
    22de:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    22e2:	88 23       	and	r24, r24
    22e4:	4c f4       	brge	.+18     	; 0x22f8 <CLCD_vSendFloatNumber+0x66>
        Copy_f64Number *= -1;
    22e6:	89 81       	ldd	r24, Y+1	; 0x01
    22e8:	9a 81       	ldd	r25, Y+2	; 0x02
    22ea:	ab 81       	ldd	r26, Y+3	; 0x03
    22ec:	bc 81       	ldd	r27, Y+4	; 0x04
    22ee:	b0 58       	subi	r27, 0x80	; 128
    22f0:	89 83       	std	Y+1, r24	; 0x01
    22f2:	9a 83       	std	Y+2, r25	; 0x02
    22f4:	ab 83       	std	Y+3, r26	; 0x03
    22f6:	bc 83       	std	Y+4, r27	; 0x04
    }
    Copy_f64Number = (f64)Copy_f64Number - (s32)Copy_f64Number;
    22f8:	69 81       	ldd	r22, Y+1	; 0x01
    22fa:	7a 81       	ldd	r23, Y+2	; 0x02
    22fc:	8b 81       	ldd	r24, Y+3	; 0x03
    22fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2300:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	bc 01       	movw	r22, r24
    230a:	cd 01       	movw	r24, r26
    230c:	0e 94 71 05 	call	0xae2	; 0xae2 <__floatsisf>
    2310:	9b 01       	movw	r18, r22
    2312:	ac 01       	movw	r20, r24
    2314:	69 81       	ldd	r22, Y+1	; 0x01
    2316:	7a 81       	ldd	r23, Y+2	; 0x02
    2318:	8b 81       	ldd	r24, Y+3	; 0x03
    231a:	9c 81       	ldd	r25, Y+4	; 0x04
    231c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__subsf3>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	89 83       	std	Y+1, r24	; 0x01
    2326:	9a 83       	std	Y+2, r25	; 0x02
    2328:	ab 83       	std	Y+3, r26	; 0x03
    232a:	bc 83       	std	Y+4, r27	; 0x04
    Copy_f64Number *= 10000;
    232c:	69 81       	ldd	r22, Y+1	; 0x01
    232e:	7a 81       	ldd	r23, Y+2	; 0x02
    2330:	8b 81       	ldd	r24, Y+3	; 0x03
    2332:	9c 81       	ldd	r25, Y+4	; 0x04
    2334:	20 e0       	ldi	r18, 0x00	; 0
    2336:	30 e4       	ldi	r19, 0x40	; 64
    2338:	4c e1       	ldi	r20, 0x1C	; 28
    233a:	56 e4       	ldi	r21, 0x46	; 70
    233c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2340:	dc 01       	movw	r26, r24
    2342:	cb 01       	movw	r24, r22
    2344:	89 83       	std	Y+1, r24	; 0x01
    2346:	9a 83       	std	Y+2, r25	; 0x02
    2348:	ab 83       	std	Y+3, r26	; 0x03
    234a:	bc 83       	std	Y+4, r27	; 0x04
    if ((s64)Copy_f64Number != 0) {
    234c:	69 81       	ldd	r22, Y+1	; 0x01
    234e:	7a 81       	ldd	r23, Y+2	; 0x02
    2350:	8b 81       	ldd	r24, Y+3	; 0x03
    2352:	9c 81       	ldd	r25, Y+4	; 0x04
    2354:	0e 94 75 00 	call	0xea	; 0xea <__fixsfdi>
    2358:	a2 2e       	mov	r10, r18
    235a:	b3 2e       	mov	r11, r19
    235c:	c4 2e       	mov	r12, r20
    235e:	d5 2e       	mov	r13, r21
    2360:	e6 2e       	mov	r14, r22
    2362:	f7 2e       	mov	r15, r23
    2364:	08 2f       	mov	r16, r24
    2366:	19 2f       	mov	r17, r25
    2368:	8a 2d       	mov	r24, r10
    236a:	8b 29       	or	r24, r11
    236c:	8c 29       	or	r24, r12
    236e:	8d 29       	or	r24, r13
    2370:	8e 29       	or	r24, r14
    2372:	8f 29       	or	r24, r15
    2374:	80 2b       	or	r24, r16
    2376:	81 2b       	or	r24, r17
    2378:	88 23       	and	r24, r24
    237a:	79 f0       	breq	.+30     	; 0x239a <CLCD_vSendFloatNumber+0x108>
        CLCD_voidsendData('.');
    237c:	8e e2       	ldi	r24, 0x2E	; 46
    237e:	0e 94 c7 0c 	call	0x198e	; 0x198e <CLCD_voidsendData>
        CLCD_vSendIntNumber((s32)Copy_f64Number);
    2382:	69 81       	ldd	r22, Y+1	; 0x01
    2384:	7a 81       	ldd	r23, Y+2	; 0x02
    2386:	8b 81       	ldd	r24, Y+3	; 0x03
    2388:	9c 81       	ldd	r25, Y+4	; 0x04
    238a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	bc 01       	movw	r22, r24
    2394:	cd 01       	movw	r24, r26
    2396:	0e 94 91 10 	call	0x2122	; 0x2122 <CLCD_vSendIntNumber>
    }
}
    239a:	0f 90       	pop	r0
    239c:	0f 90       	pop	r0
    239e:	0f 90       	pop	r0
    23a0:	0f 90       	pop	r0
    23a2:	cf 91       	pop	r28
    23a4:	df 91       	pop	r29
    23a6:	1f 91       	pop	r17
    23a8:	0f 91       	pop	r16
    23aa:	ff 90       	pop	r15
    23ac:	ef 90       	pop	r14
    23ae:	df 90       	pop	r13
    23b0:	cf 90       	pop	r12
    23b2:	bf 90       	pop	r11
    23b4:	af 90       	pop	r10
    23b6:	08 95       	ret

000023b8 <DCMOTOR_uint8Control>:
// #include "PORT_INTERFACE.h"

#include "DCMOTOR_INTERFACE.h"

u8 DCMOTOR_uint8Control(DCMOTOR_CONFIG *DcMotor, u8 Copy_uint8State)
{
    23b8:	df 93       	push	r29
    23ba:	cf 93       	push	r28
    23bc:	00 d0       	rcall	.+0      	; 0x23be <DCMOTOR_uint8Control+0x6>
    23be:	00 d0       	rcall	.+0      	; 0x23c0 <DCMOTOR_uint8Control+0x8>
    23c0:	00 d0       	rcall	.+0      	; 0x23c2 <DCMOTOR_uint8Control+0xa>
    23c2:	cd b7       	in	r28, 0x3d	; 61
    23c4:	de b7       	in	r29, 0x3e	; 62
    23c6:	9b 83       	std	Y+3, r25	; 0x03
    23c8:	8a 83       	std	Y+2, r24	; 0x02
    23ca:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_uint8ErrorState = OK;
    23cc:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_uint8State)
    23ce:	8c 81       	ldd	r24, Y+4	; 0x04
    23d0:	28 2f       	mov	r18, r24
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	3e 83       	std	Y+6, r19	; 0x06
    23d6:	2d 83       	std	Y+5, r18	; 0x05
    23d8:	8d 81       	ldd	r24, Y+5	; 0x05
    23da:	9e 81       	ldd	r25, Y+6	; 0x06
    23dc:	81 30       	cpi	r24, 0x01	; 1
    23de:	91 05       	cpc	r25, r1
    23e0:	f9 f0       	breq	.+62     	; 0x2420 <DCMOTOR_uint8Control+0x68>
    23e2:	2d 81       	ldd	r18, Y+5	; 0x05
    23e4:	3e 81       	ldd	r19, Y+6	; 0x06
    23e6:	22 30       	cpi	r18, 0x02	; 2
    23e8:	31 05       	cpc	r19, r1
    23ea:	79 f1       	breq	.+94     	; 0x244a <DCMOTOR_uint8Control+0x92>
    23ec:	8d 81       	ldd	r24, Y+5	; 0x05
    23ee:	9e 81       	ldd	r25, Y+6	; 0x06
    23f0:	00 97       	sbiw	r24, 0x00	; 0
    23f2:	09 f0       	breq	.+2      	; 0x23f6 <DCMOTOR_uint8Control+0x3e>
    23f4:	3f c0       	rjmp	.+126    	; 0x2474 <DCMOTOR_uint8Control+0xbc>
	{
	case DCMOTOR_CW:
		DIO_enumWritePinValue(DcMotor->Copy_uint8DcMotorPort, DcMotor->Copy_uint8DcMotorPinA, DIO_PIN_LOW);
    23f6:	ea 81       	ldd	r30, Y+2	; 0x02
    23f8:	fb 81       	ldd	r31, Y+3	; 0x03
    23fa:	80 81       	ld	r24, Z
    23fc:	ea 81       	ldd	r30, Y+2	; 0x02
    23fe:	fb 81       	ldd	r31, Y+3	; 0x03
    2400:	91 81       	ldd	r25, Z+1	; 0x01
    2402:	69 2f       	mov	r22, r25
    2404:	40 e0       	ldi	r20, 0x00	; 0
    2406:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <DIO_enumWritePinValue>
		DIO_enumWritePinValue(DcMotor->Copy_uint8DcMotorPort, DcMotor->Copy_uint8DcMotorPinB, DIO_PIN_HIGH);
    240a:	ea 81       	ldd	r30, Y+2	; 0x02
    240c:	fb 81       	ldd	r31, Y+3	; 0x03
    240e:	80 81       	ld	r24, Z
    2410:	ea 81       	ldd	r30, Y+2	; 0x02
    2412:	fb 81       	ldd	r31, Y+3	; 0x03
    2414:	92 81       	ldd	r25, Z+2	; 0x02
    2416:	69 2f       	mov	r22, r25
    2418:	41 e0       	ldi	r20, 0x01	; 1
    241a:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <DIO_enumWritePinValue>
    241e:	2c c0       	rjmp	.+88     	; 0x2478 <DCMOTOR_uint8Control+0xc0>
		break;
	case DCMOTOR_CCW:
		DIO_enumWritePinValue(DcMotor->Copy_uint8DcMotorPort, DcMotor->Copy_uint8DcMotorPinA, DIO_PIN_HIGH);
    2420:	ea 81       	ldd	r30, Y+2	; 0x02
    2422:	fb 81       	ldd	r31, Y+3	; 0x03
    2424:	80 81       	ld	r24, Z
    2426:	ea 81       	ldd	r30, Y+2	; 0x02
    2428:	fb 81       	ldd	r31, Y+3	; 0x03
    242a:	91 81       	ldd	r25, Z+1	; 0x01
    242c:	69 2f       	mov	r22, r25
    242e:	41 e0       	ldi	r20, 0x01	; 1
    2430:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <DIO_enumWritePinValue>
		DIO_enumWritePinValue(DcMotor->Copy_uint8DcMotorPort, DcMotor->Copy_uint8DcMotorPinB, DIO_PIN_LOW);
    2434:	ea 81       	ldd	r30, Y+2	; 0x02
    2436:	fb 81       	ldd	r31, Y+3	; 0x03
    2438:	80 81       	ld	r24, Z
    243a:	ea 81       	ldd	r30, Y+2	; 0x02
    243c:	fb 81       	ldd	r31, Y+3	; 0x03
    243e:	92 81       	ldd	r25, Z+2	; 0x02
    2440:	69 2f       	mov	r22, r25
    2442:	40 e0       	ldi	r20, 0x00	; 0
    2444:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <DIO_enumWritePinValue>
    2448:	17 c0       	rjmp	.+46     	; 0x2478 <DCMOTOR_uint8Control+0xc0>
		break;
	case DCMOTOR_STOP:
		DIO_enumWritePinValue(DcMotor->Copy_uint8DcMotorPort, DcMotor->Copy_uint8DcMotorPinA, DIO_PIN_LOW);
    244a:	ea 81       	ldd	r30, Y+2	; 0x02
    244c:	fb 81       	ldd	r31, Y+3	; 0x03
    244e:	80 81       	ld	r24, Z
    2450:	ea 81       	ldd	r30, Y+2	; 0x02
    2452:	fb 81       	ldd	r31, Y+3	; 0x03
    2454:	91 81       	ldd	r25, Z+1	; 0x01
    2456:	69 2f       	mov	r22, r25
    2458:	40 e0       	ldi	r20, 0x00	; 0
    245a:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <DIO_enumWritePinValue>
		DIO_enumWritePinValue(DcMotor->Copy_uint8DcMotorPort, DcMotor->Copy_uint8DcMotorPinB, DIO_PIN_LOW);
    245e:	ea 81       	ldd	r30, Y+2	; 0x02
    2460:	fb 81       	ldd	r31, Y+3	; 0x03
    2462:	80 81       	ld	r24, Z
    2464:	ea 81       	ldd	r30, Y+2	; 0x02
    2466:	fb 81       	ldd	r31, Y+3	; 0x03
    2468:	92 81       	ldd	r25, Z+2	; 0x02
    246a:	69 2f       	mov	r22, r25
    246c:	40 e0       	ldi	r20, 0x00	; 0
    246e:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <DIO_enumWritePinValue>
    2472:	02 c0       	rjmp	.+4      	; 0x2478 <DCMOTOR_uint8Control+0xc0>
		break;
	default:
		Local_uint8ErrorState = NOK;
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_uint8ErrorState;
    2478:	89 81       	ldd	r24, Y+1	; 0x01
}
    247a:	26 96       	adiw	r28, 0x06	; 6
    247c:	0f b6       	in	r0, 0x3f	; 63
    247e:	f8 94       	cli
    2480:	de bf       	out	0x3e, r29	; 62
    2482:	0f be       	out	0x3f, r0	; 63
    2484:	cd bf       	out	0x3d, r28	; 61
    2486:	cf 91       	pop	r28
    2488:	df 91       	pop	r29
    248a:	08 95       	ret

0000248c <DHT11_voidInit>:
#include "DHT11_interface.h"
#include "DHT11_private.h"
#include "DHT11_config.h"
#include <util/delay.h>

void DHT11_voidInit(void) {
    248c:	df 93       	push	r29
    248e:	cf 93       	push	r28
    2490:	cd b7       	in	r28, 0x3d	; 61
    2492:	de b7       	in	r29, 0x3e	; 62
    /* Set DHT11 pin as input with pull-up (initially) */
    DIO_enumSetPinDirection(DHT11_PORT, DHT11_PIN, DIO_PIN_INPUT);
    2494:	80 e0       	ldi	r24, 0x00	; 0
    2496:	62 e0       	ldi	r22, 0x02	; 2
    2498:	40 e0       	ldi	r20, 0x00	; 0
    249a:	0e 94 fe 24 	call	0x49fc	; 0x49fc <DIO_enumSetPinDirection>
    DIO_enumConnectPullUp(DHT11_PORT, DHT11_PIN, DIO_PIN_HIGH);
    249e:	80 e0       	ldi	r24, 0x00	; 0
    24a0:	62 e0       	ldi	r22, 0x02	; 2
    24a2:	41 e0       	ldi	r20, 0x01	; 1
    24a4:	0e 94 b1 29 	call	0x5362	; 0x5362 <DIO_enumConnectPullUp>
}
    24a8:	cf 91       	pop	r28
    24aa:	df 91       	pop	r29
    24ac:	08 95       	ret

000024ae <DHT11_u8GetData>:

u8 DHT11_u8GetData(DHT11_Data *Copy_pu8Data) {
    24ae:	0f 93       	push	r16
    24b0:	1f 93       	push	r17
    24b2:	df 93       	push	r29
    24b4:	cf 93       	push	r28
    24b6:	cd b7       	in	r28, 0x3d	; 61
    24b8:	de b7       	in	r29, 0x3e	; 62
    24ba:	2b 97       	sbiw	r28, 0x0b	; 11
    24bc:	0f b6       	in	r0, 0x3f	; 63
    24be:	f8 94       	cli
    24c0:	de bf       	out	0x3e, r29	; 62
    24c2:	0f be       	out	0x3f, r0	; 63
    24c4:	cd bf       	out	0x3d, r28	; 61
    24c6:	9a 87       	std	Y+10, r25	; 0x0a
    24c8:	89 87       	std	Y+9, r24	; 0x09
    u8 Local_u8Response = 0;
    24ca:	1b 82       	std	Y+3, r1	; 0x03
    u8 Local_u8Data[5] = {0};
    24cc:	85 e0       	ldi	r24, 0x05	; 5
    24ce:	fe 01       	movw	r30, r28
    24d0:	34 96       	adiw	r30, 0x04	; 4
    24d2:	df 01       	movw	r26, r30
    24d4:	98 2f       	mov	r25, r24
    24d6:	1d 92       	st	X+, r1
    24d8:	9a 95       	dec	r25
    24da:	e9 f7       	brne	.-6      	; 0x24d6 <DHT11_u8GetData+0x28>
    u8 Local_u8Checksum = 0;
    24dc:	1a 82       	std	Y+2, r1	; 0x02
    u8 Local_u8Counter;

    /* Send start signal */
    DHT11_voidSendStartSignal();
    24de:	0e 94 b1 12 	call	0x2562	; 0x2562 <DHT11_voidSendStartSignal>

    /* Check response */
    Local_u8Response = DHT11_u8CheckResponse();
    24e2:	0e 94 59 14 	call	0x28b2	; 0x28b2 <DHT11_u8CheckResponse>
    24e6:	8b 83       	std	Y+3, r24	; 0x03
    if (!Local_u8Response) {
    24e8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ea:	88 23       	and	r24, r24
    24ec:	11 f4       	brne	.+4      	; 0x24f2 <DHT11_u8GetData+0x44>
        return 0; // No response from sensor
    24ee:	1b 86       	std	Y+11, r1	; 0x0b
    24f0:	2c c0       	rjmp	.+88     	; 0x254a <DHT11_u8GetData+0x9c>
    }

    /* Read 5 bytes (40 bits) of data */
    for (Local_u8Counter = 0; Local_u8Counter < 5; Local_u8Counter++) {
    24f2:	19 82       	std	Y+1, r1	; 0x01
    24f4:	0f c0       	rjmp	.+30     	; 0x2514 <DHT11_u8GetData+0x66>
        Local_u8Data[Local_u8Counter] = DHT11_u8ReadByte();
    24f6:	89 81       	ldd	r24, Y+1	; 0x01
    24f8:	08 2f       	mov	r16, r24
    24fa:	10 e0       	ldi	r17, 0x00	; 0
    24fc:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <DHT11_u8ReadByte>
    2500:	28 2f       	mov	r18, r24
    2502:	ce 01       	movw	r24, r28
    2504:	04 96       	adiw	r24, 0x04	; 4
    2506:	fc 01       	movw	r30, r24
    2508:	e0 0f       	add	r30, r16
    250a:	f1 1f       	adc	r31, r17
    250c:	20 83       	st	Z, r18
    if (!Local_u8Response) {
        return 0; // No response from sensor
    }

    /* Read 5 bytes (40 bits) of data */
    for (Local_u8Counter = 0; Local_u8Counter < 5; Local_u8Counter++) {
    250e:	89 81       	ldd	r24, Y+1	; 0x01
    2510:	8f 5f       	subi	r24, 0xFF	; 255
    2512:	89 83       	std	Y+1, r24	; 0x01
    2514:	89 81       	ldd	r24, Y+1	; 0x01
    2516:	85 30       	cpi	r24, 0x05	; 5
    2518:	70 f3       	brcs	.-36     	; 0x24f6 <DHT11_u8GetData+0x48>
        Local_u8Data[Local_u8Counter] = DHT11_u8ReadByte();
    }

    /* Verify checksum */
    Local_u8Checksum = Local_u8Data[0] + Local_u8Data[1] + Local_u8Data[2] + Local_u8Data[3];
    251a:	9c 81       	ldd	r25, Y+4	; 0x04
    251c:	8d 81       	ldd	r24, Y+5	; 0x05
    251e:	98 0f       	add	r25, r24
    2520:	8e 81       	ldd	r24, Y+6	; 0x06
    2522:	98 0f       	add	r25, r24
    2524:	8f 81       	ldd	r24, Y+7	; 0x07
    2526:	89 0f       	add	r24, r25
    2528:	8a 83       	std	Y+2, r24	; 0x02
    if (Local_u8Checksum != Local_u8Data[4]) {
    252a:	98 85       	ldd	r25, Y+8	; 0x08
    252c:	8a 81       	ldd	r24, Y+2	; 0x02
    252e:	98 17       	cp	r25, r24
    2530:	11 f0       	breq	.+4      	; 0x2536 <DHT11_u8GetData+0x88>
        return 0; // Checksum error
    2532:	1b 86       	std	Y+11, r1	; 0x0b
    2534:	0a c0       	rjmp	.+20     	; 0x254a <DHT11_u8GetData+0x9c>
    }

    /* Store data */
    Copy_pu8Data->Humidity = Local_u8Data[0];
    2536:	8c 81       	ldd	r24, Y+4	; 0x04
    2538:	e9 85       	ldd	r30, Y+9	; 0x09
    253a:	fa 85       	ldd	r31, Y+10	; 0x0a
    253c:	81 83       	std	Z+1, r24	; 0x01
    Copy_pu8Data->Temperature = Local_u8Data[2];
    253e:	8e 81       	ldd	r24, Y+6	; 0x06
    2540:	e9 85       	ldd	r30, Y+9	; 0x09
    2542:	fa 85       	ldd	r31, Y+10	; 0x0a
    2544:	80 83       	st	Z, r24

    return 1; // Success
    2546:	a1 e0       	ldi	r26, 0x01	; 1
    2548:	ab 87       	std	Y+11, r26	; 0x0b
    254a:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    254c:	2b 96       	adiw	r28, 0x0b	; 11
    254e:	0f b6       	in	r0, 0x3f	; 63
    2550:	f8 94       	cli
    2552:	de bf       	out	0x3e, r29	; 62
    2554:	0f be       	out	0x3f, r0	; 63
    2556:	cd bf       	out	0x3d, r28	; 61
    2558:	cf 91       	pop	r28
    255a:	df 91       	pop	r29
    255c:	1f 91       	pop	r17
    255e:	0f 91       	pop	r16
    2560:	08 95       	ret

00002562 <DHT11_voidSendStartSignal>:

static void DHT11_voidSendStartSignal(void) {
    2562:	df 93       	push	r29
    2564:	cf 93       	push	r28
    2566:	cd b7       	in	r28, 0x3d	; 61
    2568:	de b7       	in	r29, 0x3e	; 62
    256a:	e0 97       	sbiw	r28, 0x30	; 48
    256c:	0f b6       	in	r0, 0x3f	; 63
    256e:	f8 94       	cli
    2570:	de bf       	out	0x3e, r29	; 62
    2572:	0f be       	out	0x3f, r0	; 63
    2574:	cd bf       	out	0x3d, r28	; 61
    /* Set pin as output */
   DIO_enumSetPinDirection(DHT11_PORT, DHT11_PIN, DIO_PIN_OUTPUT);
    2576:	80 e0       	ldi	r24, 0x00	; 0
    2578:	62 e0       	ldi	r22, 0x02	; 2
    257a:	41 e0       	ldi	r20, 0x01	; 1
    257c:	0e 94 fe 24 	call	0x49fc	; 0x49fc <DIO_enumSetPinDirection>

    /* Pull low for 18ms */
    DIO_enumWritePinValue(DHT11_PORT, DHT11_PIN, DIO_PIN_LOW);
    2580:	80 e0       	ldi	r24, 0x00	; 0
    2582:	62 e0       	ldi	r22, 0x02	; 2
    2584:	40 e0       	ldi	r20, 0x00	; 0
    2586:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <DIO_enumWritePinValue>
    258a:	80 e0       	ldi	r24, 0x00	; 0
    258c:	90 ea       	ldi	r25, 0xA0	; 160
    258e:	ac e8       	ldi	r26, 0x8C	; 140
    2590:	b6 e4       	ldi	r27, 0x46	; 70
    2592:	8d a7       	std	Y+45, r24	; 0x2d
    2594:	9e a7       	std	Y+46, r25	; 0x2e
    2596:	af a7       	std	Y+47, r26	; 0x2f
    2598:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    259a:	6d a5       	ldd	r22, Y+45	; 0x2d
    259c:	7e a5       	ldd	r23, Y+46	; 0x2e
    259e:	8f a5       	ldd	r24, Y+47	; 0x2f
    25a0:	98 a9       	ldd	r25, Y+48	; 0x30
    25a2:	2b ea       	ldi	r18, 0xAB	; 171
    25a4:	3a ea       	ldi	r19, 0xAA	; 170
    25a6:	4a e2       	ldi	r20, 0x2A	; 42
    25a8:	50 e4       	ldi	r21, 0x40	; 64
    25aa:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	89 a7       	std	Y+41, r24	; 0x29
    25b4:	9a a7       	std	Y+42, r25	; 0x2a
    25b6:	ab a7       	std	Y+43, r26	; 0x2b
    25b8:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    25ba:	69 a5       	ldd	r22, Y+41	; 0x29
    25bc:	7a a5       	ldd	r23, Y+42	; 0x2a
    25be:	8b a5       	ldd	r24, Y+43	; 0x2b
    25c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    25c2:	20 e0       	ldi	r18, 0x00	; 0
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	40 e8       	ldi	r20, 0x80	; 128
    25c8:	5f e3       	ldi	r21, 0x3F	; 63
    25ca:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    25ce:	88 23       	and	r24, r24
    25d0:	1c f4       	brge	.+6      	; 0x25d8 <DHT11_voidSendStartSignal+0x76>
		__ticks = 1;
    25d2:	81 e0       	ldi	r24, 0x01	; 1
    25d4:	88 a7       	std	Y+40, r24	; 0x28
    25d6:	91 c0       	rjmp	.+290    	; 0x26fa <DHT11_voidSendStartSignal+0x198>
	else if (__tmp > 255)
    25d8:	69 a5       	ldd	r22, Y+41	; 0x29
    25da:	7a a5       	ldd	r23, Y+42	; 0x2a
    25dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    25de:	9c a5       	ldd	r25, Y+44	; 0x2c
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	4f e7       	ldi	r20, 0x7F	; 127
    25e6:	53 e4       	ldi	r21, 0x43	; 67
    25e8:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    25ec:	18 16       	cp	r1, r24
    25ee:	0c f0       	brlt	.+2      	; 0x25f2 <DHT11_voidSendStartSignal+0x90>
    25f0:	7b c0       	rjmp	.+246    	; 0x26e8 <DHT11_voidSendStartSignal+0x186>
	{
		_delay_ms(__us / 1000.0);
    25f2:	6d a5       	ldd	r22, Y+45	; 0x2d
    25f4:	7e a5       	ldd	r23, Y+46	; 0x2e
    25f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    25f8:	98 a9       	ldd	r25, Y+48	; 0x30
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	4a e7       	ldi	r20, 0x7A	; 122
    2600:	54 e4       	ldi	r21, 0x44	; 68
    2602:	0e 94 35 04 	call	0x86a	; 0x86a <__divsf3>
    2606:	dc 01       	movw	r26, r24
    2608:	cb 01       	movw	r24, r22
    260a:	8c a3       	std	Y+36, r24	; 0x24
    260c:	9d a3       	std	Y+37, r25	; 0x25
    260e:	ae a3       	std	Y+38, r26	; 0x26
    2610:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2612:	6c a1       	ldd	r22, Y+36	; 0x24
    2614:	7d a1       	ldd	r23, Y+37	; 0x25
    2616:	8e a1       	ldd	r24, Y+38	; 0x26
    2618:	9f a1       	ldd	r25, Y+39	; 0x27
    261a:	20 e0       	ldi	r18, 0x00	; 0
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	4a ef       	ldi	r20, 0xFA	; 250
    2620:	54 e4       	ldi	r21, 0x44	; 68
    2622:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2626:	dc 01       	movw	r26, r24
    2628:	cb 01       	movw	r24, r22
    262a:	88 a3       	std	Y+32, r24	; 0x20
    262c:	99 a3       	std	Y+33, r25	; 0x21
    262e:	aa a3       	std	Y+34, r26	; 0x22
    2630:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2632:	68 a1       	ldd	r22, Y+32	; 0x20
    2634:	79 a1       	ldd	r23, Y+33	; 0x21
    2636:	8a a1       	ldd	r24, Y+34	; 0x22
    2638:	9b a1       	ldd	r25, Y+35	; 0x23
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	40 e8       	ldi	r20, 0x80	; 128
    2640:	5f e3       	ldi	r21, 0x3F	; 63
    2642:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    2646:	88 23       	and	r24, r24
    2648:	2c f4       	brge	.+10     	; 0x2654 <DHT11_voidSendStartSignal+0xf2>
		__ticks = 1;
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	9f 8f       	std	Y+31, r25	; 0x1f
    2650:	8e 8f       	std	Y+30, r24	; 0x1e
    2652:	3f c0       	rjmp	.+126    	; 0x26d2 <DHT11_voidSendStartSignal+0x170>
	else if (__tmp > 65535)
    2654:	68 a1       	ldd	r22, Y+32	; 0x20
    2656:	79 a1       	ldd	r23, Y+33	; 0x21
    2658:	8a a1       	ldd	r24, Y+34	; 0x22
    265a:	9b a1       	ldd	r25, Y+35	; 0x23
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	3f ef       	ldi	r19, 0xFF	; 255
    2660:	4f e7       	ldi	r20, 0x7F	; 127
    2662:	57 e4       	ldi	r21, 0x47	; 71
    2664:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    2668:	18 16       	cp	r1, r24
    266a:	4c f5       	brge	.+82     	; 0x26be <DHT11_voidSendStartSignal+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    266c:	6c a1       	ldd	r22, Y+36	; 0x24
    266e:	7d a1       	ldd	r23, Y+37	; 0x25
    2670:	8e a1       	ldd	r24, Y+38	; 0x26
    2672:	9f a1       	ldd	r25, Y+39	; 0x27
    2674:	20 e0       	ldi	r18, 0x00	; 0
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	40 e2       	ldi	r20, 0x20	; 32
    267a:	51 e4       	ldi	r21, 0x41	; 65
    267c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2680:	dc 01       	movw	r26, r24
    2682:	cb 01       	movw	r24, r22
    2684:	bc 01       	movw	r22, r24
    2686:	cd 01       	movw	r24, r26
    2688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	9f 8f       	std	Y+31, r25	; 0x1f
    2692:	8e 8f       	std	Y+30, r24	; 0x1e
    2694:	0f c0       	rjmp	.+30     	; 0x26b4 <DHT11_voidSendStartSignal+0x152>
    2696:	88 ec       	ldi	r24, 0xC8	; 200
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	9d 8f       	std	Y+29, r25	; 0x1d
    269c:	8c 8f       	std	Y+28, r24	; 0x1c
    269e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    26a0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    26a2:	01 97       	sbiw	r24, 0x01	; 1
    26a4:	f1 f7       	brne	.-4      	; 0x26a2 <DHT11_voidSendStartSignal+0x140>
    26a6:	9d 8f       	std	Y+29, r25	; 0x1d
    26a8:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26ac:	9f 8d       	ldd	r25, Y+31	; 0x1f
    26ae:	01 97       	sbiw	r24, 0x01	; 1
    26b0:	9f 8f       	std	Y+31, r25	; 0x1f
    26b2:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26b6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    26b8:	00 97       	sbiw	r24, 0x00	; 0
    26ba:	69 f7       	brne	.-38     	; 0x2696 <DHT11_voidSendStartSignal+0x134>
    26bc:	24 c0       	rjmp	.+72     	; 0x2706 <DHT11_voidSendStartSignal+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26be:	68 a1       	ldd	r22, Y+32	; 0x20
    26c0:	79 a1       	ldd	r23, Y+33	; 0x21
    26c2:	8a a1       	ldd	r24, Y+34	; 0x22
    26c4:	9b a1       	ldd	r25, Y+35	; 0x23
    26c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ca:	dc 01       	movw	r26, r24
    26cc:	cb 01       	movw	r24, r22
    26ce:	9f 8f       	std	Y+31, r25	; 0x1f
    26d0:	8e 8f       	std	Y+30, r24	; 0x1e
    26d2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26d4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    26d6:	9b 8f       	std	Y+27, r25	; 0x1b
    26d8:	8a 8f       	std	Y+26, r24	; 0x1a
    26da:	8a 8d       	ldd	r24, Y+26	; 0x1a
    26dc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    26de:	01 97       	sbiw	r24, 0x01	; 1
    26e0:	f1 f7       	brne	.-4      	; 0x26de <DHT11_voidSendStartSignal+0x17c>
    26e2:	9b 8f       	std	Y+27, r25	; 0x1b
    26e4:	8a 8f       	std	Y+26, r24	; 0x1a
    26e6:	0f c0       	rjmp	.+30     	; 0x2706 <DHT11_voidSendStartSignal+0x1a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    26e8:	69 a5       	ldd	r22, Y+41	; 0x29
    26ea:	7a a5       	ldd	r23, Y+42	; 0x2a
    26ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    26ee:	9c a5       	ldd	r25, Y+44	; 0x2c
    26f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f4:	dc 01       	movw	r26, r24
    26f6:	cb 01       	movw	r24, r22
    26f8:	88 a7       	std	Y+40, r24	; 0x28
    26fa:	88 a5       	ldd	r24, Y+40	; 0x28
    26fc:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    26fe:	89 8d       	ldd	r24, Y+25	; 0x19
    2700:	8a 95       	dec	r24
    2702:	f1 f7       	brne	.-4      	; 0x2700 <DHT11_voidSendStartSignal+0x19e>
    2704:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(DHT11_START_SIGNAL_DURATION);

    /* Pull high for 20-40us */
    DIO_enumWritePinValue(DHT11_PORT, DHT11_PIN, DIO_PIN_HIGH);
    2706:	80 e0       	ldi	r24, 0x00	; 0
    2708:	62 e0       	ldi	r22, 0x02	; 2
    270a:	41 e0       	ldi	r20, 0x01	; 1
    270c:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <DIO_enumWritePinValue>
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	a0 ea       	ldi	r26, 0xA0	; 160
    2716:	b1 e4       	ldi	r27, 0x41	; 65
    2718:	8d 8b       	std	Y+21, r24	; 0x15
    271a:	9e 8b       	std	Y+22, r25	; 0x16
    271c:	af 8b       	std	Y+23, r26	; 0x17
    271e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2720:	6d 89       	ldd	r22, Y+21	; 0x15
    2722:	7e 89       	ldd	r23, Y+22	; 0x16
    2724:	8f 89       	ldd	r24, Y+23	; 0x17
    2726:	98 8d       	ldd	r25, Y+24	; 0x18
    2728:	2b ea       	ldi	r18, 0xAB	; 171
    272a:	3a ea       	ldi	r19, 0xAA	; 170
    272c:	4a e2       	ldi	r20, 0x2A	; 42
    272e:	50 e4       	ldi	r21, 0x40	; 64
    2730:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	89 8b       	std	Y+17, r24	; 0x11
    273a:	9a 8b       	std	Y+18, r25	; 0x12
    273c:	ab 8b       	std	Y+19, r26	; 0x13
    273e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2740:	69 89       	ldd	r22, Y+17	; 0x11
    2742:	7a 89       	ldd	r23, Y+18	; 0x12
    2744:	8b 89       	ldd	r24, Y+19	; 0x13
    2746:	9c 89       	ldd	r25, Y+20	; 0x14
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	40 e8       	ldi	r20, 0x80	; 128
    274e:	5f e3       	ldi	r21, 0x3F	; 63
    2750:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    2754:	88 23       	and	r24, r24
    2756:	1c f4       	brge	.+6      	; 0x275e <DHT11_voidSendStartSignal+0x1fc>
		__ticks = 1;
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	88 8b       	std	Y+16, r24	; 0x10
    275c:	91 c0       	rjmp	.+290    	; 0x2880 <DHT11_voidSendStartSignal+0x31e>
	else if (__tmp > 255)
    275e:	69 89       	ldd	r22, Y+17	; 0x11
    2760:	7a 89       	ldd	r23, Y+18	; 0x12
    2762:	8b 89       	ldd	r24, Y+19	; 0x13
    2764:	9c 89       	ldd	r25, Y+20	; 0x14
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	4f e7       	ldi	r20, 0x7F	; 127
    276c:	53 e4       	ldi	r21, 0x43	; 67
    276e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    2772:	18 16       	cp	r1, r24
    2774:	0c f0       	brlt	.+2      	; 0x2778 <DHT11_voidSendStartSignal+0x216>
    2776:	7b c0       	rjmp	.+246    	; 0x286e <DHT11_voidSendStartSignal+0x30c>
	{
		_delay_ms(__us / 1000.0);
    2778:	6d 89       	ldd	r22, Y+21	; 0x15
    277a:	7e 89       	ldd	r23, Y+22	; 0x16
    277c:	8f 89       	ldd	r24, Y+23	; 0x17
    277e:	98 8d       	ldd	r25, Y+24	; 0x18
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	4a e7       	ldi	r20, 0x7A	; 122
    2786:	54 e4       	ldi	r21, 0x44	; 68
    2788:	0e 94 35 04 	call	0x86a	; 0x86a <__divsf3>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	8c 87       	std	Y+12, r24	; 0x0c
    2792:	9d 87       	std	Y+13, r25	; 0x0d
    2794:	ae 87       	std	Y+14, r26	; 0x0e
    2796:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2798:	6c 85       	ldd	r22, Y+12	; 0x0c
    279a:	7d 85       	ldd	r23, Y+13	; 0x0d
    279c:	8e 85       	ldd	r24, Y+14	; 0x0e
    279e:	9f 85       	ldd	r25, Y+15	; 0x0f
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	4a ef       	ldi	r20, 0xFA	; 250
    27a6:	54 e4       	ldi	r21, 0x44	; 68
    27a8:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	88 87       	std	Y+8, r24	; 0x08
    27b2:	99 87       	std	Y+9, r25	; 0x09
    27b4:	aa 87       	std	Y+10, r26	; 0x0a
    27b6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    27b8:	68 85       	ldd	r22, Y+8	; 0x08
    27ba:	79 85       	ldd	r23, Y+9	; 0x09
    27bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    27be:	9b 85       	ldd	r25, Y+11	; 0x0b
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	40 e8       	ldi	r20, 0x80	; 128
    27c6:	5f e3       	ldi	r21, 0x3F	; 63
    27c8:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    27cc:	88 23       	and	r24, r24
    27ce:	2c f4       	brge	.+10     	; 0x27da <DHT11_voidSendStartSignal+0x278>
		__ticks = 1;
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	9f 83       	std	Y+7, r25	; 0x07
    27d6:	8e 83       	std	Y+6, r24	; 0x06
    27d8:	3f c0       	rjmp	.+126    	; 0x2858 <DHT11_voidSendStartSignal+0x2f6>
	else if (__tmp > 65535)
    27da:	68 85       	ldd	r22, Y+8	; 0x08
    27dc:	79 85       	ldd	r23, Y+9	; 0x09
    27de:	8a 85       	ldd	r24, Y+10	; 0x0a
    27e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	3f ef       	ldi	r19, 0xFF	; 255
    27e6:	4f e7       	ldi	r20, 0x7F	; 127
    27e8:	57 e4       	ldi	r21, 0x47	; 71
    27ea:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    27ee:	18 16       	cp	r1, r24
    27f0:	4c f5       	brge	.+82     	; 0x2844 <DHT11_voidSendStartSignal+0x2e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f2:	6c 85       	ldd	r22, Y+12	; 0x0c
    27f4:	7d 85       	ldd	r23, Y+13	; 0x0d
    27f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    27f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	40 e2       	ldi	r20, 0x20	; 32
    2800:	51 e4       	ldi	r21, 0x41	; 65
    2802:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2806:	dc 01       	movw	r26, r24
    2808:	cb 01       	movw	r24, r22
    280a:	bc 01       	movw	r22, r24
    280c:	cd 01       	movw	r24, r26
    280e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	9f 83       	std	Y+7, r25	; 0x07
    2818:	8e 83       	std	Y+6, r24	; 0x06
    281a:	0f c0       	rjmp	.+30     	; 0x283a <DHT11_voidSendStartSignal+0x2d8>
    281c:	88 ec       	ldi	r24, 0xC8	; 200
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	9d 83       	std	Y+5, r25	; 0x05
    2822:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2824:	8c 81       	ldd	r24, Y+4	; 0x04
    2826:	9d 81       	ldd	r25, Y+5	; 0x05
    2828:	01 97       	sbiw	r24, 0x01	; 1
    282a:	f1 f7       	brne	.-4      	; 0x2828 <DHT11_voidSendStartSignal+0x2c6>
    282c:	9d 83       	std	Y+5, r25	; 0x05
    282e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2830:	8e 81       	ldd	r24, Y+6	; 0x06
    2832:	9f 81       	ldd	r25, Y+7	; 0x07
    2834:	01 97       	sbiw	r24, 0x01	; 1
    2836:	9f 83       	std	Y+7, r25	; 0x07
    2838:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    283a:	8e 81       	ldd	r24, Y+6	; 0x06
    283c:	9f 81       	ldd	r25, Y+7	; 0x07
    283e:	00 97       	sbiw	r24, 0x00	; 0
    2840:	69 f7       	brne	.-38     	; 0x281c <DHT11_voidSendStartSignal+0x2ba>
    2842:	24 c0       	rjmp	.+72     	; 0x288c <DHT11_voidSendStartSignal+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2844:	68 85       	ldd	r22, Y+8	; 0x08
    2846:	79 85       	ldd	r23, Y+9	; 0x09
    2848:	8a 85       	ldd	r24, Y+10	; 0x0a
    284a:	9b 85       	ldd	r25, Y+11	; 0x0b
    284c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2850:	dc 01       	movw	r26, r24
    2852:	cb 01       	movw	r24, r22
    2854:	9f 83       	std	Y+7, r25	; 0x07
    2856:	8e 83       	std	Y+6, r24	; 0x06
    2858:	8e 81       	ldd	r24, Y+6	; 0x06
    285a:	9f 81       	ldd	r25, Y+7	; 0x07
    285c:	9b 83       	std	Y+3, r25	; 0x03
    285e:	8a 83       	std	Y+2, r24	; 0x02
    2860:	8a 81       	ldd	r24, Y+2	; 0x02
    2862:	9b 81       	ldd	r25, Y+3	; 0x03
    2864:	01 97       	sbiw	r24, 0x01	; 1
    2866:	f1 f7       	brne	.-4      	; 0x2864 <DHT11_voidSendStartSignal+0x302>
    2868:	9b 83       	std	Y+3, r25	; 0x03
    286a:	8a 83       	std	Y+2, r24	; 0x02
    286c:	0f c0       	rjmp	.+30     	; 0x288c <DHT11_voidSendStartSignal+0x32a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    286e:	69 89       	ldd	r22, Y+17	; 0x11
    2870:	7a 89       	ldd	r23, Y+18	; 0x12
    2872:	8b 89       	ldd	r24, Y+19	; 0x13
    2874:	9c 89       	ldd	r25, Y+20	; 0x14
    2876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287a:	dc 01       	movw	r26, r24
    287c:	cb 01       	movw	r24, r22
    287e:	88 8b       	std	Y+16, r24	; 0x10
    2880:	88 89       	ldd	r24, Y+16	; 0x10
    2882:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2884:	89 81       	ldd	r24, Y+1	; 0x01
    2886:	8a 95       	dec	r24
    2888:	f1 f7       	brne	.-4      	; 0x2886 <DHT11_voidSendStartSignal+0x324>
    288a:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(DHT11_RESPONSE_SIGNAL_DURATION);

    /* Set pin as input with pull-up */
    DIO_enumSetPinDirection(DHT11_PORT, DHT11_PIN, DIO_PIN_INPUT);
    288c:	80 e0       	ldi	r24, 0x00	; 0
    288e:	62 e0       	ldi	r22, 0x02	; 2
    2890:	40 e0       	ldi	r20, 0x00	; 0
    2892:	0e 94 fe 24 	call	0x49fc	; 0x49fc <DIO_enumSetPinDirection>
    DIO_enumConnectPullUp(DHT11_PORT, DHT11_PIN, DIO_PIN_HIGH);
    2896:	80 e0       	ldi	r24, 0x00	; 0
    2898:	62 e0       	ldi	r22, 0x02	; 2
    289a:	41 e0       	ldi	r20, 0x01	; 1
    289c:	0e 94 b1 29 	call	0x5362	; 0x5362 <DIO_enumConnectPullUp>
}
    28a0:	e0 96       	adiw	r28, 0x30	; 48
    28a2:	0f b6       	in	r0, 0x3f	; 63
    28a4:	f8 94       	cli
    28a6:	de bf       	out	0x3e, r29	; 62
    28a8:	0f be       	out	0x3f, r0	; 63
    28aa:	cd bf       	out	0x3d, r28	; 61
    28ac:	cf 91       	pop	r28
    28ae:	df 91       	pop	r29
    28b0:	08 95       	ret

000028b2 <DHT11_u8CheckResponse>:

static u8 DHT11_u8CheckResponse(void) {
    28b2:	df 93       	push	r29
    28b4:	cf 93       	push	r28
    28b6:	cd b7       	in	r28, 0x3d	; 61
    28b8:	de b7       	in	r29, 0x3e	; 62
    28ba:	e9 97       	sbiw	r28, 0x39	; 57
    28bc:	0f b6       	in	r0, 0x3f	; 63
    28be:	f8 94       	cli
    28c0:	de bf       	out	0x3e, r29	; 62
    28c2:	0f be       	out	0x3f, r0	; 63
    28c4:	cd bf       	out	0x3d, r28	; 61
    u32 Local_u32TimeOut = 0;
    28c6:	19 aa       	std	Y+49, r1	; 0x31
    28c8:	1a aa       	std	Y+50, r1	; 0x32
    28ca:	1b aa       	std	Y+51, r1	; 0x33
    28cc:	1c aa       	std	Y+52, r1	; 0x34
    28ce:	d7 c0       	rjmp	.+430    	; 0x2a7e <DHT11_u8CheckResponse+0x1cc>
	u32 Local_u8Response;

    /* Wait for DHT11 to pull low (80us) */
    while (DIO_enumReadPinValue(DHT11_PORT, DHT11_PIN, &Local_u8Response) == DIO_PIN_HIGH) {
        Local_u32TimeOut++;
    28d0:	89 a9       	ldd	r24, Y+49	; 0x31
    28d2:	9a a9       	ldd	r25, Y+50	; 0x32
    28d4:	ab a9       	ldd	r26, Y+51	; 0x33
    28d6:	bc a9       	ldd	r27, Y+52	; 0x34
    28d8:	01 96       	adiw	r24, 0x01	; 1
    28da:	a1 1d       	adc	r26, r1
    28dc:	b1 1d       	adc	r27, r1
    28de:	89 ab       	std	Y+49, r24	; 0x31
    28e0:	9a ab       	std	Y+50, r25	; 0x32
    28e2:	ab ab       	std	Y+51, r26	; 0x33
    28e4:	bc ab       	std	Y+52, r27	; 0x34
        if (Local_u32TimeOut > DHT11_TIMEOUT) {
    28e6:	89 a9       	ldd	r24, Y+49	; 0x31
    28e8:	9a a9       	ldd	r25, Y+50	; 0x32
    28ea:	ab a9       	ldd	r26, Y+51	; 0x33
    28ec:	bc a9       	ldd	r27, Y+52	; 0x34
    28ee:	81 31       	cpi	r24, 0x11	; 17
    28f0:	27 e2       	ldi	r18, 0x27	; 39
    28f2:	92 07       	cpc	r25, r18
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	a2 07       	cpc	r26, r18
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	b2 07       	cpc	r27, r18
    28fc:	10 f0       	brcs	.+4      	; 0x2902 <DHT11_u8CheckResponse+0x50>
            return 0; // Timeout
    28fe:	19 ae       	std	Y+57, r1	; 0x39
    2900:	b2 c1       	rjmp	.+868    	; 0x2c66 <DHT11_u8CheckResponse+0x3b4>
    2902:	80 e0       	ldi	r24, 0x00	; 0
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	a0 e8       	ldi	r26, 0x80	; 128
    2908:	bf e3       	ldi	r27, 0x3F	; 63
    290a:	8d a7       	std	Y+45, r24	; 0x2d
    290c:	9e a7       	std	Y+46, r25	; 0x2e
    290e:	af a7       	std	Y+47, r26	; 0x2f
    2910:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2912:	6d a5       	ldd	r22, Y+45	; 0x2d
    2914:	7e a5       	ldd	r23, Y+46	; 0x2e
    2916:	8f a5       	ldd	r24, Y+47	; 0x2f
    2918:	98 a9       	ldd	r25, Y+48	; 0x30
    291a:	2b ea       	ldi	r18, 0xAB	; 171
    291c:	3a ea       	ldi	r19, 0xAA	; 170
    291e:	4a e2       	ldi	r20, 0x2A	; 42
    2920:	50 e4       	ldi	r21, 0x40	; 64
    2922:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	89 a7       	std	Y+41, r24	; 0x29
    292c:	9a a7       	std	Y+42, r25	; 0x2a
    292e:	ab a7       	std	Y+43, r26	; 0x2b
    2930:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2932:	69 a5       	ldd	r22, Y+41	; 0x29
    2934:	7a a5       	ldd	r23, Y+42	; 0x2a
    2936:	8b a5       	ldd	r24, Y+43	; 0x2b
    2938:	9c a5       	ldd	r25, Y+44	; 0x2c
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	40 e8       	ldi	r20, 0x80	; 128
    2940:	5f e3       	ldi	r21, 0x3F	; 63
    2942:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    2946:	88 23       	and	r24, r24
    2948:	1c f4       	brge	.+6      	; 0x2950 <DHT11_u8CheckResponse+0x9e>
		__ticks = 1;
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	88 a7       	std	Y+40, r24	; 0x28
    294e:	91 c0       	rjmp	.+290    	; 0x2a72 <DHT11_u8CheckResponse+0x1c0>
	else if (__tmp > 255)
    2950:	69 a5       	ldd	r22, Y+41	; 0x29
    2952:	7a a5       	ldd	r23, Y+42	; 0x2a
    2954:	8b a5       	ldd	r24, Y+43	; 0x2b
    2956:	9c a5       	ldd	r25, Y+44	; 0x2c
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	4f e7       	ldi	r20, 0x7F	; 127
    295e:	53 e4       	ldi	r21, 0x43	; 67
    2960:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    2964:	18 16       	cp	r1, r24
    2966:	0c f0       	brlt	.+2      	; 0x296a <DHT11_u8CheckResponse+0xb8>
    2968:	7b c0       	rjmp	.+246    	; 0x2a60 <DHT11_u8CheckResponse+0x1ae>
	{
		_delay_ms(__us / 1000.0);
    296a:	6d a5       	ldd	r22, Y+45	; 0x2d
    296c:	7e a5       	ldd	r23, Y+46	; 0x2e
    296e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2970:	98 a9       	ldd	r25, Y+48	; 0x30
    2972:	20 e0       	ldi	r18, 0x00	; 0
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	4a e7       	ldi	r20, 0x7A	; 122
    2978:	54 e4       	ldi	r21, 0x44	; 68
    297a:	0e 94 35 04 	call	0x86a	; 0x86a <__divsf3>
    297e:	dc 01       	movw	r26, r24
    2980:	cb 01       	movw	r24, r22
    2982:	8c a3       	std	Y+36, r24	; 0x24
    2984:	9d a3       	std	Y+37, r25	; 0x25
    2986:	ae a3       	std	Y+38, r26	; 0x26
    2988:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    298a:	6c a1       	ldd	r22, Y+36	; 0x24
    298c:	7d a1       	ldd	r23, Y+37	; 0x25
    298e:	8e a1       	ldd	r24, Y+38	; 0x26
    2990:	9f a1       	ldd	r25, Y+39	; 0x27
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	4a ef       	ldi	r20, 0xFA	; 250
    2998:	54 e4       	ldi	r21, 0x44	; 68
    299a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    299e:	dc 01       	movw	r26, r24
    29a0:	cb 01       	movw	r24, r22
    29a2:	88 a3       	std	Y+32, r24	; 0x20
    29a4:	99 a3       	std	Y+33, r25	; 0x21
    29a6:	aa a3       	std	Y+34, r26	; 0x22
    29a8:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    29aa:	68 a1       	ldd	r22, Y+32	; 0x20
    29ac:	79 a1       	ldd	r23, Y+33	; 0x21
    29ae:	8a a1       	ldd	r24, Y+34	; 0x22
    29b0:	9b a1       	ldd	r25, Y+35	; 0x23
    29b2:	20 e0       	ldi	r18, 0x00	; 0
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	40 e8       	ldi	r20, 0x80	; 128
    29b8:	5f e3       	ldi	r21, 0x3F	; 63
    29ba:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    29be:	88 23       	and	r24, r24
    29c0:	2c f4       	brge	.+10     	; 0x29cc <DHT11_u8CheckResponse+0x11a>
		__ticks = 1;
    29c2:	81 e0       	ldi	r24, 0x01	; 1
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	9f 8f       	std	Y+31, r25	; 0x1f
    29c8:	8e 8f       	std	Y+30, r24	; 0x1e
    29ca:	3f c0       	rjmp	.+126    	; 0x2a4a <DHT11_u8CheckResponse+0x198>
	else if (__tmp > 65535)
    29cc:	68 a1       	ldd	r22, Y+32	; 0x20
    29ce:	79 a1       	ldd	r23, Y+33	; 0x21
    29d0:	8a a1       	ldd	r24, Y+34	; 0x22
    29d2:	9b a1       	ldd	r25, Y+35	; 0x23
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	3f ef       	ldi	r19, 0xFF	; 255
    29d8:	4f e7       	ldi	r20, 0x7F	; 127
    29da:	57 e4       	ldi	r21, 0x47	; 71
    29dc:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    29e0:	18 16       	cp	r1, r24
    29e2:	4c f5       	brge	.+82     	; 0x2a36 <DHT11_u8CheckResponse+0x184>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29e4:	6c a1       	ldd	r22, Y+36	; 0x24
    29e6:	7d a1       	ldd	r23, Y+37	; 0x25
    29e8:	8e a1       	ldd	r24, Y+38	; 0x26
    29ea:	9f a1       	ldd	r25, Y+39	; 0x27
    29ec:	20 e0       	ldi	r18, 0x00	; 0
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	40 e2       	ldi	r20, 0x20	; 32
    29f2:	51 e4       	ldi	r21, 0x41	; 65
    29f4:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    29f8:	dc 01       	movw	r26, r24
    29fa:	cb 01       	movw	r24, r22
    29fc:	bc 01       	movw	r22, r24
    29fe:	cd 01       	movw	r24, r26
    2a00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a04:	dc 01       	movw	r26, r24
    2a06:	cb 01       	movw	r24, r22
    2a08:	9f 8f       	std	Y+31, r25	; 0x1f
    2a0a:	8e 8f       	std	Y+30, r24	; 0x1e
    2a0c:	0f c0       	rjmp	.+30     	; 0x2a2c <DHT11_u8CheckResponse+0x17a>
    2a0e:	88 ec       	ldi	r24, 0xC8	; 200
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	9d 8f       	std	Y+29, r25	; 0x1d
    2a14:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a16:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a18:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2a1a:	01 97       	sbiw	r24, 0x01	; 1
    2a1c:	f1 f7       	brne	.-4      	; 0x2a1a <DHT11_u8CheckResponse+0x168>
    2a1e:	9d 8f       	std	Y+29, r25	; 0x1d
    2a20:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a22:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a24:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a26:	01 97       	sbiw	r24, 0x01	; 1
    2a28:	9f 8f       	std	Y+31, r25	; 0x1f
    2a2a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a2c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a2e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a30:	00 97       	sbiw	r24, 0x00	; 0
    2a32:	69 f7       	brne	.-38     	; 0x2a0e <DHT11_u8CheckResponse+0x15c>
    2a34:	24 c0       	rjmp	.+72     	; 0x2a7e <DHT11_u8CheckResponse+0x1cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a36:	68 a1       	ldd	r22, Y+32	; 0x20
    2a38:	79 a1       	ldd	r23, Y+33	; 0x21
    2a3a:	8a a1       	ldd	r24, Y+34	; 0x22
    2a3c:	9b a1       	ldd	r25, Y+35	; 0x23
    2a3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a42:	dc 01       	movw	r26, r24
    2a44:	cb 01       	movw	r24, r22
    2a46:	9f 8f       	std	Y+31, r25	; 0x1f
    2a48:	8e 8f       	std	Y+30, r24	; 0x1e
    2a4a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a4c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a4e:	9b 8f       	std	Y+27, r25	; 0x1b
    2a50:	8a 8f       	std	Y+26, r24	; 0x1a
    2a52:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2a54:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2a56:	01 97       	sbiw	r24, 0x01	; 1
    2a58:	f1 f7       	brne	.-4      	; 0x2a56 <DHT11_u8CheckResponse+0x1a4>
    2a5a:	9b 8f       	std	Y+27, r25	; 0x1b
    2a5c:	8a 8f       	std	Y+26, r24	; 0x1a
    2a5e:	0f c0       	rjmp	.+30     	; 0x2a7e <DHT11_u8CheckResponse+0x1cc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a60:	69 a5       	ldd	r22, Y+41	; 0x29
    2a62:	7a a5       	ldd	r23, Y+42	; 0x2a
    2a64:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a66:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a6c:	dc 01       	movw	r26, r24
    2a6e:	cb 01       	movw	r24, r22
    2a70:	88 a7       	std	Y+40, r24	; 0x28
    2a72:	88 a5       	ldd	r24, Y+40	; 0x28
    2a74:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a76:	89 8d       	ldd	r24, Y+25	; 0x19
    2a78:	8a 95       	dec	r24
    2a7a:	f1 f7       	brne	.-4      	; 0x2a78 <DHT11_u8CheckResponse+0x1c6>
    2a7c:	89 8f       	std	Y+25, r24	; 0x19
static u8 DHT11_u8CheckResponse(void) {
    u32 Local_u32TimeOut = 0;
	u32 Local_u8Response;

    /* Wait for DHT11 to pull low (80us) */
    while (DIO_enumReadPinValue(DHT11_PORT, DHT11_PIN, &Local_u8Response) == DIO_PIN_HIGH) {
    2a7e:	9e 01       	movw	r18, r28
    2a80:	2b 5c       	subi	r18, 0xCB	; 203
    2a82:	3f 4f       	sbci	r19, 0xFF	; 255
    2a84:	80 e0       	ldi	r24, 0x00	; 0
    2a86:	62 e0       	ldi	r22, 0x02	; 2
    2a88:	a9 01       	movw	r20, r18
    2a8a:	0e 94 1c 27 	call	0x4e38	; 0x4e38 <DIO_enumReadPinValue>
    2a8e:	81 30       	cpi	r24, 0x01	; 1
    2a90:	09 f4       	brne	.+2      	; 0x2a94 <DHT11_u8CheckResponse+0x1e2>
    2a92:	1e cf       	rjmp	.-452    	; 0x28d0 <DHT11_u8CheckResponse+0x1e>
            return 0; // Timeout
        }
        _delay_us(1);
    }

    Local_u32TimeOut = 0;
    2a94:	19 aa       	std	Y+49, r1	; 0x31
    2a96:	1a aa       	std	Y+50, r1	; 0x32
    2a98:	1b aa       	std	Y+51, r1	; 0x33
    2a9a:	1c aa       	std	Y+52, r1	; 0x34
    2a9c:	d7 c0       	rjmp	.+430    	; 0x2c4c <DHT11_u8CheckResponse+0x39a>


    /* Wait for DHT11 to pull high (80us) */
    while (DIO_enumReadPinValue(DHT11_PORT, DHT11_PIN, &Local_u8Response) == DIO_PIN_LOW) {
        Local_u32TimeOut++;
    2a9e:	89 a9       	ldd	r24, Y+49	; 0x31
    2aa0:	9a a9       	ldd	r25, Y+50	; 0x32
    2aa2:	ab a9       	ldd	r26, Y+51	; 0x33
    2aa4:	bc a9       	ldd	r27, Y+52	; 0x34
    2aa6:	01 96       	adiw	r24, 0x01	; 1
    2aa8:	a1 1d       	adc	r26, r1
    2aaa:	b1 1d       	adc	r27, r1
    2aac:	89 ab       	std	Y+49, r24	; 0x31
    2aae:	9a ab       	std	Y+50, r25	; 0x32
    2ab0:	ab ab       	std	Y+51, r26	; 0x33
    2ab2:	bc ab       	std	Y+52, r27	; 0x34
        if (Local_u32TimeOut > DHT11_TIMEOUT) {
    2ab4:	89 a9       	ldd	r24, Y+49	; 0x31
    2ab6:	9a a9       	ldd	r25, Y+50	; 0x32
    2ab8:	ab a9       	ldd	r26, Y+51	; 0x33
    2aba:	bc a9       	ldd	r27, Y+52	; 0x34
    2abc:	81 31       	cpi	r24, 0x11	; 17
    2abe:	27 e2       	ldi	r18, 0x27	; 39
    2ac0:	92 07       	cpc	r25, r18
    2ac2:	20 e0       	ldi	r18, 0x00	; 0
    2ac4:	a2 07       	cpc	r26, r18
    2ac6:	20 e0       	ldi	r18, 0x00	; 0
    2ac8:	b2 07       	cpc	r27, r18
    2aca:	10 f0       	brcs	.+4      	; 0x2ad0 <DHT11_u8CheckResponse+0x21e>
            return 0; // Timeout
    2acc:	19 ae       	std	Y+57, r1	; 0x39
    2ace:	cb c0       	rjmp	.+406    	; 0x2c66 <DHT11_u8CheckResponse+0x3b4>
    2ad0:	80 e0       	ldi	r24, 0x00	; 0
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	a0 e8       	ldi	r26, 0x80	; 128
    2ad6:	bf e3       	ldi	r27, 0x3F	; 63
    2ad8:	8d 8b       	std	Y+21, r24	; 0x15
    2ada:	9e 8b       	std	Y+22, r25	; 0x16
    2adc:	af 8b       	std	Y+23, r26	; 0x17
    2ade:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ae0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ae2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ae4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ae6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ae8:	2b ea       	ldi	r18, 0xAB	; 171
    2aea:	3a ea       	ldi	r19, 0xAA	; 170
    2aec:	4a e2       	ldi	r20, 0x2A	; 42
    2aee:	50 e4       	ldi	r21, 0x40	; 64
    2af0:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2af4:	dc 01       	movw	r26, r24
    2af6:	cb 01       	movw	r24, r22
    2af8:	89 8b       	std	Y+17, r24	; 0x11
    2afa:	9a 8b       	std	Y+18, r25	; 0x12
    2afc:	ab 8b       	std	Y+19, r26	; 0x13
    2afe:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2b00:	69 89       	ldd	r22, Y+17	; 0x11
    2b02:	7a 89       	ldd	r23, Y+18	; 0x12
    2b04:	8b 89       	ldd	r24, Y+19	; 0x13
    2b06:	9c 89       	ldd	r25, Y+20	; 0x14
    2b08:	20 e0       	ldi	r18, 0x00	; 0
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	40 e8       	ldi	r20, 0x80	; 128
    2b0e:	5f e3       	ldi	r21, 0x3F	; 63
    2b10:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    2b14:	88 23       	and	r24, r24
    2b16:	1c f4       	brge	.+6      	; 0x2b1e <DHT11_u8CheckResponse+0x26c>
		__ticks = 1;
    2b18:	81 e0       	ldi	r24, 0x01	; 1
    2b1a:	88 8b       	std	Y+16, r24	; 0x10
    2b1c:	91 c0       	rjmp	.+290    	; 0x2c40 <DHT11_u8CheckResponse+0x38e>
	else if (__tmp > 255)
    2b1e:	69 89       	ldd	r22, Y+17	; 0x11
    2b20:	7a 89       	ldd	r23, Y+18	; 0x12
    2b22:	8b 89       	ldd	r24, Y+19	; 0x13
    2b24:	9c 89       	ldd	r25, Y+20	; 0x14
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	4f e7       	ldi	r20, 0x7F	; 127
    2b2c:	53 e4       	ldi	r21, 0x43	; 67
    2b2e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    2b32:	18 16       	cp	r1, r24
    2b34:	0c f0       	brlt	.+2      	; 0x2b38 <DHT11_u8CheckResponse+0x286>
    2b36:	7b c0       	rjmp	.+246    	; 0x2c2e <DHT11_u8CheckResponse+0x37c>
	{
		_delay_ms(__us / 1000.0);
    2b38:	6d 89       	ldd	r22, Y+21	; 0x15
    2b3a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b3c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b3e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b40:	20 e0       	ldi	r18, 0x00	; 0
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	4a e7       	ldi	r20, 0x7A	; 122
    2b46:	54 e4       	ldi	r21, 0x44	; 68
    2b48:	0e 94 35 04 	call	0x86a	; 0x86a <__divsf3>
    2b4c:	dc 01       	movw	r26, r24
    2b4e:	cb 01       	movw	r24, r22
    2b50:	8c 87       	std	Y+12, r24	; 0x0c
    2b52:	9d 87       	std	Y+13, r25	; 0x0d
    2b54:	ae 87       	std	Y+14, r26	; 0x0e
    2b56:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b58:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b5a:	7d 85       	ldd	r23, Y+13	; 0x0d
    2b5c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b5e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	4a ef       	ldi	r20, 0xFA	; 250
    2b66:	54 e4       	ldi	r21, 0x44	; 68
    2b68:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2b6c:	dc 01       	movw	r26, r24
    2b6e:	cb 01       	movw	r24, r22
    2b70:	88 87       	std	Y+8, r24	; 0x08
    2b72:	99 87       	std	Y+9, r25	; 0x09
    2b74:	aa 87       	std	Y+10, r26	; 0x0a
    2b76:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2b78:	68 85       	ldd	r22, Y+8	; 0x08
    2b7a:	79 85       	ldd	r23, Y+9	; 0x09
    2b7c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b7e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	40 e8       	ldi	r20, 0x80	; 128
    2b86:	5f e3       	ldi	r21, 0x3F	; 63
    2b88:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    2b8c:	88 23       	and	r24, r24
    2b8e:	2c f4       	brge	.+10     	; 0x2b9a <DHT11_u8CheckResponse+0x2e8>
		__ticks = 1;
    2b90:	81 e0       	ldi	r24, 0x01	; 1
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	9f 83       	std	Y+7, r25	; 0x07
    2b96:	8e 83       	std	Y+6, r24	; 0x06
    2b98:	3f c0       	rjmp	.+126    	; 0x2c18 <DHT11_u8CheckResponse+0x366>
	else if (__tmp > 65535)
    2b9a:	68 85       	ldd	r22, Y+8	; 0x08
    2b9c:	79 85       	ldd	r23, Y+9	; 0x09
    2b9e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ba0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	3f ef       	ldi	r19, 0xFF	; 255
    2ba6:	4f e7       	ldi	r20, 0x7F	; 127
    2ba8:	57 e4       	ldi	r21, 0x47	; 71
    2baa:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    2bae:	18 16       	cp	r1, r24
    2bb0:	4c f5       	brge	.+82     	; 0x2c04 <DHT11_u8CheckResponse+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bb2:	6c 85       	ldd	r22, Y+12	; 0x0c
    2bb4:	7d 85       	ldd	r23, Y+13	; 0x0d
    2bb6:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bb8:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bba:	20 e0       	ldi	r18, 0x00	; 0
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	40 e2       	ldi	r20, 0x20	; 32
    2bc0:	51 e4       	ldi	r21, 0x41	; 65
    2bc2:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2bc6:	dc 01       	movw	r26, r24
    2bc8:	cb 01       	movw	r24, r22
    2bca:	bc 01       	movw	r22, r24
    2bcc:	cd 01       	movw	r24, r26
    2bce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd2:	dc 01       	movw	r26, r24
    2bd4:	cb 01       	movw	r24, r22
    2bd6:	9f 83       	std	Y+7, r25	; 0x07
    2bd8:	8e 83       	std	Y+6, r24	; 0x06
    2bda:	0f c0       	rjmp	.+30     	; 0x2bfa <DHT11_u8CheckResponse+0x348>
    2bdc:	88 ec       	ldi	r24, 0xC8	; 200
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	9d 83       	std	Y+5, r25	; 0x05
    2be2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2be4:	8c 81       	ldd	r24, Y+4	; 0x04
    2be6:	9d 81       	ldd	r25, Y+5	; 0x05
    2be8:	01 97       	sbiw	r24, 0x01	; 1
    2bea:	f1 f7       	brne	.-4      	; 0x2be8 <DHT11_u8CheckResponse+0x336>
    2bec:	9d 83       	std	Y+5, r25	; 0x05
    2bee:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bf0:	8e 81       	ldd	r24, Y+6	; 0x06
    2bf2:	9f 81       	ldd	r25, Y+7	; 0x07
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	9f 83       	std	Y+7, r25	; 0x07
    2bf8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bfa:	8e 81       	ldd	r24, Y+6	; 0x06
    2bfc:	9f 81       	ldd	r25, Y+7	; 0x07
    2bfe:	00 97       	sbiw	r24, 0x00	; 0
    2c00:	69 f7       	brne	.-38     	; 0x2bdc <DHT11_u8CheckResponse+0x32a>
    2c02:	24 c0       	rjmp	.+72     	; 0x2c4c <DHT11_u8CheckResponse+0x39a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c04:	68 85       	ldd	r22, Y+8	; 0x08
    2c06:	79 85       	ldd	r23, Y+9	; 0x09
    2c08:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c0a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c10:	dc 01       	movw	r26, r24
    2c12:	cb 01       	movw	r24, r22
    2c14:	9f 83       	std	Y+7, r25	; 0x07
    2c16:	8e 83       	std	Y+6, r24	; 0x06
    2c18:	8e 81       	ldd	r24, Y+6	; 0x06
    2c1a:	9f 81       	ldd	r25, Y+7	; 0x07
    2c1c:	9b 83       	std	Y+3, r25	; 0x03
    2c1e:	8a 83       	std	Y+2, r24	; 0x02
    2c20:	8a 81       	ldd	r24, Y+2	; 0x02
    2c22:	9b 81       	ldd	r25, Y+3	; 0x03
    2c24:	01 97       	sbiw	r24, 0x01	; 1
    2c26:	f1 f7       	brne	.-4      	; 0x2c24 <DHT11_u8CheckResponse+0x372>
    2c28:	9b 83       	std	Y+3, r25	; 0x03
    2c2a:	8a 83       	std	Y+2, r24	; 0x02
    2c2c:	0f c0       	rjmp	.+30     	; 0x2c4c <DHT11_u8CheckResponse+0x39a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c2e:	69 89       	ldd	r22, Y+17	; 0x11
    2c30:	7a 89       	ldd	r23, Y+18	; 0x12
    2c32:	8b 89       	ldd	r24, Y+19	; 0x13
    2c34:	9c 89       	ldd	r25, Y+20	; 0x14
    2c36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c3a:	dc 01       	movw	r26, r24
    2c3c:	cb 01       	movw	r24, r22
    2c3e:	88 8b       	std	Y+16, r24	; 0x10
    2c40:	88 89       	ldd	r24, Y+16	; 0x10
    2c42:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c44:	89 81       	ldd	r24, Y+1	; 0x01
    2c46:	8a 95       	dec	r24
    2c48:	f1 f7       	brne	.-4      	; 0x2c46 <DHT11_u8CheckResponse+0x394>
    2c4a:	89 83       	std	Y+1, r24	; 0x01

    Local_u32TimeOut = 0;


    /* Wait for DHT11 to pull high (80us) */
    while (DIO_enumReadPinValue(DHT11_PORT, DHT11_PIN, &Local_u8Response) == DIO_PIN_LOW) {
    2c4c:	9e 01       	movw	r18, r28
    2c4e:	2b 5c       	subi	r18, 0xCB	; 203
    2c50:	3f 4f       	sbci	r19, 0xFF	; 255
    2c52:	80 e0       	ldi	r24, 0x00	; 0
    2c54:	62 e0       	ldi	r22, 0x02	; 2
    2c56:	a9 01       	movw	r20, r18
    2c58:	0e 94 1c 27 	call	0x4e38	; 0x4e38 <DIO_enumReadPinValue>
    2c5c:	88 23       	and	r24, r24
    2c5e:	09 f4       	brne	.+2      	; 0x2c62 <DHT11_u8CheckResponse+0x3b0>
    2c60:	1e cf       	rjmp	.-452    	; 0x2a9e <DHT11_u8CheckResponse+0x1ec>
            return 0; // Timeout
        }
        _delay_us(1);
    }

    return 1; // Response received
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	89 af       	std	Y+57, r24	; 0x39
    2c66:	89 ad       	ldd	r24, Y+57	; 0x39
}
    2c68:	e9 96       	adiw	r28, 0x39	; 57
    2c6a:	0f b6       	in	r0, 0x3f	; 63
    2c6c:	f8 94       	cli
    2c6e:	de bf       	out	0x3e, r29	; 62
    2c70:	0f be       	out	0x3f, r0	; 63
    2c72:	cd bf       	out	0x3d, r28	; 61
    2c74:	cf 91       	pop	r28
    2c76:	df 91       	pop	r29
    2c78:	08 95       	ret

00002c7a <DHT11_u8ReadByte>:

static u8 DHT11_u8ReadByte(void) {
    2c7a:	0f 93       	push	r16
    2c7c:	1f 93       	push	r17
    2c7e:	df 93       	push	r29
    2c80:	cf 93       	push	r28
    2c82:	cd b7       	in	r28, 0x3d	; 61
    2c84:	de b7       	in	r29, 0x3e	; 62
    2c86:	c3 55       	subi	r28, 0x53	; 83
    2c88:	d0 40       	sbci	r29, 0x00	; 0
    2c8a:	0f b6       	in	r0, 0x3f	; 63
    2c8c:	f8 94       	cli
    2c8e:	de bf       	out	0x3e, r29	; 62
    2c90:	0f be       	out	0x3f, r0	; 63
    2c92:	cd bf       	out	0x3d, r28	; 61
    u8 Local_u8Byte = 0;
    2c94:	fe 01       	movw	r30, r28
    2c96:	e2 5b       	subi	r30, 0xB2	; 178
    2c98:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9a:	10 82       	st	Z, r1
    u8 Local_u8Bit;
    u32 Local_u32TimeOut;
	u32 Local_u8Response;

    for (Local_u8Bit = 0; Local_u8Bit < 8; Local_u8Bit++) {
    2c9c:	fe 01       	movw	r30, r28
    2c9e:	e3 5b       	subi	r30, 0xB3	; 179
    2ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca2:	10 82       	st	Z, r1
    2ca4:	fe c2       	rjmp	.+1532   	; 0x32a2 <DHT11_u8ReadByte+0x628>
        Local_u32TimeOut = 0;
    2ca6:	fe 01       	movw	r30, r28
    2ca8:	e7 5b       	subi	r30, 0xB7	; 183
    2caa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cac:	10 82       	st	Z, r1
    2cae:	11 82       	std	Z+1, r1	; 0x01
    2cb0:	12 82       	std	Z+2, r1	; 0x02
    2cb2:	13 82       	std	Z+3, r1	; 0x03
    2cb4:	02 c1       	rjmp	.+516    	; 0x2eba <DHT11_u8ReadByte+0x240>

        /* Wait for start of bit (50us low) */
        while (DIO_enumReadPinValue(DHT11_PORT, DHT11_PIN, &Local_u8Response) == DIO_PIN_LOW) {
            Local_u32TimeOut++;
    2cb6:	9e 01       	movw	r18, r28
    2cb8:	27 5b       	subi	r18, 0xB7	; 183
    2cba:	3f 4f       	sbci	r19, 0xFF	; 255
    2cbc:	fe 01       	movw	r30, r28
    2cbe:	e7 5b       	subi	r30, 0xB7	; 183
    2cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc2:	80 81       	ld	r24, Z
    2cc4:	91 81       	ldd	r25, Z+1	; 0x01
    2cc6:	a2 81       	ldd	r26, Z+2	; 0x02
    2cc8:	b3 81       	ldd	r27, Z+3	; 0x03
    2cca:	01 96       	adiw	r24, 0x01	; 1
    2ccc:	a1 1d       	adc	r26, r1
    2cce:	b1 1d       	adc	r27, r1
    2cd0:	f9 01       	movw	r30, r18
    2cd2:	80 83       	st	Z, r24
    2cd4:	91 83       	std	Z+1, r25	; 0x01
    2cd6:	a2 83       	std	Z+2, r26	; 0x02
    2cd8:	b3 83       	std	Z+3, r27	; 0x03
            if (Local_u32TimeOut > DHT11_TIMEOUT) {
    2cda:	fe 01       	movw	r30, r28
    2cdc:	e7 5b       	subi	r30, 0xB7	; 183
    2cde:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce0:	80 81       	ld	r24, Z
    2ce2:	91 81       	ldd	r25, Z+1	; 0x01
    2ce4:	a2 81       	ldd	r26, Z+2	; 0x02
    2ce6:	b3 81       	ldd	r27, Z+3	; 0x03
    2ce8:	81 31       	cpi	r24, 0x11	; 17
    2cea:	f7 e2       	ldi	r31, 0x27	; 39
    2cec:	9f 07       	cpc	r25, r31
    2cee:	f0 e0       	ldi	r31, 0x00	; 0
    2cf0:	af 07       	cpc	r26, r31
    2cf2:	f0 e0       	ldi	r31, 0x00	; 0
    2cf4:	bf 07       	cpc	r27, r31
    2cf6:	20 f0       	brcs	.+8      	; 0x2d00 <DHT11_u8ReadByte+0x86>
                return 0; // Timeout
    2cf8:	64 96       	adiw	r28, 0x14	; 20
    2cfa:	1f ae       	std	Y+63, r1	; 0x3f
    2cfc:	64 97       	sbiw	r28, 0x14	; 20
    2cfe:	df c2       	rjmp	.+1470   	; 0x32be <DHT11_u8ReadByte+0x644>
    2d00:	fe 01       	movw	r30, r28
    2d02:	eb 5b       	subi	r30, 0xBB	; 187
    2d04:	ff 4f       	sbci	r31, 0xFF	; 255
    2d06:	80 e0       	ldi	r24, 0x00	; 0
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	a0 e8       	ldi	r26, 0x80	; 128
    2d0c:	bf e3       	ldi	r27, 0x3F	; 63
    2d0e:	80 83       	st	Z, r24
    2d10:	91 83       	std	Z+1, r25	; 0x01
    2d12:	a2 83       	std	Z+2, r26	; 0x02
    2d14:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2d16:	8e 01       	movw	r16, r28
    2d18:	0f 5b       	subi	r16, 0xBF	; 191
    2d1a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d1c:	fe 01       	movw	r30, r28
    2d1e:	eb 5b       	subi	r30, 0xBB	; 187
    2d20:	ff 4f       	sbci	r31, 0xFF	; 255
    2d22:	60 81       	ld	r22, Z
    2d24:	71 81       	ldd	r23, Z+1	; 0x01
    2d26:	82 81       	ldd	r24, Z+2	; 0x02
    2d28:	93 81       	ldd	r25, Z+3	; 0x03
    2d2a:	2b ea       	ldi	r18, 0xAB	; 171
    2d2c:	3a ea       	ldi	r19, 0xAA	; 170
    2d2e:	4a e2       	ldi	r20, 0x2A	; 42
    2d30:	50 e4       	ldi	r21, 0x40	; 64
    2d32:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2d36:	dc 01       	movw	r26, r24
    2d38:	cb 01       	movw	r24, r22
    2d3a:	f8 01       	movw	r30, r16
    2d3c:	80 83       	st	Z, r24
    2d3e:	91 83       	std	Z+1, r25	; 0x01
    2d40:	a2 83       	std	Z+2, r26	; 0x02
    2d42:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d44:	fe 01       	movw	r30, r28
    2d46:	ef 5b       	subi	r30, 0xBF	; 191
    2d48:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4a:	60 81       	ld	r22, Z
    2d4c:	71 81       	ldd	r23, Z+1	; 0x01
    2d4e:	82 81       	ldd	r24, Z+2	; 0x02
    2d50:	93 81       	ldd	r25, Z+3	; 0x03
    2d52:	20 e0       	ldi	r18, 0x00	; 0
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	40 e8       	ldi	r20, 0x80	; 128
    2d58:	5f e3       	ldi	r21, 0x3F	; 63
    2d5a:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    2d5e:	88 23       	and	r24, r24
    2d60:	34 f4       	brge	.+12     	; 0x2d6e <DHT11_u8ReadByte+0xf4>
		__ticks = 1;
    2d62:	81 e0       	ldi	r24, 0x01	; 1
    2d64:	fe 01       	movw	r30, r28
    2d66:	e0 5c       	subi	r30, 0xC0	; 192
    2d68:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6a:	80 83       	st	Z, r24
    2d6c:	9d c0       	rjmp	.+314    	; 0x2ea8 <DHT11_u8ReadByte+0x22e>
	else if (__tmp > 255)
    2d6e:	fe 01       	movw	r30, r28
    2d70:	ef 5b       	subi	r30, 0xBF	; 191
    2d72:	ff 4f       	sbci	r31, 0xFF	; 255
    2d74:	60 81       	ld	r22, Z
    2d76:	71 81       	ldd	r23, Z+1	; 0x01
    2d78:	82 81       	ldd	r24, Z+2	; 0x02
    2d7a:	93 81       	ldd	r25, Z+3	; 0x03
    2d7c:	20 e0       	ldi	r18, 0x00	; 0
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	4f e7       	ldi	r20, 0x7F	; 127
    2d82:	53 e4       	ldi	r21, 0x43	; 67
    2d84:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    2d88:	18 16       	cp	r1, r24
    2d8a:	0c f0       	brlt	.+2      	; 0x2d8e <DHT11_u8ReadByte+0x114>
    2d8c:	7e c0       	rjmp	.+252    	; 0x2e8a <DHT11_u8ReadByte+0x210>
	{
		_delay_ms(__us / 1000.0);
    2d8e:	fe 01       	movw	r30, r28
    2d90:	eb 5b       	subi	r30, 0xBB	; 187
    2d92:	ff 4f       	sbci	r31, 0xFF	; 255
    2d94:	60 81       	ld	r22, Z
    2d96:	71 81       	ldd	r23, Z+1	; 0x01
    2d98:	82 81       	ldd	r24, Z+2	; 0x02
    2d9a:	93 81       	ldd	r25, Z+3	; 0x03
    2d9c:	20 e0       	ldi	r18, 0x00	; 0
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	4a e7       	ldi	r20, 0x7A	; 122
    2da2:	54 e4       	ldi	r21, 0x44	; 68
    2da4:	0e 94 35 04 	call	0x86a	; 0x86a <__divsf3>
    2da8:	dc 01       	movw	r26, r24
    2daa:	cb 01       	movw	r24, r22
    2dac:	8c af       	std	Y+60, r24	; 0x3c
    2dae:	9d af       	std	Y+61, r25	; 0x3d
    2db0:	ae af       	std	Y+62, r26	; 0x3e
    2db2:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2db4:	6c ad       	ldd	r22, Y+60	; 0x3c
    2db6:	7d ad       	ldd	r23, Y+61	; 0x3d
    2db8:	8e ad       	ldd	r24, Y+62	; 0x3e
    2dba:	9f ad       	ldd	r25, Y+63	; 0x3f
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	4a ef       	ldi	r20, 0xFA	; 250
    2dc2:	54 e4       	ldi	r21, 0x44	; 68
    2dc4:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2dc8:	dc 01       	movw	r26, r24
    2dca:	cb 01       	movw	r24, r22
    2dcc:	88 af       	std	Y+56, r24	; 0x38
    2dce:	99 af       	std	Y+57, r25	; 0x39
    2dd0:	aa af       	std	Y+58, r26	; 0x3a
    2dd2:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2dd4:	68 ad       	ldd	r22, Y+56	; 0x38
    2dd6:	79 ad       	ldd	r23, Y+57	; 0x39
    2dd8:	8a ad       	ldd	r24, Y+58	; 0x3a
    2dda:	9b ad       	ldd	r25, Y+59	; 0x3b
    2ddc:	20 e0       	ldi	r18, 0x00	; 0
    2dde:	30 e0       	ldi	r19, 0x00	; 0
    2de0:	40 e8       	ldi	r20, 0x80	; 128
    2de2:	5f e3       	ldi	r21, 0x3F	; 63
    2de4:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    2de8:	88 23       	and	r24, r24
    2dea:	2c f4       	brge	.+10     	; 0x2df6 <DHT11_u8ReadByte+0x17c>
		__ticks = 1;
    2dec:	81 e0       	ldi	r24, 0x01	; 1
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	9f ab       	std	Y+55, r25	; 0x37
    2df2:	8e ab       	std	Y+54, r24	; 0x36
    2df4:	3f c0       	rjmp	.+126    	; 0x2e74 <DHT11_u8ReadByte+0x1fa>
	else if (__tmp > 65535)
    2df6:	68 ad       	ldd	r22, Y+56	; 0x38
    2df8:	79 ad       	ldd	r23, Y+57	; 0x39
    2dfa:	8a ad       	ldd	r24, Y+58	; 0x3a
    2dfc:	9b ad       	ldd	r25, Y+59	; 0x3b
    2dfe:	20 e0       	ldi	r18, 0x00	; 0
    2e00:	3f ef       	ldi	r19, 0xFF	; 255
    2e02:	4f e7       	ldi	r20, 0x7F	; 127
    2e04:	57 e4       	ldi	r21, 0x47	; 71
    2e06:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    2e0a:	18 16       	cp	r1, r24
    2e0c:	4c f5       	brge	.+82     	; 0x2e60 <DHT11_u8ReadByte+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e0e:	6c ad       	ldd	r22, Y+60	; 0x3c
    2e10:	7d ad       	ldd	r23, Y+61	; 0x3d
    2e12:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e14:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e16:	20 e0       	ldi	r18, 0x00	; 0
    2e18:	30 e0       	ldi	r19, 0x00	; 0
    2e1a:	40 e2       	ldi	r20, 0x20	; 32
    2e1c:	51 e4       	ldi	r21, 0x41	; 65
    2e1e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2e22:	dc 01       	movw	r26, r24
    2e24:	cb 01       	movw	r24, r22
    2e26:	bc 01       	movw	r22, r24
    2e28:	cd 01       	movw	r24, r26
    2e2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e2e:	dc 01       	movw	r26, r24
    2e30:	cb 01       	movw	r24, r22
    2e32:	9f ab       	std	Y+55, r25	; 0x37
    2e34:	8e ab       	std	Y+54, r24	; 0x36
    2e36:	0f c0       	rjmp	.+30     	; 0x2e56 <DHT11_u8ReadByte+0x1dc>
    2e38:	88 ec       	ldi	r24, 0xC8	; 200
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	9d ab       	std	Y+53, r25	; 0x35
    2e3e:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e40:	8c a9       	ldd	r24, Y+52	; 0x34
    2e42:	9d a9       	ldd	r25, Y+53	; 0x35
    2e44:	01 97       	sbiw	r24, 0x01	; 1
    2e46:	f1 f7       	brne	.-4      	; 0x2e44 <DHT11_u8ReadByte+0x1ca>
    2e48:	9d ab       	std	Y+53, r25	; 0x35
    2e4a:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e4c:	8e a9       	ldd	r24, Y+54	; 0x36
    2e4e:	9f a9       	ldd	r25, Y+55	; 0x37
    2e50:	01 97       	sbiw	r24, 0x01	; 1
    2e52:	9f ab       	std	Y+55, r25	; 0x37
    2e54:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e56:	8e a9       	ldd	r24, Y+54	; 0x36
    2e58:	9f a9       	ldd	r25, Y+55	; 0x37
    2e5a:	00 97       	sbiw	r24, 0x00	; 0
    2e5c:	69 f7       	brne	.-38     	; 0x2e38 <DHT11_u8ReadByte+0x1be>
    2e5e:	2d c0       	rjmp	.+90     	; 0x2eba <DHT11_u8ReadByte+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e60:	68 ad       	ldd	r22, Y+56	; 0x38
    2e62:	79 ad       	ldd	r23, Y+57	; 0x39
    2e64:	8a ad       	ldd	r24, Y+58	; 0x3a
    2e66:	9b ad       	ldd	r25, Y+59	; 0x3b
    2e68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e6c:	dc 01       	movw	r26, r24
    2e6e:	cb 01       	movw	r24, r22
    2e70:	9f ab       	std	Y+55, r25	; 0x37
    2e72:	8e ab       	std	Y+54, r24	; 0x36
    2e74:	8e a9       	ldd	r24, Y+54	; 0x36
    2e76:	9f a9       	ldd	r25, Y+55	; 0x37
    2e78:	9b ab       	std	Y+51, r25	; 0x33
    2e7a:	8a ab       	std	Y+50, r24	; 0x32
    2e7c:	8a a9       	ldd	r24, Y+50	; 0x32
    2e7e:	9b a9       	ldd	r25, Y+51	; 0x33
    2e80:	01 97       	sbiw	r24, 0x01	; 1
    2e82:	f1 f7       	brne	.-4      	; 0x2e80 <DHT11_u8ReadByte+0x206>
    2e84:	9b ab       	std	Y+51, r25	; 0x33
    2e86:	8a ab       	std	Y+50, r24	; 0x32
    2e88:	18 c0       	rjmp	.+48     	; 0x2eba <DHT11_u8ReadByte+0x240>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e8a:	fe 01       	movw	r30, r28
    2e8c:	ef 5b       	subi	r30, 0xBF	; 191
    2e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e90:	60 81       	ld	r22, Z
    2e92:	71 81       	ldd	r23, Z+1	; 0x01
    2e94:	82 81       	ldd	r24, Z+2	; 0x02
    2e96:	93 81       	ldd	r25, Z+3	; 0x03
    2e98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e9c:	dc 01       	movw	r26, r24
    2e9e:	cb 01       	movw	r24, r22
    2ea0:	fe 01       	movw	r30, r28
    2ea2:	e0 5c       	subi	r30, 0xC0	; 192
    2ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea6:	80 83       	st	Z, r24
    2ea8:	fe 01       	movw	r30, r28
    2eaa:	e0 5c       	subi	r30, 0xC0	; 192
    2eac:	ff 4f       	sbci	r31, 0xFF	; 255
    2eae:	80 81       	ld	r24, Z
    2eb0:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2eb2:	89 a9       	ldd	r24, Y+49	; 0x31
    2eb4:	8a 95       	dec	r24
    2eb6:	f1 f7       	brne	.-4      	; 0x2eb4 <DHT11_u8ReadByte+0x23a>
    2eb8:	89 ab       	std	Y+49, r24	; 0x31

    for (Local_u8Bit = 0; Local_u8Bit < 8; Local_u8Bit++) {
        Local_u32TimeOut = 0;

        /* Wait for start of bit (50us low) */
        while (DIO_enumReadPinValue(DHT11_PORT, DHT11_PIN, &Local_u8Response) == DIO_PIN_LOW) {
    2eba:	9e 01       	movw	r18, r28
    2ebc:	21 5b       	subi	r18, 0xB1	; 177
    2ebe:	3f 4f       	sbci	r19, 0xFF	; 255
    2ec0:	80 e0       	ldi	r24, 0x00	; 0
    2ec2:	62 e0       	ldi	r22, 0x02	; 2
    2ec4:	a9 01       	movw	r20, r18
    2ec6:	0e 94 1c 27 	call	0x4e38	; 0x4e38 <DIO_enumReadPinValue>
    2eca:	88 23       	and	r24, r24
    2ecc:	09 f4       	brne	.+2      	; 0x2ed0 <DHT11_u8ReadByte+0x256>
    2ece:	f3 ce       	rjmp	.-538    	; 0x2cb6 <DHT11_u8ReadByte+0x3c>
    2ed0:	80 e0       	ldi	r24, 0x00	; 0
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	a0 ef       	ldi	r26, 0xF0	; 240
    2ed6:	b1 e4       	ldi	r27, 0x41	; 65
    2ed8:	8d a7       	std	Y+45, r24	; 0x2d
    2eda:	9e a7       	std	Y+46, r25	; 0x2e
    2edc:	af a7       	std	Y+47, r26	; 0x2f
    2ede:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ee0:	6d a5       	ldd	r22, Y+45	; 0x2d
    2ee2:	7e a5       	ldd	r23, Y+46	; 0x2e
    2ee4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ee6:	98 a9       	ldd	r25, Y+48	; 0x30
    2ee8:	2b ea       	ldi	r18, 0xAB	; 171
    2eea:	3a ea       	ldi	r19, 0xAA	; 170
    2eec:	4a e2       	ldi	r20, 0x2A	; 42
    2eee:	50 e4       	ldi	r21, 0x40	; 64
    2ef0:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	cb 01       	movw	r24, r22
    2ef8:	89 a7       	std	Y+41, r24	; 0x29
    2efa:	9a a7       	std	Y+42, r25	; 0x2a
    2efc:	ab a7       	std	Y+43, r26	; 0x2b
    2efe:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2f00:	69 a5       	ldd	r22, Y+41	; 0x29
    2f02:	7a a5       	ldd	r23, Y+42	; 0x2a
    2f04:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f06:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f08:	20 e0       	ldi	r18, 0x00	; 0
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	40 e8       	ldi	r20, 0x80	; 128
    2f0e:	5f e3       	ldi	r21, 0x3F	; 63
    2f10:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    2f14:	88 23       	and	r24, r24
    2f16:	1c f4       	brge	.+6      	; 0x2f1e <DHT11_u8ReadByte+0x2a4>
		__ticks = 1;
    2f18:	81 e0       	ldi	r24, 0x01	; 1
    2f1a:	88 a7       	std	Y+40, r24	; 0x28
    2f1c:	91 c0       	rjmp	.+290    	; 0x3040 <DHT11_u8ReadByte+0x3c6>
	else if (__tmp > 255)
    2f1e:	69 a5       	ldd	r22, Y+41	; 0x29
    2f20:	7a a5       	ldd	r23, Y+42	; 0x2a
    2f22:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f24:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f26:	20 e0       	ldi	r18, 0x00	; 0
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	4f e7       	ldi	r20, 0x7F	; 127
    2f2c:	53 e4       	ldi	r21, 0x43	; 67
    2f2e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    2f32:	18 16       	cp	r1, r24
    2f34:	0c f0       	brlt	.+2      	; 0x2f38 <DHT11_u8ReadByte+0x2be>
    2f36:	7b c0       	rjmp	.+246    	; 0x302e <DHT11_u8ReadByte+0x3b4>
	{
		_delay_ms(__us / 1000.0);
    2f38:	6d a5       	ldd	r22, Y+45	; 0x2d
    2f3a:	7e a5       	ldd	r23, Y+46	; 0x2e
    2f3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f3e:	98 a9       	ldd	r25, Y+48	; 0x30
    2f40:	20 e0       	ldi	r18, 0x00	; 0
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	4a e7       	ldi	r20, 0x7A	; 122
    2f46:	54 e4       	ldi	r21, 0x44	; 68
    2f48:	0e 94 35 04 	call	0x86a	; 0x86a <__divsf3>
    2f4c:	dc 01       	movw	r26, r24
    2f4e:	cb 01       	movw	r24, r22
    2f50:	8c a3       	std	Y+36, r24	; 0x24
    2f52:	9d a3       	std	Y+37, r25	; 0x25
    2f54:	ae a3       	std	Y+38, r26	; 0x26
    2f56:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f58:	6c a1       	ldd	r22, Y+36	; 0x24
    2f5a:	7d a1       	ldd	r23, Y+37	; 0x25
    2f5c:	8e a1       	ldd	r24, Y+38	; 0x26
    2f5e:	9f a1       	ldd	r25, Y+39	; 0x27
    2f60:	20 e0       	ldi	r18, 0x00	; 0
    2f62:	30 e0       	ldi	r19, 0x00	; 0
    2f64:	4a ef       	ldi	r20, 0xFA	; 250
    2f66:	54 e4       	ldi	r21, 0x44	; 68
    2f68:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2f6c:	dc 01       	movw	r26, r24
    2f6e:	cb 01       	movw	r24, r22
    2f70:	88 a3       	std	Y+32, r24	; 0x20
    2f72:	99 a3       	std	Y+33, r25	; 0x21
    2f74:	aa a3       	std	Y+34, r26	; 0x22
    2f76:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2f78:	68 a1       	ldd	r22, Y+32	; 0x20
    2f7a:	79 a1       	ldd	r23, Y+33	; 0x21
    2f7c:	8a a1       	ldd	r24, Y+34	; 0x22
    2f7e:	9b a1       	ldd	r25, Y+35	; 0x23
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	40 e8       	ldi	r20, 0x80	; 128
    2f86:	5f e3       	ldi	r21, 0x3F	; 63
    2f88:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    2f8c:	88 23       	and	r24, r24
    2f8e:	2c f4       	brge	.+10     	; 0x2f9a <DHT11_u8ReadByte+0x320>
		__ticks = 1;
    2f90:	81 e0       	ldi	r24, 0x01	; 1
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	9f 8f       	std	Y+31, r25	; 0x1f
    2f96:	8e 8f       	std	Y+30, r24	; 0x1e
    2f98:	3f c0       	rjmp	.+126    	; 0x3018 <DHT11_u8ReadByte+0x39e>
	else if (__tmp > 65535)
    2f9a:	68 a1       	ldd	r22, Y+32	; 0x20
    2f9c:	79 a1       	ldd	r23, Y+33	; 0x21
    2f9e:	8a a1       	ldd	r24, Y+34	; 0x22
    2fa0:	9b a1       	ldd	r25, Y+35	; 0x23
    2fa2:	20 e0       	ldi	r18, 0x00	; 0
    2fa4:	3f ef       	ldi	r19, 0xFF	; 255
    2fa6:	4f e7       	ldi	r20, 0x7F	; 127
    2fa8:	57 e4       	ldi	r21, 0x47	; 71
    2faa:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    2fae:	18 16       	cp	r1, r24
    2fb0:	4c f5       	brge	.+82     	; 0x3004 <DHT11_u8ReadByte+0x38a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fb2:	6c a1       	ldd	r22, Y+36	; 0x24
    2fb4:	7d a1       	ldd	r23, Y+37	; 0x25
    2fb6:	8e a1       	ldd	r24, Y+38	; 0x26
    2fb8:	9f a1       	ldd	r25, Y+39	; 0x27
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	40 e2       	ldi	r20, 0x20	; 32
    2fc0:	51 e4       	ldi	r21, 0x41	; 65
    2fc2:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2fc6:	dc 01       	movw	r26, r24
    2fc8:	cb 01       	movw	r24, r22
    2fca:	bc 01       	movw	r22, r24
    2fcc:	cd 01       	movw	r24, r26
    2fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd2:	dc 01       	movw	r26, r24
    2fd4:	cb 01       	movw	r24, r22
    2fd6:	9f 8f       	std	Y+31, r25	; 0x1f
    2fd8:	8e 8f       	std	Y+30, r24	; 0x1e
    2fda:	0f c0       	rjmp	.+30     	; 0x2ffa <DHT11_u8ReadByte+0x380>
    2fdc:	88 ec       	ldi	r24, 0xC8	; 200
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	9d 8f       	std	Y+29, r25	; 0x1d
    2fe2:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fe4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2fe6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2fe8:	01 97       	sbiw	r24, 0x01	; 1
    2fea:	f1 f7       	brne	.-4      	; 0x2fe8 <DHT11_u8ReadByte+0x36e>
    2fec:	9d 8f       	std	Y+29, r25	; 0x1d
    2fee:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ff0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ff2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ff4:	01 97       	sbiw	r24, 0x01	; 1
    2ff6:	9f 8f       	std	Y+31, r25	; 0x1f
    2ff8:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ffa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ffc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ffe:	00 97       	sbiw	r24, 0x00	; 0
    3000:	69 f7       	brne	.-38     	; 0x2fdc <DHT11_u8ReadByte+0x362>
    3002:	24 c0       	rjmp	.+72     	; 0x304c <DHT11_u8ReadByte+0x3d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3004:	68 a1       	ldd	r22, Y+32	; 0x20
    3006:	79 a1       	ldd	r23, Y+33	; 0x21
    3008:	8a a1       	ldd	r24, Y+34	; 0x22
    300a:	9b a1       	ldd	r25, Y+35	; 0x23
    300c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3010:	dc 01       	movw	r26, r24
    3012:	cb 01       	movw	r24, r22
    3014:	9f 8f       	std	Y+31, r25	; 0x1f
    3016:	8e 8f       	std	Y+30, r24	; 0x1e
    3018:	8e 8d       	ldd	r24, Y+30	; 0x1e
    301a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    301c:	9b 8f       	std	Y+27, r25	; 0x1b
    301e:	8a 8f       	std	Y+26, r24	; 0x1a
    3020:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3022:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3024:	01 97       	sbiw	r24, 0x01	; 1
    3026:	f1 f7       	brne	.-4      	; 0x3024 <DHT11_u8ReadByte+0x3aa>
    3028:	9b 8f       	std	Y+27, r25	; 0x1b
    302a:	8a 8f       	std	Y+26, r24	; 0x1a
    302c:	0f c0       	rjmp	.+30     	; 0x304c <DHT11_u8ReadByte+0x3d2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    302e:	69 a5       	ldd	r22, Y+41	; 0x29
    3030:	7a a5       	ldd	r23, Y+42	; 0x2a
    3032:	8b a5       	ldd	r24, Y+43	; 0x2b
    3034:	9c a5       	ldd	r25, Y+44	; 0x2c
    3036:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    303a:	dc 01       	movw	r26, r24
    303c:	cb 01       	movw	r24, r22
    303e:	88 a7       	std	Y+40, r24	; 0x28
    3040:	88 a5       	ldd	r24, Y+40	; 0x28
    3042:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3044:	89 8d       	ldd	r24, Y+25	; 0x19
    3046:	8a 95       	dec	r24
    3048:	f1 f7       	brne	.-4      	; 0x3046 <DHT11_u8ReadByte+0x3cc>
    304a:	89 8f       	std	Y+25, r24	; 0x19
        }

        _delay_us(30); // Wait 30us to determine bit value

        /* Read bit value */
        DIO_enumReadPinValue(DHT11_PORT, DHT11_PIN, &Local_u8Response);
    304c:	9e 01       	movw	r18, r28
    304e:	21 5b       	subi	r18, 0xB1	; 177
    3050:	3f 4f       	sbci	r19, 0xFF	; 255
    3052:	80 e0       	ldi	r24, 0x00	; 0
    3054:	62 e0       	ldi	r22, 0x02	; 2
    3056:	a9 01       	movw	r20, r18
    3058:	0e 94 1c 27 	call	0x4e38	; 0x4e38 <DIO_enumReadPinValue>
        if (Local_u8Response == DIO_PIN_HIGH) {
    305c:	fe 01       	movw	r30, r28
    305e:	e1 5b       	subi	r30, 0xB1	; 177
    3060:	ff 4f       	sbci	r31, 0xFF	; 255
    3062:	80 81       	ld	r24, Z
    3064:	91 81       	ldd	r25, Z+1	; 0x01
    3066:	a2 81       	ldd	r26, Z+2	; 0x02
    3068:	b3 81       	ldd	r27, Z+3	; 0x03
    306a:	81 30       	cpi	r24, 0x01	; 1
    306c:	91 05       	cpc	r25, r1
    306e:	a1 05       	cpc	r26, r1
    3070:	b1 05       	cpc	r27, r1
    3072:	09 f0       	breq	.+2      	; 0x3076 <DHT11_u8ReadByte+0x3fc>
    3074:	02 c1       	rjmp	.+516    	; 0x327a <DHT11_u8ReadByte+0x600>
            Local_u8Byte |= (1 << (7 - Local_u8Bit));
    3076:	fe 01       	movw	r30, r28
    3078:	e3 5b       	subi	r30, 0xB3	; 179
    307a:	ff 4f       	sbci	r31, 0xFF	; 255
    307c:	80 81       	ld	r24, Z
    307e:	28 2f       	mov	r18, r24
    3080:	30 e0       	ldi	r19, 0x00	; 0
    3082:	87 e0       	ldi	r24, 0x07	; 7
    3084:	90 e0       	ldi	r25, 0x00	; 0
    3086:	ac 01       	movw	r20, r24
    3088:	42 1b       	sub	r20, r18
    308a:	53 0b       	sbc	r21, r19
    308c:	9a 01       	movw	r18, r20
    308e:	81 e0       	ldi	r24, 0x01	; 1
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	02 2e       	mov	r0, r18
    3094:	02 c0       	rjmp	.+4      	; 0x309a <DHT11_u8ReadByte+0x420>
    3096:	88 0f       	add	r24, r24
    3098:	99 1f       	adc	r25, r25
    309a:	0a 94       	dec	r0
    309c:	e2 f7       	brpl	.-8      	; 0x3096 <DHT11_u8ReadByte+0x41c>
    309e:	98 2f       	mov	r25, r24
    30a0:	fe 01       	movw	r30, r28
    30a2:	e2 5b       	subi	r30, 0xB2	; 178
    30a4:	ff 4f       	sbci	r31, 0xFF	; 255
    30a6:	80 81       	ld	r24, Z
    30a8:	89 2b       	or	r24, r25
    30aa:	fe 01       	movw	r30, r28
    30ac:	e2 5b       	subi	r30, 0xB2	; 178
    30ae:	ff 4f       	sbci	r31, 0xFF	; 255
    30b0:	80 83       	st	Z, r24
    30b2:	e3 c0       	rjmp	.+454    	; 0x327a <DHT11_u8ReadByte+0x600>
        }

        /* Wait for bit to finish */
        while (DIO_enumReadPinValue(DHT11_PORT, DHT11_PIN, &Local_u8Response) == DIO_PIN_HIGH) {
            Local_u32TimeOut++;
    30b4:	9e 01       	movw	r18, r28
    30b6:	27 5b       	subi	r18, 0xB7	; 183
    30b8:	3f 4f       	sbci	r19, 0xFF	; 255
    30ba:	fe 01       	movw	r30, r28
    30bc:	e7 5b       	subi	r30, 0xB7	; 183
    30be:	ff 4f       	sbci	r31, 0xFF	; 255
    30c0:	80 81       	ld	r24, Z
    30c2:	91 81       	ldd	r25, Z+1	; 0x01
    30c4:	a2 81       	ldd	r26, Z+2	; 0x02
    30c6:	b3 81       	ldd	r27, Z+3	; 0x03
    30c8:	01 96       	adiw	r24, 0x01	; 1
    30ca:	a1 1d       	adc	r26, r1
    30cc:	b1 1d       	adc	r27, r1
    30ce:	f9 01       	movw	r30, r18
    30d0:	80 83       	st	Z, r24
    30d2:	91 83       	std	Z+1, r25	; 0x01
    30d4:	a2 83       	std	Z+2, r26	; 0x02
    30d6:	b3 83       	std	Z+3, r27	; 0x03
            if (Local_u32TimeOut > DHT11_TIMEOUT) {
    30d8:	fe 01       	movw	r30, r28
    30da:	e7 5b       	subi	r30, 0xB7	; 183
    30dc:	ff 4f       	sbci	r31, 0xFF	; 255
    30de:	80 81       	ld	r24, Z
    30e0:	91 81       	ldd	r25, Z+1	; 0x01
    30e2:	a2 81       	ldd	r26, Z+2	; 0x02
    30e4:	b3 81       	ldd	r27, Z+3	; 0x03
    30e6:	81 31       	cpi	r24, 0x11	; 17
    30e8:	f7 e2       	ldi	r31, 0x27	; 39
    30ea:	9f 07       	cpc	r25, r31
    30ec:	f0 e0       	ldi	r31, 0x00	; 0
    30ee:	af 07       	cpc	r26, r31
    30f0:	f0 e0       	ldi	r31, 0x00	; 0
    30f2:	bf 07       	cpc	r27, r31
    30f4:	20 f0       	brcs	.+8      	; 0x30fe <DHT11_u8ReadByte+0x484>
                return 0; // Timeout
    30f6:	64 96       	adiw	r28, 0x14	; 20
    30f8:	1f ae       	std	Y+63, r1	; 0x3f
    30fa:	64 97       	sbiw	r28, 0x14	; 20
    30fc:	e0 c0       	rjmp	.+448    	; 0x32be <DHT11_u8ReadByte+0x644>
    30fe:	80 e0       	ldi	r24, 0x00	; 0
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	a0 e8       	ldi	r26, 0x80	; 128
    3104:	bf e3       	ldi	r27, 0x3F	; 63
    3106:	8d 8b       	std	Y+21, r24	; 0x15
    3108:	9e 8b       	std	Y+22, r25	; 0x16
    310a:	af 8b       	std	Y+23, r26	; 0x17
    310c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    310e:	6d 89       	ldd	r22, Y+21	; 0x15
    3110:	7e 89       	ldd	r23, Y+22	; 0x16
    3112:	8f 89       	ldd	r24, Y+23	; 0x17
    3114:	98 8d       	ldd	r25, Y+24	; 0x18
    3116:	2b ea       	ldi	r18, 0xAB	; 171
    3118:	3a ea       	ldi	r19, 0xAA	; 170
    311a:	4a e2       	ldi	r20, 0x2A	; 42
    311c:	50 e4       	ldi	r21, 0x40	; 64
    311e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3122:	dc 01       	movw	r26, r24
    3124:	cb 01       	movw	r24, r22
    3126:	89 8b       	std	Y+17, r24	; 0x11
    3128:	9a 8b       	std	Y+18, r25	; 0x12
    312a:	ab 8b       	std	Y+19, r26	; 0x13
    312c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    312e:	69 89       	ldd	r22, Y+17	; 0x11
    3130:	7a 89       	ldd	r23, Y+18	; 0x12
    3132:	8b 89       	ldd	r24, Y+19	; 0x13
    3134:	9c 89       	ldd	r25, Y+20	; 0x14
    3136:	20 e0       	ldi	r18, 0x00	; 0
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	40 e8       	ldi	r20, 0x80	; 128
    313c:	5f e3       	ldi	r21, 0x3F	; 63
    313e:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    3142:	88 23       	and	r24, r24
    3144:	1c f4       	brge	.+6      	; 0x314c <DHT11_u8ReadByte+0x4d2>
		__ticks = 1;
    3146:	81 e0       	ldi	r24, 0x01	; 1
    3148:	88 8b       	std	Y+16, r24	; 0x10
    314a:	91 c0       	rjmp	.+290    	; 0x326e <DHT11_u8ReadByte+0x5f4>
	else if (__tmp > 255)
    314c:	69 89       	ldd	r22, Y+17	; 0x11
    314e:	7a 89       	ldd	r23, Y+18	; 0x12
    3150:	8b 89       	ldd	r24, Y+19	; 0x13
    3152:	9c 89       	ldd	r25, Y+20	; 0x14
    3154:	20 e0       	ldi	r18, 0x00	; 0
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	4f e7       	ldi	r20, 0x7F	; 127
    315a:	53 e4       	ldi	r21, 0x43	; 67
    315c:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    3160:	18 16       	cp	r1, r24
    3162:	0c f0       	brlt	.+2      	; 0x3166 <DHT11_u8ReadByte+0x4ec>
    3164:	7b c0       	rjmp	.+246    	; 0x325c <DHT11_u8ReadByte+0x5e2>
	{
		_delay_ms(__us / 1000.0);
    3166:	6d 89       	ldd	r22, Y+21	; 0x15
    3168:	7e 89       	ldd	r23, Y+22	; 0x16
    316a:	8f 89       	ldd	r24, Y+23	; 0x17
    316c:	98 8d       	ldd	r25, Y+24	; 0x18
    316e:	20 e0       	ldi	r18, 0x00	; 0
    3170:	30 e0       	ldi	r19, 0x00	; 0
    3172:	4a e7       	ldi	r20, 0x7A	; 122
    3174:	54 e4       	ldi	r21, 0x44	; 68
    3176:	0e 94 35 04 	call	0x86a	; 0x86a <__divsf3>
    317a:	dc 01       	movw	r26, r24
    317c:	cb 01       	movw	r24, r22
    317e:	8c 87       	std	Y+12, r24	; 0x0c
    3180:	9d 87       	std	Y+13, r25	; 0x0d
    3182:	ae 87       	std	Y+14, r26	; 0x0e
    3184:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3186:	6c 85       	ldd	r22, Y+12	; 0x0c
    3188:	7d 85       	ldd	r23, Y+13	; 0x0d
    318a:	8e 85       	ldd	r24, Y+14	; 0x0e
    318c:	9f 85       	ldd	r25, Y+15	; 0x0f
    318e:	20 e0       	ldi	r18, 0x00	; 0
    3190:	30 e0       	ldi	r19, 0x00	; 0
    3192:	4a ef       	ldi	r20, 0xFA	; 250
    3194:	54 e4       	ldi	r21, 0x44	; 68
    3196:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    319a:	dc 01       	movw	r26, r24
    319c:	cb 01       	movw	r24, r22
    319e:	88 87       	std	Y+8, r24	; 0x08
    31a0:	99 87       	std	Y+9, r25	; 0x09
    31a2:	aa 87       	std	Y+10, r26	; 0x0a
    31a4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    31a6:	68 85       	ldd	r22, Y+8	; 0x08
    31a8:	79 85       	ldd	r23, Y+9	; 0x09
    31aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    31ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    31ae:	20 e0       	ldi	r18, 0x00	; 0
    31b0:	30 e0       	ldi	r19, 0x00	; 0
    31b2:	40 e8       	ldi	r20, 0x80	; 128
    31b4:	5f e3       	ldi	r21, 0x3F	; 63
    31b6:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    31ba:	88 23       	and	r24, r24
    31bc:	2c f4       	brge	.+10     	; 0x31c8 <DHT11_u8ReadByte+0x54e>
		__ticks = 1;
    31be:	81 e0       	ldi	r24, 0x01	; 1
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	9f 83       	std	Y+7, r25	; 0x07
    31c4:	8e 83       	std	Y+6, r24	; 0x06
    31c6:	3f c0       	rjmp	.+126    	; 0x3246 <DHT11_u8ReadByte+0x5cc>
	else if (__tmp > 65535)
    31c8:	68 85       	ldd	r22, Y+8	; 0x08
    31ca:	79 85       	ldd	r23, Y+9	; 0x09
    31cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    31ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    31d0:	20 e0       	ldi	r18, 0x00	; 0
    31d2:	3f ef       	ldi	r19, 0xFF	; 255
    31d4:	4f e7       	ldi	r20, 0x7F	; 127
    31d6:	57 e4       	ldi	r21, 0x47	; 71
    31d8:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    31dc:	18 16       	cp	r1, r24
    31de:	4c f5       	brge	.+82     	; 0x3232 <DHT11_u8ReadByte+0x5b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31e0:	6c 85       	ldd	r22, Y+12	; 0x0c
    31e2:	7d 85       	ldd	r23, Y+13	; 0x0d
    31e4:	8e 85       	ldd	r24, Y+14	; 0x0e
    31e6:	9f 85       	ldd	r25, Y+15	; 0x0f
    31e8:	20 e0       	ldi	r18, 0x00	; 0
    31ea:	30 e0       	ldi	r19, 0x00	; 0
    31ec:	40 e2       	ldi	r20, 0x20	; 32
    31ee:	51 e4       	ldi	r21, 0x41	; 65
    31f0:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    31f4:	dc 01       	movw	r26, r24
    31f6:	cb 01       	movw	r24, r22
    31f8:	bc 01       	movw	r22, r24
    31fa:	cd 01       	movw	r24, r26
    31fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3200:	dc 01       	movw	r26, r24
    3202:	cb 01       	movw	r24, r22
    3204:	9f 83       	std	Y+7, r25	; 0x07
    3206:	8e 83       	std	Y+6, r24	; 0x06
    3208:	0f c0       	rjmp	.+30     	; 0x3228 <DHT11_u8ReadByte+0x5ae>
    320a:	88 ec       	ldi	r24, 0xC8	; 200
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	9d 83       	std	Y+5, r25	; 0x05
    3210:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3212:	8c 81       	ldd	r24, Y+4	; 0x04
    3214:	9d 81       	ldd	r25, Y+5	; 0x05
    3216:	01 97       	sbiw	r24, 0x01	; 1
    3218:	f1 f7       	brne	.-4      	; 0x3216 <DHT11_u8ReadByte+0x59c>
    321a:	9d 83       	std	Y+5, r25	; 0x05
    321c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    321e:	8e 81       	ldd	r24, Y+6	; 0x06
    3220:	9f 81       	ldd	r25, Y+7	; 0x07
    3222:	01 97       	sbiw	r24, 0x01	; 1
    3224:	9f 83       	std	Y+7, r25	; 0x07
    3226:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3228:	8e 81       	ldd	r24, Y+6	; 0x06
    322a:	9f 81       	ldd	r25, Y+7	; 0x07
    322c:	00 97       	sbiw	r24, 0x00	; 0
    322e:	69 f7       	brne	.-38     	; 0x320a <DHT11_u8ReadByte+0x590>
    3230:	24 c0       	rjmp	.+72     	; 0x327a <DHT11_u8ReadByte+0x600>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3232:	68 85       	ldd	r22, Y+8	; 0x08
    3234:	79 85       	ldd	r23, Y+9	; 0x09
    3236:	8a 85       	ldd	r24, Y+10	; 0x0a
    3238:	9b 85       	ldd	r25, Y+11	; 0x0b
    323a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    323e:	dc 01       	movw	r26, r24
    3240:	cb 01       	movw	r24, r22
    3242:	9f 83       	std	Y+7, r25	; 0x07
    3244:	8e 83       	std	Y+6, r24	; 0x06
    3246:	8e 81       	ldd	r24, Y+6	; 0x06
    3248:	9f 81       	ldd	r25, Y+7	; 0x07
    324a:	9b 83       	std	Y+3, r25	; 0x03
    324c:	8a 83       	std	Y+2, r24	; 0x02
    324e:	8a 81       	ldd	r24, Y+2	; 0x02
    3250:	9b 81       	ldd	r25, Y+3	; 0x03
    3252:	01 97       	sbiw	r24, 0x01	; 1
    3254:	f1 f7       	brne	.-4      	; 0x3252 <DHT11_u8ReadByte+0x5d8>
    3256:	9b 83       	std	Y+3, r25	; 0x03
    3258:	8a 83       	std	Y+2, r24	; 0x02
    325a:	0f c0       	rjmp	.+30     	; 0x327a <DHT11_u8ReadByte+0x600>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    325c:	69 89       	ldd	r22, Y+17	; 0x11
    325e:	7a 89       	ldd	r23, Y+18	; 0x12
    3260:	8b 89       	ldd	r24, Y+19	; 0x13
    3262:	9c 89       	ldd	r25, Y+20	; 0x14
    3264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3268:	dc 01       	movw	r26, r24
    326a:	cb 01       	movw	r24, r22
    326c:	88 8b       	std	Y+16, r24	; 0x10
    326e:	88 89       	ldd	r24, Y+16	; 0x10
    3270:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3272:	89 81       	ldd	r24, Y+1	; 0x01
    3274:	8a 95       	dec	r24
    3276:	f1 f7       	brne	.-4      	; 0x3274 <DHT11_u8ReadByte+0x5fa>
    3278:	89 83       	std	Y+1, r24	; 0x01
        if (Local_u8Response == DIO_PIN_HIGH) {
            Local_u8Byte |= (1 << (7 - Local_u8Bit));
        }

        /* Wait for bit to finish */
        while (DIO_enumReadPinValue(DHT11_PORT, DHT11_PIN, &Local_u8Response) == DIO_PIN_HIGH) {
    327a:	9e 01       	movw	r18, r28
    327c:	21 5b       	subi	r18, 0xB1	; 177
    327e:	3f 4f       	sbci	r19, 0xFF	; 255
    3280:	80 e0       	ldi	r24, 0x00	; 0
    3282:	62 e0       	ldi	r22, 0x02	; 2
    3284:	a9 01       	movw	r20, r18
    3286:	0e 94 1c 27 	call	0x4e38	; 0x4e38 <DIO_enumReadPinValue>
    328a:	81 30       	cpi	r24, 0x01	; 1
    328c:	09 f4       	brne	.+2      	; 0x3290 <DHT11_u8ReadByte+0x616>
    328e:	12 cf       	rjmp	.-476    	; 0x30b4 <DHT11_u8ReadByte+0x43a>
    u8 Local_u8Byte = 0;
    u8 Local_u8Bit;
    u32 Local_u32TimeOut;
	u32 Local_u8Response;

    for (Local_u8Bit = 0; Local_u8Bit < 8; Local_u8Bit++) {
    3290:	de 01       	movw	r26, r28
    3292:	a3 5b       	subi	r26, 0xB3	; 179
    3294:	bf 4f       	sbci	r27, 0xFF	; 255
    3296:	fe 01       	movw	r30, r28
    3298:	e3 5b       	subi	r30, 0xB3	; 179
    329a:	ff 4f       	sbci	r31, 0xFF	; 255
    329c:	80 81       	ld	r24, Z
    329e:	8f 5f       	subi	r24, 0xFF	; 255
    32a0:	8c 93       	st	X, r24
    32a2:	fe 01       	movw	r30, r28
    32a4:	e3 5b       	subi	r30, 0xB3	; 179
    32a6:	ff 4f       	sbci	r31, 0xFF	; 255
    32a8:	80 81       	ld	r24, Z
    32aa:	88 30       	cpi	r24, 0x08	; 8
    32ac:	08 f4       	brcc	.+2      	; 0x32b0 <DHT11_u8ReadByte+0x636>
    32ae:	fb cc       	rjmp	.-1546   	; 0x2ca6 <DHT11_u8ReadByte+0x2c>
            }
            _delay_us(1);
        }
    }

    return Local_u8Byte;
    32b0:	fe 01       	movw	r30, r28
    32b2:	e2 5b       	subi	r30, 0xB2	; 178
    32b4:	ff 4f       	sbci	r31, 0xFF	; 255
    32b6:	20 81       	ld	r18, Z
    32b8:	64 96       	adiw	r28, 0x14	; 20
    32ba:	2f af       	std	Y+63, r18	; 0x3f
    32bc:	64 97       	sbiw	r28, 0x14	; 20
    32be:	64 96       	adiw	r28, 0x14	; 20
    32c0:	8f ad       	ldd	r24, Y+63	; 0x3f
    32c2:	64 97       	sbiw	r28, 0x14	; 20
}
    32c4:	cd 5a       	subi	r28, 0xAD	; 173
    32c6:	df 4f       	sbci	r29, 0xFF	; 255
    32c8:	0f b6       	in	r0, 0x3f	; 63
    32ca:	f8 94       	cli
    32cc:	de bf       	out	0x3e, r29	; 62
    32ce:	0f be       	out	0x3f, r0	; 63
    32d0:	cd bf       	out	0x3d, r28	; 61
    32d2:	cf 91       	pop	r28
    32d4:	df 91       	pop	r29
    32d6:	1f 91       	pop	r17
    32d8:	0f 91       	pop	r16
    32da:	08 95       	ret

000032dc <EEPROM_vSendDataByte>:


//----------------------------------------------------------------------------------------------------------------------------------------------------

void EEPROM_vSendDataByte(u16 Copy_u16LocationAddress, u8 Copy_u8DataByte)
{
    32dc:	df 93       	push	r29
    32de:	cf 93       	push	r28
    32e0:	cd b7       	in	r28, 0x3d	; 61
    32e2:	de b7       	in	r29, 0x3e	; 62
    32e4:	62 97       	sbiw	r28, 0x12	; 18
    32e6:	0f b6       	in	r0, 0x3f	; 63
    32e8:	f8 94       	cli
    32ea:	de bf       	out	0x3e, r29	; 62
    32ec:	0f be       	out	0x3f, r0	; 63
    32ee:	cd bf       	out	0x3d, r28	; 61
    32f0:	99 8b       	std	Y+17, r25	; 0x11
    32f2:	88 8b       	std	Y+16, r24	; 0x10
    32f4:	6a 8b       	std	Y+18, r22	; 0x12
	u8 Local_u8AddressPacket;

	Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | (u8)(Copy_u16LocationAddress >>8);
    32f6:	88 89       	ldd	r24, Y+16	; 0x10
    32f8:	99 89       	ldd	r25, Y+17	; 0x11
    32fa:	89 2f       	mov	r24, r25
    32fc:	99 27       	eor	r25, r25
    32fe:	80 65       	ori	r24, 0x50	; 80
    3300:	8f 87       	std	Y+15, r24	; 0x0f
	/*if 24C02 :
	 * 	Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | A2_CONNECTION <<2 | A1_CONNECTION <<1 | A0_CONNECTION;
	 */

	/*Send start condition*/
	TWI_SendStartCondition();
    3302:	0e 94 15 33 	call	0x662a	; 0x662a <TWI_SendStartCondition>

	/*Send the address packet*/
	TWI_SendSlaveAddressWithWrite(Local_u8AddressPacket);
    3306:	8f 85       	ldd	r24, Y+15	; 0x0f
    3308:	0e 94 69 33 	call	0x66d2	; 0x66d2 <TWI_SendSlaveAddressWithWrite>

	/*Send the rest 8bits of the location address*/
	TWI_MasterWriteDataByte((u8)Copy_u16LocationAddress);
    330c:	88 89       	ldd	r24, Y+16	; 0x10
    330e:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <TWI_MasterWriteDataByte>

	/*Send the data byte to the memory location*/
	TWI_MasterWriteDataByte(Copy_u8DataByte);
    3312:	8a 89       	ldd	r24, Y+18	; 0x12
    3314:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <TWI_MasterWriteDataByte>

	/*Send stop condition*/
	TWI_vSendStopCondition();
    3318:	0e 94 89 34 	call	0x6912	; 0x6912 <TWI_vSendStopCondition>
    331c:	80 e0       	ldi	r24, 0x00	; 0
    331e:	90 e0       	ldi	r25, 0x00	; 0
    3320:	a0 e2       	ldi	r26, 0x20	; 32
    3322:	b1 e4       	ldi	r27, 0x41	; 65
    3324:	8b 87       	std	Y+11, r24	; 0x0b
    3326:	9c 87       	std	Y+12, r25	; 0x0c
    3328:	ad 87       	std	Y+13, r26	; 0x0d
    332a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    332c:	6b 85       	ldd	r22, Y+11	; 0x0b
    332e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3330:	8d 85       	ldd	r24, Y+13	; 0x0d
    3332:	9e 85       	ldd	r25, Y+14	; 0x0e
    3334:	20 e0       	ldi	r18, 0x00	; 0
    3336:	30 e0       	ldi	r19, 0x00	; 0
    3338:	4a ef       	ldi	r20, 0xFA	; 250
    333a:	54 e4       	ldi	r21, 0x44	; 68
    333c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3340:	dc 01       	movw	r26, r24
    3342:	cb 01       	movw	r24, r22
    3344:	8f 83       	std	Y+7, r24	; 0x07
    3346:	98 87       	std	Y+8, r25	; 0x08
    3348:	a9 87       	std	Y+9, r26	; 0x09
    334a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    334c:	6f 81       	ldd	r22, Y+7	; 0x07
    334e:	78 85       	ldd	r23, Y+8	; 0x08
    3350:	89 85       	ldd	r24, Y+9	; 0x09
    3352:	9a 85       	ldd	r25, Y+10	; 0x0a
    3354:	20 e0       	ldi	r18, 0x00	; 0
    3356:	30 e0       	ldi	r19, 0x00	; 0
    3358:	40 e8       	ldi	r20, 0x80	; 128
    335a:	5f e3       	ldi	r21, 0x3F	; 63
    335c:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    3360:	88 23       	and	r24, r24
    3362:	2c f4       	brge	.+10     	; 0x336e <EEPROM_vSendDataByte+0x92>
		__ticks = 1;
    3364:	81 e0       	ldi	r24, 0x01	; 1
    3366:	90 e0       	ldi	r25, 0x00	; 0
    3368:	9e 83       	std	Y+6, r25	; 0x06
    336a:	8d 83       	std	Y+5, r24	; 0x05
    336c:	3f c0       	rjmp	.+126    	; 0x33ec <EEPROM_vSendDataByte+0x110>
	else if (__tmp > 65535)
    336e:	6f 81       	ldd	r22, Y+7	; 0x07
    3370:	78 85       	ldd	r23, Y+8	; 0x08
    3372:	89 85       	ldd	r24, Y+9	; 0x09
    3374:	9a 85       	ldd	r25, Y+10	; 0x0a
    3376:	20 e0       	ldi	r18, 0x00	; 0
    3378:	3f ef       	ldi	r19, 0xFF	; 255
    337a:	4f e7       	ldi	r20, 0x7F	; 127
    337c:	57 e4       	ldi	r21, 0x47	; 71
    337e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    3382:	18 16       	cp	r1, r24
    3384:	4c f5       	brge	.+82     	; 0x33d8 <EEPROM_vSendDataByte+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3386:	6b 85       	ldd	r22, Y+11	; 0x0b
    3388:	7c 85       	ldd	r23, Y+12	; 0x0c
    338a:	8d 85       	ldd	r24, Y+13	; 0x0d
    338c:	9e 85       	ldd	r25, Y+14	; 0x0e
    338e:	20 e0       	ldi	r18, 0x00	; 0
    3390:	30 e0       	ldi	r19, 0x00	; 0
    3392:	40 e2       	ldi	r20, 0x20	; 32
    3394:	51 e4       	ldi	r21, 0x41	; 65
    3396:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    339a:	dc 01       	movw	r26, r24
    339c:	cb 01       	movw	r24, r22
    339e:	bc 01       	movw	r22, r24
    33a0:	cd 01       	movw	r24, r26
    33a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33a6:	dc 01       	movw	r26, r24
    33a8:	cb 01       	movw	r24, r22
    33aa:	9e 83       	std	Y+6, r25	; 0x06
    33ac:	8d 83       	std	Y+5, r24	; 0x05
    33ae:	0f c0       	rjmp	.+30     	; 0x33ce <EEPROM_vSendDataByte+0xf2>
    33b0:	88 ec       	ldi	r24, 0xC8	; 200
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	9c 83       	std	Y+4, r25	; 0x04
    33b6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    33b8:	8b 81       	ldd	r24, Y+3	; 0x03
    33ba:	9c 81       	ldd	r25, Y+4	; 0x04
    33bc:	01 97       	sbiw	r24, 0x01	; 1
    33be:	f1 f7       	brne	.-4      	; 0x33bc <EEPROM_vSendDataByte+0xe0>
    33c0:	9c 83       	std	Y+4, r25	; 0x04
    33c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33c4:	8d 81       	ldd	r24, Y+5	; 0x05
    33c6:	9e 81       	ldd	r25, Y+6	; 0x06
    33c8:	01 97       	sbiw	r24, 0x01	; 1
    33ca:	9e 83       	std	Y+6, r25	; 0x06
    33cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33ce:	8d 81       	ldd	r24, Y+5	; 0x05
    33d0:	9e 81       	ldd	r25, Y+6	; 0x06
    33d2:	00 97       	sbiw	r24, 0x00	; 0
    33d4:	69 f7       	brne	.-38     	; 0x33b0 <EEPROM_vSendDataByte+0xd4>
    33d6:	14 c0       	rjmp	.+40     	; 0x3400 <EEPROM_vSendDataByte+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33d8:	6f 81       	ldd	r22, Y+7	; 0x07
    33da:	78 85       	ldd	r23, Y+8	; 0x08
    33dc:	89 85       	ldd	r24, Y+9	; 0x09
    33de:	9a 85       	ldd	r25, Y+10	; 0x0a
    33e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33e4:	dc 01       	movw	r26, r24
    33e6:	cb 01       	movw	r24, r22
    33e8:	9e 83       	std	Y+6, r25	; 0x06
    33ea:	8d 83       	std	Y+5, r24	; 0x05
    33ec:	8d 81       	ldd	r24, Y+5	; 0x05
    33ee:	9e 81       	ldd	r25, Y+6	; 0x06
    33f0:	9a 83       	std	Y+2, r25	; 0x02
    33f2:	89 83       	std	Y+1, r24	; 0x01
    33f4:	89 81       	ldd	r24, Y+1	; 0x01
    33f6:	9a 81       	ldd	r25, Y+2	; 0x02
    33f8:	01 97       	sbiw	r24, 0x01	; 1
    33fa:	f1 f7       	brne	.-4      	; 0x33f8 <EEPROM_vSendDataByte+0x11c>
    33fc:	9a 83       	std	Y+2, r25	; 0x02
    33fe:	89 83       	std	Y+1, r24	; 0x01

	/*Delay until the write cycle is finished*/
	_delay_ms(10);
}
    3400:	62 96       	adiw	r28, 0x12	; 18
    3402:	0f b6       	in	r0, 0x3f	; 63
    3404:	f8 94       	cli
    3406:	de bf       	out	0x3e, r29	; 62
    3408:	0f be       	out	0x3f, r0	; 63
    340a:	cd bf       	out	0x3d, r28	; 61
    340c:	cf 91       	pop	r28
    340e:	df 91       	pop	r29
    3410:	08 95       	ret

00003412 <EEPROM_u8ReadDataByte>:

void EEPROM_u8ReadDataByte(u16 Copy_u16LocationAddress, u8 *Local_u8Data)
{
    3412:	df 93       	push	r29
    3414:	cf 93       	push	r28
    3416:	00 d0       	rcall	.+0      	; 0x3418 <EEPROM_u8ReadDataByte+0x6>
    3418:	00 d0       	rcall	.+0      	; 0x341a <EEPROM_u8ReadDataByte+0x8>
    341a:	0f 92       	push	r0
    341c:	cd b7       	in	r28, 0x3d	; 61
    341e:	de b7       	in	r29, 0x3e	; 62
    3420:	9b 83       	std	Y+3, r25	; 0x03
    3422:	8a 83       	std	Y+2, r24	; 0x02
    3424:	7d 83       	std	Y+5, r23	; 0x05
    3426:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8AddressPacket;

	Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | (u8)(Copy_u16LocationAddress >>8);
    3428:	8a 81       	ldd	r24, Y+2	; 0x02
    342a:	9b 81       	ldd	r25, Y+3	; 0x03
    342c:	89 2f       	mov	r24, r25
    342e:	99 27       	eor	r25, r25
    3430:	80 65       	ori	r24, 0x50	; 80
    3432:	89 83       	std	Y+1, r24	; 0x01
	/*if 24C02 :
	 * 	Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | A2_CONNECTION <<2 | A1_CONNECTION <<1 | A0_CONNECTION;
	 */

	/*Send start condition*/
	TWI_SendStartCondition();
    3434:	0e 94 15 33 	call	0x662a	; 0x662a <TWI_SendStartCondition>

	/*Send the address packet with write request*/
	TWI_SendSlaveAddressWithWrite(Local_u8AddressPacket);
    3438:	89 81       	ldd	r24, Y+1	; 0x01
    343a:	0e 94 69 33 	call	0x66d2	; 0x66d2 <TWI_SendSlaveAddressWithWrite>

	/*Send the rest 8bits of the location address*/
	TWI_MasterWriteDataByte((u8)Copy_u16LocationAddress);
    343e:	8a 81       	ldd	r24, Y+2	; 0x02
    3440:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <TWI_MasterWriteDataByte>

	/*Send repeated start to change write request into read request*/
	TWI_SendRepeatedStart ();
    3444:	0e 94 3f 33 	call	0x667e	; 0x667e <TWI_SendRepeatedStart>

	/*Send the address packet with read request*/
	TWI_SendSlaveAddressWithRead(Local_u8AddressPacket);
    3448:	89 81       	ldd	r24, Y+1	; 0x01
    344a:	0e 94 a1 33 	call	0x6742	; 0x6742 <TWI_SendSlaveAddressWithRead>

	/*Get the data from memory*/
	TWI_MasterReadDataByte(&Local_u8Data);
    344e:	ce 01       	movw	r24, r28
    3450:	04 96       	adiw	r24, 0x04	; 4
    3452:	0e 94 02 34 	call	0x6804	; 0x6804 <TWI_MasterReadDataByte>

	/*send the stop condition*/
	TWI_vSendStopCondition();
    3456:	0e 94 89 34 	call	0x6912	; 0x6912 <TWI_vSendStopCondition>
}
    345a:	0f 90       	pop	r0
    345c:	0f 90       	pop	r0
    345e:	0f 90       	pop	r0
    3460:	0f 90       	pop	r0
    3462:	0f 90       	pop	r0
    3464:	cf 91       	pop	r28
    3466:	df 91       	pop	r29
    3468:	08 95       	ret

0000346a <IR_enumInit>:
#include "../lib/BIT_MATH.h"
#include "../lib/std_typs.h"


IR_ErrorStatus IR_enumInit(IR_Config_t *Copy_pstConfig)
{
    346a:	df 93       	push	r29
    346c:	cf 93       	push	r28
    346e:	00 d0       	rcall	.+0      	; 0x3470 <IR_enumInit+0x6>
    3470:	0f 92       	push	r0
    3472:	cd b7       	in	r28, 0x3d	; 61
    3474:	de b7       	in	r29, 0x3e	; 62
    3476:	9b 83       	std	Y+3, r25	; 0x03
    3478:	8a 83       	std	Y+2, r24	; 0x02
    IR_ErrorStatus Local_enumErrorStatus = IR_NOK;
    347a:	81 e0       	ldi	r24, 0x01	; 1
    347c:	89 83       	std	Y+1, r24	; 0x01
    
    if (Copy_pstConfig != NULL)
    347e:	8a 81       	ldd	r24, Y+2	; 0x02
    3480:	9b 81       	ldd	r25, Y+3	; 0x03
    3482:	00 97       	sbiw	r24, 0x00	; 0
    3484:	a9 f0       	breq	.+42     	; 0x34b0 <IR_enumInit+0x46>
    {
        /* Set pin as input */
        DIO_enumSetPinDirection(Copy_pstConfig->Copy_u8Port, Copy_pstConfig->Copy_u8Pin, DIO_INPUT);
    3486:	ea 81       	ldd	r30, Y+2	; 0x02
    3488:	fb 81       	ldd	r31, Y+3	; 0x03
    348a:	80 81       	ld	r24, Z
    348c:	ea 81       	ldd	r30, Y+2	; 0x02
    348e:	fb 81       	ldd	r31, Y+3	; 0x03
    3490:	91 81       	ldd	r25, Z+1	; 0x01
    3492:	69 2f       	mov	r22, r25
    3494:	40 e0       	ldi	r20, 0x00	; 0
    3496:	0e 94 fe 24 	call	0x49fc	; 0x49fc <DIO_enumSetPinDirection>
        
        /* Enable internal pull-up resistor */
        DIO_enumConnectPullUp(Copy_pstConfig->Copy_u8Port, Copy_pstConfig->Copy_u8Pin, 1);
    349a:	ea 81       	ldd	r30, Y+2	; 0x02
    349c:	fb 81       	ldd	r31, Y+3	; 0x03
    349e:	80 81       	ld	r24, Z
    34a0:	ea 81       	ldd	r30, Y+2	; 0x02
    34a2:	fb 81       	ldd	r31, Y+3	; 0x03
    34a4:	91 81       	ldd	r25, Z+1	; 0x01
    34a6:	69 2f       	mov	r22, r25
    34a8:	41 e0       	ldi	r20, 0x01	; 1
    34aa:	0e 94 b1 29 	call	0x5362	; 0x5362 <DIO_enumConnectPullUp>
        
        Local_enumErrorStatus = IR_OK;
    34ae:	19 82       	std	Y+1, r1	; 0x01
    }
    
    return Local_enumErrorStatus;
    34b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    34b2:	0f 90       	pop	r0
    34b4:	0f 90       	pop	r0
    34b6:	0f 90       	pop	r0
    34b8:	cf 91       	pop	r28
    34ba:	df 91       	pop	r29
    34bc:	08 95       	ret

000034be <IR_enumGetState>:

IR_ErrorStatus IR_enumGetState(IR_Config_t *Copy_pstConfig, u8 *Copy_pu8State)
{
    34be:	df 93       	push	r29
    34c0:	cf 93       	push	r28
    34c2:	00 d0       	rcall	.+0      	; 0x34c4 <IR_enumGetState+0x6>
    34c4:	00 d0       	rcall	.+0      	; 0x34c6 <IR_enumGetState+0x8>
    34c6:	00 d0       	rcall	.+0      	; 0x34c8 <IR_enumGetState+0xa>
    34c8:	cd b7       	in	r28, 0x3d	; 61
    34ca:	de b7       	in	r29, 0x3e	; 62
    34cc:	9c 83       	std	Y+4, r25	; 0x04
    34ce:	8b 83       	std	Y+3, r24	; 0x03
    34d0:	7e 83       	std	Y+6, r23	; 0x06
    34d2:	6d 83       	std	Y+5, r22	; 0x05
    IR_ErrorStatus Local_enumErrorStatus = IR_NOK;
    34d4:	81 e0       	ldi	r24, 0x01	; 1
    34d6:	89 83       	std	Y+1, r24	; 0x01
    u8 Local_u8PinValue;
    
    if (Copy_pstConfig != NULL && Copy_pu8State != NULL)
    34d8:	8b 81       	ldd	r24, Y+3	; 0x03
    34da:	9c 81       	ldd	r25, Y+4	; 0x04
    34dc:	00 97       	sbiw	r24, 0x00	; 0
    34de:	f9 f0       	breq	.+62     	; 0x351e <IR_enumGetState+0x60>
    34e0:	8d 81       	ldd	r24, Y+5	; 0x05
    34e2:	9e 81       	ldd	r25, Y+6	; 0x06
    34e4:	00 97       	sbiw	r24, 0x00	; 0
    34e6:	d9 f0       	breq	.+54     	; 0x351e <IR_enumGetState+0x60>
    {
        /* Read pin value */
        if (DIO_enumReadPinValue(Copy_pstConfig->Copy_u8Port, Copy_pstConfig->Copy_u8Pin, &Local_u8PinValue) == DIO_OK)
    34e8:	eb 81       	ldd	r30, Y+3	; 0x03
    34ea:	fc 81       	ldd	r31, Y+4	; 0x04
    34ec:	80 81       	ld	r24, Z
    34ee:	eb 81       	ldd	r30, Y+3	; 0x03
    34f0:	fc 81       	ldd	r31, Y+4	; 0x04
    34f2:	91 81       	ldd	r25, Z+1	; 0x01
    34f4:	9e 01       	movw	r18, r28
    34f6:	2e 5f       	subi	r18, 0xFE	; 254
    34f8:	3f 4f       	sbci	r19, 0xFF	; 255
    34fa:	69 2f       	mov	r22, r25
    34fc:	a9 01       	movw	r20, r18
    34fe:	0e 94 1c 27 	call	0x4e38	; 0x4e38 <DIO_enumReadPinValue>
    3502:	81 30       	cpi	r24, 0x01	; 1
    3504:	61 f4       	brne	.+24     	; 0x351e <IR_enumGetState+0x60>
        {
            /* Convert to detection state */
            if (Local_u8PinValue == IR_DETECTED)
    3506:	8a 81       	ldd	r24, Y+2	; 0x02
    3508:	88 23       	and	r24, r24
    350a:	29 f4       	brne	.+10     	; 0x3516 <IR_enumGetState+0x58>
            {
                *Copy_pu8State = 1;  /* Object detected */
    350c:	ed 81       	ldd	r30, Y+5	; 0x05
    350e:	fe 81       	ldd	r31, Y+6	; 0x06
    3510:	81 e0       	ldi	r24, 0x01	; 1
    3512:	80 83       	st	Z, r24
    3514:	03 c0       	rjmp	.+6      	; 0x351c <IR_enumGetState+0x5e>
            }
            else
            {
                *Copy_pu8State = 0;  /* No object detected */
    3516:	ed 81       	ldd	r30, Y+5	; 0x05
    3518:	fe 81       	ldd	r31, Y+6	; 0x06
    351a:	10 82       	st	Z, r1
            }

            Local_enumErrorStatus = IR_OK;
    351c:	19 82       	std	Y+1, r1	; 0x01
        }
    }
    
    return Local_enumErrorStatus;
    351e:	89 81       	ldd	r24, Y+1	; 0x01
} 
    3520:	26 96       	adiw	r28, 0x06	; 6
    3522:	0f b6       	in	r0, 0x3f	; 63
    3524:	f8 94       	cli
    3526:	de bf       	out	0x3e, r29	; 62
    3528:	0f be       	out	0x3f, r0	; 63
    352a:	cd bf       	out	0x3d, r28	; 61
    352c:	cf 91       	pop	r28
    352e:	df 91       	pop	r29
    3530:	08 95       	ret

00003532 <KPD_vInit>:
 * Breif : This Function initialize the pin which connected to KPD as input pins
 * Parameters : Nothing
 * return : Nothing
 */
void KPD_vInit       (void)
{
    3532:	df 93       	push	r29
    3534:	cf 93       	push	r28
    3536:	cd b7       	in	r28, 0x3d	; 61
    3538:	de b7       	in	r29, 0x3e	; 62

  /*                    connect pull up for the pins of the rows                             */

DIO_enumConnectPullUp(KPD_PORT, KPD_R0, DIO_PIN_HIGH);
    353a:	83 e0       	ldi	r24, 0x03	; 3
    353c:	60 e0       	ldi	r22, 0x00	; 0
    353e:	41 e0       	ldi	r20, 0x01	; 1
    3540:	0e 94 b1 29 	call	0x5362	; 0x5362 <DIO_enumConnectPullUp>
DIO_enumConnectPullUp(KPD_PORT, KPD_R1, DIO_PIN_HIGH);
    3544:	83 e0       	ldi	r24, 0x03	; 3
    3546:	61 e0       	ldi	r22, 0x01	; 1
    3548:	41 e0       	ldi	r20, 0x01	; 1
    354a:	0e 94 b1 29 	call	0x5362	; 0x5362 <DIO_enumConnectPullUp>
DIO_enumConnectPullUp(KPD_PORT, KPD_R2, DIO_PIN_HIGH);
    354e:	83 e0       	ldi	r24, 0x03	; 3
    3550:	62 e0       	ldi	r22, 0x02	; 2
    3552:	41 e0       	ldi	r20, 0x01	; 1
    3554:	0e 94 b1 29 	call	0x5362	; 0x5362 <DIO_enumConnectPullUp>
DIO_enumConnectPullUp(KPD_PORT, KPD_R3, DIO_PIN_HIGH);
    3558:	83 e0       	ldi	r24, 0x03	; 3
    355a:	63 e0       	ldi	r22, 0x03	; 3
    355c:	41 e0       	ldi	r20, 0x01	; 1
    355e:	0e 94 b1 29 	call	0x5362	; 0x5362 <DIO_enumConnectPullUp>


  DIO_vSetHighNibbleDir(KPD_PORT, 0x0F);
    3562:	83 e0       	ldi	r24, 0x03	; 3
    3564:	6f e0       	ldi	r22, 0x0F	; 15
    3566:	0e 94 7c 2c 	call	0x58f8	; 0x58f8 <DIO_vSetHighNibbleDir>
  DIO_vWriteHighNibble (KPD_PORT, 0x0F);
    356a:	83 e0       	ldi	r24, 0x03	; 3
    356c:	6f e0       	ldi	r22, 0x0F	; 15
    356e:	0e 94 85 2b 	call	0x570a	; 0x570a <DIO_vWriteHighNibble>
}
    3572:	cf 91       	pop	r28
    3574:	df 91       	pop	r29
    3576:	08 95       	ret

00003578 <KPD_u8GetPressed>:
 * Breif : This Function used to get the pressed button of the kpd
 * Parameters : Nothing
 * return : the pressed button
 */
u8 KPD_u8GetPressed(void)
{
    3578:	df 93       	push	r29
    357a:	cf 93       	push	r28
    357c:	cd b7       	in	r28, 0x3d	; 61
    357e:	de b7       	in	r29, 0x3e	; 62
    3580:	62 97       	sbiw	r28, 0x12	; 18
    3582:	0f b6       	in	r0, 0x3f	; 63
    3584:	f8 94       	cli
    3586:	de bf       	out	0x3e, r29	; 62
    3588:	0f be       	out	0x3f, r0	; 63
    358a:	cd bf       	out	0x3d, r28	; 61
  u8 LOC_u8ReturnData = NOTPRESSED;
    358c:	8f ef       	ldi	r24, 0xFF	; 255
    358e:	89 8b       	std	Y+17, r24	; 0x11
  u8 LOC_u8GetPressed;

  /* iterators  */
  u8 LOC_u8Row, LOC_u8Col;

  for (LOC_u8Col = 0 + KPD_COL_INIT; LOC_u8Col <KPD_COL_END + 1; LOC_u8Col++)
    3590:	84 e0       	ldi	r24, 0x04	; 4
    3592:	8f 87       	std	Y+15, r24	; 0x0f
    3594:	c9 c0       	rjmp	.+402    	; 0x3728 <KPD_u8GetPressed+0x1b0>
  {
	  DIO_enumWritePinValue(KPD_PORT, LOC_u8Col, DIO_PIN_LOW);         // Low on the columns
    3596:	83 e0       	ldi	r24, 0x03	; 3
    3598:	6f 85       	ldd	r22, Y+15	; 0x0f
    359a:	40 e0       	ldi	r20, 0x00	; 0
    359c:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <DIO_enumWritePinValue>

    for (LOC_u8Row = 0 + KPD_ROW_INIT; LOC_u8Row < KPD_ROW_END + 1; LOC_u8Row++)
    35a0:	18 8a       	std	Y+16, r1	; 0x10
    35a2:	b6 c0       	rjmp	.+364    	; 0x3710 <KPD_u8GetPressed+0x198>
    {
    	DIO_enumReadPinValue (KPD_PORT, LOC_u8Row, &LOC_u8GetPressed); // retun the row value
    35a4:	9e 01       	movw	r18, r28
    35a6:	2e 5e       	subi	r18, 0xEE	; 238
    35a8:	3f 4f       	sbci	r19, 0xFF	; 255
    35aa:	83 e0       	ldi	r24, 0x03	; 3
    35ac:	68 89       	ldd	r22, Y+16	; 0x10
    35ae:	a9 01       	movw	r20, r18
    35b0:	0e 94 1c 27 	call	0x4e38	; 0x4e38 <DIO_enumReadPinValue>
      /*
      if the row is high ....there is no pressed buttons
      if the row is low ....there is pressed button ===>> I will check on this
      */
      if (LOC_u8GetPressed == 0)
    35b4:	8a 89       	ldd	r24, Y+18	; 0x12
    35b6:	88 23       	and	r24, r24
    35b8:	09 f0       	breq	.+2      	; 0x35bc <KPD_u8GetPressed+0x44>
    35ba:	a7 c0       	rjmp	.+334    	; 0x370a <KPD_u8GetPressed+0x192>
    35bc:	80 e0       	ldi	r24, 0x00	; 0
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	a8 e4       	ldi	r26, 0x48	; 72
    35c2:	b2 e4       	ldi	r27, 0x42	; 66
    35c4:	8b 87       	std	Y+11, r24	; 0x0b
    35c6:	9c 87       	std	Y+12, r25	; 0x0c
    35c8:	ad 87       	std	Y+13, r26	; 0x0d
    35ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    35ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    35d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    35d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    35d4:	20 e0       	ldi	r18, 0x00	; 0
    35d6:	30 e0       	ldi	r19, 0x00	; 0
    35d8:	4a ef       	ldi	r20, 0xFA	; 250
    35da:	54 e4       	ldi	r21, 0x44	; 68
    35dc:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    35e0:	dc 01       	movw	r26, r24
    35e2:	cb 01       	movw	r24, r22
    35e4:	8f 83       	std	Y+7, r24	; 0x07
    35e6:	98 87       	std	Y+8, r25	; 0x08
    35e8:	a9 87       	std	Y+9, r26	; 0x09
    35ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35ec:	6f 81       	ldd	r22, Y+7	; 0x07
    35ee:	78 85       	ldd	r23, Y+8	; 0x08
    35f0:	89 85       	ldd	r24, Y+9	; 0x09
    35f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    35f4:	20 e0       	ldi	r18, 0x00	; 0
    35f6:	30 e0       	ldi	r19, 0x00	; 0
    35f8:	40 e8       	ldi	r20, 0x80	; 128
    35fa:	5f e3       	ldi	r21, 0x3F	; 63
    35fc:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    3600:	88 23       	and	r24, r24
    3602:	2c f4       	brge	.+10     	; 0x360e <KPD_u8GetPressed+0x96>
		__ticks = 1;
    3604:	81 e0       	ldi	r24, 0x01	; 1
    3606:	90 e0       	ldi	r25, 0x00	; 0
    3608:	9e 83       	std	Y+6, r25	; 0x06
    360a:	8d 83       	std	Y+5, r24	; 0x05
    360c:	3f c0       	rjmp	.+126    	; 0x368c <KPD_u8GetPressed+0x114>
	else if (__tmp > 65535)
    360e:	6f 81       	ldd	r22, Y+7	; 0x07
    3610:	78 85       	ldd	r23, Y+8	; 0x08
    3612:	89 85       	ldd	r24, Y+9	; 0x09
    3614:	9a 85       	ldd	r25, Y+10	; 0x0a
    3616:	20 e0       	ldi	r18, 0x00	; 0
    3618:	3f ef       	ldi	r19, 0xFF	; 255
    361a:	4f e7       	ldi	r20, 0x7F	; 127
    361c:	57 e4       	ldi	r21, 0x47	; 71
    361e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    3622:	18 16       	cp	r1, r24
    3624:	4c f5       	brge	.+82     	; 0x3678 <KPD_u8GetPressed+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3626:	6b 85       	ldd	r22, Y+11	; 0x0b
    3628:	7c 85       	ldd	r23, Y+12	; 0x0c
    362a:	8d 85       	ldd	r24, Y+13	; 0x0d
    362c:	9e 85       	ldd	r25, Y+14	; 0x0e
    362e:	20 e0       	ldi	r18, 0x00	; 0
    3630:	30 e0       	ldi	r19, 0x00	; 0
    3632:	40 e2       	ldi	r20, 0x20	; 32
    3634:	51 e4       	ldi	r21, 0x41	; 65
    3636:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    363a:	dc 01       	movw	r26, r24
    363c:	cb 01       	movw	r24, r22
    363e:	bc 01       	movw	r22, r24
    3640:	cd 01       	movw	r24, r26
    3642:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3646:	dc 01       	movw	r26, r24
    3648:	cb 01       	movw	r24, r22
    364a:	9e 83       	std	Y+6, r25	; 0x06
    364c:	8d 83       	std	Y+5, r24	; 0x05
    364e:	0f c0       	rjmp	.+30     	; 0x366e <KPD_u8GetPressed+0xf6>
    3650:	88 ec       	ldi	r24, 0xC8	; 200
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	9c 83       	std	Y+4, r25	; 0x04
    3656:	8b 83       	std	Y+3, r24	; 0x03
    3658:	8b 81       	ldd	r24, Y+3	; 0x03
    365a:	9c 81       	ldd	r25, Y+4	; 0x04
    365c:	01 97       	sbiw	r24, 0x01	; 1
    365e:	f1 f7       	brne	.-4      	; 0x365c <KPD_u8GetPressed+0xe4>
    3660:	9c 83       	std	Y+4, r25	; 0x04
    3662:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3664:	8d 81       	ldd	r24, Y+5	; 0x05
    3666:	9e 81       	ldd	r25, Y+6	; 0x06
    3668:	01 97       	sbiw	r24, 0x01	; 1
    366a:	9e 83       	std	Y+6, r25	; 0x06
    366c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    366e:	8d 81       	ldd	r24, Y+5	; 0x05
    3670:	9e 81       	ldd	r25, Y+6	; 0x06
    3672:	00 97       	sbiw	r24, 0x00	; 0
    3674:	69 f7       	brne	.-38     	; 0x3650 <KPD_u8GetPressed+0xd8>
    3676:	14 c0       	rjmp	.+40     	; 0x36a0 <KPD_u8GetPressed+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3678:	6f 81       	ldd	r22, Y+7	; 0x07
    367a:	78 85       	ldd	r23, Y+8	; 0x08
    367c:	89 85       	ldd	r24, Y+9	; 0x09
    367e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3684:	dc 01       	movw	r26, r24
    3686:	cb 01       	movw	r24, r22
    3688:	9e 83       	std	Y+6, r25	; 0x06
    368a:	8d 83       	std	Y+5, r24	; 0x05
    368c:	8d 81       	ldd	r24, Y+5	; 0x05
    368e:	9e 81       	ldd	r25, Y+6	; 0x06
    3690:	9a 83       	std	Y+2, r25	; 0x02
    3692:	89 83       	std	Y+1, r24	; 0x01
    3694:	89 81       	ldd	r24, Y+1	; 0x01
    3696:	9a 81       	ldd	r25, Y+2	; 0x02
    3698:	01 97       	sbiw	r24, 0x01	; 1
    369a:	f1 f7       	brne	.-4      	; 0x3698 <KPD_u8GetPressed+0x120>
    369c:	9a 83       	std	Y+2, r25	; 0x02
    369e:	89 83       	std	Y+1, r24	; 0x01
      {
        _delay_ms(50);         // delay for bouncing

        DIO_enumReadPinValue(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed); // to make sure that the button is pressed & check again
    36a0:	9e 01       	movw	r18, r28
    36a2:	2e 5e       	subi	r18, 0xEE	; 238
    36a4:	3f 4f       	sbci	r19, 0xFF	; 255
    36a6:	83 e0       	ldi	r24, 0x03	; 3
    36a8:	68 89       	ldd	r22, Y+16	; 0x10
    36aa:	a9 01       	movw	r20, r18
    36ac:	0e 94 1c 27 	call	0x4e38	; 0x4e38 <DIO_enumReadPinValue>

        if (LOC_u8GetPressed == 0)
    36b0:	8a 89       	ldd	r24, Y+18	; 0x12
    36b2:	88 23       	and	r24, r24
    36b4:	a9 f4       	brne	.+42     	; 0x36e0 <KPD_u8GetPressed+0x168>
                    the button will khnow by the row and the column (ASCII Code)
                    ==> Hint1 : I already defined The ASCII Codes in 2D array at --> "KPD_config.h"
                    ==> Hint2 : if there is no pressed buttons , it will retured NOTPRESSED (0xff) and there is not any button has this ASCII (0xff)
          */

          LOC_u8ReturnData = KPD_u8Buttons[LOC_u8Row - KPD_ROW_INIT][LOC_u8Col - KPD_COL_INIT];
    36b6:	88 89       	ldd	r24, Y+16	; 0x10
    36b8:	48 2f       	mov	r20, r24
    36ba:	50 e0       	ldi	r21, 0x00	; 0
    36bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    36be:	88 2f       	mov	r24, r24
    36c0:	90 e0       	ldi	r25, 0x00	; 0
    36c2:	9c 01       	movw	r18, r24
    36c4:	24 50       	subi	r18, 0x04	; 4
    36c6:	30 40       	sbci	r19, 0x00	; 0
    36c8:	ca 01       	movw	r24, r20
    36ca:	88 0f       	add	r24, r24
    36cc:	99 1f       	adc	r25, r25
    36ce:	88 0f       	add	r24, r24
    36d0:	99 1f       	adc	r25, r25
    36d2:	82 0f       	add	r24, r18
    36d4:	93 1f       	adc	r25, r19
    36d6:	fc 01       	movw	r30, r24
    36d8:	e5 5e       	subi	r30, 0xE5	; 229
    36da:	fd 4f       	sbci	r31, 0xFD	; 253
    36dc:	80 81       	ld	r24, Z
    36de:	89 8b       	std	Y+17, r24	; 0x11
        }
        // stay here if the button is pressed   # we could put delay 200 ms instead of that
        DIO_enumReadPinValue(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
    36e0:	9e 01       	movw	r18, r28
    36e2:	2e 5e       	subi	r18, 0xEE	; 238
    36e4:	3f 4f       	sbci	r19, 0xFF	; 255
    36e6:	83 e0       	ldi	r24, 0x03	; 3
    36e8:	68 89       	ldd	r22, Y+16	; 0x10
    36ea:	a9 01       	movw	r20, r18
    36ec:	0e 94 1c 27 	call	0x4e38	; 0x4e38 <DIO_enumReadPinValue>
    36f0:	08 c0       	rjmp	.+16     	; 0x3702 <KPD_u8GetPressed+0x18a>
        while (DIO_PIN_LOW == LOC_u8GetPressed) /*  This cond for safty instead of (LOC_u8GetPressed == DIO_PIN_LOW) if i foget = */
        {
        	DIO_enumReadPinValue(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
    36f2:	9e 01       	movw	r18, r28
    36f4:	2e 5e       	subi	r18, 0xEE	; 238
    36f6:	3f 4f       	sbci	r19, 0xFF	; 255
    36f8:	83 e0       	ldi	r24, 0x03	; 3
    36fa:	68 89       	ldd	r22, Y+16	; 0x10
    36fc:	a9 01       	movw	r20, r18
    36fe:	0e 94 1c 27 	call	0x4e38	; 0x4e38 <DIO_enumReadPinValue>

          LOC_u8ReturnData = KPD_u8Buttons[LOC_u8Row - KPD_ROW_INIT][LOC_u8Col - KPD_COL_INIT];
        }
        // stay here if the button is pressed   # we could put delay 200 ms instead of that
        DIO_enumReadPinValue(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
        while (DIO_PIN_LOW == LOC_u8GetPressed) /*  This cond for safty instead of (LOC_u8GetPressed == DIO_PIN_LOW) if i foget = */
    3702:	8a 89       	ldd	r24, Y+18	; 0x12
    3704:	88 23       	and	r24, r24
    3706:	a9 f3       	breq	.-22     	; 0x36f2 <KPD_u8GetPressed+0x17a>
    3708:	07 c0       	rjmp	.+14     	; 0x3718 <KPD_u8GetPressed+0x1a0>

  for (LOC_u8Col = 0 + KPD_COL_INIT; LOC_u8Col <KPD_COL_END + 1; LOC_u8Col++)
  {
	  DIO_enumWritePinValue(KPD_PORT, LOC_u8Col, DIO_PIN_LOW);         // Low on the columns

    for (LOC_u8Row = 0 + KPD_ROW_INIT; LOC_u8Row < KPD_ROW_END + 1; LOC_u8Row++)
    370a:	88 89       	ldd	r24, Y+16	; 0x10
    370c:	8f 5f       	subi	r24, 0xFF	; 255
    370e:	88 8b       	std	Y+16, r24	; 0x10
    3710:	88 89       	ldd	r24, Y+16	; 0x10
    3712:	84 30       	cpi	r24, 0x04	; 4
    3714:	08 f4       	brcc	.+2      	; 0x3718 <KPD_u8GetPressed+0x1a0>
    3716:	46 cf       	rjmp	.-372    	; 0x35a4 <KPD_u8GetPressed+0x2c>
        break;
      }
    }

    // return this column’s pin to high
    DIO_enumWritePinValue(KPD_PORT, LOC_u8Col, DIO_PIN_HIGH);
    3718:	83 e0       	ldi	r24, 0x03	; 3
    371a:	6f 85       	ldd	r22, Y+15	; 0x0f
    371c:	41 e0       	ldi	r20, 0x01	; 1
    371e:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <DIO_enumWritePinValue>
  u8 LOC_u8GetPressed;

  /* iterators  */
  u8 LOC_u8Row, LOC_u8Col;

  for (LOC_u8Col = 0 + KPD_COL_INIT; LOC_u8Col <KPD_COL_END + 1; LOC_u8Col++)
    3722:	8f 85       	ldd	r24, Y+15	; 0x0f
    3724:	8f 5f       	subi	r24, 0xFF	; 255
    3726:	8f 87       	std	Y+15, r24	; 0x0f
    3728:	8f 85       	ldd	r24, Y+15	; 0x0f
    372a:	88 30       	cpi	r24, 0x08	; 8
    372c:	08 f4       	brcc	.+2      	; 0x3730 <KPD_u8GetPressed+0x1b8>
    372e:	33 cf       	rjmp	.-410    	; 0x3596 <KPD_u8GetPressed+0x1e>

    // return this column’s pin to high
    DIO_enumWritePinValue(KPD_PORT, LOC_u8Col, DIO_PIN_HIGH);
  }

  return LOC_u8ReturnData;
    3730:	89 89       	ldd	r24, Y+17	; 0x11
}
    3732:	62 96       	adiw	r28, 0x12	; 18
    3734:	0f b6       	in	r0, 0x3f	; 63
    3736:	f8 94       	cli
    3738:	de bf       	out	0x3e, r29	; 62
    373a:	0f be       	out	0x3f, r0	; 63
    373c:	cd bf       	out	0x3d, r28	; 61
    373e:	cf 91       	pop	r28
    3740:	df 91       	pop	r29
    3742:	08 95       	ret

00003744 <LDR_u16CalculateResistance>:
#include "LDR_interface.h"
#include "LDR_private.h"
#include "LDR_config.h"

static u16 LDR_u16CalculateResistance(LDR_Config_t *Copy_pstConfig, u16 Copy_u16AdcValue)
{
    3744:	ef 92       	push	r14
    3746:	ff 92       	push	r15
    3748:	0f 93       	push	r16
    374a:	1f 93       	push	r17
    374c:	df 93       	push	r29
    374e:	cf 93       	push	r28
    3750:	cd b7       	in	r28, 0x3d	; 61
    3752:	de b7       	in	r29, 0x3e	; 62
    3754:	2c 97       	sbiw	r28, 0x0c	; 12
    3756:	0f b6       	in	r0, 0x3f	; 63
    3758:	f8 94       	cli
    375a:	de bf       	out	0x3e, r29	; 62
    375c:	0f be       	out	0x3f, r0	; 63
    375e:	cd bf       	out	0x3d, r28	; 61
    3760:	9a 87       	std	Y+10, r25	; 0x0a
    3762:	89 87       	std	Y+9, r24	; 0x09
    3764:	7c 87       	std	Y+12, r23	; 0x0c
    3766:	6b 87       	std	Y+11, r22	; 0x0b
    float Local_f32Voltage = (float)Copy_u16AdcValue * LDR_VOLTAGE_RESOLUTION / LDR_MAX_ADC_VALUE;
    3768:	8b 85       	ldd	r24, Y+11	; 0x0b
    376a:	9c 85       	ldd	r25, Y+12	; 0x0c
    376c:	cc 01       	movw	r24, r24
    376e:	a0 e0       	ldi	r26, 0x00	; 0
    3770:	b0 e0       	ldi	r27, 0x00	; 0
    3772:	bc 01       	movw	r22, r24
    3774:	cd 01       	movw	r24, r26
    3776:	0e 94 23 06 	call	0xc46	; 0xc46 <__floatunsisf>
    377a:	dc 01       	movw	r26, r24
    377c:	cb 01       	movw	r24, r22
    377e:	bc 01       	movw	r22, r24
    3780:	cd 01       	movw	r24, r26
    3782:	20 e0       	ldi	r18, 0x00	; 0
    3784:	30 e0       	ldi	r19, 0x00	; 0
    3786:	40 ea       	ldi	r20, 0xA0	; 160
    3788:	50 e4       	ldi	r21, 0x40	; 64
    378a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    378e:	dc 01       	movw	r26, r24
    3790:	cb 01       	movw	r24, r22
    3792:	bc 01       	movw	r22, r24
    3794:	cd 01       	movw	r24, r26
    3796:	20 e0       	ldi	r18, 0x00	; 0
    3798:	30 ec       	ldi	r19, 0xC0	; 192
    379a:	4f e7       	ldi	r20, 0x7F	; 127
    379c:	54 e4       	ldi	r21, 0x44	; 68
    379e:	0e 94 35 04 	call	0x86a	; 0x86a <__divsf3>
    37a2:	dc 01       	movw	r26, r24
    37a4:	cb 01       	movw	r24, r22
    37a6:	8d 83       	std	Y+5, r24	; 0x05
    37a8:	9e 83       	std	Y+6, r25	; 0x06
    37aa:	af 83       	std	Y+7, r26	; 0x07
    37ac:	b8 87       	std	Y+8, r27	; 0x08
    float Local_f32RL = ((LDR_VOLTAGE_RESOLUTION - Local_f32Voltage) / Local_f32Voltage) * Copy_pstConfig->Copy_u16RL;
    37ae:	60 e0       	ldi	r22, 0x00	; 0
    37b0:	70 e0       	ldi	r23, 0x00	; 0
    37b2:	80 ea       	ldi	r24, 0xA0	; 160
    37b4:	90 e4       	ldi	r25, 0x40	; 64
    37b6:	2d 81       	ldd	r18, Y+5	; 0x05
    37b8:	3e 81       	ldd	r19, Y+6	; 0x06
    37ba:	4f 81       	ldd	r20, Y+7	; 0x07
    37bc:	58 85       	ldd	r21, Y+8	; 0x08
    37be:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__subsf3>
    37c2:	dc 01       	movw	r26, r24
    37c4:	cb 01       	movw	r24, r22
    37c6:	bc 01       	movw	r22, r24
    37c8:	cd 01       	movw	r24, r26
    37ca:	2d 81       	ldd	r18, Y+5	; 0x05
    37cc:	3e 81       	ldd	r19, Y+6	; 0x06
    37ce:	4f 81       	ldd	r20, Y+7	; 0x07
    37d0:	58 85       	ldd	r21, Y+8	; 0x08
    37d2:	0e 94 35 04 	call	0x86a	; 0x86a <__divsf3>
    37d6:	dc 01       	movw	r26, r24
    37d8:	cb 01       	movw	r24, r22
    37da:	7c 01       	movw	r14, r24
    37dc:	8d 01       	movw	r16, r26
    37de:	e9 85       	ldd	r30, Y+9	; 0x09
    37e0:	fa 85       	ldd	r31, Y+10	; 0x0a
    37e2:	83 81       	ldd	r24, Z+3	; 0x03
    37e4:	94 81       	ldd	r25, Z+4	; 0x04
    37e6:	cc 01       	movw	r24, r24
    37e8:	a0 e0       	ldi	r26, 0x00	; 0
    37ea:	b0 e0       	ldi	r27, 0x00	; 0
    37ec:	bc 01       	movw	r22, r24
    37ee:	cd 01       	movw	r24, r26
    37f0:	0e 94 23 06 	call	0xc46	; 0xc46 <__floatunsisf>
    37f4:	9b 01       	movw	r18, r22
    37f6:	ac 01       	movw	r20, r24
    37f8:	c8 01       	movw	r24, r16
    37fa:	b7 01       	movw	r22, r14
    37fc:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3800:	dc 01       	movw	r26, r24
    3802:	cb 01       	movw	r24, r22
    3804:	89 83       	std	Y+1, r24	; 0x01
    3806:	9a 83       	std	Y+2, r25	; 0x02
    3808:	ab 83       	std	Y+3, r26	; 0x03
    380a:	bc 83       	std	Y+4, r27	; 0x04
    return (u16)Local_f32RL;
    380c:	69 81       	ldd	r22, Y+1	; 0x01
    380e:	7a 81       	ldd	r23, Y+2	; 0x02
    3810:	8b 81       	ldd	r24, Y+3	; 0x03
    3812:	9c 81       	ldd	r25, Y+4	; 0x04
    3814:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3818:	dc 01       	movw	r26, r24
    381a:	cb 01       	movw	r24, r22
}
    381c:	2c 96       	adiw	r28, 0x0c	; 12
    381e:	0f b6       	in	r0, 0x3f	; 63
    3820:	f8 94       	cli
    3822:	de bf       	out	0x3e, r29	; 62
    3824:	0f be       	out	0x3f, r0	; 63
    3826:	cd bf       	out	0x3d, r28	; 61
    3828:	cf 91       	pop	r28
    382a:	df 91       	pop	r29
    382c:	1f 91       	pop	r17
    382e:	0f 91       	pop	r16
    3830:	ff 90       	pop	r15
    3832:	ef 90       	pop	r14
    3834:	08 95       	ret

00003836 <LDR_enumInit>:

LDR_ErrorStatus LDR_enumInit(LDR_Config_t *Copy_pstConfig)
{
    3836:	df 93       	push	r29
    3838:	cf 93       	push	r28
    383a:	00 d0       	rcall	.+0      	; 0x383c <LDR_enumInit+0x6>
    383c:	0f 92       	push	r0
    383e:	cd b7       	in	r28, 0x3d	; 61
    3840:	de b7       	in	r29, 0x3e	; 62
    3842:	9b 83       	std	Y+3, r25	; 0x03
    3844:	8a 83       	std	Y+2, r24	; 0x02
    LDR_ErrorStatus Local_enumErrorStatus = LDR_NOK;
    3846:	81 e0       	ldi	r24, 0x01	; 1
    3848:	89 83       	std	Y+1, r24	; 0x01
    
    if (Copy_pstConfig != NULL)
    384a:	8a 81       	ldd	r24, Y+2	; 0x02
    384c:	9b 81       	ldd	r25, Y+3	; 0x03
    384e:	00 97       	sbiw	r24, 0x00	; 0
    3850:	79 f0       	breq	.+30     	; 0x3870 <LDR_enumInit+0x3a>
    {
        /* Initialize ADC */
        ADC_vInit();
    3852:	0e 94 a2 21 	call	0x4344	; 0x4344 <ADC_vInit>
        
        /* Set default values if not configured */
        if (Copy_pstConfig->Copy_u16RL == 0)
    3856:	ea 81       	ldd	r30, Y+2	; 0x02
    3858:	fb 81       	ldd	r31, Y+3	; 0x03
    385a:	83 81       	ldd	r24, Z+3	; 0x03
    385c:	94 81       	ldd	r25, Z+4	; 0x04
    385e:	00 97       	sbiw	r24, 0x00	; 0
    3860:	31 f4       	brne	.+12     	; 0x386e <LDR_enumInit+0x38>
        {
            Copy_pstConfig->Copy_u16RL = LDR_DEFAULT_RL;
    3862:	ea 81       	ldd	r30, Y+2	; 0x02
    3864:	fb 81       	ldd	r31, Y+3	; 0x03
    3866:	80 e1       	ldi	r24, 0x10	; 16
    3868:	97 e2       	ldi	r25, 0x27	; 39
    386a:	94 83       	std	Z+4, r25	; 0x04
    386c:	83 83       	std	Z+3, r24	; 0x03
        }
        
        Local_enumErrorStatus = LDR_OK;
    386e:	19 82       	std	Y+1, r1	; 0x01
    }
    
    return Local_enumErrorStatus;
    3870:	89 81       	ldd	r24, Y+1	; 0x01
}
    3872:	0f 90       	pop	r0
    3874:	0f 90       	pop	r0
    3876:	0f 90       	pop	r0
    3878:	cf 91       	pop	r28
    387a:	df 91       	pop	r29
    387c:	08 95       	ret

0000387e <LDR_enumGetLightIntensity>:

LDR_ErrorStatus LDR_enumGetLightIntensity(LDR_Config_t *Copy_pstConfig, u16 *Copy_pu16LightValue)
{
    387e:	df 93       	push	r29
    3880:	cf 93       	push	r28
    3882:	cd b7       	in	r28, 0x3d	; 61
    3884:	de b7       	in	r29, 0x3e	; 62
    3886:	27 97       	sbiw	r28, 0x07	; 7
    3888:	0f b6       	in	r0, 0x3f	; 63
    388a:	f8 94       	cli
    388c:	de bf       	out	0x3e, r29	; 62
    388e:	0f be       	out	0x3f, r0	; 63
    3890:	cd bf       	out	0x3d, r28	; 61
    3892:	9d 83       	std	Y+5, r25	; 0x05
    3894:	8c 83       	std	Y+4, r24	; 0x04
    3896:	7f 83       	std	Y+7, r23	; 0x07
    3898:	6e 83       	std	Y+6, r22	; 0x06
    LDR_ErrorStatus Local_enumErrorStatus = LDR_NOK;
    389a:	81 e0       	ldi	r24, 0x01	; 1
    389c:	89 83       	std	Y+1, r24	; 0x01
    u16 Local_u16AnalogSignal = 0;
    389e:	1b 82       	std	Y+3, r1	; 0x03
    38a0:	1a 82       	std	Y+2, r1	; 0x02
    
    if (Copy_pstConfig != NULL && Copy_pu16LightValue != NULL)
    38a2:	8c 81       	ldd	r24, Y+4	; 0x04
    38a4:	9d 81       	ldd	r25, Y+5	; 0x05
    38a6:	00 97       	sbiw	r24, 0x00	; 0
    38a8:	d9 f0       	breq	.+54     	; 0x38e0 <LDR_enumGetLightIntensity+0x62>
    38aa:	8e 81       	ldd	r24, Y+6	; 0x06
    38ac:	9f 81       	ldd	r25, Y+7	; 0x07
    38ae:	00 97       	sbiw	r24, 0x00	; 0
    38b0:	b9 f0       	breq	.+46     	; 0x38e0 <LDR_enumGetLightIntensity+0x62>
    {
        /* Get raw ADC value */
        Local_enumErrorStatus = LDR_enumGetAnalogSignal(Copy_pstConfig, &Local_u16AnalogSignal);
    38b2:	8c 81       	ldd	r24, Y+4	; 0x04
    38b4:	9d 81       	ldd	r25, Y+5	; 0x05
    38b6:	9e 01       	movw	r18, r28
    38b8:	2e 5f       	subi	r18, 0xFE	; 254
    38ba:	3f 4f       	sbci	r19, 0xFF	; 255
    38bc:	b9 01       	movw	r22, r18
    38be:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <LDR_enumGetAnalogSignal>
    38c2:	89 83       	std	Y+1, r24	; 0x01
        
        if (Local_enumErrorStatus == LDR_OK)
    38c4:	89 81       	ldd	r24, Y+1	; 0x01
    38c6:	88 23       	and	r24, r24
    38c8:	59 f4       	brne	.+22     	; 0x38e0 <LDR_enumGetLightIntensity+0x62>
        {
            /* Calculate LDR resistance */
            *Copy_pu16LightValue = LDR_u16CalculateResistance(Copy_pstConfig, Local_u16AnalogSignal);
    38ca:	2a 81       	ldd	r18, Y+2	; 0x02
    38cc:	3b 81       	ldd	r19, Y+3	; 0x03
    38ce:	8c 81       	ldd	r24, Y+4	; 0x04
    38d0:	9d 81       	ldd	r25, Y+5	; 0x05
    38d2:	b9 01       	movw	r22, r18
    38d4:	0e 94 a2 1b 	call	0x3744	; 0x3744 <LDR_u16CalculateResistance>
    38d8:	ee 81       	ldd	r30, Y+6	; 0x06
    38da:	ff 81       	ldd	r31, Y+7	; 0x07
    38dc:	91 83       	std	Z+1, r25	; 0x01
    38de:	80 83       	st	Z, r24
        }
    }
    
    return Local_enumErrorStatus;
    38e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    38e2:	27 96       	adiw	r28, 0x07	; 7
    38e4:	0f b6       	in	r0, 0x3f	; 63
    38e6:	f8 94       	cli
    38e8:	de bf       	out	0x3e, r29	; 62
    38ea:	0f be       	out	0x3f, r0	; 63
    38ec:	cd bf       	out	0x3d, r28	; 61
    38ee:	cf 91       	pop	r28
    38f0:	df 91       	pop	r29
    38f2:	08 95       	ret

000038f4 <LDR_enumGetAnalogSignal>:

LDR_ErrorStatus LDR_enumGetAnalogSignal(LDR_Config_t *Copy_pstConfig, u16 *Copy_pu16AnalogSignal)
{
    38f4:	df 93       	push	r29
    38f6:	cf 93       	push	r28
    38f8:	00 d0       	rcall	.+0      	; 0x38fa <LDR_enumGetAnalogSignal+0x6>
    38fa:	00 d0       	rcall	.+0      	; 0x38fc <LDR_enumGetAnalogSignal+0x8>
    38fc:	0f 92       	push	r0
    38fe:	cd b7       	in	r28, 0x3d	; 61
    3900:	de b7       	in	r29, 0x3e	; 62
    3902:	9b 83       	std	Y+3, r25	; 0x03
    3904:	8a 83       	std	Y+2, r24	; 0x02
    3906:	7d 83       	std	Y+5, r23	; 0x05
    3908:	6c 83       	std	Y+4, r22	; 0x04
    LDR_ErrorStatus Local_enumErrorStatus = LDR_NOK;
    390a:	81 e0       	ldi	r24, 0x01	; 1
    390c:	89 83       	std	Y+1, r24	; 0x01
    
    if (Copy_pstConfig != NULL && Copy_pu16AnalogSignal != NULL)
    390e:	8a 81       	ldd	r24, Y+2	; 0x02
    3910:	9b 81       	ldd	r25, Y+3	; 0x03
    3912:	00 97       	sbiw	r24, 0x00	; 0
    3914:	79 f0       	breq	.+30     	; 0x3934 <LDR_enumGetAnalogSignal+0x40>
    3916:	8c 81       	ldd	r24, Y+4	; 0x04
    3918:	9d 81       	ldd	r25, Y+5	; 0x05
    391a:	00 97       	sbiw	r24, 0x00	; 0
    391c:	59 f0       	breq	.+22     	; 0x3934 <LDR_enumGetAnalogSignal+0x40>
    {
        if (ADC_u8GetResultSync(Copy_pstConfig->Copy_u8Channel, Copy_pu16AnalogSignal) == 0)
    391e:	ea 81       	ldd	r30, Y+2	; 0x02
    3920:	fb 81       	ldd	r31, Y+3	; 0x03
    3922:	80 81       	ld	r24, Z
    3924:	2c 81       	ldd	r18, Y+4	; 0x04
    3926:	3d 81       	ldd	r19, Y+5	; 0x05
    3928:	b9 01       	movw	r22, r18
    392a:	0e 94 c4 22 	call	0x4588	; 0x4588 <ADC_u8GetResultSync>
    392e:	88 23       	and	r24, r24
    3930:	09 f4       	brne	.+2      	; 0x3934 <LDR_enumGetAnalogSignal+0x40>
        {
            Local_enumErrorStatus = LDR_OK;
    3932:	19 82       	std	Y+1, r1	; 0x01
        }
    }
    
    return Local_enumErrorStatus;
    3934:	89 81       	ldd	r24, Y+1	; 0x01
} 
    3936:	0f 90       	pop	r0
    3938:	0f 90       	pop	r0
    393a:	0f 90       	pop	r0
    393c:	0f 90       	pop	r0
    393e:	0f 90       	pop	r0
    3940:	cf 91       	pop	r28
    3942:	df 91       	pop	r29
    3944:	08 95       	ret

00003946 <LDR_enumGetLightPercentage>:
     * @param Copy_pstConfig Pointer to LDR configuration
     * @param Copy_pu16LightPercentage Output percentage value
     * @return LDR_ErrorStatus (LDR_OK or LDR_NOK)
     */
    LDR_ErrorStatus LDR_enumGetLightPercentage(LDR_Config_t *Copy_pstConfig, u16 *Copy_pu16LightPercentage)
    {
    3946:	df 93       	push	r29
    3948:	cf 93       	push	r28
    394a:	cd b7       	in	r28, 0x3d	; 61
    394c:	de b7       	in	r29, 0x3e	; 62
    394e:	27 97       	sbiw	r28, 0x07	; 7
    3950:	0f b6       	in	r0, 0x3f	; 63
    3952:	f8 94       	cli
    3954:	de bf       	out	0x3e, r29	; 62
    3956:	0f be       	out	0x3f, r0	; 63
    3958:	cd bf       	out	0x3d, r28	; 61
    395a:	9d 83       	std	Y+5, r25	; 0x05
    395c:	8c 83       	std	Y+4, r24	; 0x04
    395e:	7f 83       	std	Y+7, r23	; 0x07
    3960:	6e 83       	std	Y+6, r22	; 0x06
        LDR_ErrorStatus Local_enumErrorStatus = LDR_NOK;
    3962:	81 e0       	ldi	r24, 0x01	; 1
    3964:	89 83       	std	Y+1, r24	; 0x01
        u16 Local_u16LightValue = 0;
    3966:	1b 82       	std	Y+3, r1	; 0x03
    3968:	1a 82       	std	Y+2, r1	; 0x02

        if (Copy_pstConfig != NULL && Copy_pu16LightPercentage != NULL)
    396a:	8c 81       	ldd	r24, Y+4	; 0x04
    396c:	9d 81       	ldd	r25, Y+5	; 0x05
    396e:	00 97       	sbiw	r24, 0x00	; 0
    3970:	09 f4       	brne	.+2      	; 0x3974 <LDR_enumGetLightPercentage+0x2e>
    3972:	43 c0       	rjmp	.+134    	; 0x39fa <LDR_enumGetLightPercentage+0xb4>
    3974:	8e 81       	ldd	r24, Y+6	; 0x06
    3976:	9f 81       	ldd	r25, Y+7	; 0x07
    3978:	00 97       	sbiw	r24, 0x00	; 0
    397a:	09 f4       	brne	.+2      	; 0x397e <LDR_enumGetLightPercentage+0x38>
    397c:	3e c0       	rjmp	.+124    	; 0x39fa <LDR_enumGetLightPercentage+0xb4>
        {
            /* Get raw light intensity (resistance) */
            Local_enumErrorStatus = LDR_enumGetLightIntensity(Copy_pstConfig, &Local_u16LightValue);
    397e:	8c 81       	ldd	r24, Y+4	; 0x04
    3980:	9d 81       	ldd	r25, Y+5	; 0x05
    3982:	9e 01       	movw	r18, r28
    3984:	2e 5f       	subi	r18, 0xFE	; 254
    3986:	3f 4f       	sbci	r19, 0xFF	; 255
    3988:	b9 01       	movw	r22, r18
    398a:	0e 94 3f 1c 	call	0x387e	; 0x387e <LDR_enumGetLightIntensity>
    398e:	89 83       	std	Y+1, r24	; 0x01

            if (Local_enumErrorStatus == LDR_OK)
    3990:	89 81       	ldd	r24, Y+1	; 0x01
    3992:	88 23       	and	r24, r24
    3994:	91 f5       	brne	.+100    	; 0x39fa <LDR_enumGetLightPercentage+0xb4>
                 */
                #define LDR_MIN_RESISTANCE  1000   // Example: Minimum resistance (bright light)
                #define LDR_MAX_RESISTANCE 10000   // Example: Maximum resistance (dark)

                /* Ensure resistance is within bounds */
                if (Local_u16LightValue > LDR_MAX_RESISTANCE)
    3996:	8a 81       	ldd	r24, Y+2	; 0x02
    3998:	9b 81       	ldd	r25, Y+3	; 0x03
    399a:	27 e2       	ldi	r18, 0x27	; 39
    399c:	81 31       	cpi	r24, 0x11	; 17
    399e:	92 07       	cpc	r25, r18
    39a0:	28 f0       	brcs	.+10     	; 0x39ac <LDR_enumGetLightPercentage+0x66>
                    Local_u16LightValue = LDR_MAX_RESISTANCE;
    39a2:	80 e1       	ldi	r24, 0x10	; 16
    39a4:	97 e2       	ldi	r25, 0x27	; 39
    39a6:	9b 83       	std	Y+3, r25	; 0x03
    39a8:	8a 83       	std	Y+2, r24	; 0x02
    39aa:	0a c0       	rjmp	.+20     	; 0x39c0 <LDR_enumGetLightPercentage+0x7a>
                else if (Local_u16LightValue < LDR_MIN_RESISTANCE)
    39ac:	8a 81       	ldd	r24, Y+2	; 0x02
    39ae:	9b 81       	ldd	r25, Y+3	; 0x03
    39b0:	43 e0       	ldi	r20, 0x03	; 3
    39b2:	88 3e       	cpi	r24, 0xE8	; 232
    39b4:	94 07       	cpc	r25, r20
    39b6:	20 f4       	brcc	.+8      	; 0x39c0 <LDR_enumGetLightPercentage+0x7a>
                    Local_u16LightValue = LDR_MIN_RESISTANCE;
    39b8:	88 ee       	ldi	r24, 0xE8	; 232
    39ba:	93 e0       	ldi	r25, 0x03	; 3
    39bc:	9b 83       	std	Y+3, r25	; 0x03
    39be:	8a 83       	std	Y+2, r24	; 0x02

                /* Calculate percentage (inverse because lower resistance = more light) */
                *Copy_pu16LightPercentage = 100 - ((Local_u16LightValue - LDR_MIN_RESISTANCE) * 100) /
    39c0:	2a 81       	ldd	r18, Y+2	; 0x02
    39c2:	3b 81       	ldd	r19, Y+3	; 0x03
    39c4:	84 e6       	ldi	r24, 0x64	; 100
    39c6:	90 e0       	ldi	r25, 0x00	; 0
    39c8:	ac 01       	movw	r20, r24
    39ca:	24 9f       	mul	r18, r20
    39cc:	c0 01       	movw	r24, r0
    39ce:	25 9f       	mul	r18, r21
    39d0:	90 0d       	add	r25, r0
    39d2:	34 9f       	mul	r19, r20
    39d4:	90 0d       	add	r25, r0
    39d6:	11 24       	eor	r1, r1
    39d8:	80 5a       	subi	r24, 0xA0	; 160
    39da:	96 48       	sbci	r25, 0x86	; 134
    39dc:	28 e2       	ldi	r18, 0x28	; 40
    39de:	33 e2       	ldi	r19, 0x23	; 35
    39e0:	b9 01       	movw	r22, r18
    39e2:	0e 94 3f 3a 	call	0x747e	; 0x747e <__udivmodhi4>
    39e6:	cb 01       	movw	r24, r22
    39e8:	9c 01       	movw	r18, r24
    39ea:	84 e6       	ldi	r24, 0x64	; 100
    39ec:	90 e0       	ldi	r25, 0x00	; 0
    39ee:	82 1b       	sub	r24, r18
    39f0:	93 0b       	sbc	r25, r19
    39f2:	ee 81       	ldd	r30, Y+6	; 0x06
    39f4:	ff 81       	ldd	r31, Y+7	; 0x07
    39f6:	91 83       	std	Z+1, r25	; 0x01
    39f8:	80 83       	st	Z, r24
                                           (LDR_MAX_RESISTANCE - LDR_MIN_RESISTANCE);
            }
        }
         return Local_enumErrorStatus;
    39fa:	89 81       	ldd	r24, Y+1	; 0x01
    }
    39fc:	27 96       	adiw	r28, 0x07	; 7
    39fe:	0f b6       	in	r0, 0x3f	; 63
    3a00:	f8 94       	cli
    3a02:	de bf       	out	0x3e, r29	; 62
    3a04:	0f be       	out	0x3f, r0	; 63
    3a06:	cd bf       	out	0x3d, r28	; 61
    3a08:	cf 91       	pop	r28
    3a0a:	df 91       	pop	r29
    3a0c:	08 95       	ret

00003a0e <LED_vInit>:
* Parameters :
            => struct has the led port , pin, status
* return : void
*/
void LED_vInit(LED_config LED_Configuration)
{
    3a0e:	df 93       	push	r29
    3a10:	cf 93       	push	r28
    3a12:	00 d0       	rcall	.+0      	; 0x3a14 <LED_vInit+0x6>
    3a14:	0f 92       	push	r0
    3a16:	cd b7       	in	r28, 0x3d	; 61
    3a18:	de b7       	in	r29, 0x3e	; 62
    3a1a:	69 83       	std	Y+1, r22	; 0x01
    3a1c:	7a 83       	std	Y+2, r23	; 0x02
    3a1e:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumSetPinDirection(LED_Configuration.PortName, LED_Configuration.PinNumber, DIO_PIN_OUTPUT);
    3a20:	89 81       	ldd	r24, Y+1	; 0x01
    3a22:	9a 81       	ldd	r25, Y+2	; 0x02
    3a24:	69 2f       	mov	r22, r25
    3a26:	41 e0       	ldi	r20, 0x01	; 1
    3a28:	0e 94 fe 24 	call	0x49fc	; 0x49fc <DIO_enumSetPinDirection>
}
    3a2c:	0f 90       	pop	r0
    3a2e:	0f 90       	pop	r0
    3a30:	0f 90       	pop	r0
    3a32:	cf 91       	pop	r28
    3a34:	df 91       	pop	r29
    3a36:	08 95       	ret

00003a38 <LED_vTurnOn>:
* Parameters :
            => struct has the led port , pin, status
* return : void
*/
void LED_vTurnOn(LED_config LED_Configuration)
{
    3a38:	df 93       	push	r29
    3a3a:	cf 93       	push	r28
    3a3c:	00 d0       	rcall	.+0      	; 0x3a3e <LED_vTurnOn+0x6>
    3a3e:	0f 92       	push	r0
    3a40:	cd b7       	in	r28, 0x3d	; 61
    3a42:	de b7       	in	r29, 0x3e	; 62
    3a44:	69 83       	std	Y+1, r22	; 0x01
    3a46:	7a 83       	std	Y+2, r23	; 0x02
    3a48:	8b 83       	std	Y+3, r24	; 0x03
  if (LED_Configuration.ActiveState == ACTIVE_HIGH)
    3a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a4c:	81 30       	cpi	r24, 0x01	; 1
    3a4e:	39 f4       	brne	.+14     	; 0x3a5e <LED_vTurnOn+0x26>
  {
	  DIO_enumWritePinValue(LED_Configuration.PortName, LED_Configuration.PinNumber, DIO_PIN_HIGH);
    3a50:	89 81       	ldd	r24, Y+1	; 0x01
    3a52:	9a 81       	ldd	r25, Y+2	; 0x02
    3a54:	69 2f       	mov	r22, r25
    3a56:	41 e0       	ldi	r20, 0x01	; 1
    3a58:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <DIO_enumWritePinValue>
    3a5c:	09 c0       	rjmp	.+18     	; 0x3a70 <LED_vTurnOn+0x38>
  }
  else if (LED_Configuration.ActiveState == ACTIVE_LOW)
    3a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a60:	88 23       	and	r24, r24
    3a62:	31 f4       	brne	.+12     	; 0x3a70 <LED_vTurnOn+0x38>
  {
	  DIO_enumWritePinValue(LED_Configuration.PortName, LED_Configuration.PinNumber, DIO_PIN_LOW);
    3a64:	89 81       	ldd	r24, Y+1	; 0x01
    3a66:	9a 81       	ldd	r25, Y+2	; 0x02
    3a68:	69 2f       	mov	r22, r25
    3a6a:	40 e0       	ldi	r20, 0x00	; 0
    3a6c:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <DIO_enumWritePinValue>
  }
}
    3a70:	0f 90       	pop	r0
    3a72:	0f 90       	pop	r0
    3a74:	0f 90       	pop	r0
    3a76:	cf 91       	pop	r28
    3a78:	df 91       	pop	r29
    3a7a:	08 95       	ret

00003a7c <LED_vTurnOff>:
* Parameters :
             => struct has the led port , pin , status
* return : void
*/
void LED_vTurnOff(LED_config LED_Configuration)
{
    3a7c:	df 93       	push	r29
    3a7e:	cf 93       	push	r28
    3a80:	00 d0       	rcall	.+0      	; 0x3a82 <LED_vTurnOff+0x6>
    3a82:	0f 92       	push	r0
    3a84:	cd b7       	in	r28, 0x3d	; 61
    3a86:	de b7       	in	r29, 0x3e	; 62
    3a88:	69 83       	std	Y+1, r22	; 0x01
    3a8a:	7a 83       	std	Y+2, r23	; 0x02
    3a8c:	8b 83       	std	Y+3, r24	; 0x03
  if (LED_Configuration.ActiveState == ACTIVE_HIGH)
    3a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a90:	81 30       	cpi	r24, 0x01	; 1
    3a92:	39 f4       	brne	.+14     	; 0x3aa2 <LED_vTurnOff+0x26>
  {
	  DIO_enumWritePinValue(LED_Configuration.PortName, LED_Configuration.PinNumber, DIO_PIN_LOW);
    3a94:	89 81       	ldd	r24, Y+1	; 0x01
    3a96:	9a 81       	ldd	r25, Y+2	; 0x02
    3a98:	69 2f       	mov	r22, r25
    3a9a:	40 e0       	ldi	r20, 0x00	; 0
    3a9c:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <DIO_enumWritePinValue>
    3aa0:	09 c0       	rjmp	.+18     	; 0x3ab4 <LED_vTurnOff+0x38>
  }
  else if (LED_Configuration.ActiveState == ACTIVE_LOW)
    3aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    3aa4:	88 23       	and	r24, r24
    3aa6:	31 f4       	brne	.+12     	; 0x3ab4 <LED_vTurnOff+0x38>
  {
	  DIO_enumWritePinValue(LED_Configuration.PortName, LED_Configuration.PinNumber, DIO_PIN_HIGH);
    3aa8:	89 81       	ldd	r24, Y+1	; 0x01
    3aaa:	9a 81       	ldd	r25, Y+2	; 0x02
    3aac:	69 2f       	mov	r22, r25
    3aae:	41 e0       	ldi	r20, 0x01	; 1
    3ab0:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <DIO_enumWritePinValue>
  }
}
    3ab4:	0f 90       	pop	r0
    3ab6:	0f 90       	pop	r0
    3ab8:	0f 90       	pop	r0
    3aba:	cf 91       	pop	r28
    3abc:	df 91       	pop	r29
    3abe:	08 95       	ret

00003ac0 <LED_vTog>:
* Parameters :
             => struct has the led port , pin , status
* return : void
*/
void LED_vTog(LED_config LED_Configuration)
{
    3ac0:	df 93       	push	r29
    3ac2:	cf 93       	push	r28
    3ac4:	00 d0       	rcall	.+0      	; 0x3ac6 <LED_vTog+0x6>
    3ac6:	0f 92       	push	r0
    3ac8:	cd b7       	in	r28, 0x3d	; 61
    3aca:	de b7       	in	r29, 0x3e	; 62
    3acc:	69 83       	std	Y+1, r22	; 0x01
    3ace:	7a 83       	std	Y+2, r23	; 0x02
    3ad0:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumTogglePinValue(LED_Configuration.PortName, LED_Configuration.PinNumber);
    3ad2:	89 81       	ldd	r24, Y+1	; 0x01
    3ad4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ad6:	69 2f       	mov	r22, r25
    3ad8:	0e 94 e1 27 	call	0x4fc2	; 0x4fc2 <DIO_enumTogglePinValue>
}
    3adc:	0f 90       	pop	r0
    3ade:	0f 90       	pop	r0
    3ae0:	0f 90       	pop	r0
    3ae2:	cf 91       	pop	r28
    3ae4:	df 91       	pop	r29
    3ae6:	08 95       	ret

00003ae8 <MQ2_u16CalculateRS>:

#define MQ2_CALIBRATION_SAMPLE_TIMES 50
#define MQ2_CALIBRATION_SAMPLE_INTERVAL 500

static u16 MQ2_u16CalculateRS(MQ2_Config_t *Copy_pstConfig, u16 Copy_u16AdcValue)
{
    3ae8:	ef 92       	push	r14
    3aea:	ff 92       	push	r15
    3aec:	0f 93       	push	r16
    3aee:	1f 93       	push	r17
    3af0:	df 93       	push	r29
    3af2:	cf 93       	push	r28
    3af4:	cd b7       	in	r28, 0x3d	; 61
    3af6:	de b7       	in	r29, 0x3e	; 62
    3af8:	2c 97       	sbiw	r28, 0x0c	; 12
    3afa:	0f b6       	in	r0, 0x3f	; 63
    3afc:	f8 94       	cli
    3afe:	de bf       	out	0x3e, r29	; 62
    3b00:	0f be       	out	0x3f, r0	; 63
    3b02:	cd bf       	out	0x3d, r28	; 61
    3b04:	9a 87       	std	Y+10, r25	; 0x0a
    3b06:	89 87       	std	Y+9, r24	; 0x09
    3b08:	7c 87       	std	Y+12, r23	; 0x0c
    3b0a:	6b 87       	std	Y+11, r22	; 0x0b
    float Local_f32Voltage = (float)Copy_u16AdcValue * MQ2_VOLTAGE_RESOLUTION / MQ2_MAX_ADC_VALUE;
    3b0c:	8b 85       	ldd	r24, Y+11	; 0x0b
    3b0e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3b10:	cc 01       	movw	r24, r24
    3b12:	a0 e0       	ldi	r26, 0x00	; 0
    3b14:	b0 e0       	ldi	r27, 0x00	; 0
    3b16:	bc 01       	movw	r22, r24
    3b18:	cd 01       	movw	r24, r26
    3b1a:	0e 94 23 06 	call	0xc46	; 0xc46 <__floatunsisf>
    3b1e:	dc 01       	movw	r26, r24
    3b20:	cb 01       	movw	r24, r22
    3b22:	bc 01       	movw	r22, r24
    3b24:	cd 01       	movw	r24, r26
    3b26:	20 e0       	ldi	r18, 0x00	; 0
    3b28:	30 e0       	ldi	r19, 0x00	; 0
    3b2a:	40 ea       	ldi	r20, 0xA0	; 160
    3b2c:	50 e4       	ldi	r21, 0x40	; 64
    3b2e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3b32:	dc 01       	movw	r26, r24
    3b34:	cb 01       	movw	r24, r22
    3b36:	bc 01       	movw	r22, r24
    3b38:	cd 01       	movw	r24, r26
    3b3a:	20 e0       	ldi	r18, 0x00	; 0
    3b3c:	30 ec       	ldi	r19, 0xC0	; 192
    3b3e:	4f e7       	ldi	r20, 0x7F	; 127
    3b40:	54 e4       	ldi	r21, 0x44	; 68
    3b42:	0e 94 35 04 	call	0x86a	; 0x86a <__divsf3>
    3b46:	dc 01       	movw	r26, r24
    3b48:	cb 01       	movw	r24, r22
    3b4a:	8d 83       	std	Y+5, r24	; 0x05
    3b4c:	9e 83       	std	Y+6, r25	; 0x06
    3b4e:	af 83       	std	Y+7, r26	; 0x07
    3b50:	b8 87       	std	Y+8, r27	; 0x08
    float Local_f32Rs = ((MQ2_VOLTAGE_RESOLUTION - Local_f32Voltage) / Local_f32Voltage) * Copy_pstConfig->Copy_u16RL;
    3b52:	60 e0       	ldi	r22, 0x00	; 0
    3b54:	70 e0       	ldi	r23, 0x00	; 0
    3b56:	80 ea       	ldi	r24, 0xA0	; 160
    3b58:	90 e4       	ldi	r25, 0x40	; 64
    3b5a:	2d 81       	ldd	r18, Y+5	; 0x05
    3b5c:	3e 81       	ldd	r19, Y+6	; 0x06
    3b5e:	4f 81       	ldd	r20, Y+7	; 0x07
    3b60:	58 85       	ldd	r21, Y+8	; 0x08
    3b62:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__subsf3>
    3b66:	dc 01       	movw	r26, r24
    3b68:	cb 01       	movw	r24, r22
    3b6a:	bc 01       	movw	r22, r24
    3b6c:	cd 01       	movw	r24, r26
    3b6e:	2d 81       	ldd	r18, Y+5	; 0x05
    3b70:	3e 81       	ldd	r19, Y+6	; 0x06
    3b72:	4f 81       	ldd	r20, Y+7	; 0x07
    3b74:	58 85       	ldd	r21, Y+8	; 0x08
    3b76:	0e 94 35 04 	call	0x86a	; 0x86a <__divsf3>
    3b7a:	dc 01       	movw	r26, r24
    3b7c:	cb 01       	movw	r24, r22
    3b7e:	7c 01       	movw	r14, r24
    3b80:	8d 01       	movw	r16, r26
    3b82:	e9 85       	ldd	r30, Y+9	; 0x09
    3b84:	fa 85       	ldd	r31, Y+10	; 0x0a
    3b86:	85 81       	ldd	r24, Z+5	; 0x05
    3b88:	96 81       	ldd	r25, Z+6	; 0x06
    3b8a:	cc 01       	movw	r24, r24
    3b8c:	a0 e0       	ldi	r26, 0x00	; 0
    3b8e:	b0 e0       	ldi	r27, 0x00	; 0
    3b90:	bc 01       	movw	r22, r24
    3b92:	cd 01       	movw	r24, r26
    3b94:	0e 94 23 06 	call	0xc46	; 0xc46 <__floatunsisf>
    3b98:	9b 01       	movw	r18, r22
    3b9a:	ac 01       	movw	r20, r24
    3b9c:	c8 01       	movw	r24, r16
    3b9e:	b7 01       	movw	r22, r14
    3ba0:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3ba4:	dc 01       	movw	r26, r24
    3ba6:	cb 01       	movw	r24, r22
    3ba8:	89 83       	std	Y+1, r24	; 0x01
    3baa:	9a 83       	std	Y+2, r25	; 0x02
    3bac:	ab 83       	std	Y+3, r26	; 0x03
    3bae:	bc 83       	std	Y+4, r27	; 0x04
    return (u16)Local_f32Rs;
    3bb0:	69 81       	ldd	r22, Y+1	; 0x01
    3bb2:	7a 81       	ldd	r23, Y+2	; 0x02
    3bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    3bb6:	9c 81       	ldd	r25, Y+4	; 0x04
    3bb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bbc:	dc 01       	movw	r26, r24
    3bbe:	cb 01       	movw	r24, r22
}
    3bc0:	2c 96       	adiw	r28, 0x0c	; 12
    3bc2:	0f b6       	in	r0, 0x3f	; 63
    3bc4:	f8 94       	cli
    3bc6:	de bf       	out	0x3e, r29	; 62
    3bc8:	0f be       	out	0x3f, r0	; 63
    3bca:	cd bf       	out	0x3d, r28	; 61
    3bcc:	cf 91       	pop	r28
    3bce:	df 91       	pop	r29
    3bd0:	1f 91       	pop	r17
    3bd2:	0f 91       	pop	r16
    3bd4:	ff 90       	pop	r15
    3bd6:	ef 90       	pop	r14
    3bd8:	08 95       	ret

00003bda <MQ2_u16CalculateRatio>:

static u16 MQ2_u16CalculateRatio(u16 Copy_u16Rs, u16 Copy_u16R0)
{
    3bda:	ef 92       	push	r14
    3bdc:	ff 92       	push	r15
    3bde:	0f 93       	push	r16
    3be0:	1f 93       	push	r17
    3be2:	df 93       	push	r29
    3be4:	cf 93       	push	r28
    3be6:	00 d0       	rcall	.+0      	; 0x3be8 <MQ2_u16CalculateRatio+0xe>
    3be8:	00 d0       	rcall	.+0      	; 0x3bea <MQ2_u16CalculateRatio+0x10>
    3bea:	cd b7       	in	r28, 0x3d	; 61
    3bec:	de b7       	in	r29, 0x3e	; 62
    3bee:	9a 83       	std	Y+2, r25	; 0x02
    3bf0:	89 83       	std	Y+1, r24	; 0x01
    3bf2:	7c 83       	std	Y+4, r23	; 0x04
    3bf4:	6b 83       	std	Y+3, r22	; 0x03
    return (u16)((float)Copy_u16Rs / Copy_u16R0);
    3bf6:	89 81       	ldd	r24, Y+1	; 0x01
    3bf8:	9a 81       	ldd	r25, Y+2	; 0x02
    3bfa:	cc 01       	movw	r24, r24
    3bfc:	a0 e0       	ldi	r26, 0x00	; 0
    3bfe:	b0 e0       	ldi	r27, 0x00	; 0
    3c00:	bc 01       	movw	r22, r24
    3c02:	cd 01       	movw	r24, r26
    3c04:	0e 94 23 06 	call	0xc46	; 0xc46 <__floatunsisf>
    3c08:	7b 01       	movw	r14, r22
    3c0a:	8c 01       	movw	r16, r24
    3c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c0e:	9c 81       	ldd	r25, Y+4	; 0x04
    3c10:	cc 01       	movw	r24, r24
    3c12:	a0 e0       	ldi	r26, 0x00	; 0
    3c14:	b0 e0       	ldi	r27, 0x00	; 0
    3c16:	bc 01       	movw	r22, r24
    3c18:	cd 01       	movw	r24, r26
    3c1a:	0e 94 23 06 	call	0xc46	; 0xc46 <__floatunsisf>
    3c1e:	9b 01       	movw	r18, r22
    3c20:	ac 01       	movw	r20, r24
    3c22:	c8 01       	movw	r24, r16
    3c24:	b7 01       	movw	r22, r14
    3c26:	0e 94 35 04 	call	0x86a	; 0x86a <__divsf3>
    3c2a:	dc 01       	movw	r26, r24
    3c2c:	cb 01       	movw	r24, r22
    3c2e:	bc 01       	movw	r22, r24
    3c30:	cd 01       	movw	r24, r26
    3c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c36:	dc 01       	movw	r26, r24
    3c38:	cb 01       	movw	r24, r22
}
    3c3a:	0f 90       	pop	r0
    3c3c:	0f 90       	pop	r0
    3c3e:	0f 90       	pop	r0
    3c40:	0f 90       	pop	r0
    3c42:	cf 91       	pop	r28
    3c44:	df 91       	pop	r29
    3c46:	1f 91       	pop	r17
    3c48:	0f 91       	pop	r16
    3c4a:	ff 90       	pop	r15
    3c4c:	ef 90       	pop	r14
    3c4e:	08 95       	ret

00003c50 <MQ2_enumGetGasPercentage>:
MQ2_ErrorStatus MQ2_enumGetGasPercentage(MQ2_Config_t *Copy_pstConfig, u16 *Copy_pu16Percentage)
    {
    3c50:	df 93       	push	r29
    3c52:	cf 93       	push	r28
    3c54:	cd b7       	in	r28, 0x3d	; 61
    3c56:	de b7       	in	r29, 0x3e	; 62
    3c58:	27 97       	sbiw	r28, 0x07	; 7
    3c5a:	0f b6       	in	r0, 0x3f	; 63
    3c5c:	f8 94       	cli
    3c5e:	de bf       	out	0x3e, r29	; 62
    3c60:	0f be       	out	0x3f, r0	; 63
    3c62:	cd bf       	out	0x3d, r28	; 61
    3c64:	9d 83       	std	Y+5, r25	; 0x05
    3c66:	8c 83       	std	Y+4, r24	; 0x04
    3c68:	7f 83       	std	Y+7, r23	; 0x07
    3c6a:	6e 83       	std	Y+6, r22	; 0x06
        MQ2_ErrorStatus Local_enumErrorStatus = MQ2_NOK;
    3c6c:	19 82       	std	Y+1, r1	; 0x01
        u16 Local_u16GasValue = 0;
    3c6e:	1b 82       	std	Y+3, r1	; 0x03
    3c70:	1a 82       	std	Y+2, r1	; 0x02

        if (Copy_pstConfig != NULL && Copy_pu16Percentage != NULL)
    3c72:	8c 81       	ldd	r24, Y+4	; 0x04
    3c74:	9d 81       	ldd	r25, Y+5	; 0x05
    3c76:	00 97       	sbiw	r24, 0x00	; 0
    3c78:	31 f1       	breq	.+76     	; 0x3cc6 <MQ2_enumGetGasPercentage+0x76>
    3c7a:	8e 81       	ldd	r24, Y+6	; 0x06
    3c7c:	9f 81       	ldd	r25, Y+7	; 0x07
    3c7e:	00 97       	sbiw	r24, 0x00	; 0
    3c80:	11 f1       	breq	.+68     	; 0x3cc6 <MQ2_enumGetGasPercentage+0x76>
        {
            /* Get raw gas concentration ratio (Rs/R0) */
            Local_enumErrorStatus = MQ2_enumGetGasConcentration(Copy_pstConfig, &Local_u16GasValue);
    3c82:	8c 81       	ldd	r24, Y+4	; 0x04
    3c84:	9d 81       	ldd	r25, Y+5	; 0x05
    3c86:	9e 01       	movw	r18, r28
    3c88:	2e 5f       	subi	r18, 0xFE	; 254
    3c8a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c8c:	b9 01       	movw	r22, r18
    3c8e:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <MQ2_enumGetGasConcentration>
    3c92:	89 83       	std	Y+1, r24	; 0x01

            if (Local_enumErrorStatus == MQ2_OK)
    3c94:	89 81       	ldd	r24, Y+1	; 0x01
    3c96:	81 30       	cpi	r24, 0x01	; 1
    3c98:	b1 f4       	brne	.+44     	; 0x3cc6 <MQ2_enumGetGasPercentage+0x76>
            {
                /* Convert ratio to percentage (assuming max ratio = 10 corresponds to 100%) */
                *Copy_pu16Percentage = (Local_u16GasValue * 100) / 10; // Adjust scaling factor as needed
    3c9a:	2a 81       	ldd	r18, Y+2	; 0x02
    3c9c:	3b 81       	ldd	r19, Y+3	; 0x03
    3c9e:	84 e6       	ldi	r24, 0x64	; 100
    3ca0:	90 e0       	ldi	r25, 0x00	; 0
    3ca2:	ac 01       	movw	r20, r24
    3ca4:	24 9f       	mul	r18, r20
    3ca6:	c0 01       	movw	r24, r0
    3ca8:	25 9f       	mul	r18, r21
    3caa:	90 0d       	add	r25, r0
    3cac:	34 9f       	mul	r19, r20
    3cae:	90 0d       	add	r25, r0
    3cb0:	11 24       	eor	r1, r1
    3cb2:	2a e0       	ldi	r18, 0x0A	; 10
    3cb4:	30 e0       	ldi	r19, 0x00	; 0
    3cb6:	b9 01       	movw	r22, r18
    3cb8:	0e 94 3f 3a 	call	0x747e	; 0x747e <__udivmodhi4>
    3cbc:	cb 01       	movw	r24, r22
    3cbe:	ee 81       	ldd	r30, Y+6	; 0x06
    3cc0:	ff 81       	ldd	r31, Y+7	; 0x07
    3cc2:	91 83       	std	Z+1, r25	; 0x01
    3cc4:	80 83       	st	Z, r24
            }
        }

        return Local_enumErrorStatus;
    3cc6:	89 81       	ldd	r24, Y+1	; 0x01
    }
    3cc8:	27 96       	adiw	r28, 0x07	; 7
    3cca:	0f b6       	in	r0, 0x3f	; 63
    3ccc:	f8 94       	cli
    3cce:	de bf       	out	0x3e, r29	; 62
    3cd0:	0f be       	out	0x3f, r0	; 63
    3cd2:	cd bf       	out	0x3d, r28	; 61
    3cd4:	cf 91       	pop	r28
    3cd6:	df 91       	pop	r29
    3cd8:	08 95       	ret

00003cda <MQ2_enumGetGasPurity>:
     * @param Copy_pstConfig: Pointer to MQ2 configuration
     * @param Copy_pu16Purity: Output purity value (0-100%)
     * @return MQ2_ErrorStatus (MQ2_OK or MQ2_NOK)
     */
    MQ2_ErrorStatus MQ2_enumGetGasPurity(MQ2_Config_t *Copy_pstConfig, u16 *Copy_pu16Purity)
    {
    3cda:	df 93       	push	r29
    3cdc:	cf 93       	push	r28
    3cde:	cd b7       	in	r28, 0x3d	; 61
    3ce0:	de b7       	in	r29, 0x3e	; 62
    3ce2:	28 97       	sbiw	r28, 0x08	; 8
    3ce4:	0f b6       	in	r0, 0x3f	; 63
    3ce6:	f8 94       	cli
    3ce8:	de bf       	out	0x3e, r29	; 62
    3cea:	0f be       	out	0x3f, r0	; 63
    3cec:	cd bf       	out	0x3d, r28	; 61
    3cee:	9d 83       	std	Y+5, r25	; 0x05
    3cf0:	8c 83       	std	Y+4, r24	; 0x04
    3cf2:	7f 83       	std	Y+7, r23	; 0x07
    3cf4:	6e 83       	std	Y+6, r22	; 0x06
        MQ2_ErrorStatus Local_enumErrorStatus = MQ2_NOK;
    3cf6:	19 82       	std	Y+1, r1	; 0x01
        u16 Local_u16Percentage = 0;
    3cf8:	1b 82       	std	Y+3, r1	; 0x03
    3cfa:	1a 82       	std	Y+2, r1	; 0x02

        if (Copy_pstConfig != NULL && Copy_pu16Purity != NULL)
    3cfc:	8c 81       	ldd	r24, Y+4	; 0x04
    3cfe:	9d 81       	ldd	r25, Y+5	; 0x05
    3d00:	00 97       	sbiw	r24, 0x00	; 0
    3d02:	d1 f0       	breq	.+52     	; 0x3d38 <MQ2_enumGetGasPurity+0x5e>
    3d04:	8e 81       	ldd	r24, Y+6	; 0x06
    3d06:	9f 81       	ldd	r25, Y+7	; 0x07
    3d08:	00 97       	sbiw	r24, 0x00	; 0
    3d0a:	b1 f0       	breq	.+44     	; 0x3d38 <MQ2_enumGetGasPurity+0x5e>
        {
            /* Get gas percentage first */
            Local_enumErrorStatus = MQ2_enumGetGasPercentage(Copy_pstConfig, &Local_u16Percentage);
    3d0c:	8c 81       	ldd	r24, Y+4	; 0x04
    3d0e:	9d 81       	ldd	r25, Y+5	; 0x05
    3d10:	9e 01       	movw	r18, r28
    3d12:	2e 5f       	subi	r18, 0xFE	; 254
    3d14:	3f 4f       	sbci	r19, 0xFF	; 255
    3d16:	b9 01       	movw	r22, r18
    3d18:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <MQ2_enumGetGasPercentage>
    3d1c:	89 83       	std	Y+1, r24	; 0x01

            if (Local_enumErrorStatus == MQ2_OK)
    3d1e:	89 81       	ldd	r24, Y+1	; 0x01
    3d20:	81 30       	cpi	r24, 0x01	; 1
    3d22:	51 f4       	brne	.+20     	; 0x3d38 <MQ2_enumGetGasPurity+0x5e>
            {
                /* Purity = 100% - percentage (assuming higher gas = lower purity) */
                *Copy_pu16Purity = 100 - Local_u16Percentage;
    3d24:	2a 81       	ldd	r18, Y+2	; 0x02
    3d26:	3b 81       	ldd	r19, Y+3	; 0x03
    3d28:	84 e6       	ldi	r24, 0x64	; 100
    3d2a:	90 e0       	ldi	r25, 0x00	; 0
    3d2c:	82 1b       	sub	r24, r18
    3d2e:	93 0b       	sbc	r25, r19
    3d30:	ee 81       	ldd	r30, Y+6	; 0x06
    3d32:	ff 81       	ldd	r31, Y+7	; 0x07
    3d34:	91 83       	std	Z+1, r25	; 0x01
    3d36:	80 83       	st	Z, r24
            }
        }
    }
    3d38:	28 96       	adiw	r28, 0x08	; 8
    3d3a:	0f b6       	in	r0, 0x3f	; 63
    3d3c:	f8 94       	cli
    3d3e:	de bf       	out	0x3e, r29	; 62
    3d40:	0f be       	out	0x3f, r0	; 63
    3d42:	cd bf       	out	0x3d, r28	; 61
    3d44:	cf 91       	pop	r28
    3d46:	df 91       	pop	r29
    3d48:	08 95       	ret

00003d4a <MQ2_enumGetCalibrationValue>:
static MQ2_ErrorStatus MQ2_enumGetCalibrationValue(MQ2_Config_t *Copy_pstConfig, u16 *Copy_pu16R0Value)
{
    3d4a:	df 93       	push	r29
    3d4c:	cf 93       	push	r28
    3d4e:	cd b7       	in	r28, 0x3d	; 61
    3d50:	de b7       	in	r29, 0x3e	; 62
    3d52:	2c 97       	sbiw	r28, 0x0c	; 12
    3d54:	0f b6       	in	r0, 0x3f	; 63
    3d56:	f8 94       	cli
    3d58:	de bf       	out	0x3e, r29	; 62
    3d5a:	0f be       	out	0x3f, r0	; 63
    3d5c:	cd bf       	out	0x3d, r28	; 61
    3d5e:	9a 87       	std	Y+10, r25	; 0x0a
    3d60:	89 87       	std	Y+9, r24	; 0x09
    3d62:	7c 87       	std	Y+12, r23	; 0x0c
    3d64:	6b 87       	std	Y+11, r22	; 0x0b
    MQ2_ErrorStatus Local_enumErrorStatus = MQ2_NOK;
    3d66:	1e 82       	std	Y+6, r1	; 0x06
    u32 Local_u32Sum = 0;
    3d68:	1a 82       	std	Y+2, r1	; 0x02
    3d6a:	1b 82       	std	Y+3, r1	; 0x03
    3d6c:	1c 82       	std	Y+4, r1	; 0x04
    3d6e:	1d 82       	std	Y+5, r1	; 0x05
    u16 Local_u16AnalogValue = 0;
    3d70:	18 86       	std	Y+8, r1	; 0x08
    3d72:	1f 82       	std	Y+7, r1	; 0x07
    
    if (Copy_pstConfig != NULL && Copy_pu16R0Value != NULL)
    3d74:	89 85       	ldd	r24, Y+9	; 0x09
    3d76:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d78:	00 97       	sbiw	r24, 0x00	; 0
    3d7a:	09 f4       	brne	.+2      	; 0x3d7e <MQ2_enumGetCalibrationValue+0x34>
    3d7c:	45 c0       	rjmp	.+138    	; 0x3e08 <MQ2_enumGetCalibrationValue+0xbe>
    3d7e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3d80:	9c 85       	ldd	r25, Y+12	; 0x0c
    3d82:	00 97       	sbiw	r24, 0x00	; 0
    3d84:	09 f4       	brne	.+2      	; 0x3d88 <MQ2_enumGetCalibrationValue+0x3e>
    3d86:	40 c0       	rjmp	.+128    	; 0x3e08 <MQ2_enumGetCalibrationValue+0xbe>
    {
        for (u8 Local_u8Counter = 0; Local_u8Counter < MQ2_CALIBRATION_SAMPLE_TIMES; Local_u8Counter++)
    3d88:	19 82       	std	Y+1, r1	; 0x01
    3d8a:	25 c0       	rjmp	.+74     	; 0x3dd6 <MQ2_enumGetCalibrationValue+0x8c>
        {
            Local_enumErrorStatus = MQ2_enumGetAnalogSignal(Copy_pstConfig, &Local_u16AnalogValue);
    3d8c:	89 85       	ldd	r24, Y+9	; 0x09
    3d8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d90:	9e 01       	movw	r18, r28
    3d92:	29 5f       	subi	r18, 0xF9	; 249
    3d94:	3f 4f       	sbci	r19, 0xFF	; 255
    3d96:	b9 01       	movw	r22, r18
    3d98:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <MQ2_enumGetAnalogSignal>
    3d9c:	8e 83       	std	Y+6, r24	; 0x06
            if (Local_enumErrorStatus == MQ2_OK)
    3d9e:	8e 81       	ldd	r24, Y+6	; 0x06
    3da0:	81 30       	cpi	r24, 0x01	; 1
    3da2:	e1 f4       	brne	.+56     	; 0x3ddc <MQ2_enumGetCalibrationValue+0x92>
            {
                Local_u32Sum += MQ2_u16CalculateRS(Copy_pstConfig, Local_u16AnalogValue);
    3da4:	2f 81       	ldd	r18, Y+7	; 0x07
    3da6:	38 85       	ldd	r19, Y+8	; 0x08
    3da8:	89 85       	ldd	r24, Y+9	; 0x09
    3daa:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dac:	b9 01       	movw	r22, r18
    3dae:	0e 94 74 1d 	call	0x3ae8	; 0x3ae8 <MQ2_u16CalculateRS>
    3db2:	9c 01       	movw	r18, r24
    3db4:	40 e0       	ldi	r20, 0x00	; 0
    3db6:	50 e0       	ldi	r21, 0x00	; 0
    3db8:	8a 81       	ldd	r24, Y+2	; 0x02
    3dba:	9b 81       	ldd	r25, Y+3	; 0x03
    3dbc:	ac 81       	ldd	r26, Y+4	; 0x04
    3dbe:	bd 81       	ldd	r27, Y+5	; 0x05
    3dc0:	82 0f       	add	r24, r18
    3dc2:	93 1f       	adc	r25, r19
    3dc4:	a4 1f       	adc	r26, r20
    3dc6:	b5 1f       	adc	r27, r21
    3dc8:	8a 83       	std	Y+2, r24	; 0x02
    3dca:	9b 83       	std	Y+3, r25	; 0x03
    3dcc:	ac 83       	std	Y+4, r26	; 0x04
    3dce:	bd 83       	std	Y+5, r27	; 0x05
    u32 Local_u32Sum = 0;
    u16 Local_u16AnalogValue = 0;
    
    if (Copy_pstConfig != NULL && Copy_pu16R0Value != NULL)
    {
        for (u8 Local_u8Counter = 0; Local_u8Counter < MQ2_CALIBRATION_SAMPLE_TIMES; Local_u8Counter++)
    3dd0:	89 81       	ldd	r24, Y+1	; 0x01
    3dd2:	8f 5f       	subi	r24, 0xFF	; 255
    3dd4:	89 83       	std	Y+1, r24	; 0x01
    3dd6:	89 81       	ldd	r24, Y+1	; 0x01
    3dd8:	82 33       	cpi	r24, 0x32	; 50
    3dda:	c0 f2       	brcs	.-80     	; 0x3d8c <MQ2_enumGetCalibrationValue+0x42>
            {
                break;
            }
        }
        
        if (Local_enumErrorStatus == MQ2_OK)
    3ddc:	8e 81       	ldd	r24, Y+6	; 0x06
    3dde:	81 30       	cpi	r24, 0x01	; 1
    3de0:	a1 f4       	brne	.+40     	; 0x3e0a <MQ2_enumGetCalibrationValue+0xc0>
        {
            *Copy_pu16R0Value = Local_u32Sum / MQ2_CALIBRATION_SAMPLE_TIMES;
    3de2:	8a 81       	ldd	r24, Y+2	; 0x02
    3de4:	9b 81       	ldd	r25, Y+3	; 0x03
    3de6:	ac 81       	ldd	r26, Y+4	; 0x04
    3de8:	bd 81       	ldd	r27, Y+5	; 0x05
    3dea:	22 e3       	ldi	r18, 0x32	; 50
    3dec:	30 e0       	ldi	r19, 0x00	; 0
    3dee:	40 e0       	ldi	r20, 0x00	; 0
    3df0:	50 e0       	ldi	r21, 0x00	; 0
    3df2:	bc 01       	movw	r22, r24
    3df4:	cd 01       	movw	r24, r26
    3df6:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <__udivmodsi4>
    3dfa:	da 01       	movw	r26, r20
    3dfc:	c9 01       	movw	r24, r18
    3dfe:	eb 85       	ldd	r30, Y+11	; 0x0b
    3e00:	fc 85       	ldd	r31, Y+12	; 0x0c
    3e02:	91 83       	std	Z+1, r25	; 0x01
    3e04:	80 83       	st	Z, r24
    3e06:	01 c0       	rjmp	.+2      	; 0x3e0a <MQ2_enumGetCalibrationValue+0xc0>
        }
    }
    else
    {
        Local_enumErrorStatus = MQ2_NOK;
    3e08:	1e 82       	std	Y+6, r1	; 0x06
    }
    
    return Local_enumErrorStatus;
    3e0a:	8e 81       	ldd	r24, Y+6	; 0x06
}
    3e0c:	2c 96       	adiw	r28, 0x0c	; 12
    3e0e:	0f b6       	in	r0, 0x3f	; 63
    3e10:	f8 94       	cli
    3e12:	de bf       	out	0x3e, r29	; 62
    3e14:	0f be       	out	0x3f, r0	; 63
    3e16:	cd bf       	out	0x3d, r28	; 61
    3e18:	cf 91       	pop	r28
    3e1a:	df 91       	pop	r29
    3e1c:	08 95       	ret

00003e1e <MQ2_enumInit>:

MQ2_ErrorStatus MQ2_enumInit(MQ2_Config_t *Copy_pstConfig)
{
    3e1e:	df 93       	push	r29
    3e20:	cf 93       	push	r28
    3e22:	00 d0       	rcall	.+0      	; 0x3e24 <MQ2_enumInit+0x6>
    3e24:	0f 92       	push	r0
    3e26:	cd b7       	in	r28, 0x3d	; 61
    3e28:	de b7       	in	r29, 0x3e	; 62
    3e2a:	9b 83       	std	Y+3, r25	; 0x03
    3e2c:	8a 83       	std	Y+2, r24	; 0x02
    MQ2_ErrorStatus Local_enumErrorStatus = MQ2_NOK;
    3e2e:	19 82       	std	Y+1, r1	; 0x01
    
    if (Copy_pstConfig != NULL)
    3e30:	8a 81       	ldd	r24, Y+2	; 0x02
    3e32:	9b 81       	ldd	r25, Y+3	; 0x03
    3e34:	00 97       	sbiw	r24, 0x00	; 0
    3e36:	e1 f0       	breq	.+56     	; 0x3e70 <MQ2_enumInit+0x52>
    {
        /* Initialize ADC */
        ADC_vInit();
    3e38:	0e 94 a2 21 	call	0x4344	; 0x4344 <ADC_vInit>
        
        /* Set default values if not configured */
        if (Copy_pstConfig->Copy_u16R0 == 0)
    3e3c:	ea 81       	ldd	r30, Y+2	; 0x02
    3e3e:	fb 81       	ldd	r31, Y+3	; 0x03
    3e40:	83 81       	ldd	r24, Z+3	; 0x03
    3e42:	94 81       	ldd	r25, Z+4	; 0x04
    3e44:	00 97       	sbiw	r24, 0x00	; 0
    3e46:	31 f4       	brne	.+12     	; 0x3e54 <MQ2_enumInit+0x36>
        {
            Copy_pstConfig->Copy_u16R0 = MQ2_DEFAULT_R0;
    3e48:	ea 81       	ldd	r30, Y+2	; 0x02
    3e4a:	fb 81       	ldd	r31, Y+3	; 0x03
    3e4c:	80 e1       	ldi	r24, 0x10	; 16
    3e4e:	97 e2       	ldi	r25, 0x27	; 39
    3e50:	94 83       	std	Z+4, r25	; 0x04
    3e52:	83 83       	std	Z+3, r24	; 0x03
        }
        if (Copy_pstConfig->Copy_u16RL == 0)
    3e54:	ea 81       	ldd	r30, Y+2	; 0x02
    3e56:	fb 81       	ldd	r31, Y+3	; 0x03
    3e58:	85 81       	ldd	r24, Z+5	; 0x05
    3e5a:	96 81       	ldd	r25, Z+6	; 0x06
    3e5c:	00 97       	sbiw	r24, 0x00	; 0
    3e5e:	31 f4       	brne	.+12     	; 0x3e6c <MQ2_enumInit+0x4e>
        {
            Copy_pstConfig->Copy_u16RL = MQ2_DEFAULT_RL;
    3e60:	ea 81       	ldd	r30, Y+2	; 0x02
    3e62:	fb 81       	ldd	r31, Y+3	; 0x03
    3e64:	80 e1       	ldi	r24, 0x10	; 16
    3e66:	97 e2       	ldi	r25, 0x27	; 39
    3e68:	96 83       	std	Z+6, r25	; 0x06
    3e6a:	85 83       	std	Z+5, r24	; 0x05
        }
        
        Local_enumErrorStatus = MQ2_OK;
    3e6c:	81 e0       	ldi	r24, 0x01	; 1
    3e6e:	89 83       	std	Y+1, r24	; 0x01
    }
    
    return Local_enumErrorStatus;
    3e70:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e72:	0f 90       	pop	r0
    3e74:	0f 90       	pop	r0
    3e76:	0f 90       	pop	r0
    3e78:	cf 91       	pop	r28
    3e7a:	df 91       	pop	r29
    3e7c:	08 95       	ret

00003e7e <MQ2_enumGetGasConcentration>:

MQ2_ErrorStatus MQ2_enumGetGasConcentration(MQ2_Config_t *Copy_pstConfig, u16 *Copy_pu16GasValue)
{
    3e7e:	df 93       	push	r29
    3e80:	cf 93       	push	r28
    3e82:	cd b7       	in	r28, 0x3d	; 61
    3e84:	de b7       	in	r29, 0x3e	; 62
    3e86:	29 97       	sbiw	r28, 0x09	; 9
    3e88:	0f b6       	in	r0, 0x3f	; 63
    3e8a:	f8 94       	cli
    3e8c:	de bf       	out	0x3e, r29	; 62
    3e8e:	0f be       	out	0x3f, r0	; 63
    3e90:	cd bf       	out	0x3d, r28	; 61
    3e92:	9f 83       	std	Y+7, r25	; 0x07
    3e94:	8e 83       	std	Y+6, r24	; 0x06
    3e96:	79 87       	std	Y+9, r23	; 0x09
    3e98:	68 87       	std	Y+8, r22	; 0x08
    MQ2_ErrorStatus Local_enumErrorStatus = MQ2_NOK;
    3e9a:	1b 82       	std	Y+3, r1	; 0x03
    u16 Local_u16AnalogSignal = 0;
    3e9c:	1d 82       	std	Y+5, r1	; 0x05
    3e9e:	1c 82       	std	Y+4, r1	; 0x04
    
    if (Copy_pstConfig != NULL && Copy_pu16GasValue != NULL)
    3ea0:	8e 81       	ldd	r24, Y+6	; 0x06
    3ea2:	9f 81       	ldd	r25, Y+7	; 0x07
    3ea4:	00 97       	sbiw	r24, 0x00	; 0
    3ea6:	31 f1       	breq	.+76     	; 0x3ef4 <MQ2_enumGetGasConcentration+0x76>
    3ea8:	88 85       	ldd	r24, Y+8	; 0x08
    3eaa:	99 85       	ldd	r25, Y+9	; 0x09
    3eac:	00 97       	sbiw	r24, 0x00	; 0
    3eae:	11 f1       	breq	.+68     	; 0x3ef4 <MQ2_enumGetGasConcentration+0x76>
    {
        /* Get raw ADC value */
        Local_enumErrorStatus = MQ2_enumGetAnalogSignal(Copy_pstConfig, &Local_u16AnalogSignal);
    3eb0:	8e 81       	ldd	r24, Y+6	; 0x06
    3eb2:	9f 81       	ldd	r25, Y+7	; 0x07
    3eb4:	9e 01       	movw	r18, r28
    3eb6:	2c 5f       	subi	r18, 0xFC	; 252
    3eb8:	3f 4f       	sbci	r19, 0xFF	; 255
    3eba:	b9 01       	movw	r22, r18
    3ebc:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <MQ2_enumGetAnalogSignal>
    3ec0:	8b 83       	std	Y+3, r24	; 0x03
        
        if (Local_enumErrorStatus == MQ2_OK)
    3ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ec4:	81 30       	cpi	r24, 0x01	; 1
    3ec6:	b1 f4       	brne	.+44     	; 0x3ef4 <MQ2_enumGetGasConcentration+0x76>
        {
            /* Calculate sensor resistance */
            u16 Local_u16Rs = MQ2_u16CalculateRS(Copy_pstConfig, Local_u16AnalogSignal);
    3ec8:	2c 81       	ldd	r18, Y+4	; 0x04
    3eca:	3d 81       	ldd	r19, Y+5	; 0x05
    3ecc:	8e 81       	ldd	r24, Y+6	; 0x06
    3ece:	9f 81       	ldd	r25, Y+7	; 0x07
    3ed0:	b9 01       	movw	r22, r18
    3ed2:	0e 94 74 1d 	call	0x3ae8	; 0x3ae8 <MQ2_u16CalculateRS>
    3ed6:	9a 83       	std	Y+2, r25	; 0x02
    3ed8:	89 83       	std	Y+1, r24	; 0x01
            
            /* Calculate ratio */
            *Copy_pu16GasValue = MQ2_u16CalculateRatio(Local_u16Rs, Copy_pstConfig->Copy_u16R0);
    3eda:	ee 81       	ldd	r30, Y+6	; 0x06
    3edc:	ff 81       	ldd	r31, Y+7	; 0x07
    3ede:	23 81       	ldd	r18, Z+3	; 0x03
    3ee0:	34 81       	ldd	r19, Z+4	; 0x04
    3ee2:	89 81       	ldd	r24, Y+1	; 0x01
    3ee4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ee6:	b9 01       	movw	r22, r18
    3ee8:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <MQ2_u16CalculateRatio>
    3eec:	e8 85       	ldd	r30, Y+8	; 0x08
    3eee:	f9 85       	ldd	r31, Y+9	; 0x09
    3ef0:	91 83       	std	Z+1, r25	; 0x01
    3ef2:	80 83       	st	Z, r24
        }
    }
    
    return Local_enumErrorStatus;
    3ef4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3ef6:	29 96       	adiw	r28, 0x09	; 9
    3ef8:	0f b6       	in	r0, 0x3f	; 63
    3efa:	f8 94       	cli
    3efc:	de bf       	out	0x3e, r29	; 62
    3efe:	0f be       	out	0x3f, r0	; 63
    3f00:	cd bf       	out	0x3d, r28	; 61
    3f02:	cf 91       	pop	r28
    3f04:	df 91       	pop	r29
    3f06:	08 95       	ret

00003f08 <MQ2_enumGetAnalogSignal>:

MQ2_ErrorStatus MQ2_enumGetAnalogSignal(MQ2_Config_t *Copy_pstConfig, u16 *Copy_pu16AnalogSignal)
{
    3f08:	df 93       	push	r29
    3f0a:	cf 93       	push	r28
    3f0c:	00 d0       	rcall	.+0      	; 0x3f0e <MQ2_enumGetAnalogSignal+0x6>
    3f0e:	00 d0       	rcall	.+0      	; 0x3f10 <MQ2_enumGetAnalogSignal+0x8>
    3f10:	0f 92       	push	r0
    3f12:	cd b7       	in	r28, 0x3d	; 61
    3f14:	de b7       	in	r29, 0x3e	; 62
    3f16:	9b 83       	std	Y+3, r25	; 0x03
    3f18:	8a 83       	std	Y+2, r24	; 0x02
    3f1a:	7d 83       	std	Y+5, r23	; 0x05
    3f1c:	6c 83       	std	Y+4, r22	; 0x04
    MQ2_ErrorStatus Local_enumErrorStatus = MQ2_NOK;
    3f1e:	19 82       	std	Y+1, r1	; 0x01
    
    if (Copy_pstConfig != NULL && Copy_pu16AnalogSignal != NULL)
    3f20:	8a 81       	ldd	r24, Y+2	; 0x02
    3f22:	9b 81       	ldd	r25, Y+3	; 0x03
    3f24:	00 97       	sbiw	r24, 0x00	; 0
    3f26:	81 f0       	breq	.+32     	; 0x3f48 <MQ2_enumGetAnalogSignal+0x40>
    3f28:	8c 81       	ldd	r24, Y+4	; 0x04
    3f2a:	9d 81       	ldd	r25, Y+5	; 0x05
    3f2c:	00 97       	sbiw	r24, 0x00	; 0
    3f2e:	61 f0       	breq	.+24     	; 0x3f48 <MQ2_enumGetAnalogSignal+0x40>
    {
        if (ADC_u8GetResultSync(Copy_pstConfig->Copy_u8Channel, Copy_pu16AnalogSignal) == 0)
    3f30:	ea 81       	ldd	r30, Y+2	; 0x02
    3f32:	fb 81       	ldd	r31, Y+3	; 0x03
    3f34:	80 81       	ld	r24, Z
    3f36:	2c 81       	ldd	r18, Y+4	; 0x04
    3f38:	3d 81       	ldd	r19, Y+5	; 0x05
    3f3a:	b9 01       	movw	r22, r18
    3f3c:	0e 94 c4 22 	call	0x4588	; 0x4588 <ADC_u8GetResultSync>
    3f40:	88 23       	and	r24, r24
    3f42:	11 f4       	brne	.+4      	; 0x3f48 <MQ2_enumGetAnalogSignal+0x40>
        {
            Local_enumErrorStatus = MQ2_OK;
    3f44:	81 e0       	ldi	r24, 0x01	; 1
    3f46:	89 83       	std	Y+1, r24	; 0x01
        }
    }
    
    return Local_enumErrorStatus;
    3f48:	89 81       	ldd	r24, Y+1	; 0x01
}
    3f4a:	0f 90       	pop	r0
    3f4c:	0f 90       	pop	r0
    3f4e:	0f 90       	pop	r0
    3f50:	0f 90       	pop	r0
    3f52:	0f 90       	pop	r0
    3f54:	cf 91       	pop	r28
    3f56:	df 91       	pop	r29
    3f58:	08 95       	ret

00003f5a <MQ2_enumCalibrate>:

MQ2_ErrorStatus MQ2_enumCalibrate(MQ2_Config_t *Copy_pstConfig)
{
    3f5a:	df 93       	push	r29
    3f5c:	cf 93       	push	r28
    3f5e:	00 d0       	rcall	.+0      	; 0x3f60 <MQ2_enumCalibrate+0x6>
    3f60:	00 d0       	rcall	.+0      	; 0x3f62 <MQ2_enumCalibrate+0x8>
    3f62:	0f 92       	push	r0
    3f64:	cd b7       	in	r28, 0x3d	; 61
    3f66:	de b7       	in	r29, 0x3e	; 62
    3f68:	9d 83       	std	Y+5, r25	; 0x05
    3f6a:	8c 83       	std	Y+4, r24	; 0x04
    MQ2_ErrorStatus Local_enumErrorStatus = MQ2_NOK;
    3f6c:	19 82       	std	Y+1, r1	; 0x01
    u16 Local_u16R0Value = 0;
    3f6e:	1b 82       	std	Y+3, r1	; 0x03
    3f70:	1a 82       	std	Y+2, r1	; 0x02
    
    if (Copy_pstConfig != NULL)
    3f72:	8c 81       	ldd	r24, Y+4	; 0x04
    3f74:	9d 81       	ldd	r25, Y+5	; 0x05
    3f76:	00 97       	sbiw	r24, 0x00	; 0
    3f78:	91 f0       	breq	.+36     	; 0x3f9e <MQ2_enumCalibrate+0x44>
    {
        Local_enumErrorStatus = MQ2_enumGetCalibrationValue(Copy_pstConfig, &Local_u16R0Value);
    3f7a:	8c 81       	ldd	r24, Y+4	; 0x04
    3f7c:	9d 81       	ldd	r25, Y+5	; 0x05
    3f7e:	9e 01       	movw	r18, r28
    3f80:	2e 5f       	subi	r18, 0xFE	; 254
    3f82:	3f 4f       	sbci	r19, 0xFF	; 255
    3f84:	b9 01       	movw	r22, r18
    3f86:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <MQ2_enumGetCalibrationValue>
    3f8a:	89 83       	std	Y+1, r24	; 0x01
        if (Local_enumErrorStatus == MQ2_OK)
    3f8c:	89 81       	ldd	r24, Y+1	; 0x01
    3f8e:	81 30       	cpi	r24, 0x01	; 1
    3f90:	31 f4       	brne	.+12     	; 0x3f9e <MQ2_enumCalibrate+0x44>
        {
            Copy_pstConfig->Copy_u16R0 = Local_u16R0Value;
    3f92:	8a 81       	ldd	r24, Y+2	; 0x02
    3f94:	9b 81       	ldd	r25, Y+3	; 0x03
    3f96:	ec 81       	ldd	r30, Y+4	; 0x04
    3f98:	fd 81       	ldd	r31, Y+5	; 0x05
    3f9a:	94 83       	std	Z+4, r25	; 0x04
    3f9c:	83 83       	std	Z+3, r24	; 0x03
        }
    }
    
    return Local_enumErrorStatus;
    3f9e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3fa0:	0f 90       	pop	r0
    3fa2:	0f 90       	pop	r0
    3fa4:	0f 90       	pop	r0
    3fa6:	0f 90       	pop	r0
    3fa8:	0f 90       	pop	r0
    3faa:	cf 91       	pop	r28
    3fac:	df 91       	pop	r29
    3fae:	08 95       	ret

00003fb0 <PIR_voidInit>:

/**
 * @brief Initialize PIR sensor
 */
void PIR_voidInit(void)
{
    3fb0:	df 93       	push	r29
    3fb2:	cf 93       	push	r28
    3fb4:	cd b7       	in	r28, 0x3d	; 61
    3fb6:	de b7       	in	r29, 0x3e	; 62
    /* Set PIR pin as input */
    DIO_enumSetPinDirection(PIR_PORT, PIR_PIN, DIO_PIN_INPUT);
    3fb8:	80 e0       	ldi	r24, 0x00	; 0
    3fba:	64 e0       	ldi	r22, 0x04	; 4
    3fbc:	40 e0       	ldi	r20, 0x00	; 0
    3fbe:	0e 94 fe 24 	call	0x49fc	; 0x49fc <DIO_enumSetPinDirection>

    /* If active low, enable internal pull-up */
    #if PIR_CONNECTION_MODE == PIR_ACTIVE_LOW
        DIO_enumConnectPullUp(PIR_PORT, PIR_PIN, DIO_PIN_HIGH);
    #endif
}
    3fc2:	cf 91       	pop	r28
    3fc4:	df 91       	pop	r29
    3fc6:	08 95       	ret

00003fc8 <PIR_u8Read>:
/**
 * @brief Read PIR sensor state
 * @return u8: 1 if motion detected, 0 otherwise
 */
u8 PIR_u8Read(void)
{
    3fc8:	df 93       	push	r29
    3fca:	cf 93       	push	r28
    3fcc:	00 d0       	rcall	.+0      	; 0x3fce <PIR_u8Read+0x6>
    3fce:	cd b7       	in	r28, 0x3d	; 61
    3fd0:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8Result = 0;
    3fd2:	19 82       	std	Y+1, r1	; 0x01
    u8 Local_u8PinValue;

    DIO_enumReadPinValue(PIR_PORT, PIR_PIN, &Local_u8PinValue);
    3fd4:	9e 01       	movw	r18, r28
    3fd6:	2e 5f       	subi	r18, 0xFE	; 254
    3fd8:	3f 4f       	sbci	r19, 0xFF	; 255
    3fda:	80 e0       	ldi	r24, 0x00	; 0
    3fdc:	64 e0       	ldi	r22, 0x04	; 4
    3fde:	a9 01       	movw	r20, r18
    3fe0:	0e 94 1c 27 	call	0x4e38	; 0x4e38 <DIO_enumReadPinValue>

    #if PIR_CONNECTION_MODE == PIR_ACTIVE_HIGH
        Local_u8Result = Local_u8PinValue;
    3fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    3fe6:	89 83       	std	Y+1, r24	; 0x01
    #else
        Local_u8Result = !Local_u8PinValue;
    #endif

    return Local_u8Result;
    3fe8:	89 81       	ldd	r24, Y+1	; 0x01
}
    3fea:	0f 90       	pop	r0
    3fec:	0f 90       	pop	r0
    3fee:	cf 91       	pop	r28
    3ff0:	df 91       	pop	r29
    3ff2:	08 95       	ret

00003ff4 <PIR_u8ReadDebounced>:
/**
 * @brief Read PIR sensor state with debounce
 * @return u8: 1 if motion detected (with debounce), 0 otherwise
 */
u8 PIR_u8ReadDebounced(void)
{
    3ff4:	ef 92       	push	r14
    3ff6:	ff 92       	push	r15
    3ff8:	0f 93       	push	r16
    3ffa:	1f 93       	push	r17
    3ffc:	df 93       	push	r29
    3ffe:	cf 93       	push	r28
    4000:	00 d0       	rcall	.+0      	; 0x4002 <PIR_u8ReadDebounced+0xe>
    4002:	00 d0       	rcall	.+0      	; 0x4004 <PIR_u8ReadDebounced+0x10>
    4004:	0f 92       	push	r0
    4006:	cd b7       	in	r28, 0x3d	; 61
    4008:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8Result = 0;
    400a:	1d 82       	std	Y+5, r1	; 0x05
    u32 Local_u32CurrentTime = 0; // You need to implement a time source (e.g., SysTick)
    400c:	19 82       	std	Y+1, r1	; 0x01
    400e:	1a 82       	std	Y+2, r1	; 0x02
    4010:	1b 82       	std	Y+3, r1	; 0x03
    4012:	1c 82       	std	Y+4, r1	; 0x04

    if (PIR_u8Read())
    4014:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <PIR_u8Read>
    4018:	88 23       	and	r24, r24
    401a:	39 f1       	breq	.+78     	; 0x406a <PIR_u8ReadDebounced+0x76>
    {
        if ((Local_u32CurrentTime - PIR_u32LastDetectionTime) > PIR_DEBOUNCE_MS)
    401c:	80 91 40 02 	lds	r24, 0x0240
    4020:	90 91 41 02 	lds	r25, 0x0241
    4024:	a0 91 42 02 	lds	r26, 0x0242
    4028:	b0 91 43 02 	lds	r27, 0x0243
    402c:	29 81       	ldd	r18, Y+1	; 0x01
    402e:	3a 81       	ldd	r19, Y+2	; 0x02
    4030:	4b 81       	ldd	r20, Y+3	; 0x03
    4032:	5c 81       	ldd	r21, Y+4	; 0x04
    4034:	79 01       	movw	r14, r18
    4036:	8a 01       	movw	r16, r20
    4038:	e8 1a       	sub	r14, r24
    403a:	f9 0a       	sbc	r15, r25
    403c:	0a 0b       	sbc	r16, r26
    403e:	1b 0b       	sbc	r17, r27
    4040:	d8 01       	movw	r26, r16
    4042:	c7 01       	movw	r24, r14
    4044:	89 3c       	cpi	r24, 0xC9	; 201
    4046:	91 05       	cpc	r25, r1
    4048:	a1 05       	cpc	r26, r1
    404a:	b1 05       	cpc	r27, r1
    404c:	70 f0       	brcs	.+28     	; 0x406a <PIR_u8ReadDebounced+0x76>
        {
            PIR_u32LastDetectionTime = Local_u32CurrentTime;
    404e:	89 81       	ldd	r24, Y+1	; 0x01
    4050:	9a 81       	ldd	r25, Y+2	; 0x02
    4052:	ab 81       	ldd	r26, Y+3	; 0x03
    4054:	bc 81       	ldd	r27, Y+4	; 0x04
    4056:	80 93 40 02 	sts	0x0240, r24
    405a:	90 93 41 02 	sts	0x0241, r25
    405e:	a0 93 42 02 	sts	0x0242, r26
    4062:	b0 93 43 02 	sts	0x0243, r27
            Local_u8Result = 1;
    4066:	81 e0       	ldi	r24, 0x01	; 1
    4068:	8d 83       	std	Y+5, r24	; 0x05
        }
    }

    return Local_u8Result;
    406a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    406c:	0f 90       	pop	r0
    406e:	0f 90       	pop	r0
    4070:	0f 90       	pop	r0
    4072:	0f 90       	pop	r0
    4074:	0f 90       	pop	r0
    4076:	cf 91       	pop	r28
    4078:	df 91       	pop	r29
    407a:	1f 91       	pop	r17
    407c:	0f 91       	pop	r16
    407e:	ff 90       	pop	r15
    4080:	ef 90       	pop	r14
    4082:	08 95       	ret

00004084 <PIR_voidSetCallback>:
/**
 * @brief Set callback function for motion detection
 * @param Copy_pvNotificationFunc: Pointer to notification function
 */
void PIR_voidSetCallback(void (*Copy_pvNotificationFunc)(void))
{
    4084:	df 93       	push	r29
    4086:	cf 93       	push	r28
    4088:	00 d0       	rcall	.+0      	; 0x408a <PIR_voidSetCallback+0x6>
    408a:	cd b7       	in	r28, 0x3d	; 61
    408c:	de b7       	in	r29, 0x3e	; 62
    408e:	9a 83       	std	Y+2, r25	; 0x02
    4090:	89 83       	std	Y+1, r24	; 0x01
    PIR_pvNotificationFunc = Copy_pvNotificationFunc;
    4092:	89 81       	ldd	r24, Y+1	; 0x01
    4094:	9a 81       	ldd	r25, Y+2	; 0x02
    4096:	90 93 3f 02 	sts	0x023F, r25
    409a:	80 93 3e 02 	sts	0x023E, r24
}
    409e:	0f 90       	pop	r0
    40a0:	0f 90       	pop	r0
    40a2:	cf 91       	pop	r28
    40a4:	df 91       	pop	r29
    40a6:	08 95       	ret

000040a8 <PIR_voidISR>:

/* ISR for PIR sensor (if using interrupt) */
void PIR_voidISR(void)
{
    40a8:	df 93       	push	r29
    40aa:	cf 93       	push	r28
    40ac:	cd b7       	in	r28, 0x3d	; 61
    40ae:	de b7       	in	r29, 0x3e	; 62
    if (PIR_pvNotificationFunc != NULL)
    40b0:	80 91 3e 02 	lds	r24, 0x023E
    40b4:	90 91 3f 02 	lds	r25, 0x023F
    40b8:	00 97       	sbiw	r24, 0x00	; 0
    40ba:	29 f0       	breq	.+10     	; 0x40c6 <PIR_voidISR+0x1e>
    {
        PIR_pvNotificationFunc();
    40bc:	e0 91 3e 02 	lds	r30, 0x023E
    40c0:	f0 91 3f 02 	lds	r31, 0x023F
    40c4:	09 95       	icall
    }
}
    40c6:	cf 91       	pop	r28
    40c8:	df 91       	pop	r29
    40ca:	08 95       	ret

000040cc <SM_vInit>:

#include "../MCAL/TIMER_interface.h"
#include "../MCAL/TIMER_private.h"

void SM_vInit(void)
{
    40cc:	df 93       	push	r29
    40ce:	cf 93       	push	r28
    40d0:	cd b7       	in	r28, 0x3d	; 61
    40d2:	de b7       	in	r29, 0x3e	; 62
	DIO_enumSetPinDirection(DIO_PORTD, DIO_PIN5, DIO_PIN_OUTPUT);
    40d4:	83 e0       	ldi	r24, 0x03	; 3
    40d6:	65 e0       	ldi	r22, 0x05	; 5
    40d8:	41 e0       	ldi	r20, 0x01	; 1
    40da:	0e 94 fe 24 	call	0x49fc	; 0x49fc <DIO_enumSetPinDirection>
}
    40de:	cf 91       	pop	r28
    40e0:	df 91       	pop	r29
    40e2:	08 95       	ret

000040e4 <SM_vTimer1Degree>:

void SM_vTimer1Degree(s8 degree)
{
    40e4:	0f 93       	push	r16
    40e6:	1f 93       	push	r17
    40e8:	df 93       	push	r29
    40ea:	cf 93       	push	r28
    40ec:	00 d0       	rcall	.+0      	; 0x40ee <SM_vTimer1Degree+0xa>
    40ee:	00 d0       	rcall	.+0      	; 0x40f0 <SM_vTimer1Degree+0xc>
    40f0:	0f 92       	push	r0
    40f2:	cd b7       	in	r28, 0x3d	; 61
    40f4:	de b7       	in	r29, 0x3e	; 62
    40f6:	8d 83       	std	Y+5, r24	; 0x05
  TCNT1 = 0;
    40f8:	ec e4       	ldi	r30, 0x4C	; 76
    40fa:	f0 e0       	ldi	r31, 0x00	; 0
    40fc:	11 82       	std	Z+1, r1	; 0x01
    40fe:	10 82       	st	Z, r1
  double value = degree * .005555555556;
    4100:	8d 81       	ldd	r24, Y+5	; 0x05
    4102:	99 27       	eor	r25, r25
    4104:	87 fd       	sbrc	r24, 7
    4106:	90 95       	com	r25
    4108:	a9 2f       	mov	r26, r25
    410a:	b9 2f       	mov	r27, r25
    410c:	bc 01       	movw	r22, r24
    410e:	cd 01       	movw	r24, r26
    4110:	0e 94 71 05 	call	0xae2	; 0xae2 <__floatsisf>
    4114:	dc 01       	movw	r26, r24
    4116:	cb 01       	movw	r24, r22
    4118:	bc 01       	movw	r22, r24
    411a:	cd 01       	movw	r24, r26
    411c:	21 e6       	ldi	r18, 0x61	; 97
    411e:	3b e0       	ldi	r19, 0x0B	; 11
    4120:	46 eb       	ldi	r20, 0xB6	; 182
    4122:	5b e3       	ldi	r21, 0x3B	; 59
    4124:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4128:	dc 01       	movw	r26, r24
    412a:	cb 01       	movw	r24, r22
    412c:	89 83       	std	Y+1, r24	; 0x01
    412e:	9a 83       	std	Y+2, r25	; 0x02
    4130:	ab 83       	std	Y+3, r26	; 0x03
    4132:	bc 83       	std	Y+4, r27	; 0x04

  if (0 < value <= 90)
  {
    value += 1.5;
    4134:	69 81       	ldd	r22, Y+1	; 0x01
    4136:	7a 81       	ldd	r23, Y+2	; 0x02
    4138:	8b 81       	ldd	r24, Y+3	; 0x03
    413a:	9c 81       	ldd	r25, Y+4	; 0x04
    413c:	20 e0       	ldi	r18, 0x00	; 0
    413e:	30 e0       	ldi	r19, 0x00	; 0
    4140:	40 ec       	ldi	r20, 0xC0	; 192
    4142:	5f e3       	ldi	r21, 0x3F	; 63
    4144:	0e 94 0e 03 	call	0x61c	; 0x61c <__addsf3>
    4148:	dc 01       	movw	r26, r24
    414a:	cb 01       	movw	r24, r22
    414c:	89 83       	std	Y+1, r24	; 0x01
    414e:	9a 83       	std	Y+2, r25	; 0x02
    4150:	ab 83       	std	Y+3, r26	; 0x03
    4152:	bc 83       	std	Y+4, r27	; 0x04
  }
  else if (-90 <= value < 0)
  {
    value -= 1.5;
  }
  OCR1A = value * 1000;
    4154:	0a e4       	ldi	r16, 0x4A	; 74
    4156:	10 e0       	ldi	r17, 0x00	; 0
    4158:	69 81       	ldd	r22, Y+1	; 0x01
    415a:	7a 81       	ldd	r23, Y+2	; 0x02
    415c:	8b 81       	ldd	r24, Y+3	; 0x03
    415e:	9c 81       	ldd	r25, Y+4	; 0x04
    4160:	20 e0       	ldi	r18, 0x00	; 0
    4162:	30 e0       	ldi	r19, 0x00	; 0
    4164:	4a e7       	ldi	r20, 0x7A	; 122
    4166:	54 e4       	ldi	r21, 0x44	; 68
    4168:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    416c:	dc 01       	movw	r26, r24
    416e:	cb 01       	movw	r24, r22
    4170:	bc 01       	movw	r22, r24
    4172:	cd 01       	movw	r24, r26
    4174:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4178:	dc 01       	movw	r26, r24
    417a:	cb 01       	movw	r24, r22
    417c:	f8 01       	movw	r30, r16
    417e:	91 83       	std	Z+1, r25	; 0x01
    4180:	80 83       	st	Z, r24
}
    4182:	0f 90       	pop	r0
    4184:	0f 90       	pop	r0
    4186:	0f 90       	pop	r0
    4188:	0f 90       	pop	r0
    418a:	0f 90       	pop	r0
    418c:	cf 91       	pop	r28
    418e:	df 91       	pop	r29
    4190:	1f 91       	pop	r17
    4192:	0f 91       	pop	r16
    4194:	08 95       	ret

00004196 <SoilMoisture_voidInit>:
#include "soil moisture_interface.h"
#include "soil moisture_privit.h"
#include "soil moisture_config.h"

void SoilMoisture_voidInit(void)
{
    4196:	df 93       	push	r29
    4198:	cf 93       	push	r28
    419a:	cd b7       	in	r28, 0x3d	; 61
    419c:	de b7       	in	r29, 0x3e	; 62
    /* Initialize ADC if not already initialized */
    ADC_vInit();
    419e:	0e 94 a2 21 	call	0x4344	; 0x4344 <ADC_vInit>
}
    41a2:	cf 91       	pop	r28
    41a4:	df 91       	pop	r29
    41a6:	08 95       	ret

000041a8 <SoilMoisture_u8GetRawValue>:

u8 SoilMoisture_u8GetRawValue(u16* Copy_pu16Reading)
{
    41a8:	df 93       	push	r29
    41aa:	cf 93       	push	r28
    41ac:	00 d0       	rcall	.+0      	; 0x41ae <SoilMoisture_u8GetRawValue+0x6>
    41ae:	0f 92       	push	r0
    41b0:	cd b7       	in	r28, 0x3d	; 61
    41b2:	de b7       	in	r29, 0x3e	; 62
    41b4:	9b 83       	std	Y+3, r25	; 0x03
    41b6:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8ErrorState = OK;
    41b8:	19 82       	std	Y+1, r1	; 0x01

    if(Copy_pu16Reading != NULL)
    41ba:	8a 81       	ldd	r24, Y+2	; 0x02
    41bc:	9b 81       	ldd	r25, Y+3	; 0x03
    41be:	00 97       	sbiw	r24, 0x00	; 0
    41c0:	41 f0       	breq	.+16     	; 0x41d2 <SoilMoisture_u8GetRawValue+0x2a>
    {
        Local_u8ErrorState = ADC_u8GetResultSync(SOIL_MOISTURE_ADC_CHANNEL, Copy_pu16Reading);
    41c2:	2a 81       	ldd	r18, Y+2	; 0x02
    41c4:	3b 81       	ldd	r19, Y+3	; 0x03
    41c6:	81 e0       	ldi	r24, 0x01	; 1
    41c8:	b9 01       	movw	r22, r18
    41ca:	0e 94 c4 22 	call	0x4588	; 0x4588 <ADC_u8GetResultSync>
    41ce:	89 83       	std	Y+1, r24	; 0x01
    41d0:	02 c0       	rjmp	.+4      	; 0x41d6 <SoilMoisture_u8GetRawValue+0x2e>
    }
    else
    {
        Local_u8ErrorState = NULL_POINTER;
    41d2:	82 e0       	ldi	r24, 0x02	; 2
    41d4:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8ErrorState;
    41d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    41d8:	0f 90       	pop	r0
    41da:	0f 90       	pop	r0
    41dc:	0f 90       	pop	r0
    41de:	cf 91       	pop	r28
    41e0:	df 91       	pop	r29
    41e2:	08 95       	ret

000041e4 <SoilMoisture_u8GetPercentage>:

u8 SoilMoisture_u8GetPercentage(u8* Copy_pu8Percentage)
{
    41e4:	df 93       	push	r29
    41e6:	cf 93       	push	r28
    41e8:	00 d0       	rcall	.+0      	; 0x41ea <SoilMoisture_u8GetPercentage+0x6>
    41ea:	00 d0       	rcall	.+0      	; 0x41ec <SoilMoisture_u8GetPercentage+0x8>
    41ec:	0f 92       	push	r0
    41ee:	cd b7       	in	r28, 0x3d	; 61
    41f0:	de b7       	in	r29, 0x3e	; 62
    41f2:	9d 83       	std	Y+5, r25	; 0x05
    41f4:	8c 83       	std	Y+4, r24	; 0x04
    u8 Local_u8ErrorState = OK;
    41f6:	19 82       	std	Y+1, r1	; 0x01
    u16 Local_u16RawValue = 0;
    41f8:	1b 82       	std	Y+3, r1	; 0x03
    41fa:	1a 82       	std	Y+2, r1	; 0x02

    if(Copy_pu8Percentage != NULL)
    41fc:	8c 81       	ldd	r24, Y+4	; 0x04
    41fe:	9d 81       	ldd	r25, Y+5	; 0x05
    4200:	00 97       	sbiw	r24, 0x00	; 0
    4202:	a1 f0       	breq	.+40     	; 0x422c <SoilMoisture_u8GetPercentage+0x48>
    {
        Local_u8ErrorState = SoilMoisture_u8GetRawValue(&Local_u16RawValue);
    4204:	ce 01       	movw	r24, r28
    4206:	02 96       	adiw	r24, 0x02	; 2
    4208:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <SoilMoisture_u8GetRawValue>
    420c:	89 83       	std	Y+1, r24	; 0x01

        if(Local_u8ErrorState == OK)
    420e:	89 81       	ldd	r24, Y+1	; 0x01
    4210:	88 23       	and	r24, r24
    4212:	71 f4       	brne	.+28     	; 0x4230 <SoilMoisture_u8GetPercentage+0x4c>
        {
            /* Map the raw value to percentage (inverted because higher value means drier soil) */
            *Copy_pu8Percentage = SoilMoisture_u8MapValue(Local_u16RawValue,
    4214:	8a 81       	ldd	r24, Y+2	; 0x02
    4216:	9b 81       	ldd	r25, Y+3	; 0x03
    4218:	68 ec       	ldi	r22, 0xC8	; 200
    421a:	70 e0       	ldi	r23, 0x00	; 0
    421c:	4f ef       	ldi	r20, 0xFF	; 255
    421e:	53 e0       	ldi	r21, 0x03	; 3
    4220:	0e 94 51 21 	call	0x42a2	; 0x42a2 <SoilMoisture_u8MapValue>
    4224:	ec 81       	ldd	r30, Y+4	; 0x04
    4226:	fd 81       	ldd	r31, Y+5	; 0x05
    4228:	80 83       	st	Z, r24
    422a:	02 c0       	rjmp	.+4      	; 0x4230 <SoilMoisture_u8GetPercentage+0x4c>
                                                         SOIL_DRY_VALUE);
        }
    }
    else
    {
        Local_u8ErrorState = NULL_POINTER;
    422c:	82 e0       	ldi	r24, 0x02	; 2
    422e:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8ErrorState;
    4230:	89 81       	ldd	r24, Y+1	; 0x01
}
    4232:	0f 90       	pop	r0
    4234:	0f 90       	pop	r0
    4236:	0f 90       	pop	r0
    4238:	0f 90       	pop	r0
    423a:	0f 90       	pop	r0
    423c:	cf 91       	pop	r28
    423e:	df 91       	pop	r29
    4240:	08 95       	ret

00004242 <SoilMoisture_u8IsDry>:

u8 SoilMoisture_u8IsDry(u8 Copy_u8Threshold, u8* Copy_pu8IsDry)
{
    4242:	df 93       	push	r29
    4244:	cf 93       	push	r28
    4246:	00 d0       	rcall	.+0      	; 0x4248 <SoilMoisture_u8IsDry+0x6>
    4248:	00 d0       	rcall	.+0      	; 0x424a <SoilMoisture_u8IsDry+0x8>
    424a:	00 d0       	rcall	.+0      	; 0x424c <SoilMoisture_u8IsDry+0xa>
    424c:	cd b7       	in	r28, 0x3d	; 61
    424e:	de b7       	in	r29, 0x3e	; 62
    4250:	8b 83       	std	Y+3, r24	; 0x03
    4252:	7d 83       	std	Y+5, r23	; 0x05
    4254:	6c 83       	std	Y+4, r22	; 0x04
    u8 Local_u8ErrorState = OK;
    4256:	19 82       	std	Y+1, r1	; 0x01
    u8 Local_u8Percentage = 0;
    4258:	1a 82       	std	Y+2, r1	; 0x02

    if(Copy_pu8IsDry != NULL)
    425a:	8c 81       	ldd	r24, Y+4	; 0x04
    425c:	9d 81       	ldd	r25, Y+5	; 0x05
    425e:	00 97       	sbiw	r24, 0x00	; 0
    4260:	a1 f0       	breq	.+40     	; 0x428a <SoilMoisture_u8IsDry+0x48>
    {
        Local_u8ErrorState = SoilMoisture_u8GetPercentage(&Local_u8Percentage);
    4262:	ce 01       	movw	r24, r28
    4264:	02 96       	adiw	r24, 0x02	; 2
    4266:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <SoilMoisture_u8GetPercentage>
    426a:	89 83       	std	Y+1, r24	; 0x01

        if(Local_u8ErrorState == OK)
    426c:	89 81       	ldd	r24, Y+1	; 0x01
    426e:	88 23       	and	r24, r24
    4270:	71 f4       	brne	.+28     	; 0x428e <SoilMoisture_u8IsDry+0x4c>
        {
            *Copy_pu8IsDry = (Local_u8Percentage >= Copy_u8Threshold) ? 1 : 0;
    4272:	9a 81       	ldd	r25, Y+2	; 0x02
    4274:	1e 82       	std	Y+6, r1	; 0x06
    4276:	8b 81       	ldd	r24, Y+3	; 0x03
    4278:	98 17       	cp	r25, r24
    427a:	10 f0       	brcs	.+4      	; 0x4280 <SoilMoisture_u8IsDry+0x3e>
    427c:	81 e0       	ldi	r24, 0x01	; 1
    427e:	8e 83       	std	Y+6, r24	; 0x06
    4280:	ec 81       	ldd	r30, Y+4	; 0x04
    4282:	fd 81       	ldd	r31, Y+5	; 0x05
    4284:	8e 81       	ldd	r24, Y+6	; 0x06
    4286:	80 83       	st	Z, r24
    4288:	02 c0       	rjmp	.+4      	; 0x428e <SoilMoisture_u8IsDry+0x4c>
        }
    }
    else
    {
        Local_u8ErrorState = NULL_POINTER;
    428a:	82 e0       	ldi	r24, 0x02	; 2
    428c:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8ErrorState;
    428e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4290:	26 96       	adiw	r28, 0x06	; 6
    4292:	0f b6       	in	r0, 0x3f	; 63
    4294:	f8 94       	cli
    4296:	de bf       	out	0x3e, r29	; 62
    4298:	0f be       	out	0x3f, r0	; 63
    429a:	cd bf       	out	0x3d, r28	; 61
    429c:	cf 91       	pop	r28
    429e:	df 91       	pop	r29
    42a0:	08 95       	ret

000042a2 <SoilMoisture_u8MapValue>:

static u8 SoilMoisture_u8MapValue(u16 Copy_u16RawValue, u16 Copy_u16Min, u16 Copy_u16Max)
{
    42a2:	df 93       	push	r29
    42a4:	cf 93       	push	r28
    42a6:	cd b7       	in	r28, 0x3d	; 61
    42a8:	de b7       	in	r29, 0x3e	; 62
    42aa:	28 97       	sbiw	r28, 0x08	; 8
    42ac:	0f b6       	in	r0, 0x3f	; 63
    42ae:	f8 94       	cli
    42b0:	de bf       	out	0x3e, r29	; 62
    42b2:	0f be       	out	0x3f, r0	; 63
    42b4:	cd bf       	out	0x3d, r28	; 61
    42b6:	9c 83       	std	Y+4, r25	; 0x04
    42b8:	8b 83       	std	Y+3, r24	; 0x03
    42ba:	7e 83       	std	Y+6, r23	; 0x06
    42bc:	6d 83       	std	Y+5, r22	; 0x05
    42be:	58 87       	std	Y+8, r21	; 0x08
    42c0:	4f 83       	std	Y+7, r20	; 0x07
    u16 Local_u16MappedValue;

    /* Ensure the raw value is within the expected range */
    if(Copy_u16RawValue <= Copy_u16Min)
    42c2:	2b 81       	ldd	r18, Y+3	; 0x03
    42c4:	3c 81       	ldd	r19, Y+4	; 0x04
    42c6:	8d 81       	ldd	r24, Y+5	; 0x05
    42c8:	9e 81       	ldd	r25, Y+6	; 0x06
    42ca:	82 17       	cp	r24, r18
    42cc:	93 07       	cpc	r25, r19
    42ce:	28 f0       	brcs	.+10     	; 0x42da <SoilMoisture_u8MapValue+0x38>
    {
        Local_u16MappedValue = 100;  // 100% wet
    42d0:	84 e6       	ldi	r24, 0x64	; 100
    42d2:	90 e0       	ldi	r25, 0x00	; 0
    42d4:	9a 83       	std	Y+2, r25	; 0x02
    42d6:	89 83       	std	Y+1, r24	; 0x01
    42d8:	2b c0       	rjmp	.+86     	; 0x4330 <SoilMoisture_u8MapValue+0x8e>
    }
    else if(Copy_u16RawValue >= Copy_u16Max)
    42da:	2b 81       	ldd	r18, Y+3	; 0x03
    42dc:	3c 81       	ldd	r19, Y+4	; 0x04
    42de:	8f 81       	ldd	r24, Y+7	; 0x07
    42e0:	98 85       	ldd	r25, Y+8	; 0x08
    42e2:	28 17       	cp	r18, r24
    42e4:	39 07       	cpc	r19, r25
    42e6:	18 f0       	brcs	.+6      	; 0x42ee <SoilMoisture_u8MapValue+0x4c>
    {
        Local_u16MappedValue = 0;    // 0% wet (100% dry)
    42e8:	1a 82       	std	Y+2, r1	; 0x02
    42ea:	19 82       	std	Y+1, r1	; 0x01
    42ec:	21 c0       	rjmp	.+66     	; 0x4330 <SoilMoisture_u8MapValue+0x8e>
    }
    else
    {
        /* Map the value from [min, max] to [100, 0] */
        Local_u16MappedValue = 100 - ((Copy_u16RawValue - Copy_u16Min) * 100) / (Copy_u16Max - Copy_u16Min);
    42ee:	2b 81       	ldd	r18, Y+3	; 0x03
    42f0:	3c 81       	ldd	r19, Y+4	; 0x04
    42f2:	8d 81       	ldd	r24, Y+5	; 0x05
    42f4:	9e 81       	ldd	r25, Y+6	; 0x06
    42f6:	28 1b       	sub	r18, r24
    42f8:	39 0b       	sbc	r19, r25
    42fa:	84 e6       	ldi	r24, 0x64	; 100
    42fc:	90 e0       	ldi	r25, 0x00	; 0
    42fe:	28 9f       	mul	r18, r24
    4300:	a0 01       	movw	r20, r0
    4302:	29 9f       	mul	r18, r25
    4304:	50 0d       	add	r21, r0
    4306:	38 9f       	mul	r19, r24
    4308:	50 0d       	add	r21, r0
    430a:	11 24       	eor	r1, r1
    430c:	2f 81       	ldd	r18, Y+7	; 0x07
    430e:	38 85       	ldd	r19, Y+8	; 0x08
    4310:	8d 81       	ldd	r24, Y+5	; 0x05
    4312:	9e 81       	ldd	r25, Y+6	; 0x06
    4314:	28 1b       	sub	r18, r24
    4316:	39 0b       	sbc	r19, r25
    4318:	ca 01       	movw	r24, r20
    431a:	b9 01       	movw	r22, r18
    431c:	0e 94 3f 3a 	call	0x747e	; 0x747e <__udivmodhi4>
    4320:	cb 01       	movw	r24, r22
    4322:	9c 01       	movw	r18, r24
    4324:	84 e6       	ldi	r24, 0x64	; 100
    4326:	90 e0       	ldi	r25, 0x00	; 0
    4328:	82 1b       	sub	r24, r18
    432a:	93 0b       	sbc	r25, r19
    432c:	9a 83       	std	Y+2, r25	; 0x02
    432e:	89 83       	std	Y+1, r24	; 0x01
    }

    return (u8)Local_u16MappedValue;
    4330:	89 81       	ldd	r24, Y+1	; 0x01
}
    4332:	28 96       	adiw	r28, 0x08	; 8
    4334:	0f b6       	in	r0, 0x3f	; 63
    4336:	f8 94       	cli
    4338:	de bf       	out	0x3e, r29	; 62
    433a:	0f be       	out	0x3f, r0	; 63
    433c:	cd bf       	out	0x3d, r28	; 61
    433e:	cf 91       	pop	r28
    4340:	df 91       	pop	r29
    4342:	08 95       	ret

00004344 <ADC_vInit>:
 * Parameters : Nothing
 * return     : Nothing
 */

void ADC_vInit(void)
{
    4344:	df 93       	push	r29
    4346:	cf 93       	push	r28
    4348:	cd b7       	in	r28, 0x3d	; 61
    434a:	de b7       	in	r29, 0x3e	; 62
      CLR_BIT(ADMUX, ADMUX_REFS0);
      CLR_BIT(ADMUX, ADMUX_REFS1);

    #elif ADC_VREF == AVCC

      SET_BIT(ADMUX, ADMUX_REFS0);
    434c:	a7 e2       	ldi	r26, 0x27	; 39
    434e:	b0 e0       	ldi	r27, 0x00	; 0
    4350:	e7 e2       	ldi	r30, 0x27	; 39
    4352:	f0 e0       	ldi	r31, 0x00	; 0
    4354:	80 81       	ld	r24, Z
    4356:	80 64       	ori	r24, 0x40	; 64
    4358:	8c 93       	st	X, r24
      CLR_BIT(ADMUX, ADMUX_REFS1);
    435a:	a7 e2       	ldi	r26, 0x27	; 39
    435c:	b0 e0       	ldi	r27, 0x00	; 0
    435e:	e7 e2       	ldi	r30, 0x27	; 39
    4360:	f0 e0       	ldi	r31, 0x00	; 0
    4362:	80 81       	ld	r24, Z
    4364:	8f 77       	andi	r24, 0x7F	; 127
    4366:	8c 93       	st	X, r24
  /*Set Left Adjust Result*/
  #ifdef ADC_ADJUSTMENT

    #if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

      CLR_BIT(ADMUX, ADMUX_ADLAR);
    4368:	a7 e2       	ldi	r26, 0x27	; 39
    436a:	b0 e0       	ldi	r27, 0x00	; 0
    436c:	e7 e2       	ldi	r30, 0x27	; 39
    436e:	f0 e0       	ldi	r31, 0x00	; 0
    4370:	80 81       	ld	r24, Z
    4372:	8f 7d       	andi	r24, 0xDF	; 223
    4374:	8c 93       	st	X, r24
  /*Set Prescaler Value*/
  #ifdef ADC_PRESCALLER

    #if ADC_PRESCALLER <= ADC_PRE_128

      ADCSRA &= 0b11111000;
    4376:	a6 e2       	ldi	r26, 0x26	; 38
    4378:	b0 e0       	ldi	r27, 0x00	; 0
    437a:	e6 e2       	ldi	r30, 0x26	; 38
    437c:	f0 e0       	ldi	r31, 0x00	; 0
    437e:	80 81       	ld	r24, Z
    4380:	88 7f       	andi	r24, 0xF8	; 248
    4382:	8c 93       	st	X, r24
      ADCSRA |= ADC_PRESCALLER;
    4384:	a6 e2       	ldi	r26, 0x26	; 38
    4386:	b0 e0       	ldi	r27, 0x00	; 0
    4388:	e6 e2       	ldi	r30, 0x26	; 38
    438a:	f0 e0       	ldi	r31, 0x00	; 0
    438c:	80 81       	ld	r24, Z
    438e:	87 60       	ori	r24, 0x07	; 7
    4390:	8c 93       	st	X, r24

    #if ADC_TRIGGERING_SOURCE <= ADC_SINGLE_CONVERSION

      #if ADC_TRIGGERING_SOURCE == ADC_SINGLE_CONVERSION

        CLR_BIT(ADCSRA, ADCSRA_ADATE);
    4392:	a6 e2       	ldi	r26, 0x26	; 38
    4394:	b0 e0       	ldi	r27, 0x00	; 0
    4396:	e6 e2       	ldi	r30, 0x26	; 38
    4398:	f0 e0       	ldi	r31, 0x00	; 0
    439a:	80 81       	ld	r24, Z
    439c:	8f 7d       	andi	r24, 0xDF	; 223
    439e:	8c 93       	st	X, r24

      CLR_BIT(ADCSRA, ADCSRA_ADEN);

    #elif ADC_STATUS == ADC_EN

      SET_BIT(ADCSRA, ADCSRA_ADEN);
    43a0:	a6 e2       	ldi	r26, 0x26	; 38
    43a2:	b0 e0       	ldi	r27, 0x00	; 0
    43a4:	e6 e2       	ldi	r30, 0x26	; 38
    43a6:	f0 e0       	ldi	r31, 0x00	; 0
    43a8:	80 81       	ld	r24, Z
    43aa:	80 68       	ori	r24, 0x80	; 128
    43ac:	8c 93       	st	X, r24
    /*Enable ADC Interrupt*/
  #ifdef ADC_INT_STATUS

    #if ADC_INT_STATUS == INT_DIS

      CLR_BIT(ADCSRA, ADCSRA_ADIE);
    43ae:	a6 e2       	ldi	r26, 0x26	; 38
    43b0:	b0 e0       	ldi	r27, 0x00	; 0
    43b2:	e6 e2       	ldi	r30, 0x26	; 38
    43b4:	f0 e0       	ldi	r31, 0x00	; 0
    43b6:	80 81       	ld	r24, Z
    43b8:	87 7f       	andi	r24, 0xF7	; 247
    43ba:	8c 93       	st	X, r24
    #error "Wrong INT_STATUS config"

    #endif

  #endif
}
    43bc:	cf 91       	pop	r28
    43be:	df 91       	pop	r29
    43c0:	08 95       	ret

000043c2 <ADC_vEnable>:
 *                                              *--------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void ADC_vEnable(void)
{
    43c2:	df 93       	push	r29
    43c4:	cf 93       	push	r28
    43c6:	cd b7       	in	r28, 0x3d	; 61
    43c8:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(ADCSRA, ADCSRA_ADEN);
    43ca:	a6 e2       	ldi	r26, 0x26	; 38
    43cc:	b0 e0       	ldi	r27, 0x00	; 0
    43ce:	e6 e2       	ldi	r30, 0x26	; 38
    43d0:	f0 e0       	ldi	r31, 0x00	; 0
    43d2:	80 81       	ld	r24, Z
    43d4:	80 68       	ori	r24, 0x80	; 128
    43d6:	8c 93       	st	X, r24
}
    43d8:	cf 91       	pop	r28
    43da:	df 91       	pop	r29
    43dc:	08 95       	ret

000043de <ADC_vDisable>:
 *                                                *--------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void ADC_vDisable(void)
{
    43de:	df 93       	push	r29
    43e0:	cf 93       	push	r28
    43e2:	cd b7       	in	r28, 0x3d	; 61
    43e4:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT(ADCSRA, ADCSRA_ADEN);
    43e6:	a6 e2       	ldi	r26, 0x26	; 38
    43e8:	b0 e0       	ldi	r27, 0x00	; 0
    43ea:	e6 e2       	ldi	r30, 0x26	; 38
    43ec:	f0 e0       	ldi	r31, 0x00	; 0
    43ee:	80 81       	ld	r24, Z
    43f0:	8f 77       	andi	r24, 0x7F	; 127
    43f2:	8c 93       	st	X, r24
}
    43f4:	cf 91       	pop	r28
    43f6:	df 91       	pop	r29
    43f8:	08 95       	ret

000043fa <ADC_vInterruptEnable>:
 *                                               *----------------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void ADC_vInterruptEnable(void)
{
    43fa:	df 93       	push	r29
    43fc:	cf 93       	push	r28
    43fe:	cd b7       	in	r28, 0x3d	; 61
    4400:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(ADCSRA, ADCSRA_ADIE);
    4402:	a6 e2       	ldi	r26, 0x26	; 38
    4404:	b0 e0       	ldi	r27, 0x00	; 0
    4406:	e6 e2       	ldi	r30, 0x26	; 38
    4408:	f0 e0       	ldi	r31, 0x00	; 0
    440a:	80 81       	ld	r24, Z
    440c:	88 60       	ori	r24, 0x08	; 8
    440e:	8c 93       	st	X, r24
}
    4410:	cf 91       	pop	r28
    4412:	df 91       	pop	r29
    4414:	08 95       	ret

00004416 <ADC_vInterruptDisable>:
 *                                                *----------------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void ADC_vInterruptDisable(void)
{
    4416:	df 93       	push	r29
    4418:	cf 93       	push	r28
    441a:	cd b7       	in	r28, 0x3d	; 61
    441c:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT(ADCSRA, ADCSRA_ADIE);
    441e:	a6 e2       	ldi	r26, 0x26	; 38
    4420:	b0 e0       	ldi	r27, 0x00	; 0
    4422:	e6 e2       	ldi	r30, 0x26	; 38
    4424:	f0 e0       	ldi	r31, 0x00	; 0
    4426:	80 81       	ld	r24, Z
    4428:	87 7f       	andi	r24, 0xF7	; 247
    442a:	8c 93       	st	X, r24
}
    442c:	cf 91       	pop	r28
    442e:	df 91       	pop	r29
    4430:	08 95       	ret

00004432 <ADC_u8VoltageReference>:
 *		=>Copy_u8VREF => [AREF , AVCC , INTERNAL_2_56 ]
 *
 * return     : Error status with type u8
 */
u8 ADC_u8VoltageReference(u8 Copy_u8VREF)
{
    4432:	df 93       	push	r29
    4434:	cf 93       	push	r28
    4436:	00 d0       	rcall	.+0      	; 0x4438 <ADC_u8VoltageReference+0x6>
    4438:	cd b7       	in	r28, 0x3d	; 61
    443a:	de b7       	in	r29, 0x3e	; 62
    443c:	8a 83       	std	Y+2, r24	; 0x02

  u8 Local_u8ErrorState = NOK;
    443e:	81 e0       	ldi	r24, 0x01	; 1
    4440:	89 83       	std	Y+1, r24	; 0x01
  if ((Copy_u8VREF == AREF) || (Copy_u8VREF == AVCC) || (Copy_u8VREF == INTERNAL_2_56))
    4442:	8a 81       	ldd	r24, Y+2	; 0x02
    4444:	88 23       	and	r24, r24
    4446:	31 f0       	breq	.+12     	; 0x4454 <ADC_u8VoltageReference+0x22>
    4448:	8a 81       	ldd	r24, Y+2	; 0x02
    444a:	85 30       	cpi	r24, 0x05	; 5
    444c:	19 f0       	breq	.+6      	; 0x4454 <ADC_u8VoltageReference+0x22>
    444e:	8a 81       	ldd	r24, Y+2	; 0x02
    4450:	83 30       	cpi	r24, 0x03	; 3
    4452:	e1 f4       	brne	.+56     	; 0x448c <ADC_u8VoltageReference+0x5a>
  {
    ADMUX &= 0b00111111;
    4454:	a7 e2       	ldi	r26, 0x27	; 39
    4456:	b0 e0       	ldi	r27, 0x00	; 0
    4458:	e7 e2       	ldi	r30, 0x27	; 39
    445a:	f0 e0       	ldi	r31, 0x00	; 0
    445c:	80 81       	ld	r24, Z
    445e:	8f 73       	andi	r24, 0x3F	; 63
    4460:	8c 93       	st	X, r24
    ADMUX |= (Copy_u8VREF << 6);
    4462:	a7 e2       	ldi	r26, 0x27	; 39
    4464:	b0 e0       	ldi	r27, 0x00	; 0
    4466:	e7 e2       	ldi	r30, 0x27	; 39
    4468:	f0 e0       	ldi	r31, 0x00	; 0
    446a:	80 81       	ld	r24, Z
    446c:	28 2f       	mov	r18, r24
    446e:	8a 81       	ldd	r24, Y+2	; 0x02
    4470:	88 2f       	mov	r24, r24
    4472:	90 e0       	ldi	r25, 0x00	; 0
    4474:	00 24       	eor	r0, r0
    4476:	96 95       	lsr	r25
    4478:	87 95       	ror	r24
    447a:	07 94       	ror	r0
    447c:	96 95       	lsr	r25
    447e:	87 95       	ror	r24
    4480:	07 94       	ror	r0
    4482:	98 2f       	mov	r25, r24
    4484:	80 2d       	mov	r24, r0
    4486:	82 2b       	or	r24, r18
    4488:	8c 93       	st	X, r24
    Local_u8ErrorState = OK;
    448a:	19 82       	std	Y+1, r1	; 0x01
  }

  return Local_u8ErrorState;
    448c:	89 81       	ldd	r24, Y+1	; 0x01
}
    448e:	0f 90       	pop	r0
    4490:	0f 90       	pop	r0
    4492:	cf 91       	pop	r28
    4494:	df 91       	pop	r29
    4496:	08 95       	ret

00004498 <ADC_u8SetPrescaler>:
 *		=>Copy_u8Prescaler => [ADC_PRE_2 , ADC_PRE_4 , ADC_PRE_8 , ADC_PRE_16 , ADC_PRE_32 , ADC_PRE_64 , ADC_PRE_128]
 *
 * return     : Error status with type u8
 */
u8 ADC_u8SetPrescaler(u8 Copy_u8Prescaler)
{
    4498:	df 93       	push	r29
    449a:	cf 93       	push	r28
    449c:	00 d0       	rcall	.+0      	; 0x449e <ADC_u8SetPrescaler+0x6>
    449e:	cd b7       	in	r28, 0x3d	; 61
    44a0:	de b7       	in	r29, 0x3e	; 62
    44a2:	8a 83       	std	Y+2, r24	; 0x02

  u8 Local_u8ErrorState = NOK;
    44a4:	81 e0       	ldi	r24, 0x01	; 1
    44a6:	89 83       	std	Y+1, r24	; 0x01

  if (Copy_u8Prescaler <= ADC_PRE_128)
    44a8:	8a 81       	ldd	r24, Y+2	; 0x02
    44aa:	88 30       	cpi	r24, 0x08	; 8
    44ac:	80 f4       	brcc	.+32     	; 0x44ce <ADC_u8SetPrescaler+0x36>
  {
    /*Set Prescaler Value*/
    ADCSRA &= 0b11111000;
    44ae:	a6 e2       	ldi	r26, 0x26	; 38
    44b0:	b0 e0       	ldi	r27, 0x00	; 0
    44b2:	e6 e2       	ldi	r30, 0x26	; 38
    44b4:	f0 e0       	ldi	r31, 0x00	; 0
    44b6:	80 81       	ld	r24, Z
    44b8:	88 7f       	andi	r24, 0xF8	; 248
    44ba:	8c 93       	st	X, r24
    ADCSRA |= Copy_u8Prescaler;
    44bc:	a6 e2       	ldi	r26, 0x26	; 38
    44be:	b0 e0       	ldi	r27, 0x00	; 0
    44c0:	e6 e2       	ldi	r30, 0x26	; 38
    44c2:	f0 e0       	ldi	r31, 0x00	; 0
    44c4:	90 81       	ld	r25, Z
    44c6:	8a 81       	ldd	r24, Y+2	; 0x02
    44c8:	89 2b       	or	r24, r25
    44ca:	8c 93       	st	X, r24
    Local_u8ErrorState = OK;
    44cc:	19 82       	std	Y+1, r1	; 0x01
  }

  return Local_u8ErrorState;
    44ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    44d0:	0f 90       	pop	r0
    44d2:	0f 90       	pop	r0
    44d4:	cf 91       	pop	r28
    44d6:	df 91       	pop	r29
    44d8:	08 95       	ret

000044da <ADC_u8SetAdjustment>:
 *		=>Copy_u8Adjust => [RIGHT_ADJUSTMENT , LEFT_ADJUSTMENT]
 *
 * return     : Error status with type u8
 */
u8 ADC_u8SetAdjustment(u8 Copy_u8Adjust)
{
    44da:	df 93       	push	r29
    44dc:	cf 93       	push	r28
    44de:	00 d0       	rcall	.+0      	; 0x44e0 <ADC_u8SetAdjustment+0x6>
    44e0:	cd b7       	in	r28, 0x3d	; 61
    44e2:	de b7       	in	r29, 0x3e	; 62
    44e4:	8a 83       	std	Y+2, r24	; 0x02

  u8 Local_u8ErrorState = OK;
    44e6:	19 82       	std	Y+1, r1	; 0x01

  if (Copy_u8Adjust == RIGHT_ADJUSTMENT)
    44e8:	8a 81       	ldd	r24, Y+2	; 0x02
    44ea:	88 23       	and	r24, r24
    44ec:	41 f4       	brne	.+16     	; 0x44fe <ADC_u8SetAdjustment+0x24>
  {
    CLR_BIT(ADMUX, ADMUX_ADLAR);
    44ee:	a7 e2       	ldi	r26, 0x27	; 39
    44f0:	b0 e0       	ldi	r27, 0x00	; 0
    44f2:	e7 e2       	ldi	r30, 0x27	; 39
    44f4:	f0 e0       	ldi	r31, 0x00	; 0
    44f6:	80 81       	ld	r24, Z
    44f8:	8f 7d       	andi	r24, 0xDF	; 223
    44fa:	8c 93       	st	X, r24
    44fc:	0d c0       	rjmp	.+26     	; 0x4518 <ADC_u8SetAdjustment+0x3e>
  }
  else if (Copy_u8Adjust == LEFT_ADJUSTMENT)
    44fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4500:	81 30       	cpi	r24, 0x01	; 1
    4502:	41 f4       	brne	.+16     	; 0x4514 <ADC_u8SetAdjustment+0x3a>
  {
    SET_BIT(ADMUX, ADMUX_ADLAR);
    4504:	a7 e2       	ldi	r26, 0x27	; 39
    4506:	b0 e0       	ldi	r27, 0x00	; 0
    4508:	e7 e2       	ldi	r30, 0x27	; 39
    450a:	f0 e0       	ldi	r31, 0x00	; 0
    450c:	80 81       	ld	r24, Z
    450e:	80 62       	ori	r24, 0x20	; 32
    4510:	8c 93       	st	X, r24
    4512:	02 c0       	rjmp	.+4      	; 0x4518 <ADC_u8SetAdjustment+0x3e>
  }
  else
  {
    Local_u8ErrorState = NOK;
    4514:	81 e0       	ldi	r24, 0x01	; 1
    4516:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    4518:	89 81       	ldd	r24, Y+1	; 0x01
}
    451a:	0f 90       	pop	r0
    451c:	0f 90       	pop	r0
    451e:	cf 91       	pop	r28
    4520:	df 91       	pop	r29
    4522:	08 95       	ret

00004524 <ADC_u8SetTriggerSource>:
 *		=>Copy_u8Trigger => [ADC_FREE_RUNNING , ADC_ANALOG_COMPARATOR , ADC_EXTI0 , ADC_TIM0_CTC , ADC_TIM0_OVF , ADC_TIM1_CTC_CHANNEL_B , ADC_TIM1_OVF , ADC_TIM1_ICU]
 *
 * return     : Error status with type u8
 */
u8 ADC_u8SetTriggerSource(u8 Copy_u8Trigger)
{
    4524:	df 93       	push	r29
    4526:	cf 93       	push	r28
    4528:	00 d0       	rcall	.+0      	; 0x452a <ADC_u8SetTriggerSource+0x6>
    452a:	cd b7       	in	r28, 0x3d	; 61
    452c:	de b7       	in	r29, 0x3e	; 62
    452e:	8a 83       	std	Y+2, r24	; 0x02
  u8 Local_u8ErrorState = OK;
    4530:	19 82       	std	Y+1, r1	; 0x01

  if (Copy_u8Trigger == ADC_SINGLE_CONVERSION)
    4532:	8a 81       	ldd	r24, Y+2	; 0x02
    4534:	88 30       	cpi	r24, 0x08	; 8
    4536:	41 f4       	brne	.+16     	; 0x4548 <ADC_u8SetTriggerSource+0x24>
  {
    CLR_BIT(ADCSRA, ADCSRA_ADATE);
    4538:	a6 e2       	ldi	r26, 0x26	; 38
    453a:	b0 e0       	ldi	r27, 0x00	; 0
    453c:	e6 e2       	ldi	r30, 0x26	; 38
    453e:	f0 e0       	ldi	r31, 0x00	; 0
    4540:	80 81       	ld	r24, Z
    4542:	8f 7d       	andi	r24, 0xDF	; 223
    4544:	8c 93       	st	X, r24
    4546:	1a c0       	rjmp	.+52     	; 0x457c <ADC_u8SetTriggerSource+0x58>
  }
  else if (Copy_u8Trigger <= ADC_TIM1_ICU)
    4548:	8a 81       	ldd	r24, Y+2	; 0x02
    454a:	88 30       	cpi	r24, 0x08	; 8
    454c:	a8 f4       	brcc	.+42     	; 0x4578 <ADC_u8SetTriggerSource+0x54>
  {
    /*Set Trigger source Value*/
    SET_BIT(ADCSRA, ADCSRA_ADATE);
    454e:	a6 e2       	ldi	r26, 0x26	; 38
    4550:	b0 e0       	ldi	r27, 0x00	; 0
    4552:	e6 e2       	ldi	r30, 0x26	; 38
    4554:	f0 e0       	ldi	r31, 0x00	; 0
    4556:	80 81       	ld	r24, Z
    4558:	80 62       	ori	r24, 0x20	; 32
    455a:	8c 93       	st	X, r24
    SFIOR &= 0b00011111;
    455c:	a0 e5       	ldi	r26, 0x50	; 80
    455e:	b0 e0       	ldi	r27, 0x00	; 0
    4560:	e0 e5       	ldi	r30, 0x50	; 80
    4562:	f0 e0       	ldi	r31, 0x00	; 0
    4564:	80 81       	ld	r24, Z
    4566:	8f 71       	andi	r24, 0x1F	; 31
    4568:	8c 93       	st	X, r24
    SFIOR |= (ADC_TRIGGERING_SOURCE << 5);
    456a:	a0 e5       	ldi	r26, 0x50	; 80
    456c:	b0 e0       	ldi	r27, 0x00	; 0
    456e:	e0 e5       	ldi	r30, 0x50	; 80
    4570:	f0 e0       	ldi	r31, 0x00	; 0
    4572:	80 81       	ld	r24, Z
    4574:	8c 93       	st	X, r24
    4576:	02 c0       	rjmp	.+4      	; 0x457c <ADC_u8SetTriggerSource+0x58>
  }
  else
  {
    Local_u8ErrorState = NOK;
    4578:	81 e0       	ldi	r24, 0x01	; 1
    457a:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    457c:	89 81       	ldd	r24, Y+1	; 0x01
}
    457e:	0f 90       	pop	r0
    4580:	0f 90       	pop	r0
    4582:	cf 91       	pop	r28
    4584:	df 91       	pop	r29
    4586:	08 95       	ret

00004588 <ADC_u8GetResultSync>:
 *      =>Copy_pu16Result -> pointer to u16
 *
 * return     : Error status with type u8
 */
u8 ADC_u8GetResultSync(u8 Copy_u8Channel, u16 *Copy_pu16Result)
{
    4588:	df 93       	push	r29
    458a:	cf 93       	push	r28
    458c:	cd b7       	in	r28, 0x3d	; 61
    458e:	de b7       	in	r29, 0x3e	; 62
    4590:	28 97       	sbiw	r28, 0x08	; 8
    4592:	0f b6       	in	r0, 0x3f	; 63
    4594:	f8 94       	cli
    4596:	de bf       	out	0x3e, r29	; 62
    4598:	0f be       	out	0x3f, r0	; 63
    459a:	cd bf       	out	0x3d, r28	; 61
    459c:	8e 83       	std	Y+6, r24	; 0x06
    459e:	78 87       	std	Y+8, r23	; 0x08
    45a0:	6f 83       	std	Y+7, r22	; 0x07
  u8 Local_u8ErrorState = OK;
    45a2:	1d 82       	std	Y+5, r1	; 0x05

  u32 Local_u32TimeOutCounter = 0;
    45a4:	19 82       	std	Y+1, r1	; 0x01
    45a6:	1a 82       	std	Y+2, r1	; 0x02
    45a8:	1b 82       	std	Y+3, r1	; 0x03
    45aa:	1c 82       	std	Y+4, r1	; 0x04

  if (Copy_pu16Result != NULL)
    45ac:	8f 81       	ldd	r24, Y+7	; 0x07
    45ae:	98 85       	ldd	r25, Y+8	; 0x08
    45b0:	00 97       	sbiw	r24, 0x00	; 0
    45b2:	09 f4       	brne	.+2      	; 0x45b6 <ADC_u8GetResultSync+0x2e>
    45b4:	72 c0       	rjmp	.+228    	; 0x469a <ADC_u8GetResultSync+0x112>
  {
    if (ADC_u8State == IDLE)
    45b6:	80 91 48 02 	lds	r24, 0x0248
    45ba:	88 23       	and	r24, r24
    45bc:	09 f0       	breq	.+2      	; 0x45c0 <ADC_u8GetResultSync+0x38>
    45be:	6a c0       	rjmp	.+212    	; 0x4694 <ADC_u8GetResultSync+0x10c>
    {
      /*ADC is now Busy*/
      ADC_u8State = BUSY;
    45c0:	81 e0       	ldi	r24, 0x01	; 1
    45c2:	80 93 48 02 	sts	0x0248, r24

      /*Set required channel*/
      if (Copy_u8Channel <= ADC_GND)
    45c6:	8e 81       	ldd	r24, Y+6	; 0x06
    45c8:	80 32       	cpi	r24, 0x20	; 32
    45ca:	78 f4       	brcc	.+30     	; 0x45ea <ADC_u8GetResultSync+0x62>
      {
        ADMUX &= 0b11100000;
    45cc:	a7 e2       	ldi	r26, 0x27	; 39
    45ce:	b0 e0       	ldi	r27, 0x00	; 0
    45d0:	e7 e2       	ldi	r30, 0x27	; 39
    45d2:	f0 e0       	ldi	r31, 0x00	; 0
    45d4:	80 81       	ld	r24, Z
    45d6:	80 7e       	andi	r24, 0xE0	; 224
    45d8:	8c 93       	st	X, r24
        ADMUX |= Copy_u8Channel;
    45da:	a7 e2       	ldi	r26, 0x27	; 39
    45dc:	b0 e0       	ldi	r27, 0x00	; 0
    45de:	e7 e2       	ldi	r30, 0x27	; 39
    45e0:	f0 e0       	ldi	r31, 0x00	; 0
    45e2:	90 81       	ld	r25, Z
    45e4:	8e 81       	ldd	r24, Y+6	; 0x06
    45e6:	89 2b       	or	r24, r25
    45e8:	8c 93       	st	X, r24
      }

      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);
    45ea:	a6 e2       	ldi	r26, 0x26	; 38
    45ec:	b0 e0       	ldi	r27, 0x00	; 0
    45ee:	e6 e2       	ldi	r30, 0x26	; 38
    45f0:	f0 e0       	ldi	r31, 0x00	; 0
    45f2:	80 81       	ld	r24, Z
    45f4:	80 64       	ori	r24, 0x40	; 64
    45f6:	8c 93       	st	X, r24
    45f8:	0b c0       	rjmp	.+22     	; 0x4610 <ADC_u8GetResultSync+0x88>

      /*Waiting until the conversion is complete*/
      while ((READ_BIT(ADCSRA, ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_TIMEOUT))
      {
        Local_u32TimeOutCounter++;
    45fa:	89 81       	ldd	r24, Y+1	; 0x01
    45fc:	9a 81       	ldd	r25, Y+2	; 0x02
    45fe:	ab 81       	ldd	r26, Y+3	; 0x03
    4600:	bc 81       	ldd	r27, Y+4	; 0x04
    4602:	01 96       	adiw	r24, 0x01	; 1
    4604:	a1 1d       	adc	r26, r1
    4606:	b1 1d       	adc	r27, r1
    4608:	89 83       	std	Y+1, r24	; 0x01
    460a:	9a 83       	std	Y+2, r25	; 0x02
    460c:	ab 83       	std	Y+3, r26	; 0x03
    460e:	bc 83       	std	Y+4, r27	; 0x04

      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);

      /*Waiting until the conversion is complete*/
      while ((READ_BIT(ADCSRA, ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_TIMEOUT))
    4610:	e6 e2       	ldi	r30, 0x26	; 38
    4612:	f0 e0       	ldi	r31, 0x00	; 0
    4614:	80 81       	ld	r24, Z
    4616:	82 95       	swap	r24
    4618:	8f 70       	andi	r24, 0x0F	; 15
    461a:	88 2f       	mov	r24, r24
    461c:	90 e0       	ldi	r25, 0x00	; 0
    461e:	81 70       	andi	r24, 0x01	; 1
    4620:	90 70       	andi	r25, 0x00	; 0
    4622:	00 97       	sbiw	r24, 0x00	; 0
    4624:	61 f4       	brne	.+24     	; 0x463e <ADC_u8GetResultSync+0xb6>
    4626:	89 81       	ldd	r24, Y+1	; 0x01
    4628:	9a 81       	ldd	r25, Y+2	; 0x02
    462a:	ab 81       	ldd	r26, Y+3	; 0x03
    462c:	bc 81       	ldd	r27, Y+4	; 0x04
    462e:	80 35       	cpi	r24, 0x50	; 80
    4630:	23 ec       	ldi	r18, 0xC3	; 195
    4632:	92 07       	cpc	r25, r18
    4634:	20 e0       	ldi	r18, 0x00	; 0
    4636:	a2 07       	cpc	r26, r18
    4638:	20 e0       	ldi	r18, 0x00	; 0
    463a:	b2 07       	cpc	r27, r18
    463c:	f0 f2       	brcs	.-68     	; 0x45fa <ADC_u8GetResultSync+0x72>
      {
        Local_u32TimeOutCounter++;
      }
      if (Local_u32TimeOutCounter == ADC_TIMEOUT)
    463e:	89 81       	ldd	r24, Y+1	; 0x01
    4640:	9a 81       	ldd	r25, Y+2	; 0x02
    4642:	ab 81       	ldd	r26, Y+3	; 0x03
    4644:	bc 81       	ldd	r27, Y+4	; 0x04
    4646:	80 35       	cpi	r24, 0x50	; 80
    4648:	23 ec       	ldi	r18, 0xC3	; 195
    464a:	92 07       	cpc	r25, r18
    464c:	20 e0       	ldi	r18, 0x00	; 0
    464e:	a2 07       	cpc	r26, r18
    4650:	20 e0       	ldi	r18, 0x00	; 0
    4652:	b2 07       	cpc	r27, r18
    4654:	19 f4       	brne	.+6      	; 0x465c <ADC_u8GetResultSync+0xd4>
      {
        Local_u8ErrorState = NOK;
    4656:	81 e0       	ldi	r24, 0x01	; 1
    4658:	8d 83       	std	Y+5, r24	; 0x05
    465a:	19 c0       	rjmp	.+50     	; 0x468e <ADC_u8GetResultSync+0x106>
      }
      else
      {
        /*Clear the interrupt flag*/
        SET_BIT(ADCSRA, ADCSRA_ADIF);
    465c:	a6 e2       	ldi	r26, 0x26	; 38
    465e:	b0 e0       	ldi	r27, 0x00	; 0
    4660:	e6 e2       	ldi	r30, 0x26	; 38
    4662:	f0 e0       	ldi	r31, 0x00	; 0
    4664:	80 81       	ld	r24, Z
    4666:	80 61       	ori	r24, 0x10	; 16
    4668:	8c 93       	st	X, r24

/*Return Conversion Result*/
#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

        *Copy_pu16Result = (ADCL | (ADCH << 8));
    466a:	e4 e2       	ldi	r30, 0x24	; 36
    466c:	f0 e0       	ldi	r31, 0x00	; 0
    466e:	80 81       	ld	r24, Z
    4670:	28 2f       	mov	r18, r24
    4672:	30 e0       	ldi	r19, 0x00	; 0
    4674:	e5 e2       	ldi	r30, 0x25	; 37
    4676:	f0 e0       	ldi	r31, 0x00	; 0
    4678:	80 81       	ld	r24, Z
    467a:	88 2f       	mov	r24, r24
    467c:	90 e0       	ldi	r25, 0x00	; 0
    467e:	98 2f       	mov	r25, r24
    4680:	88 27       	eor	r24, r24
    4682:	82 2b       	or	r24, r18
    4684:	93 2b       	or	r25, r19
    4686:	ef 81       	ldd	r30, Y+7	; 0x07
    4688:	f8 85       	ldd	r31, Y+8	; 0x08
    468a:	91 83       	std	Z+1, r25	; 0x01
    468c:	80 83       	st	Z, r24

#endif
      }

      /*ADC is IDLE*/
      ADC_u8State = IDLE;
    468e:	10 92 48 02 	sts	0x0248, r1
    4692:	05 c0       	rjmp	.+10     	; 0x469e <ADC_u8GetResultSync+0x116>
    }
    else
    {
      Local_u8ErrorState = BUSY_STATE;
    4694:	83 e0       	ldi	r24, 0x03	; 3
    4696:	8d 83       	std	Y+5, r24	; 0x05
    4698:	02 c0       	rjmp	.+4      	; 0x469e <ADC_u8GetResultSync+0x116>
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    469a:	82 e0       	ldi	r24, 0x02	; 2
    469c:	8d 83       	std	Y+5, r24	; 0x05
  }

  return Local_u8ErrorState;
    469e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    46a0:	28 96       	adiw	r28, 0x08	; 8
    46a2:	0f b6       	in	r0, 0x3f	; 63
    46a4:	f8 94       	cli
    46a6:	de bf       	out	0x3e, r29	; 62
    46a8:	0f be       	out	0x3f, r0	; 63
    46aa:	cd bf       	out	0x3d, r28	; 61
    46ac:	cf 91       	pop	r28
    46ae:	df 91       	pop	r29
    46b0:	08 95       	ret

000046b2 <ADC_u8StartConversionAsynch>:
 *      =>Copy_pvNotificationFunc : poiter to function
 *
 * return     : Error status with type u8
 */
u8 ADC_u8StartConversionAsynch(u8 Copy_u8Channel, u16 *Copy_pu16Result, void (*Copy_pvNotificationFunc)(void))
{
    46b2:	df 93       	push	r29
    46b4:	cf 93       	push	r28
    46b6:	00 d0       	rcall	.+0      	; 0x46b8 <ADC_u8StartConversionAsynch+0x6>
    46b8:	00 d0       	rcall	.+0      	; 0x46ba <ADC_u8StartConversionAsynch+0x8>
    46ba:	00 d0       	rcall	.+0      	; 0x46bc <ADC_u8StartConversionAsynch+0xa>
    46bc:	cd b7       	in	r28, 0x3d	; 61
    46be:	de b7       	in	r29, 0x3e	; 62
    46c0:	8a 83       	std	Y+2, r24	; 0x02
    46c2:	7c 83       	std	Y+4, r23	; 0x04
    46c4:	6b 83       	std	Y+3, r22	; 0x03
    46c6:	5e 83       	std	Y+6, r21	; 0x06
    46c8:	4d 83       	std	Y+5, r20	; 0x05
  u8 Local_u8ErrorState = OK;
    46ca:	19 82       	std	Y+1, r1	; 0x01

  if ((Copy_pu16Result != NULL) && (Copy_pvNotificationFunc != NULL))
    46cc:	8b 81       	ldd	r24, Y+3	; 0x03
    46ce:	9c 81       	ldd	r25, Y+4	; 0x04
    46d0:	00 97       	sbiw	r24, 0x00	; 0
    46d2:	e9 f1       	breq	.+122    	; 0x474e <ADC_u8StartConversionAsynch+0x9c>
    46d4:	8d 81       	ldd	r24, Y+5	; 0x05
    46d6:	9e 81       	ldd	r25, Y+6	; 0x06
    46d8:	00 97       	sbiw	r24, 0x00	; 0
    46da:	c9 f1       	breq	.+114    	; 0x474e <ADC_u8StartConversionAsynch+0x9c>
  {
    if (ADC_u8State == IDLE)
    46dc:	80 91 48 02 	lds	r24, 0x0248
    46e0:	88 23       	and	r24, r24
    46e2:	91 f5       	brne	.+100    	; 0x4748 <ADC_u8StartConversionAsynch+0x96>
    {
      /*ADC is now Busy*/
      ADC_u8State = BUSY;
    46e4:	81 e0       	ldi	r24, 0x01	; 1
    46e6:	80 93 48 02 	sts	0x0248, r24

      /*Set ISR State*/
      ADC_u8ISRState = SINGLE_CHANNEL_ASYNCH;
    46ea:	10 92 49 02 	sts	0x0249, r1

      /*Initialize the global result pointer*/
      ADC_pu16AsynchConversionResult = Copy_pu16Result;
    46ee:	8b 81       	ldd	r24, Y+3	; 0x03
    46f0:	9c 81       	ldd	r25, Y+4	; 0x04
    46f2:	90 93 45 02 	sts	0x0245, r25
    46f6:	80 93 44 02 	sts	0x0244, r24

      /*Initialize the global notification function pointer*/
      ADC_pvNotificationFunc = Copy_pvNotificationFunc;
    46fa:	8d 81       	ldd	r24, Y+5	; 0x05
    46fc:	9e 81       	ldd	r25, Y+6	; 0x06
    46fe:	90 93 47 02 	sts	0x0247, r25
    4702:	80 93 46 02 	sts	0x0246, r24

      /*Set required channel*/
      if (Copy_u8Channel <= ADC_GND)
    4706:	8a 81       	ldd	r24, Y+2	; 0x02
    4708:	80 32       	cpi	r24, 0x20	; 32
    470a:	78 f4       	brcc	.+30     	; 0x472a <ADC_u8StartConversionAsynch+0x78>
      {
        ADMUX &= 0b11100000;
    470c:	a7 e2       	ldi	r26, 0x27	; 39
    470e:	b0 e0       	ldi	r27, 0x00	; 0
    4710:	e7 e2       	ldi	r30, 0x27	; 39
    4712:	f0 e0       	ldi	r31, 0x00	; 0
    4714:	80 81       	ld	r24, Z
    4716:	80 7e       	andi	r24, 0xE0	; 224
    4718:	8c 93       	st	X, r24
        ADMUX |= Copy_u8Channel;
    471a:	a7 e2       	ldi	r26, 0x27	; 39
    471c:	b0 e0       	ldi	r27, 0x00	; 0
    471e:	e7 e2       	ldi	r30, 0x27	; 39
    4720:	f0 e0       	ldi	r31, 0x00	; 0
    4722:	90 81       	ld	r25, Z
    4724:	8a 81       	ldd	r24, Y+2	; 0x02
    4726:	89 2b       	or	r24, r25
    4728:	8c 93       	st	X, r24
      }

      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);
    472a:	a6 e2       	ldi	r26, 0x26	; 38
    472c:	b0 e0       	ldi	r27, 0x00	; 0
    472e:	e6 e2       	ldi	r30, 0x26	; 38
    4730:	f0 e0       	ldi	r31, 0x00	; 0
    4732:	80 81       	ld	r24, Z
    4734:	80 64       	ori	r24, 0x40	; 64
    4736:	8c 93       	st	X, r24

      /*ADC Conversion Complete Interrupt Enable*/
      SET_BIT(ADCSRA, ADCSRA_ADIE);
    4738:	a6 e2       	ldi	r26, 0x26	; 38
    473a:	b0 e0       	ldi	r27, 0x00	; 0
    473c:	e6 e2       	ldi	r30, 0x26	; 38
    473e:	f0 e0       	ldi	r31, 0x00	; 0
    4740:	80 81       	ld	r24, Z
    4742:	88 60       	ori	r24, 0x08	; 8
    4744:	8c 93       	st	X, r24
    4746:	05 c0       	rjmp	.+10     	; 0x4752 <ADC_u8StartConversionAsynch+0xa0>
    }
    else
    {
      Local_u8ErrorState = BUSY_STATE;
    4748:	83 e0       	ldi	r24, 0x03	; 3
    474a:	89 83       	std	Y+1, r24	; 0x01
    474c:	02 c0       	rjmp	.+4      	; 0x4752 <ADC_u8StartConversionAsynch+0xa0>
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    474e:	82 e0       	ldi	r24, 0x02	; 2
    4750:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    4752:	89 81       	ldd	r24, Y+1	; 0x01
}
    4754:	26 96       	adiw	r28, 0x06	; 6
    4756:	0f b6       	in	r0, 0x3f	; 63
    4758:	f8 94       	cli
    475a:	de bf       	out	0x3e, r29	; 62
    475c:	0f be       	out	0x3f, r0	; 63
    475e:	cd bf       	out	0x3d, r28	; 61
    4760:	cf 91       	pop	r28
    4762:	df 91       	pop	r29
    4764:	08 95       	ret

00004766 <ADC_u8StartChainAsynch>:
 *
 * return     : Error status with type u8
 */

u8 ADC_u8StartChainAsynch(Chain_t *Copy_Chain)
{
    4766:	df 93       	push	r29
    4768:	cf 93       	push	r28
    476a:	00 d0       	rcall	.+0      	; 0x476c <ADC_u8StartChainAsynch+0x6>
    476c:	0f 92       	push	r0
    476e:	cd b7       	in	r28, 0x3d	; 61
    4770:	de b7       	in	r29, 0x3e	; 62
    4772:	9b 83       	std	Y+3, r25	; 0x03
    4774:	8a 83       	std	Y+2, r24	; 0x02
  u8 Local_u8ErrorState = OK;
    4776:	19 82       	std	Y+1, r1	; 0x01

  if ((Copy_Chain != NULL) && (Copy_Chain->Channel != NULL) && (Copy_Chain->NotificationFunc != NULL) && (Copy_Chain->Result != NULL))
    4778:	8a 81       	ldd	r24, Y+2	; 0x02
    477a:	9b 81       	ldd	r25, Y+3	; 0x03
    477c:	00 97       	sbiw	r24, 0x00	; 0
    477e:	09 f4       	brne	.+2      	; 0x4782 <ADC_u8StartChainAsynch+0x1c>
    4780:	79 c0       	rjmp	.+242    	; 0x4874 <ADC_u8StartChainAsynch+0x10e>
    4782:	ea 81       	ldd	r30, Y+2	; 0x02
    4784:	fb 81       	ldd	r31, Y+3	; 0x03
    4786:	80 81       	ld	r24, Z
    4788:	91 81       	ldd	r25, Z+1	; 0x01
    478a:	00 97       	sbiw	r24, 0x00	; 0
    478c:	09 f4       	brne	.+2      	; 0x4790 <ADC_u8StartChainAsynch+0x2a>
    478e:	72 c0       	rjmp	.+228    	; 0x4874 <ADC_u8StartChainAsynch+0x10e>
    4790:	ea 81       	ldd	r30, Y+2	; 0x02
    4792:	fb 81       	ldd	r31, Y+3	; 0x03
    4794:	85 81       	ldd	r24, Z+5	; 0x05
    4796:	96 81       	ldd	r25, Z+6	; 0x06
    4798:	00 97       	sbiw	r24, 0x00	; 0
    479a:	09 f4       	brne	.+2      	; 0x479e <ADC_u8StartChainAsynch+0x38>
    479c:	6b c0       	rjmp	.+214    	; 0x4874 <ADC_u8StartChainAsynch+0x10e>
    479e:	ea 81       	ldd	r30, Y+2	; 0x02
    47a0:	fb 81       	ldd	r31, Y+3	; 0x03
    47a2:	82 81       	ldd	r24, Z+2	; 0x02
    47a4:	93 81       	ldd	r25, Z+3	; 0x03
    47a6:	00 97       	sbiw	r24, 0x00	; 0
    47a8:	09 f4       	brne	.+2      	; 0x47ac <ADC_u8StartChainAsynch+0x46>
    47aa:	64 c0       	rjmp	.+200    	; 0x4874 <ADC_u8StartChainAsynch+0x10e>
  {
    if (ADC_u8State == IDLE)
    47ac:	80 91 48 02 	lds	r24, 0x0248
    47b0:	88 23       	and	r24, r24
    47b2:	09 f0       	breq	.+2      	; 0x47b6 <ADC_u8StartChainAsynch+0x50>
    47b4:	5c c0       	rjmp	.+184    	; 0x486e <ADC_u8StartChainAsynch+0x108>
    {
      /*ADC is now Busy*/
      ADC_u8State = BUSY;
    47b6:	81 e0       	ldi	r24, 0x01	; 1
    47b8:	80 93 48 02 	sts	0x0248, r24

      /*Set ISR State*/
      ADC_u8ISRState = CHAIN_CHANNEL_ASYNCH;
    47bc:	81 e0       	ldi	r24, 0x01	; 1
    47be:	80 93 49 02 	sts	0x0249, r24

      /*Assign the ADC data globally*/
      ADC_pu16AsynchConversionResult = Copy_Chain->Result;
    47c2:	ea 81       	ldd	r30, Y+2	; 0x02
    47c4:	fb 81       	ldd	r31, Y+3	; 0x03
    47c6:	82 81       	ldd	r24, Z+2	; 0x02
    47c8:	93 81       	ldd	r25, Z+3	; 0x03
    47ca:	90 93 45 02 	sts	0x0245, r25
    47ce:	80 93 44 02 	sts	0x0244, r24
      ADC_pu8ChainChannel = Copy_Chain->Channel;
    47d2:	ea 81       	ldd	r30, Y+2	; 0x02
    47d4:	fb 81       	ldd	r31, Y+3	; 0x03
    47d6:	80 81       	ld	r24, Z
    47d8:	91 81       	ldd	r25, Z+1	; 0x01
    47da:	90 93 4b 02 	sts	0x024B, r25
    47de:	80 93 4a 02 	sts	0x024A, r24
      ADC_u8ChainSize = Copy_Chain->Size;
    47e2:	ea 81       	ldd	r30, Y+2	; 0x02
    47e4:	fb 81       	ldd	r31, Y+3	; 0x03
    47e6:	84 81       	ldd	r24, Z+4	; 0x04
    47e8:	80 93 4c 02 	sts	0x024C, r24
      ADC_pvNotificationFunc = Copy_Chain->NotificationFunc;
    47ec:	ea 81       	ldd	r30, Y+2	; 0x02
    47ee:	fb 81       	ldd	r31, Y+3	; 0x03
    47f0:	85 81       	ldd	r24, Z+5	; 0x05
    47f2:	96 81       	ldd	r25, Z+6	; 0x06
    47f4:	90 93 47 02 	sts	0x0247, r25
    47f8:	80 93 46 02 	sts	0x0246, r24

      /*Set Index to first element*/
      ADC_u8Index = 0;
    47fc:	10 92 4d 02 	sts	0x024D, r1

      /*Set required channel*/
      if (ADC_pu8ChainChannel[ADC_u8Index] <= ADC_GND)
    4800:	20 91 4a 02 	lds	r18, 0x024A
    4804:	30 91 4b 02 	lds	r19, 0x024B
    4808:	80 91 4d 02 	lds	r24, 0x024D
    480c:	88 2f       	mov	r24, r24
    480e:	90 e0       	ldi	r25, 0x00	; 0
    4810:	f9 01       	movw	r30, r18
    4812:	e8 0f       	add	r30, r24
    4814:	f9 1f       	adc	r31, r25
    4816:	80 81       	ld	r24, Z
    4818:	80 32       	cpi	r24, 0x20	; 32
    481a:	d0 f4       	brcc	.+52     	; 0x4850 <ADC_u8StartChainAsynch+0xea>
      {
        ADMUX &= 0b11100000;
    481c:	a7 e2       	ldi	r26, 0x27	; 39
    481e:	b0 e0       	ldi	r27, 0x00	; 0
    4820:	e7 e2       	ldi	r30, 0x27	; 39
    4822:	f0 e0       	ldi	r31, 0x00	; 0
    4824:	80 81       	ld	r24, Z
    4826:	80 7e       	andi	r24, 0xE0	; 224
    4828:	8c 93       	st	X, r24
        ADMUX |= ADC_pu8ChainChannel[ADC_u8Index];
    482a:	a7 e2       	ldi	r26, 0x27	; 39
    482c:	b0 e0       	ldi	r27, 0x00	; 0
    482e:	e7 e2       	ldi	r30, 0x27	; 39
    4830:	f0 e0       	ldi	r31, 0x00	; 0
    4832:	40 81       	ld	r20, Z
    4834:	20 91 4a 02 	lds	r18, 0x024A
    4838:	30 91 4b 02 	lds	r19, 0x024B
    483c:	80 91 4d 02 	lds	r24, 0x024D
    4840:	88 2f       	mov	r24, r24
    4842:	90 e0       	ldi	r25, 0x00	; 0
    4844:	f9 01       	movw	r30, r18
    4846:	e8 0f       	add	r30, r24
    4848:	f9 1f       	adc	r31, r25
    484a:	80 81       	ld	r24, Z
    484c:	84 2b       	or	r24, r20
    484e:	8c 93       	st	X, r24
      }

      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);
    4850:	a6 e2       	ldi	r26, 0x26	; 38
    4852:	b0 e0       	ldi	r27, 0x00	; 0
    4854:	e6 e2       	ldi	r30, 0x26	; 38
    4856:	f0 e0       	ldi	r31, 0x00	; 0
    4858:	80 81       	ld	r24, Z
    485a:	80 64       	ori	r24, 0x40	; 64
    485c:	8c 93       	st	X, r24

      /*ADC Conversion Complete Interrupt Enable*/
      SET_BIT(ADCSRA, ADCSRA_ADIE);
    485e:	a6 e2       	ldi	r26, 0x26	; 38
    4860:	b0 e0       	ldi	r27, 0x00	; 0
    4862:	e6 e2       	ldi	r30, 0x26	; 38
    4864:	f0 e0       	ldi	r31, 0x00	; 0
    4866:	80 81       	ld	r24, Z
    4868:	88 60       	ori	r24, 0x08	; 8
    486a:	8c 93       	st	X, r24
    486c:	05 c0       	rjmp	.+10     	; 0x4878 <ADC_u8StartChainAsynch+0x112>
    }
    else
    {
      Local_u8ErrorState = BUSY_STATE;
    486e:	83 e0       	ldi	r24, 0x03	; 3
    4870:	89 83       	std	Y+1, r24	; 0x01
    4872:	02 c0       	rjmp	.+4      	; 0x4878 <ADC_u8StartChainAsynch+0x112>
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    4874:	82 e0       	ldi	r24, 0x02	; 2
    4876:	89 83       	std	Y+1, r24	; 0x01
  }
  return Local_u8ErrorState;
    4878:	89 81       	ldd	r24, Y+1	; 0x01
}
    487a:	0f 90       	pop	r0
    487c:	0f 90       	pop	r0
    487e:	0f 90       	pop	r0
    4880:	cf 91       	pop	r28
    4882:	df 91       	pop	r29
    4884:	08 95       	ret

00004886 <__vector_16>:
//----------------------------------------------------------------------------------------------------------------------------------------------------

/* ISR for ADC conversion complete */
void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
    4886:	1f 92       	push	r1
    4888:	0f 92       	push	r0
    488a:	0f b6       	in	r0, 0x3f	; 63
    488c:	0f 92       	push	r0
    488e:	11 24       	eor	r1, r1
    4890:	2f 93       	push	r18
    4892:	3f 93       	push	r19
    4894:	4f 93       	push	r20
    4896:	5f 93       	push	r21
    4898:	6f 93       	push	r22
    489a:	7f 93       	push	r23
    489c:	8f 93       	push	r24
    489e:	9f 93       	push	r25
    48a0:	af 93       	push	r26
    48a2:	bf 93       	push	r27
    48a4:	ef 93       	push	r30
    48a6:	ff 93       	push	r31
    48a8:	df 93       	push	r29
    48aa:	cf 93       	push	r28
    48ac:	cd b7       	in	r28, 0x3d	; 61
    48ae:	de b7       	in	r29, 0x3e	; 62
  if (ADC_u8ISRState == SINGLE_CHANNEL_ASYNCH)
    48b0:	80 91 49 02 	lds	r24, 0x0249
    48b4:	88 23       	and	r24, r24
    48b6:	19 f5       	brne	.+70     	; 0x48fe <__vector_16+0x78>
  {
/*Return Conversion Result*/
#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

    *ADC_pu16AsynchConversionResult = (ADCL | (ADCH << 8));
    48b8:	a0 91 44 02 	lds	r26, 0x0244
    48bc:	b0 91 45 02 	lds	r27, 0x0245
    48c0:	e4 e2       	ldi	r30, 0x24	; 36
    48c2:	f0 e0       	ldi	r31, 0x00	; 0
    48c4:	80 81       	ld	r24, Z
    48c6:	28 2f       	mov	r18, r24
    48c8:	30 e0       	ldi	r19, 0x00	; 0
    48ca:	e5 e2       	ldi	r30, 0x25	; 37
    48cc:	f0 e0       	ldi	r31, 0x00	; 0
    48ce:	80 81       	ld	r24, Z
    48d0:	88 2f       	mov	r24, r24
    48d2:	90 e0       	ldi	r25, 0x00	; 0
    48d4:	98 2f       	mov	r25, r24
    48d6:	88 27       	eor	r24, r24
    48d8:	82 2b       	or	r24, r18
    48da:	93 2b       	or	r25, r19
    48dc:	8d 93       	st	X+, r24
    48de:	9c 93       	st	X, r25
#error "Wrong ADC_ADJUSTMENT config"

#endif

    /*ADC is IDLE*/
    ADC_u8State = IDLE;
    48e0:	10 92 48 02 	sts	0x0248, r1

    /*Call Notification Function*/
    ADC_pvNotificationFunc();
    48e4:	e0 91 46 02 	lds	r30, 0x0246
    48e8:	f0 91 47 02 	lds	r31, 0x0247
    48ec:	09 95       	icall

#if ADC_TRIGGERING_SOURCE == ADC_SINGLE_CONVERSION
    /*Disable the Conversion Complete Interrupt*/
    CLR_BIT(ADCSRA, ADCSRA_ADIE);
    48ee:	a6 e2       	ldi	r26, 0x26	; 38
    48f0:	b0 e0       	ldi	r27, 0x00	; 0
    48f2:	e6 e2       	ldi	r30, 0x26	; 38
    48f4:	f0 e0       	ldi	r31, 0x00	; 0
    48f6:	80 81       	ld	r24, Z
    48f8:	87 7f       	andi	r24, 0xF7	; 247
    48fa:	8c 93       	st	X, r24
    48fc:	6c c0       	rjmp	.+216    	; 0x49d6 <__vector_16+0x150>
#endif
  }


  else if (ADC_u8ISRState == CHAIN_CHANNEL_ASYNCH)
    48fe:	80 91 49 02 	lds	r24, 0x0249
    4902:	81 30       	cpi	r24, 0x01	; 1
    4904:	09 f0       	breq	.+2      	; 0x4908 <__vector_16+0x82>
    4906:	67 c0       	rjmp	.+206    	; 0x49d6 <__vector_16+0x150>
  {
/*Return Conversion Result*/

  #if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

      ADC_pu16AsynchConversionResult[ADC_u8Index] = (ADCL | (ADCH << 8));
    4908:	20 91 44 02 	lds	r18, 0x0244
    490c:	30 91 45 02 	lds	r19, 0x0245
    4910:	80 91 4d 02 	lds	r24, 0x024D
    4914:	88 2f       	mov	r24, r24
    4916:	90 e0       	ldi	r25, 0x00	; 0
    4918:	88 0f       	add	r24, r24
    491a:	99 1f       	adc	r25, r25
    491c:	d9 01       	movw	r26, r18
    491e:	a8 0f       	add	r26, r24
    4920:	b9 1f       	adc	r27, r25
    4922:	e4 e2       	ldi	r30, 0x24	; 36
    4924:	f0 e0       	ldi	r31, 0x00	; 0
    4926:	80 81       	ld	r24, Z
    4928:	28 2f       	mov	r18, r24
    492a:	30 e0       	ldi	r19, 0x00	; 0
    492c:	e5 e2       	ldi	r30, 0x25	; 37
    492e:	f0 e0       	ldi	r31, 0x00	; 0
    4930:	80 81       	ld	r24, Z
    4932:	88 2f       	mov	r24, r24
    4934:	90 e0       	ldi	r25, 0x00	; 0
    4936:	98 2f       	mov	r25, r24
    4938:	88 27       	eor	r24, r24
    493a:	82 2b       	or	r24, r18
    493c:	93 2b       	or	r25, r19
    493e:	11 96       	adiw	r26, 0x01	; 1
    4940:	9c 93       	st	X, r25
    4942:	8e 93       	st	-X, r24
  #error "Wrong ADC_ADJUSTMENT config"

  #endif

    /*Increment Data index of the chain*/
    ADC_u8Index++;
    4944:	80 91 4d 02 	lds	r24, 0x024D
    4948:	8f 5f       	subi	r24, 0xFF	; 255
    494a:	80 93 4d 02 	sts	0x024D, r24

    if (ADC_u8Index == ADC_u8ChainSize)
    494e:	90 91 4d 02 	lds	r25, 0x024D
    4952:	80 91 4c 02 	lds	r24, 0x024C
    4956:	98 17       	cp	r25, r24
    4958:	79 f4       	brne	.+30     	; 0x4978 <__vector_16+0xf2>
    {
      /*ADC is IDLE*/
      ADC_u8State = IDLE;
    495a:	10 92 48 02 	sts	0x0248, r1

      /*Call Notification Function*/
      ADC_pvNotificationFunc();
    495e:	e0 91 46 02 	lds	r30, 0x0246
    4962:	f0 91 47 02 	lds	r31, 0x0247
    4966:	09 95       	icall

      /*Disable the Conversion Complete Interrupt*/
      CLR_BIT(ADCSRA, ADCSRA_ADIE);
    4968:	a6 e2       	ldi	r26, 0x26	; 38
    496a:	b0 e0       	ldi	r27, 0x00	; 0
    496c:	e6 e2       	ldi	r30, 0x26	; 38
    496e:	f0 e0       	ldi	r31, 0x00	; 0
    4970:	80 81       	ld	r24, Z
    4972:	87 7f       	andi	r24, 0xF7	; 247
    4974:	8c 93       	st	X, r24
    4976:	2f c0       	rjmp	.+94     	; 0x49d6 <__vector_16+0x150>
    }
    else
    {
      /*Set required channel*/
      if (ADC_pu8ChainChannel[ADC_u8Index] <= ADC_GND)
    4978:	20 91 4a 02 	lds	r18, 0x024A
    497c:	30 91 4b 02 	lds	r19, 0x024B
    4980:	80 91 4d 02 	lds	r24, 0x024D
    4984:	88 2f       	mov	r24, r24
    4986:	90 e0       	ldi	r25, 0x00	; 0
    4988:	f9 01       	movw	r30, r18
    498a:	e8 0f       	add	r30, r24
    498c:	f9 1f       	adc	r31, r25
    498e:	80 81       	ld	r24, Z
    4990:	80 32       	cpi	r24, 0x20	; 32
    4992:	d0 f4       	brcc	.+52     	; 0x49c8 <__vector_16+0x142>
      {
        ADMUX &= 0b11100000;
    4994:	a7 e2       	ldi	r26, 0x27	; 39
    4996:	b0 e0       	ldi	r27, 0x00	; 0
    4998:	e7 e2       	ldi	r30, 0x27	; 39
    499a:	f0 e0       	ldi	r31, 0x00	; 0
    499c:	80 81       	ld	r24, Z
    499e:	80 7e       	andi	r24, 0xE0	; 224
    49a0:	8c 93       	st	X, r24
        ADMUX |= ADC_pu8ChainChannel[ADC_u8Index];
    49a2:	a7 e2       	ldi	r26, 0x27	; 39
    49a4:	b0 e0       	ldi	r27, 0x00	; 0
    49a6:	e7 e2       	ldi	r30, 0x27	; 39
    49a8:	f0 e0       	ldi	r31, 0x00	; 0
    49aa:	40 81       	ld	r20, Z
    49ac:	20 91 4a 02 	lds	r18, 0x024A
    49b0:	30 91 4b 02 	lds	r19, 0x024B
    49b4:	80 91 4d 02 	lds	r24, 0x024D
    49b8:	88 2f       	mov	r24, r24
    49ba:	90 e0       	ldi	r25, 0x00	; 0
    49bc:	f9 01       	movw	r30, r18
    49be:	e8 0f       	add	r30, r24
    49c0:	f9 1f       	adc	r31, r25
    49c2:	80 81       	ld	r24, Z
    49c4:	84 2b       	or	r24, r20
    49c6:	8c 93       	st	X, r24
      }
      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);
    49c8:	a6 e2       	ldi	r26, 0x26	; 38
    49ca:	b0 e0       	ldi	r27, 0x00	; 0
    49cc:	e6 e2       	ldi	r30, 0x26	; 38
    49ce:	f0 e0       	ldi	r31, 0x00	; 0
    49d0:	80 81       	ld	r24, Z
    49d2:	80 64       	ori	r24, 0x40	; 64
    49d4:	8c 93       	st	X, r24
    }
  }
}
    49d6:	cf 91       	pop	r28
    49d8:	df 91       	pop	r29
    49da:	ff 91       	pop	r31
    49dc:	ef 91       	pop	r30
    49de:	bf 91       	pop	r27
    49e0:	af 91       	pop	r26
    49e2:	9f 91       	pop	r25
    49e4:	8f 91       	pop	r24
    49e6:	7f 91       	pop	r23
    49e8:	6f 91       	pop	r22
    49ea:	5f 91       	pop	r21
    49ec:	4f 91       	pop	r20
    49ee:	3f 91       	pop	r19
    49f0:	2f 91       	pop	r18
    49f2:	0f 90       	pop	r0
    49f4:	0f be       	out	0x3f, r0	; 63
    49f6:	0f 90       	pop	r0
    49f8:	1f 90       	pop	r1
    49fa:	18 95       	reti

000049fc <DIO_enumSetPinDirection>:


//void DIO_voidSetPinDirection  ( u8 copy_u8PORT , u8 copy_u8PIN , u8 copy_u8Direction ){

DIO_ErrorStatus DIO_enumSetPinDirection  (u8 copy_u8PORT , u8 copy_u8PIN , u8 copy_u8Direction )
{
    49fc:	df 93       	push	r29
    49fe:	cf 93       	push	r28
    4a00:	cd b7       	in	r28, 0x3d	; 61
    4a02:	de b7       	in	r29, 0x3e	; 62
    4a04:	28 97       	sbiw	r28, 0x08	; 8
    4a06:	0f b6       	in	r0, 0x3f	; 63
    4a08:	f8 94       	cli
    4a0a:	de bf       	out	0x3e, r29	; 62
    4a0c:	0f be       	out	0x3f, r0	; 63
    4a0e:	cd bf       	out	0x3d, r28	; 61
    4a10:	8a 83       	std	Y+2, r24	; 0x02
    4a12:	6b 83       	std	Y+3, r22	; 0x03
    4a14:	4c 83       	std	Y+4, r20	; 0x04
 DIO_ErrorStatus loc_enumState =DIO_OK ;
    4a16:	81 e0       	ldi	r24, 0x01	; 1
    4a18:	89 83       	std	Y+1, r24	; 0x01
 //make sure that the port id and pin id are in valid rane
 if((copy_u8PORT <= DIO_PORTD) && (copy_u8PIN <= DIO_PIN7)){
    4a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    4a1c:	84 30       	cpi	r24, 0x04	; 4
    4a1e:	08 f0       	brcs	.+2      	; 0x4a22 <DIO_enumSetPinDirection+0x26>
    4a20:	f1 c0       	rjmp	.+482    	; 0x4c04 <DIO_enumSetPinDirection+0x208>
    4a22:	8b 81       	ldd	r24, Y+3	; 0x03
    4a24:	88 30       	cpi	r24, 0x08	; 8
    4a26:	08 f0       	brcs	.+2      	; 0x4a2a <DIO_enumSetPinDirection+0x2e>
    4a28:	ed c0       	rjmp	.+474    	; 0x4c04 <DIO_enumSetPinDirection+0x208>

	if(copy_u8Direction == DIO_PIN_OUTPUT ){
    4a2a:	8c 81       	ldd	r24, Y+4	; 0x04
    4a2c:	81 30       	cpi	r24, 0x01	; 1
    4a2e:	09 f0       	breq	.+2      	; 0x4a32 <DIO_enumSetPinDirection+0x36>
    4a30:	6f c0       	rjmp	.+222    	; 0x4b10 <DIO_enumSetPinDirection+0x114>
	switch(copy_u8PORT){
    4a32:	8a 81       	ldd	r24, Y+2	; 0x02
    4a34:	28 2f       	mov	r18, r24
    4a36:	30 e0       	ldi	r19, 0x00	; 0
    4a38:	38 87       	std	Y+8, r19	; 0x08
    4a3a:	2f 83       	std	Y+7, r18	; 0x07
    4a3c:	8f 81       	ldd	r24, Y+7	; 0x07
    4a3e:	98 85       	ldd	r25, Y+8	; 0x08
    4a40:	81 30       	cpi	r24, 0x01	; 1
    4a42:	91 05       	cpc	r25, r1
    4a44:	49 f1       	breq	.+82     	; 0x4a98 <DIO_enumSetPinDirection+0x9c>
    4a46:	2f 81       	ldd	r18, Y+7	; 0x07
    4a48:	38 85       	ldd	r19, Y+8	; 0x08
    4a4a:	22 30       	cpi	r18, 0x02	; 2
    4a4c:	31 05       	cpc	r19, r1
    4a4e:	2c f4       	brge	.+10     	; 0x4a5a <DIO_enumSetPinDirection+0x5e>
    4a50:	8f 81       	ldd	r24, Y+7	; 0x07
    4a52:	98 85       	ldd	r25, Y+8	; 0x08
    4a54:	00 97       	sbiw	r24, 0x00	; 0
    4a56:	61 f0       	breq	.+24     	; 0x4a70 <DIO_enumSetPinDirection+0x74>
    4a58:	d6 c0       	rjmp	.+428    	; 0x4c06 <DIO_enumSetPinDirection+0x20a>
    4a5a:	2f 81       	ldd	r18, Y+7	; 0x07
    4a5c:	38 85       	ldd	r19, Y+8	; 0x08
    4a5e:	22 30       	cpi	r18, 0x02	; 2
    4a60:	31 05       	cpc	r19, r1
    4a62:	71 f1       	breq	.+92     	; 0x4ac0 <DIO_enumSetPinDirection+0xc4>
    4a64:	8f 81       	ldd	r24, Y+7	; 0x07
    4a66:	98 85       	ldd	r25, Y+8	; 0x08
    4a68:	83 30       	cpi	r24, 0x03	; 3
    4a6a:	91 05       	cpc	r25, r1
    4a6c:	e9 f1       	breq	.+122    	; 0x4ae8 <DIO_enumSetPinDirection+0xec>
    4a6e:	cb c0       	rjmp	.+406    	; 0x4c06 <DIO_enumSetPinDirection+0x20a>
	case DIO_PORTA : SET_BIT(DDRA_REG, copy_u8PIN );break;
    4a70:	aa e3       	ldi	r26, 0x3A	; 58
    4a72:	b0 e0       	ldi	r27, 0x00	; 0
    4a74:	ea e3       	ldi	r30, 0x3A	; 58
    4a76:	f0 e0       	ldi	r31, 0x00	; 0
    4a78:	80 81       	ld	r24, Z
    4a7a:	48 2f       	mov	r20, r24
    4a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    4a7e:	28 2f       	mov	r18, r24
    4a80:	30 e0       	ldi	r19, 0x00	; 0
    4a82:	81 e0       	ldi	r24, 0x01	; 1
    4a84:	90 e0       	ldi	r25, 0x00	; 0
    4a86:	02 2e       	mov	r0, r18
    4a88:	02 c0       	rjmp	.+4      	; 0x4a8e <DIO_enumSetPinDirection+0x92>
    4a8a:	88 0f       	add	r24, r24
    4a8c:	99 1f       	adc	r25, r25
    4a8e:	0a 94       	dec	r0
    4a90:	e2 f7       	brpl	.-8      	; 0x4a8a <DIO_enumSetPinDirection+0x8e>
    4a92:	84 2b       	or	r24, r20
    4a94:	8c 93       	st	X, r24
    4a96:	b7 c0       	rjmp	.+366    	; 0x4c06 <DIO_enumSetPinDirection+0x20a>
	case DIO_PORTB : SET_BIT(DDRB_REG, copy_u8PIN );break;
    4a98:	a7 e3       	ldi	r26, 0x37	; 55
    4a9a:	b0 e0       	ldi	r27, 0x00	; 0
    4a9c:	e7 e3       	ldi	r30, 0x37	; 55
    4a9e:	f0 e0       	ldi	r31, 0x00	; 0
    4aa0:	80 81       	ld	r24, Z
    4aa2:	48 2f       	mov	r20, r24
    4aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    4aa6:	28 2f       	mov	r18, r24
    4aa8:	30 e0       	ldi	r19, 0x00	; 0
    4aaa:	81 e0       	ldi	r24, 0x01	; 1
    4aac:	90 e0       	ldi	r25, 0x00	; 0
    4aae:	02 2e       	mov	r0, r18
    4ab0:	02 c0       	rjmp	.+4      	; 0x4ab6 <DIO_enumSetPinDirection+0xba>
    4ab2:	88 0f       	add	r24, r24
    4ab4:	99 1f       	adc	r25, r25
    4ab6:	0a 94       	dec	r0
    4ab8:	e2 f7       	brpl	.-8      	; 0x4ab2 <DIO_enumSetPinDirection+0xb6>
    4aba:	84 2b       	or	r24, r20
    4abc:	8c 93       	st	X, r24
    4abe:	a3 c0       	rjmp	.+326    	; 0x4c06 <DIO_enumSetPinDirection+0x20a>
	case DIO_PORTC : SET_BIT(DDRC_REG, copy_u8PIN );break;
    4ac0:	a4 e3       	ldi	r26, 0x34	; 52
    4ac2:	b0 e0       	ldi	r27, 0x00	; 0
    4ac4:	e4 e3       	ldi	r30, 0x34	; 52
    4ac6:	f0 e0       	ldi	r31, 0x00	; 0
    4ac8:	80 81       	ld	r24, Z
    4aca:	48 2f       	mov	r20, r24
    4acc:	8b 81       	ldd	r24, Y+3	; 0x03
    4ace:	28 2f       	mov	r18, r24
    4ad0:	30 e0       	ldi	r19, 0x00	; 0
    4ad2:	81 e0       	ldi	r24, 0x01	; 1
    4ad4:	90 e0       	ldi	r25, 0x00	; 0
    4ad6:	02 2e       	mov	r0, r18
    4ad8:	02 c0       	rjmp	.+4      	; 0x4ade <DIO_enumSetPinDirection+0xe2>
    4ada:	88 0f       	add	r24, r24
    4adc:	99 1f       	adc	r25, r25
    4ade:	0a 94       	dec	r0
    4ae0:	e2 f7       	brpl	.-8      	; 0x4ada <DIO_enumSetPinDirection+0xde>
    4ae2:	84 2b       	or	r24, r20
    4ae4:	8c 93       	st	X, r24
    4ae6:	8f c0       	rjmp	.+286    	; 0x4c06 <DIO_enumSetPinDirection+0x20a>
	case DIO_PORTD : SET_BIT(DDRD_REG, copy_u8PIN );break;
    4ae8:	a1 e3       	ldi	r26, 0x31	; 49
    4aea:	b0 e0       	ldi	r27, 0x00	; 0
    4aec:	e1 e3       	ldi	r30, 0x31	; 49
    4aee:	f0 e0       	ldi	r31, 0x00	; 0
    4af0:	80 81       	ld	r24, Z
    4af2:	48 2f       	mov	r20, r24
    4af4:	8b 81       	ldd	r24, Y+3	; 0x03
    4af6:	28 2f       	mov	r18, r24
    4af8:	30 e0       	ldi	r19, 0x00	; 0
    4afa:	81 e0       	ldi	r24, 0x01	; 1
    4afc:	90 e0       	ldi	r25, 0x00	; 0
    4afe:	02 2e       	mov	r0, r18
    4b00:	02 c0       	rjmp	.+4      	; 0x4b06 <DIO_enumSetPinDirection+0x10a>
    4b02:	88 0f       	add	r24, r24
    4b04:	99 1f       	adc	r25, r25
    4b06:	0a 94       	dec	r0
    4b08:	e2 f7       	brpl	.-8      	; 0x4b02 <DIO_enumSetPinDirection+0x106>
    4b0a:	84 2b       	or	r24, r20
    4b0c:	8c 93       	st	X, r24
    4b0e:	7b c0       	rjmp	.+246    	; 0x4c06 <DIO_enumSetPinDirection+0x20a>
	}
	}
	else if(copy_u8Direction == DIO_PIN_INPUT ){
    4b10:	8c 81       	ldd	r24, Y+4	; 0x04
    4b12:	88 23       	and	r24, r24
    4b14:	09 f0       	breq	.+2      	; 0x4b18 <DIO_enumSetPinDirection+0x11c>
    4b16:	74 c0       	rjmp	.+232    	; 0x4c00 <DIO_enumSetPinDirection+0x204>

		switch(copy_u8PORT){
    4b18:	8a 81       	ldd	r24, Y+2	; 0x02
    4b1a:	28 2f       	mov	r18, r24
    4b1c:	30 e0       	ldi	r19, 0x00	; 0
    4b1e:	3e 83       	std	Y+6, r19	; 0x06
    4b20:	2d 83       	std	Y+5, r18	; 0x05
    4b22:	8d 81       	ldd	r24, Y+5	; 0x05
    4b24:	9e 81       	ldd	r25, Y+6	; 0x06
    4b26:	81 30       	cpi	r24, 0x01	; 1
    4b28:	91 05       	cpc	r25, r1
    4b2a:	59 f1       	breq	.+86     	; 0x4b82 <DIO_enumSetPinDirection+0x186>
    4b2c:	2d 81       	ldd	r18, Y+5	; 0x05
    4b2e:	3e 81       	ldd	r19, Y+6	; 0x06
    4b30:	22 30       	cpi	r18, 0x02	; 2
    4b32:	31 05       	cpc	r19, r1
    4b34:	2c f4       	brge	.+10     	; 0x4b40 <DIO_enumSetPinDirection+0x144>
    4b36:	8d 81       	ldd	r24, Y+5	; 0x05
    4b38:	9e 81       	ldd	r25, Y+6	; 0x06
    4b3a:	00 97       	sbiw	r24, 0x00	; 0
    4b3c:	69 f0       	breq	.+26     	; 0x4b58 <DIO_enumSetPinDirection+0x15c>
    4b3e:	63 c0       	rjmp	.+198    	; 0x4c06 <DIO_enumSetPinDirection+0x20a>
    4b40:	2d 81       	ldd	r18, Y+5	; 0x05
    4b42:	3e 81       	ldd	r19, Y+6	; 0x06
    4b44:	22 30       	cpi	r18, 0x02	; 2
    4b46:	31 05       	cpc	r19, r1
    4b48:	89 f1       	breq	.+98     	; 0x4bac <DIO_enumSetPinDirection+0x1b0>
    4b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    4b4c:	9e 81       	ldd	r25, Y+6	; 0x06
    4b4e:	83 30       	cpi	r24, 0x03	; 3
    4b50:	91 05       	cpc	r25, r1
    4b52:	09 f4       	brne	.+2      	; 0x4b56 <DIO_enumSetPinDirection+0x15a>
    4b54:	40 c0       	rjmp	.+128    	; 0x4bd6 <DIO_enumSetPinDirection+0x1da>
    4b56:	57 c0       	rjmp	.+174    	; 0x4c06 <DIO_enumSetPinDirection+0x20a>
	case DIO_PORTA : CLR_BIT(DDRA_REG, copy_u8PIN );break;
    4b58:	aa e3       	ldi	r26, 0x3A	; 58
    4b5a:	b0 e0       	ldi	r27, 0x00	; 0
    4b5c:	ea e3       	ldi	r30, 0x3A	; 58
    4b5e:	f0 e0       	ldi	r31, 0x00	; 0
    4b60:	80 81       	ld	r24, Z
    4b62:	48 2f       	mov	r20, r24
    4b64:	8b 81       	ldd	r24, Y+3	; 0x03
    4b66:	28 2f       	mov	r18, r24
    4b68:	30 e0       	ldi	r19, 0x00	; 0
    4b6a:	81 e0       	ldi	r24, 0x01	; 1
    4b6c:	90 e0       	ldi	r25, 0x00	; 0
    4b6e:	02 2e       	mov	r0, r18
    4b70:	02 c0       	rjmp	.+4      	; 0x4b76 <DIO_enumSetPinDirection+0x17a>
    4b72:	88 0f       	add	r24, r24
    4b74:	99 1f       	adc	r25, r25
    4b76:	0a 94       	dec	r0
    4b78:	e2 f7       	brpl	.-8      	; 0x4b72 <DIO_enumSetPinDirection+0x176>
    4b7a:	80 95       	com	r24
    4b7c:	84 23       	and	r24, r20
    4b7e:	8c 93       	st	X, r24
    4b80:	42 c0       	rjmp	.+132    	; 0x4c06 <DIO_enumSetPinDirection+0x20a>
	case DIO_PORTB : CLR_BIT(DDRB_REG, copy_u8PIN );break;
    4b82:	a7 e3       	ldi	r26, 0x37	; 55
    4b84:	b0 e0       	ldi	r27, 0x00	; 0
    4b86:	e7 e3       	ldi	r30, 0x37	; 55
    4b88:	f0 e0       	ldi	r31, 0x00	; 0
    4b8a:	80 81       	ld	r24, Z
    4b8c:	48 2f       	mov	r20, r24
    4b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    4b90:	28 2f       	mov	r18, r24
    4b92:	30 e0       	ldi	r19, 0x00	; 0
    4b94:	81 e0       	ldi	r24, 0x01	; 1
    4b96:	90 e0       	ldi	r25, 0x00	; 0
    4b98:	02 2e       	mov	r0, r18
    4b9a:	02 c0       	rjmp	.+4      	; 0x4ba0 <DIO_enumSetPinDirection+0x1a4>
    4b9c:	88 0f       	add	r24, r24
    4b9e:	99 1f       	adc	r25, r25
    4ba0:	0a 94       	dec	r0
    4ba2:	e2 f7       	brpl	.-8      	; 0x4b9c <DIO_enumSetPinDirection+0x1a0>
    4ba4:	80 95       	com	r24
    4ba6:	84 23       	and	r24, r20
    4ba8:	8c 93       	st	X, r24
    4baa:	2d c0       	rjmp	.+90     	; 0x4c06 <DIO_enumSetPinDirection+0x20a>
	case DIO_PORTC : CLR_BIT(DDRC_REG, copy_u8PIN );break;
    4bac:	a4 e3       	ldi	r26, 0x34	; 52
    4bae:	b0 e0       	ldi	r27, 0x00	; 0
    4bb0:	e4 e3       	ldi	r30, 0x34	; 52
    4bb2:	f0 e0       	ldi	r31, 0x00	; 0
    4bb4:	80 81       	ld	r24, Z
    4bb6:	48 2f       	mov	r20, r24
    4bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    4bba:	28 2f       	mov	r18, r24
    4bbc:	30 e0       	ldi	r19, 0x00	; 0
    4bbe:	81 e0       	ldi	r24, 0x01	; 1
    4bc0:	90 e0       	ldi	r25, 0x00	; 0
    4bc2:	02 2e       	mov	r0, r18
    4bc4:	02 c0       	rjmp	.+4      	; 0x4bca <DIO_enumSetPinDirection+0x1ce>
    4bc6:	88 0f       	add	r24, r24
    4bc8:	99 1f       	adc	r25, r25
    4bca:	0a 94       	dec	r0
    4bcc:	e2 f7       	brpl	.-8      	; 0x4bc6 <DIO_enumSetPinDirection+0x1ca>
    4bce:	80 95       	com	r24
    4bd0:	84 23       	and	r24, r20
    4bd2:	8c 93       	st	X, r24
    4bd4:	18 c0       	rjmp	.+48     	; 0x4c06 <DIO_enumSetPinDirection+0x20a>
	case DIO_PORTD : CLR_BIT(DDRD_REG, copy_u8PIN );break;
    4bd6:	a1 e3       	ldi	r26, 0x31	; 49
    4bd8:	b0 e0       	ldi	r27, 0x00	; 0
    4bda:	e1 e3       	ldi	r30, 0x31	; 49
    4bdc:	f0 e0       	ldi	r31, 0x00	; 0
    4bde:	80 81       	ld	r24, Z
    4be0:	48 2f       	mov	r20, r24
    4be2:	8b 81       	ldd	r24, Y+3	; 0x03
    4be4:	28 2f       	mov	r18, r24
    4be6:	30 e0       	ldi	r19, 0x00	; 0
    4be8:	81 e0       	ldi	r24, 0x01	; 1
    4bea:	90 e0       	ldi	r25, 0x00	; 0
    4bec:	02 2e       	mov	r0, r18
    4bee:	02 c0       	rjmp	.+4      	; 0x4bf4 <DIO_enumSetPinDirection+0x1f8>
    4bf0:	88 0f       	add	r24, r24
    4bf2:	99 1f       	adc	r25, r25
    4bf4:	0a 94       	dec	r0
    4bf6:	e2 f7       	brpl	.-8      	; 0x4bf0 <DIO_enumSetPinDirection+0x1f4>
    4bf8:	80 95       	com	r24
    4bfa:	84 23       	and	r24, r20
    4bfc:	8c 93       	st	X, r24
    4bfe:	03 c0       	rjmp	.+6      	; 0x4c06 <DIO_enumSetPinDirection+0x20a>

	}
}
else {
loc_enumState =DIO_NOK ;
    4c00:	19 82       	std	Y+1, r1	; 0x01
    4c02:	01 c0       	rjmp	.+2      	; 0x4c06 <DIO_enumSetPinDirection+0x20a>
}
}
else {
loc_enumState =DIO_NOK ;
    4c04:	19 82       	std	Y+1, r1	; 0x01
}
return loc_enumState ;
    4c06:	89 81       	ldd	r24, Y+1	; 0x01
}
    4c08:	28 96       	adiw	r28, 0x08	; 8
    4c0a:	0f b6       	in	r0, 0x3f	; 63
    4c0c:	f8 94       	cli
    4c0e:	de bf       	out	0x3e, r29	; 62
    4c10:	0f be       	out	0x3f, r0	; 63
    4c12:	cd bf       	out	0x3d, r28	; 61
    4c14:	cf 91       	pop	r28
    4c16:	df 91       	pop	r29
    4c18:	08 95       	ret

00004c1a <DIO_enumWritePinValue>:

//void DIO_voidWritePinValue      ( u8 copy_u8PORT , u8 copy_u8PIN , u8 copy_u8Value     ){

DIO_ErrorStatus DIO_enumWritePinValue   (u8 copy_u8PORT , u8 copy_u8PIN , u8 copy_u8Value )
{
    4c1a:	df 93       	push	r29
    4c1c:	cf 93       	push	r28
    4c1e:	cd b7       	in	r28, 0x3d	; 61
    4c20:	de b7       	in	r29, 0x3e	; 62
    4c22:	28 97       	sbiw	r28, 0x08	; 8
    4c24:	0f b6       	in	r0, 0x3f	; 63
    4c26:	f8 94       	cli
    4c28:	de bf       	out	0x3e, r29	; 62
    4c2a:	0f be       	out	0x3f, r0	; 63
    4c2c:	cd bf       	out	0x3d, r28	; 61
    4c2e:	8a 83       	std	Y+2, r24	; 0x02
    4c30:	6b 83       	std	Y+3, r22	; 0x03
    4c32:	4c 83       	std	Y+4, r20	; 0x04
DIO_ErrorStatus loc_enumState =DIO_OK ;
    4c34:	81 e0       	ldi	r24, 0x01	; 1
    4c36:	89 83       	std	Y+1, r24	; 0x01
 //make sure that the port id and pin id are in valid rane
 if((copy_u8PORT <= DIO_PORTD) && (copy_u8PIN <= DIO_PIN7))
    4c38:	8a 81       	ldd	r24, Y+2	; 0x02
    4c3a:	84 30       	cpi	r24, 0x04	; 4
    4c3c:	08 f0       	brcs	.+2      	; 0x4c40 <DIO_enumWritePinValue+0x26>
    4c3e:	f1 c0       	rjmp	.+482    	; 0x4e22 <DIO_enumWritePinValue+0x208>
    4c40:	8b 81       	ldd	r24, Y+3	; 0x03
    4c42:	88 30       	cpi	r24, 0x08	; 8
    4c44:	08 f0       	brcs	.+2      	; 0x4c48 <DIO_enumWritePinValue+0x2e>
    4c46:	ed c0       	rjmp	.+474    	; 0x4e22 <DIO_enumWritePinValue+0x208>
 {
	if(copy_u8Value == DIO_PIN_OUTPUT )
    4c48:	8c 81       	ldd	r24, Y+4	; 0x04
    4c4a:	81 30       	cpi	r24, 0x01	; 1
    4c4c:	09 f0       	breq	.+2      	; 0x4c50 <DIO_enumWritePinValue+0x36>
    4c4e:	6f c0       	rjmp	.+222    	; 0x4d2e <DIO_enumWritePinValue+0x114>
	{
	switch(copy_u8PORT)
    4c50:	8a 81       	ldd	r24, Y+2	; 0x02
    4c52:	28 2f       	mov	r18, r24
    4c54:	30 e0       	ldi	r19, 0x00	; 0
    4c56:	38 87       	std	Y+8, r19	; 0x08
    4c58:	2f 83       	std	Y+7, r18	; 0x07
    4c5a:	8f 81       	ldd	r24, Y+7	; 0x07
    4c5c:	98 85       	ldd	r25, Y+8	; 0x08
    4c5e:	81 30       	cpi	r24, 0x01	; 1
    4c60:	91 05       	cpc	r25, r1
    4c62:	49 f1       	breq	.+82     	; 0x4cb6 <DIO_enumWritePinValue+0x9c>
    4c64:	2f 81       	ldd	r18, Y+7	; 0x07
    4c66:	38 85       	ldd	r19, Y+8	; 0x08
    4c68:	22 30       	cpi	r18, 0x02	; 2
    4c6a:	31 05       	cpc	r19, r1
    4c6c:	2c f4       	brge	.+10     	; 0x4c78 <DIO_enumWritePinValue+0x5e>
    4c6e:	8f 81       	ldd	r24, Y+7	; 0x07
    4c70:	98 85       	ldd	r25, Y+8	; 0x08
    4c72:	00 97       	sbiw	r24, 0x00	; 0
    4c74:	61 f0       	breq	.+24     	; 0x4c8e <DIO_enumWritePinValue+0x74>
    4c76:	d6 c0       	rjmp	.+428    	; 0x4e24 <DIO_enumWritePinValue+0x20a>
    4c78:	2f 81       	ldd	r18, Y+7	; 0x07
    4c7a:	38 85       	ldd	r19, Y+8	; 0x08
    4c7c:	22 30       	cpi	r18, 0x02	; 2
    4c7e:	31 05       	cpc	r19, r1
    4c80:	71 f1       	breq	.+92     	; 0x4cde <DIO_enumWritePinValue+0xc4>
    4c82:	8f 81       	ldd	r24, Y+7	; 0x07
    4c84:	98 85       	ldd	r25, Y+8	; 0x08
    4c86:	83 30       	cpi	r24, 0x03	; 3
    4c88:	91 05       	cpc	r25, r1
    4c8a:	e9 f1       	breq	.+122    	; 0x4d06 <DIO_enumWritePinValue+0xec>
    4c8c:	cb c0       	rjmp	.+406    	; 0x4e24 <DIO_enumWritePinValue+0x20a>
	{
	case DIO_PORTA : SET_BIT(PORTA_REG , copy_u8PIN );break;
    4c8e:	ab e3       	ldi	r26, 0x3B	; 59
    4c90:	b0 e0       	ldi	r27, 0x00	; 0
    4c92:	eb e3       	ldi	r30, 0x3B	; 59
    4c94:	f0 e0       	ldi	r31, 0x00	; 0
    4c96:	80 81       	ld	r24, Z
    4c98:	48 2f       	mov	r20, r24
    4c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    4c9c:	28 2f       	mov	r18, r24
    4c9e:	30 e0       	ldi	r19, 0x00	; 0
    4ca0:	81 e0       	ldi	r24, 0x01	; 1
    4ca2:	90 e0       	ldi	r25, 0x00	; 0
    4ca4:	02 2e       	mov	r0, r18
    4ca6:	02 c0       	rjmp	.+4      	; 0x4cac <DIO_enumWritePinValue+0x92>
    4ca8:	88 0f       	add	r24, r24
    4caa:	99 1f       	adc	r25, r25
    4cac:	0a 94       	dec	r0
    4cae:	e2 f7       	brpl	.-8      	; 0x4ca8 <DIO_enumWritePinValue+0x8e>
    4cb0:	84 2b       	or	r24, r20
    4cb2:	8c 93       	st	X, r24
    4cb4:	b7 c0       	rjmp	.+366    	; 0x4e24 <DIO_enumWritePinValue+0x20a>
	case DIO_PORTB : SET_BIT(PORTB_REG, copy_u8PIN );break;
    4cb6:	a8 e3       	ldi	r26, 0x38	; 56
    4cb8:	b0 e0       	ldi	r27, 0x00	; 0
    4cba:	e8 e3       	ldi	r30, 0x38	; 56
    4cbc:	f0 e0       	ldi	r31, 0x00	; 0
    4cbe:	80 81       	ld	r24, Z
    4cc0:	48 2f       	mov	r20, r24
    4cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    4cc4:	28 2f       	mov	r18, r24
    4cc6:	30 e0       	ldi	r19, 0x00	; 0
    4cc8:	81 e0       	ldi	r24, 0x01	; 1
    4cca:	90 e0       	ldi	r25, 0x00	; 0
    4ccc:	02 2e       	mov	r0, r18
    4cce:	02 c0       	rjmp	.+4      	; 0x4cd4 <DIO_enumWritePinValue+0xba>
    4cd0:	88 0f       	add	r24, r24
    4cd2:	99 1f       	adc	r25, r25
    4cd4:	0a 94       	dec	r0
    4cd6:	e2 f7       	brpl	.-8      	; 0x4cd0 <DIO_enumWritePinValue+0xb6>
    4cd8:	84 2b       	or	r24, r20
    4cda:	8c 93       	st	X, r24
    4cdc:	a3 c0       	rjmp	.+326    	; 0x4e24 <DIO_enumWritePinValue+0x20a>
	case DIO_PORTC : SET_BIT(PORTC_REG, copy_u8PIN );break;
    4cde:	a5 e3       	ldi	r26, 0x35	; 53
    4ce0:	b0 e0       	ldi	r27, 0x00	; 0
    4ce2:	e5 e3       	ldi	r30, 0x35	; 53
    4ce4:	f0 e0       	ldi	r31, 0x00	; 0
    4ce6:	80 81       	ld	r24, Z
    4ce8:	48 2f       	mov	r20, r24
    4cea:	8b 81       	ldd	r24, Y+3	; 0x03
    4cec:	28 2f       	mov	r18, r24
    4cee:	30 e0       	ldi	r19, 0x00	; 0
    4cf0:	81 e0       	ldi	r24, 0x01	; 1
    4cf2:	90 e0       	ldi	r25, 0x00	; 0
    4cf4:	02 2e       	mov	r0, r18
    4cf6:	02 c0       	rjmp	.+4      	; 0x4cfc <DIO_enumWritePinValue+0xe2>
    4cf8:	88 0f       	add	r24, r24
    4cfa:	99 1f       	adc	r25, r25
    4cfc:	0a 94       	dec	r0
    4cfe:	e2 f7       	brpl	.-8      	; 0x4cf8 <DIO_enumWritePinValue+0xde>
    4d00:	84 2b       	or	r24, r20
    4d02:	8c 93       	st	X, r24
    4d04:	8f c0       	rjmp	.+286    	; 0x4e24 <DIO_enumWritePinValue+0x20a>
	case DIO_PORTD : SET_BIT(PORTD_REG, copy_u8PIN );break;
    4d06:	a2 e3       	ldi	r26, 0x32	; 50
    4d08:	b0 e0       	ldi	r27, 0x00	; 0
    4d0a:	e2 e3       	ldi	r30, 0x32	; 50
    4d0c:	f0 e0       	ldi	r31, 0x00	; 0
    4d0e:	80 81       	ld	r24, Z
    4d10:	48 2f       	mov	r20, r24
    4d12:	8b 81       	ldd	r24, Y+3	; 0x03
    4d14:	28 2f       	mov	r18, r24
    4d16:	30 e0       	ldi	r19, 0x00	; 0
    4d18:	81 e0       	ldi	r24, 0x01	; 1
    4d1a:	90 e0       	ldi	r25, 0x00	; 0
    4d1c:	02 2e       	mov	r0, r18
    4d1e:	02 c0       	rjmp	.+4      	; 0x4d24 <DIO_enumWritePinValue+0x10a>
    4d20:	88 0f       	add	r24, r24
    4d22:	99 1f       	adc	r25, r25
    4d24:	0a 94       	dec	r0
    4d26:	e2 f7       	brpl	.-8      	; 0x4d20 <DIO_enumWritePinValue+0x106>
    4d28:	84 2b       	or	r24, r20
    4d2a:	8c 93       	st	X, r24
    4d2c:	7b c0       	rjmp	.+246    	; 0x4e24 <DIO_enumWritePinValue+0x20a>
	}
	}
	else if(copy_u8Value == DIO_PIN_INPUT ){
    4d2e:	8c 81       	ldd	r24, Y+4	; 0x04
    4d30:	88 23       	and	r24, r24
    4d32:	09 f0       	breq	.+2      	; 0x4d36 <DIO_enumWritePinValue+0x11c>
    4d34:	74 c0       	rjmp	.+232    	; 0x4e1e <DIO_enumWritePinValue+0x204>

		switch(copy_u8PORT){
    4d36:	8a 81       	ldd	r24, Y+2	; 0x02
    4d38:	28 2f       	mov	r18, r24
    4d3a:	30 e0       	ldi	r19, 0x00	; 0
    4d3c:	3e 83       	std	Y+6, r19	; 0x06
    4d3e:	2d 83       	std	Y+5, r18	; 0x05
    4d40:	8d 81       	ldd	r24, Y+5	; 0x05
    4d42:	9e 81       	ldd	r25, Y+6	; 0x06
    4d44:	81 30       	cpi	r24, 0x01	; 1
    4d46:	91 05       	cpc	r25, r1
    4d48:	59 f1       	breq	.+86     	; 0x4da0 <DIO_enumWritePinValue+0x186>
    4d4a:	2d 81       	ldd	r18, Y+5	; 0x05
    4d4c:	3e 81       	ldd	r19, Y+6	; 0x06
    4d4e:	22 30       	cpi	r18, 0x02	; 2
    4d50:	31 05       	cpc	r19, r1
    4d52:	2c f4       	brge	.+10     	; 0x4d5e <DIO_enumWritePinValue+0x144>
    4d54:	8d 81       	ldd	r24, Y+5	; 0x05
    4d56:	9e 81       	ldd	r25, Y+6	; 0x06
    4d58:	00 97       	sbiw	r24, 0x00	; 0
    4d5a:	69 f0       	breq	.+26     	; 0x4d76 <DIO_enumWritePinValue+0x15c>
    4d5c:	63 c0       	rjmp	.+198    	; 0x4e24 <DIO_enumWritePinValue+0x20a>
    4d5e:	2d 81       	ldd	r18, Y+5	; 0x05
    4d60:	3e 81       	ldd	r19, Y+6	; 0x06
    4d62:	22 30       	cpi	r18, 0x02	; 2
    4d64:	31 05       	cpc	r19, r1
    4d66:	89 f1       	breq	.+98     	; 0x4dca <DIO_enumWritePinValue+0x1b0>
    4d68:	8d 81       	ldd	r24, Y+5	; 0x05
    4d6a:	9e 81       	ldd	r25, Y+6	; 0x06
    4d6c:	83 30       	cpi	r24, 0x03	; 3
    4d6e:	91 05       	cpc	r25, r1
    4d70:	09 f4       	brne	.+2      	; 0x4d74 <DIO_enumWritePinValue+0x15a>
    4d72:	40 c0       	rjmp	.+128    	; 0x4df4 <DIO_enumWritePinValue+0x1da>
    4d74:	57 c0       	rjmp	.+174    	; 0x4e24 <DIO_enumWritePinValue+0x20a>
	case DIO_PORTA : CLR_BIT(PORTA_REG , copy_u8PIN );break;
    4d76:	ab e3       	ldi	r26, 0x3B	; 59
    4d78:	b0 e0       	ldi	r27, 0x00	; 0
    4d7a:	eb e3       	ldi	r30, 0x3B	; 59
    4d7c:	f0 e0       	ldi	r31, 0x00	; 0
    4d7e:	80 81       	ld	r24, Z
    4d80:	48 2f       	mov	r20, r24
    4d82:	8b 81       	ldd	r24, Y+3	; 0x03
    4d84:	28 2f       	mov	r18, r24
    4d86:	30 e0       	ldi	r19, 0x00	; 0
    4d88:	81 e0       	ldi	r24, 0x01	; 1
    4d8a:	90 e0       	ldi	r25, 0x00	; 0
    4d8c:	02 2e       	mov	r0, r18
    4d8e:	02 c0       	rjmp	.+4      	; 0x4d94 <DIO_enumWritePinValue+0x17a>
    4d90:	88 0f       	add	r24, r24
    4d92:	99 1f       	adc	r25, r25
    4d94:	0a 94       	dec	r0
    4d96:	e2 f7       	brpl	.-8      	; 0x4d90 <DIO_enumWritePinValue+0x176>
    4d98:	80 95       	com	r24
    4d9a:	84 23       	and	r24, r20
    4d9c:	8c 93       	st	X, r24
    4d9e:	42 c0       	rjmp	.+132    	; 0x4e24 <DIO_enumWritePinValue+0x20a>
	case DIO_PORTB : CLR_BIT(PORTB_REG, copy_u8PIN );break;
    4da0:	a8 e3       	ldi	r26, 0x38	; 56
    4da2:	b0 e0       	ldi	r27, 0x00	; 0
    4da4:	e8 e3       	ldi	r30, 0x38	; 56
    4da6:	f0 e0       	ldi	r31, 0x00	; 0
    4da8:	80 81       	ld	r24, Z
    4daa:	48 2f       	mov	r20, r24
    4dac:	8b 81       	ldd	r24, Y+3	; 0x03
    4dae:	28 2f       	mov	r18, r24
    4db0:	30 e0       	ldi	r19, 0x00	; 0
    4db2:	81 e0       	ldi	r24, 0x01	; 1
    4db4:	90 e0       	ldi	r25, 0x00	; 0
    4db6:	02 2e       	mov	r0, r18
    4db8:	02 c0       	rjmp	.+4      	; 0x4dbe <DIO_enumWritePinValue+0x1a4>
    4dba:	88 0f       	add	r24, r24
    4dbc:	99 1f       	adc	r25, r25
    4dbe:	0a 94       	dec	r0
    4dc0:	e2 f7       	brpl	.-8      	; 0x4dba <DIO_enumWritePinValue+0x1a0>
    4dc2:	80 95       	com	r24
    4dc4:	84 23       	and	r24, r20
    4dc6:	8c 93       	st	X, r24
    4dc8:	2d c0       	rjmp	.+90     	; 0x4e24 <DIO_enumWritePinValue+0x20a>
	case DIO_PORTC : CLR_BIT(PORTC_REG, copy_u8PIN );break;
    4dca:	a5 e3       	ldi	r26, 0x35	; 53
    4dcc:	b0 e0       	ldi	r27, 0x00	; 0
    4dce:	e5 e3       	ldi	r30, 0x35	; 53
    4dd0:	f0 e0       	ldi	r31, 0x00	; 0
    4dd2:	80 81       	ld	r24, Z
    4dd4:	48 2f       	mov	r20, r24
    4dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    4dd8:	28 2f       	mov	r18, r24
    4dda:	30 e0       	ldi	r19, 0x00	; 0
    4ddc:	81 e0       	ldi	r24, 0x01	; 1
    4dde:	90 e0       	ldi	r25, 0x00	; 0
    4de0:	02 2e       	mov	r0, r18
    4de2:	02 c0       	rjmp	.+4      	; 0x4de8 <DIO_enumWritePinValue+0x1ce>
    4de4:	88 0f       	add	r24, r24
    4de6:	99 1f       	adc	r25, r25
    4de8:	0a 94       	dec	r0
    4dea:	e2 f7       	brpl	.-8      	; 0x4de4 <DIO_enumWritePinValue+0x1ca>
    4dec:	80 95       	com	r24
    4dee:	84 23       	and	r24, r20
    4df0:	8c 93       	st	X, r24
    4df2:	18 c0       	rjmp	.+48     	; 0x4e24 <DIO_enumWritePinValue+0x20a>
	case DIO_PORTD : CLR_BIT(PORTD_REG, copy_u8PIN );break;
    4df4:	a2 e3       	ldi	r26, 0x32	; 50
    4df6:	b0 e0       	ldi	r27, 0x00	; 0
    4df8:	e2 e3       	ldi	r30, 0x32	; 50
    4dfa:	f0 e0       	ldi	r31, 0x00	; 0
    4dfc:	80 81       	ld	r24, Z
    4dfe:	48 2f       	mov	r20, r24
    4e00:	8b 81       	ldd	r24, Y+3	; 0x03
    4e02:	28 2f       	mov	r18, r24
    4e04:	30 e0       	ldi	r19, 0x00	; 0
    4e06:	81 e0       	ldi	r24, 0x01	; 1
    4e08:	90 e0       	ldi	r25, 0x00	; 0
    4e0a:	02 2e       	mov	r0, r18
    4e0c:	02 c0       	rjmp	.+4      	; 0x4e12 <DIO_enumWritePinValue+0x1f8>
    4e0e:	88 0f       	add	r24, r24
    4e10:	99 1f       	adc	r25, r25
    4e12:	0a 94       	dec	r0
    4e14:	e2 f7       	brpl	.-8      	; 0x4e0e <DIO_enumWritePinValue+0x1f4>
    4e16:	80 95       	com	r24
    4e18:	84 23       	and	r24, r20
    4e1a:	8c 93       	st	X, r24
    4e1c:	03 c0       	rjmp	.+6      	; 0x4e24 <DIO_enumWritePinValue+0x20a>
		}
	}
else {
loc_enumState =DIO_NOK ;
    4e1e:	19 82       	std	Y+1, r1	; 0x01
    4e20:	01 c0       	rjmp	.+2      	; 0x4e24 <DIO_enumWritePinValue+0x20a>
}
	}
else {
loc_enumState =DIO_NOK ;
    4e22:	19 82       	std	Y+1, r1	; 0x01
}
return loc_enumState ;
    4e24:	89 81       	ldd	r24, Y+1	; 0x01
}
    4e26:	28 96       	adiw	r28, 0x08	; 8
    4e28:	0f b6       	in	r0, 0x3f	; 63
    4e2a:	f8 94       	cli
    4e2c:	de bf       	out	0x3e, r29	; 62
    4e2e:	0f be       	out	0x3f, r0	; 63
    4e30:	cd bf       	out	0x3d, r28	; 61
    4e32:	cf 91       	pop	r28
    4e34:	df 91       	pop	r29
    4e36:	08 95       	ret

00004e38 <DIO_enumReadPinValue>:

//u8 void DIO_voidGetPinValue   ( u8 copy_u8PORT , u8 copy_u8PIN


DIO_ErrorStatus DIO_enumReadPinValue  (u8 copy_u8PORT , u8 copy_u8PIN , u8* copy_ptru8Data ){
    4e38:	df 93       	push	r29
    4e3a:	cf 93       	push	r28
    4e3c:	cd b7       	in	r28, 0x3d	; 61
    4e3e:	de b7       	in	r29, 0x3e	; 62
    4e40:	27 97       	sbiw	r28, 0x07	; 7
    4e42:	0f b6       	in	r0, 0x3f	; 63
    4e44:	f8 94       	cli
    4e46:	de bf       	out	0x3e, r29	; 62
    4e48:	0f be       	out	0x3f, r0	; 63
    4e4a:	cd bf       	out	0x3d, r28	; 61
    4e4c:	8a 83       	std	Y+2, r24	; 0x02
    4e4e:	6b 83       	std	Y+3, r22	; 0x03
    4e50:	5d 83       	std	Y+5, r21	; 0x05
    4e52:	4c 83       	std	Y+4, r20	; 0x04
DIO_ErrorStatus loc_enumState =DIO_OK ;
    4e54:	81 e0       	ldi	r24, 0x01	; 1
    4e56:	89 83       	std	Y+1, r24	; 0x01
 //make sure that the port id and pin id are in valid rane
 if((copy_u8PORT <= DIO_PORTD) && (copy_u8PIN <= DIO_PIN7)){
    4e58:	8a 81       	ldd	r24, Y+2	; 0x02
    4e5a:	84 30       	cpi	r24, 0x04	; 4
    4e5c:	08 f0       	brcs	.+2      	; 0x4e60 <DIO_enumReadPinValue+0x28>
    4e5e:	a6 c0       	rjmp	.+332    	; 0x4fac <DIO_enumReadPinValue+0x174>
    4e60:	8b 81       	ldd	r24, Y+3	; 0x03
    4e62:	88 30       	cpi	r24, 0x08	; 8
    4e64:	08 f0       	brcs	.+2      	; 0x4e68 <DIO_enumReadPinValue+0x30>
    4e66:	a2 c0       	rjmp	.+324    	; 0x4fac <DIO_enumReadPinValue+0x174>
//u8 loc_u8status=0;
switch(copy_u8PORT){
    4e68:	8a 81       	ldd	r24, Y+2	; 0x02
    4e6a:	28 2f       	mov	r18, r24
    4e6c:	30 e0       	ldi	r19, 0x00	; 0
    4e6e:	3f 83       	std	Y+7, r19	; 0x07
    4e70:	2e 83       	std	Y+6, r18	; 0x06
    4e72:	4e 81       	ldd	r20, Y+6	; 0x06
    4e74:	5f 81       	ldd	r21, Y+7	; 0x07
    4e76:	41 30       	cpi	r20, 0x01	; 1
    4e78:	51 05       	cpc	r21, r1
    4e7a:	c1 f1       	breq	.+112    	; 0x4eec <DIO_enumReadPinValue+0xb4>
    4e7c:	8e 81       	ldd	r24, Y+6	; 0x06
    4e7e:	9f 81       	ldd	r25, Y+7	; 0x07
    4e80:	82 30       	cpi	r24, 0x02	; 2
    4e82:	91 05       	cpc	r25, r1
    4e84:	34 f4       	brge	.+12     	; 0x4e92 <DIO_enumReadPinValue+0x5a>
    4e86:	2e 81       	ldd	r18, Y+6	; 0x06
    4e88:	3f 81       	ldd	r19, Y+7	; 0x07
    4e8a:	21 15       	cp	r18, r1
    4e8c:	31 05       	cpc	r19, r1
    4e8e:	71 f0       	breq	.+28     	; 0x4eac <DIO_enumReadPinValue+0x74>
    4e90:	8e c0       	rjmp	.+284    	; 0x4fae <DIO_enumReadPinValue+0x176>
    4e92:	4e 81       	ldd	r20, Y+6	; 0x06
    4e94:	5f 81       	ldd	r21, Y+7	; 0x07
    4e96:	42 30       	cpi	r20, 0x02	; 2
    4e98:	51 05       	cpc	r21, r1
    4e9a:	09 f4       	brne	.+2      	; 0x4e9e <DIO_enumReadPinValue+0x66>
    4e9c:	47 c0       	rjmp	.+142    	; 0x4f2c <DIO_enumReadPinValue+0xf4>
    4e9e:	8e 81       	ldd	r24, Y+6	; 0x06
    4ea0:	9f 81       	ldd	r25, Y+7	; 0x07
    4ea2:	83 30       	cpi	r24, 0x03	; 3
    4ea4:	91 05       	cpc	r25, r1
    4ea6:	09 f4       	brne	.+2      	; 0x4eaa <DIO_enumReadPinValue+0x72>
    4ea8:	61 c0       	rjmp	.+194    	; 0x4f6c <DIO_enumReadPinValue+0x134>
    4eaa:	81 c0       	rjmp	.+258    	; 0x4fae <DIO_enumReadPinValue+0x176>
	case DIO_PORTA : * copy_ptru8Data= GET_BIT(PINA_REG, copy_u8PIN );break;
    4eac:	e9 e3       	ldi	r30, 0x39	; 57
    4eae:	f0 e0       	ldi	r31, 0x00	; 0
    4eb0:	80 81       	ld	r24, Z
    4eb2:	48 2f       	mov	r20, r24
    4eb4:	50 e0       	ldi	r21, 0x00	; 0
    4eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    4eb8:	28 2f       	mov	r18, r24
    4eba:	30 e0       	ldi	r19, 0x00	; 0
    4ebc:	81 e0       	ldi	r24, 0x01	; 1
    4ebe:	90 e0       	ldi	r25, 0x00	; 0
    4ec0:	02 c0       	rjmp	.+4      	; 0x4ec6 <DIO_enumReadPinValue+0x8e>
    4ec2:	88 0f       	add	r24, r24
    4ec4:	99 1f       	adc	r25, r25
    4ec6:	2a 95       	dec	r18
    4ec8:	e2 f7       	brpl	.-8      	; 0x4ec2 <DIO_enumReadPinValue+0x8a>
    4eca:	9a 01       	movw	r18, r20
    4ecc:	28 23       	and	r18, r24
    4ece:	39 23       	and	r19, r25
    4ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    4ed2:	88 2f       	mov	r24, r24
    4ed4:	90 e0       	ldi	r25, 0x00	; 0
    4ed6:	a9 01       	movw	r20, r18
    4ed8:	02 c0       	rjmp	.+4      	; 0x4ede <DIO_enumReadPinValue+0xa6>
    4eda:	55 95       	asr	r21
    4edc:	47 95       	ror	r20
    4ede:	8a 95       	dec	r24
    4ee0:	e2 f7       	brpl	.-8      	; 0x4eda <DIO_enumReadPinValue+0xa2>
    4ee2:	ca 01       	movw	r24, r20
    4ee4:	ec 81       	ldd	r30, Y+4	; 0x04
    4ee6:	fd 81       	ldd	r31, Y+5	; 0x05
    4ee8:	80 83       	st	Z, r24
    4eea:	61 c0       	rjmp	.+194    	; 0x4fae <DIO_enumReadPinValue+0x176>
	case DIO_PORTB : * copy_ptru8Data= GET_BIT(PINB_REG, copy_u8PIN );break;
    4eec:	e6 e3       	ldi	r30, 0x36	; 54
    4eee:	f0 e0       	ldi	r31, 0x00	; 0
    4ef0:	80 81       	ld	r24, Z
    4ef2:	48 2f       	mov	r20, r24
    4ef4:	50 e0       	ldi	r21, 0x00	; 0
    4ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    4ef8:	28 2f       	mov	r18, r24
    4efa:	30 e0       	ldi	r19, 0x00	; 0
    4efc:	81 e0       	ldi	r24, 0x01	; 1
    4efe:	90 e0       	ldi	r25, 0x00	; 0
    4f00:	02 c0       	rjmp	.+4      	; 0x4f06 <DIO_enumReadPinValue+0xce>
    4f02:	88 0f       	add	r24, r24
    4f04:	99 1f       	adc	r25, r25
    4f06:	2a 95       	dec	r18
    4f08:	e2 f7       	brpl	.-8      	; 0x4f02 <DIO_enumReadPinValue+0xca>
    4f0a:	9a 01       	movw	r18, r20
    4f0c:	28 23       	and	r18, r24
    4f0e:	39 23       	and	r19, r25
    4f10:	8b 81       	ldd	r24, Y+3	; 0x03
    4f12:	88 2f       	mov	r24, r24
    4f14:	90 e0       	ldi	r25, 0x00	; 0
    4f16:	a9 01       	movw	r20, r18
    4f18:	02 c0       	rjmp	.+4      	; 0x4f1e <DIO_enumReadPinValue+0xe6>
    4f1a:	55 95       	asr	r21
    4f1c:	47 95       	ror	r20
    4f1e:	8a 95       	dec	r24
    4f20:	e2 f7       	brpl	.-8      	; 0x4f1a <DIO_enumReadPinValue+0xe2>
    4f22:	ca 01       	movw	r24, r20
    4f24:	ec 81       	ldd	r30, Y+4	; 0x04
    4f26:	fd 81       	ldd	r31, Y+5	; 0x05
    4f28:	80 83       	st	Z, r24
    4f2a:	41 c0       	rjmp	.+130    	; 0x4fae <DIO_enumReadPinValue+0x176>
	case DIO_PORTC : * copy_ptru8Data= GET_BIT(PINC_REG, copy_u8PIN );break;
    4f2c:	e3 e3       	ldi	r30, 0x33	; 51
    4f2e:	f0 e0       	ldi	r31, 0x00	; 0
    4f30:	80 81       	ld	r24, Z
    4f32:	48 2f       	mov	r20, r24
    4f34:	50 e0       	ldi	r21, 0x00	; 0
    4f36:	8b 81       	ldd	r24, Y+3	; 0x03
    4f38:	28 2f       	mov	r18, r24
    4f3a:	30 e0       	ldi	r19, 0x00	; 0
    4f3c:	81 e0       	ldi	r24, 0x01	; 1
    4f3e:	90 e0       	ldi	r25, 0x00	; 0
    4f40:	02 c0       	rjmp	.+4      	; 0x4f46 <DIO_enumReadPinValue+0x10e>
    4f42:	88 0f       	add	r24, r24
    4f44:	99 1f       	adc	r25, r25
    4f46:	2a 95       	dec	r18
    4f48:	e2 f7       	brpl	.-8      	; 0x4f42 <DIO_enumReadPinValue+0x10a>
    4f4a:	9a 01       	movw	r18, r20
    4f4c:	28 23       	and	r18, r24
    4f4e:	39 23       	and	r19, r25
    4f50:	8b 81       	ldd	r24, Y+3	; 0x03
    4f52:	88 2f       	mov	r24, r24
    4f54:	90 e0       	ldi	r25, 0x00	; 0
    4f56:	a9 01       	movw	r20, r18
    4f58:	02 c0       	rjmp	.+4      	; 0x4f5e <DIO_enumReadPinValue+0x126>
    4f5a:	55 95       	asr	r21
    4f5c:	47 95       	ror	r20
    4f5e:	8a 95       	dec	r24
    4f60:	e2 f7       	brpl	.-8      	; 0x4f5a <DIO_enumReadPinValue+0x122>
    4f62:	ca 01       	movw	r24, r20
    4f64:	ec 81       	ldd	r30, Y+4	; 0x04
    4f66:	fd 81       	ldd	r31, Y+5	; 0x05
    4f68:	80 83       	st	Z, r24
    4f6a:	21 c0       	rjmp	.+66     	; 0x4fae <DIO_enumReadPinValue+0x176>
	case DIO_PORTD : * copy_ptru8Data= GET_BIT(PIND_REG, copy_u8PIN );break;
    4f6c:	e0 e3       	ldi	r30, 0x30	; 48
    4f6e:	f0 e0       	ldi	r31, 0x00	; 0
    4f70:	80 81       	ld	r24, Z
    4f72:	48 2f       	mov	r20, r24
    4f74:	50 e0       	ldi	r21, 0x00	; 0
    4f76:	8b 81       	ldd	r24, Y+3	; 0x03
    4f78:	28 2f       	mov	r18, r24
    4f7a:	30 e0       	ldi	r19, 0x00	; 0
    4f7c:	81 e0       	ldi	r24, 0x01	; 1
    4f7e:	90 e0       	ldi	r25, 0x00	; 0
    4f80:	02 c0       	rjmp	.+4      	; 0x4f86 <DIO_enumReadPinValue+0x14e>
    4f82:	88 0f       	add	r24, r24
    4f84:	99 1f       	adc	r25, r25
    4f86:	2a 95       	dec	r18
    4f88:	e2 f7       	brpl	.-8      	; 0x4f82 <DIO_enumReadPinValue+0x14a>
    4f8a:	9a 01       	movw	r18, r20
    4f8c:	28 23       	and	r18, r24
    4f8e:	39 23       	and	r19, r25
    4f90:	8b 81       	ldd	r24, Y+3	; 0x03
    4f92:	88 2f       	mov	r24, r24
    4f94:	90 e0       	ldi	r25, 0x00	; 0
    4f96:	a9 01       	movw	r20, r18
    4f98:	02 c0       	rjmp	.+4      	; 0x4f9e <DIO_enumReadPinValue+0x166>
    4f9a:	55 95       	asr	r21
    4f9c:	47 95       	ror	r20
    4f9e:	8a 95       	dec	r24
    4fa0:	e2 f7       	brpl	.-8      	; 0x4f9a <DIO_enumReadPinValue+0x162>
    4fa2:	ca 01       	movw	r24, r20
    4fa4:	ec 81       	ldd	r30, Y+4	; 0x04
    4fa6:	fd 81       	ldd	r31, Y+5	; 0x05
    4fa8:	80 83       	st	Z, r24
    4faa:	01 c0       	rjmp	.+2      	; 0x4fae <DIO_enumReadPinValue+0x176>
}
 }
else {
loc_enumState =DIO_NOK ;
    4fac:	19 82       	std	Y+1, r1	; 0x01
}
return loc_enumState ;
    4fae:	89 81       	ldd	r24, Y+1	; 0x01
}
    4fb0:	27 96       	adiw	r28, 0x07	; 7
    4fb2:	0f b6       	in	r0, 0x3f	; 63
    4fb4:	f8 94       	cli
    4fb6:	de bf       	out	0x3e, r29	; 62
    4fb8:	0f be       	out	0x3f, r0	; 63
    4fba:	cd bf       	out	0x3d, r28	; 61
    4fbc:	cf 91       	pop	r28
    4fbe:	df 91       	pop	r29
    4fc0:	08 95       	ret

00004fc2 <DIO_enumTogglePinValue>:
//void DIO_voidTogglePinValue   (u8 copy_u8PORT , u8 copy_u8PIN   ){

DIO_ErrorStatus DIO_enumTogglePinValue  (u8 copy_u8PORT , u8 copy_u8PIN  )
{
    4fc2:	df 93       	push	r29
    4fc4:	cf 93       	push	r28
    4fc6:	00 d0       	rcall	.+0      	; 0x4fc8 <DIO_enumTogglePinValue+0x6>
    4fc8:	00 d0       	rcall	.+0      	; 0x4fca <DIO_enumTogglePinValue+0x8>
    4fca:	0f 92       	push	r0
    4fcc:	cd b7       	in	r28, 0x3d	; 61
    4fce:	de b7       	in	r29, 0x3e	; 62
    4fd0:	8a 83       	std	Y+2, r24	; 0x02
    4fd2:	6b 83       	std	Y+3, r22	; 0x03
DIO_ErrorStatus loc_enumState = DIO_OK ;
    4fd4:	81 e0       	ldi	r24, 0x01	; 1
    4fd6:	89 83       	std	Y+1, r24	; 0x01

	if((copy_u8PORT <= DIO_PORTD) && (copy_u8PIN <= DIO_PIN7))
    4fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    4fda:	84 30       	cpi	r24, 0x04	; 4
    4fdc:	08 f0       	brcs	.+2      	; 0x4fe0 <DIO_enumTogglePinValue+0x1e>
    4fde:	73 c0       	rjmp	.+230    	; 0x50c6 <DIO_enumTogglePinValue+0x104>
    4fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    4fe2:	88 30       	cpi	r24, 0x08	; 8
    4fe4:	08 f0       	brcs	.+2      	; 0x4fe8 <DIO_enumTogglePinValue+0x26>
    4fe6:	6f c0       	rjmp	.+222    	; 0x50c6 <DIO_enumTogglePinValue+0x104>
	{
	switch(copy_u8PORT)
    4fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    4fea:	28 2f       	mov	r18, r24
    4fec:	30 e0       	ldi	r19, 0x00	; 0
    4fee:	3d 83       	std	Y+5, r19	; 0x05
    4ff0:	2c 83       	std	Y+4, r18	; 0x04
    4ff2:	8c 81       	ldd	r24, Y+4	; 0x04
    4ff4:	9d 81       	ldd	r25, Y+5	; 0x05
    4ff6:	81 30       	cpi	r24, 0x01	; 1
    4ff8:	91 05       	cpc	r25, r1
    4ffa:	49 f1       	breq	.+82     	; 0x504e <DIO_enumTogglePinValue+0x8c>
    4ffc:	2c 81       	ldd	r18, Y+4	; 0x04
    4ffe:	3d 81       	ldd	r19, Y+5	; 0x05
    5000:	22 30       	cpi	r18, 0x02	; 2
    5002:	31 05       	cpc	r19, r1
    5004:	2c f4       	brge	.+10     	; 0x5010 <DIO_enumTogglePinValue+0x4e>
    5006:	8c 81       	ldd	r24, Y+4	; 0x04
    5008:	9d 81       	ldd	r25, Y+5	; 0x05
    500a:	00 97       	sbiw	r24, 0x00	; 0
    500c:	61 f0       	breq	.+24     	; 0x5026 <DIO_enumTogglePinValue+0x64>
    500e:	5c c0       	rjmp	.+184    	; 0x50c8 <DIO_enumTogglePinValue+0x106>
    5010:	2c 81       	ldd	r18, Y+4	; 0x04
    5012:	3d 81       	ldd	r19, Y+5	; 0x05
    5014:	22 30       	cpi	r18, 0x02	; 2
    5016:	31 05       	cpc	r19, r1
    5018:	71 f1       	breq	.+92     	; 0x5076 <DIO_enumTogglePinValue+0xb4>
    501a:	8c 81       	ldd	r24, Y+4	; 0x04
    501c:	9d 81       	ldd	r25, Y+5	; 0x05
    501e:	83 30       	cpi	r24, 0x03	; 3
    5020:	91 05       	cpc	r25, r1
    5022:	e9 f1       	breq	.+122    	; 0x509e <DIO_enumTogglePinValue+0xdc>
    5024:	51 c0       	rjmp	.+162    	; 0x50c8 <DIO_enumTogglePinValue+0x106>
	{
	case DIO_PORTA : TOG_BIT(PORTA_REG , copy_u8PIN );break;
    5026:	ab e3       	ldi	r26, 0x3B	; 59
    5028:	b0 e0       	ldi	r27, 0x00	; 0
    502a:	eb e3       	ldi	r30, 0x3B	; 59
    502c:	f0 e0       	ldi	r31, 0x00	; 0
    502e:	80 81       	ld	r24, Z
    5030:	48 2f       	mov	r20, r24
    5032:	8b 81       	ldd	r24, Y+3	; 0x03
    5034:	28 2f       	mov	r18, r24
    5036:	30 e0       	ldi	r19, 0x00	; 0
    5038:	81 e0       	ldi	r24, 0x01	; 1
    503a:	90 e0       	ldi	r25, 0x00	; 0
    503c:	02 2e       	mov	r0, r18
    503e:	02 c0       	rjmp	.+4      	; 0x5044 <DIO_enumTogglePinValue+0x82>
    5040:	88 0f       	add	r24, r24
    5042:	99 1f       	adc	r25, r25
    5044:	0a 94       	dec	r0
    5046:	e2 f7       	brpl	.-8      	; 0x5040 <DIO_enumTogglePinValue+0x7e>
    5048:	84 27       	eor	r24, r20
    504a:	8c 93       	st	X, r24
    504c:	3d c0       	rjmp	.+122    	; 0x50c8 <DIO_enumTogglePinValue+0x106>
	case DIO_PORTB : TOG_BIT(PORTB_REG, copy_u8PIN );break;
    504e:	a8 e3       	ldi	r26, 0x38	; 56
    5050:	b0 e0       	ldi	r27, 0x00	; 0
    5052:	e8 e3       	ldi	r30, 0x38	; 56
    5054:	f0 e0       	ldi	r31, 0x00	; 0
    5056:	80 81       	ld	r24, Z
    5058:	48 2f       	mov	r20, r24
    505a:	8b 81       	ldd	r24, Y+3	; 0x03
    505c:	28 2f       	mov	r18, r24
    505e:	30 e0       	ldi	r19, 0x00	; 0
    5060:	81 e0       	ldi	r24, 0x01	; 1
    5062:	90 e0       	ldi	r25, 0x00	; 0
    5064:	02 2e       	mov	r0, r18
    5066:	02 c0       	rjmp	.+4      	; 0x506c <DIO_enumTogglePinValue+0xaa>
    5068:	88 0f       	add	r24, r24
    506a:	99 1f       	adc	r25, r25
    506c:	0a 94       	dec	r0
    506e:	e2 f7       	brpl	.-8      	; 0x5068 <DIO_enumTogglePinValue+0xa6>
    5070:	84 27       	eor	r24, r20
    5072:	8c 93       	st	X, r24
    5074:	29 c0       	rjmp	.+82     	; 0x50c8 <DIO_enumTogglePinValue+0x106>
	case DIO_PORTC : TOG_BIT(PORTC_REG, copy_u8PIN );break;
    5076:	a5 e3       	ldi	r26, 0x35	; 53
    5078:	b0 e0       	ldi	r27, 0x00	; 0
    507a:	e5 e3       	ldi	r30, 0x35	; 53
    507c:	f0 e0       	ldi	r31, 0x00	; 0
    507e:	80 81       	ld	r24, Z
    5080:	48 2f       	mov	r20, r24
    5082:	8b 81       	ldd	r24, Y+3	; 0x03
    5084:	28 2f       	mov	r18, r24
    5086:	30 e0       	ldi	r19, 0x00	; 0
    5088:	81 e0       	ldi	r24, 0x01	; 1
    508a:	90 e0       	ldi	r25, 0x00	; 0
    508c:	02 2e       	mov	r0, r18
    508e:	02 c0       	rjmp	.+4      	; 0x5094 <DIO_enumTogglePinValue+0xd2>
    5090:	88 0f       	add	r24, r24
    5092:	99 1f       	adc	r25, r25
    5094:	0a 94       	dec	r0
    5096:	e2 f7       	brpl	.-8      	; 0x5090 <DIO_enumTogglePinValue+0xce>
    5098:	84 27       	eor	r24, r20
    509a:	8c 93       	st	X, r24
    509c:	15 c0       	rjmp	.+42     	; 0x50c8 <DIO_enumTogglePinValue+0x106>
	case DIO_PORTD : TOG_BIT(PORTD_REG, copy_u8PIN );break;
    509e:	a2 e3       	ldi	r26, 0x32	; 50
    50a0:	b0 e0       	ldi	r27, 0x00	; 0
    50a2:	e2 e3       	ldi	r30, 0x32	; 50
    50a4:	f0 e0       	ldi	r31, 0x00	; 0
    50a6:	80 81       	ld	r24, Z
    50a8:	48 2f       	mov	r20, r24
    50aa:	8b 81       	ldd	r24, Y+3	; 0x03
    50ac:	28 2f       	mov	r18, r24
    50ae:	30 e0       	ldi	r19, 0x00	; 0
    50b0:	81 e0       	ldi	r24, 0x01	; 1
    50b2:	90 e0       	ldi	r25, 0x00	; 0
    50b4:	02 2e       	mov	r0, r18
    50b6:	02 c0       	rjmp	.+4      	; 0x50bc <DIO_enumTogglePinValue+0xfa>
    50b8:	88 0f       	add	r24, r24
    50ba:	99 1f       	adc	r25, r25
    50bc:	0a 94       	dec	r0
    50be:	e2 f7       	brpl	.-8      	; 0x50b8 <DIO_enumTogglePinValue+0xf6>
    50c0:	84 27       	eor	r24, r20
    50c2:	8c 93       	st	X, r24
    50c4:	01 c0       	rjmp	.+2      	; 0x50c8 <DIO_enumTogglePinValue+0x106>
	}

}
else {
loc_enumState =DIO_NOK ;
    50c6:	19 82       	std	Y+1, r1	; 0x01
}
return loc_enumState ;
    50c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    50ca:	0f 90       	pop	r0
    50cc:	0f 90       	pop	r0
    50ce:	0f 90       	pop	r0
    50d0:	0f 90       	pop	r0
    50d2:	0f 90       	pop	r0
    50d4:	cf 91       	pop	r28
    50d6:	df 91       	pop	r29
    50d8:	08 95       	ret

000050da <DIO_enumSetPortDirection>:

DIO_ErrorStatus DIO_enumSetPortDirection  (u8 copy_u8PORT , u8 copy_u8Direction )
{
    50da:	df 93       	push	r29
    50dc:	cf 93       	push	r28
    50de:	00 d0       	rcall	.+0      	; 0x50e0 <DIO_enumSetPortDirection+0x6>
    50e0:	00 d0       	rcall	.+0      	; 0x50e2 <DIO_enumSetPortDirection+0x8>
    50e2:	0f 92       	push	r0
    50e4:	cd b7       	in	r28, 0x3d	; 61
    50e6:	de b7       	in	r29, 0x3e	; 62
    50e8:	8a 83       	std	Y+2, r24	; 0x02
    50ea:	6b 83       	std	Y+3, r22	; 0x03
DIO_ErrorStatus loc_enumState =DIO_OK ;
    50ec:	81 e0       	ldi	r24, 0x01	; 1
    50ee:	89 83       	std	Y+1, r24	; 0x01

	if(copy_u8PORT <= DIO_PORTD )
    50f0:	8a 81       	ldd	r24, Y+2	; 0x02
    50f2:	84 30       	cpi	r24, 0x04	; 4
    50f4:	a8 f5       	brcc	.+106    	; 0x5160 <DIO_enumSetPortDirection+0x86>
	{
	switch(copy_u8PORT)
    50f6:	8a 81       	ldd	r24, Y+2	; 0x02
    50f8:	28 2f       	mov	r18, r24
    50fa:	30 e0       	ldi	r19, 0x00	; 0
    50fc:	3d 83       	std	Y+5, r19	; 0x05
    50fe:	2c 83       	std	Y+4, r18	; 0x04
    5100:	8c 81       	ldd	r24, Y+4	; 0x04
    5102:	9d 81       	ldd	r25, Y+5	; 0x05
    5104:	81 30       	cpi	r24, 0x01	; 1
    5106:	91 05       	cpc	r25, r1
    5108:	d1 f0       	breq	.+52     	; 0x513e <DIO_enumSetPortDirection+0x64>
    510a:	2c 81       	ldd	r18, Y+4	; 0x04
    510c:	3d 81       	ldd	r19, Y+5	; 0x05
    510e:	22 30       	cpi	r18, 0x02	; 2
    5110:	31 05       	cpc	r19, r1
    5112:	2c f4       	brge	.+10     	; 0x511e <DIO_enumSetPortDirection+0x44>
    5114:	8c 81       	ldd	r24, Y+4	; 0x04
    5116:	9d 81       	ldd	r25, Y+5	; 0x05
    5118:	00 97       	sbiw	r24, 0x00	; 0
    511a:	61 f0       	breq	.+24     	; 0x5134 <DIO_enumSetPortDirection+0x5a>
    511c:	1f c0       	rjmp	.+62     	; 0x515c <DIO_enumSetPortDirection+0x82>
    511e:	2c 81       	ldd	r18, Y+4	; 0x04
    5120:	3d 81       	ldd	r19, Y+5	; 0x05
    5122:	22 30       	cpi	r18, 0x02	; 2
    5124:	31 05       	cpc	r19, r1
    5126:	81 f0       	breq	.+32     	; 0x5148 <DIO_enumSetPortDirection+0x6e>
    5128:	8c 81       	ldd	r24, Y+4	; 0x04
    512a:	9d 81       	ldd	r25, Y+5	; 0x05
    512c:	83 30       	cpi	r24, 0x03	; 3
    512e:	91 05       	cpc	r25, r1
    5130:	81 f0       	breq	.+32     	; 0x5152 <DIO_enumSetPortDirection+0x78>
    5132:	14 c0       	rjmp	.+40     	; 0x515c <DIO_enumSetPortDirection+0x82>
	{
	case DIO_PORTA : (DDRA_REG = copy_u8Direction );break;
    5134:	ea e3       	ldi	r30, 0x3A	; 58
    5136:	f0 e0       	ldi	r31, 0x00	; 0
    5138:	8b 81       	ldd	r24, Y+3	; 0x03
    513a:	80 83       	st	Z, r24
    513c:	12 c0       	rjmp	.+36     	; 0x5162 <DIO_enumSetPortDirection+0x88>
	case DIO_PORTB : (DDRB_REG = copy_u8Direction );break;
    513e:	e7 e3       	ldi	r30, 0x37	; 55
    5140:	f0 e0       	ldi	r31, 0x00	; 0
    5142:	8b 81       	ldd	r24, Y+3	; 0x03
    5144:	80 83       	st	Z, r24
    5146:	0d c0       	rjmp	.+26     	; 0x5162 <DIO_enumSetPortDirection+0x88>
	case DIO_PORTC : (DDRC_REG = copy_u8Direction );break;
    5148:	e4 e3       	ldi	r30, 0x34	; 52
    514a:	f0 e0       	ldi	r31, 0x00	; 0
    514c:	8b 81       	ldd	r24, Y+3	; 0x03
    514e:	80 83       	st	Z, r24
    5150:	08 c0       	rjmp	.+16     	; 0x5162 <DIO_enumSetPortDirection+0x88>
	case DIO_PORTD : (DDRD_REG = copy_u8Direction );break;
    5152:	e1 e3       	ldi	r30, 0x31	; 49
    5154:	f0 e0       	ldi	r31, 0x00	; 0
    5156:	8b 81       	ldd	r24, Y+3	; 0x03
    5158:	80 83       	st	Z, r24
    515a:	03 c0       	rjmp	.+6      	; 0x5162 <DIO_enumSetPortDirection+0x88>
	default: loc_enumState =DIO_NOK ; break;
    515c:	19 82       	std	Y+1, r1	; 0x01
    515e:	01 c0       	rjmp	.+2      	; 0x5162 <DIO_enumSetPortDirection+0x88>
	}
}
else {
loc_enumState =DIO_NOK ;
    5160:	19 82       	std	Y+1, r1	; 0x01
}
return loc_enumState ;
    5162:	89 81       	ldd	r24, Y+1	; 0x01
}
    5164:	0f 90       	pop	r0
    5166:	0f 90       	pop	r0
    5168:	0f 90       	pop	r0
    516a:	0f 90       	pop	r0
    516c:	0f 90       	pop	r0
    516e:	cf 91       	pop	r28
    5170:	df 91       	pop	r29
    5172:	08 95       	ret

00005174 <DIO_enumWritePortValue>:


DIO_ErrorStatus DIO_enumWritePortValue   (u8 copy_u8PORT , u8 portu8Value         )
{
    5174:	df 93       	push	r29
    5176:	cf 93       	push	r28
    5178:	00 d0       	rcall	.+0      	; 0x517a <DIO_enumWritePortValue+0x6>
    517a:	00 d0       	rcall	.+0      	; 0x517c <DIO_enumWritePortValue+0x8>
    517c:	0f 92       	push	r0
    517e:	cd b7       	in	r28, 0x3d	; 61
    5180:	de b7       	in	r29, 0x3e	; 62
    5182:	8a 83       	std	Y+2, r24	; 0x02
    5184:	6b 83       	std	Y+3, r22	; 0x03
DIO_ErrorStatus loc_enumState =DIO_OK ;
    5186:	81 e0       	ldi	r24, 0x01	; 1
    5188:	89 83       	std	Y+1, r24	; 0x01

	if((copy_u8PORT <= DIO_PORTD) && ((portu8Value <= 255)|| (portu8Value == DIO_PORT_LOW)||(portu8Value == DIO_PORT_HIGH)))
    518a:	8a 81       	ldd	r24, Y+2	; 0x02
    518c:	84 30       	cpi	r24, 0x04	; 4
    518e:	98 f5       	brcc	.+102    	; 0x51f6 <DIO_enumWritePortValue+0x82>
	{
	switch(copy_u8PORT){
    5190:	8a 81       	ldd	r24, Y+2	; 0x02
    5192:	28 2f       	mov	r18, r24
    5194:	30 e0       	ldi	r19, 0x00	; 0
    5196:	3d 83       	std	Y+5, r19	; 0x05
    5198:	2c 83       	std	Y+4, r18	; 0x04
    519a:	8c 81       	ldd	r24, Y+4	; 0x04
    519c:	9d 81       	ldd	r25, Y+5	; 0x05
    519e:	81 30       	cpi	r24, 0x01	; 1
    51a0:	91 05       	cpc	r25, r1
    51a2:	d1 f0       	breq	.+52     	; 0x51d8 <DIO_enumWritePortValue+0x64>
    51a4:	2c 81       	ldd	r18, Y+4	; 0x04
    51a6:	3d 81       	ldd	r19, Y+5	; 0x05
    51a8:	22 30       	cpi	r18, 0x02	; 2
    51aa:	31 05       	cpc	r19, r1
    51ac:	2c f4       	brge	.+10     	; 0x51b8 <DIO_enumWritePortValue+0x44>
    51ae:	8c 81       	ldd	r24, Y+4	; 0x04
    51b0:	9d 81       	ldd	r25, Y+5	; 0x05
    51b2:	00 97       	sbiw	r24, 0x00	; 0
    51b4:	61 f0       	breq	.+24     	; 0x51ce <DIO_enumWritePortValue+0x5a>
    51b6:	20 c0       	rjmp	.+64     	; 0x51f8 <DIO_enumWritePortValue+0x84>
    51b8:	2c 81       	ldd	r18, Y+4	; 0x04
    51ba:	3d 81       	ldd	r19, Y+5	; 0x05
    51bc:	22 30       	cpi	r18, 0x02	; 2
    51be:	31 05       	cpc	r19, r1
    51c0:	81 f0       	breq	.+32     	; 0x51e2 <DIO_enumWritePortValue+0x6e>
    51c2:	8c 81       	ldd	r24, Y+4	; 0x04
    51c4:	9d 81       	ldd	r25, Y+5	; 0x05
    51c6:	83 30       	cpi	r24, 0x03	; 3
    51c8:	91 05       	cpc	r25, r1
    51ca:	81 f0       	breq	.+32     	; 0x51ec <DIO_enumWritePortValue+0x78>
    51cc:	15 c0       	rjmp	.+42     	; 0x51f8 <DIO_enumWritePortValue+0x84>
	case DIO_PORTA : PORTA_REG  = portu8Value ;break;
    51ce:	eb e3       	ldi	r30, 0x3B	; 59
    51d0:	f0 e0       	ldi	r31, 0x00	; 0
    51d2:	8b 81       	ldd	r24, Y+3	; 0x03
    51d4:	80 83       	st	Z, r24
    51d6:	10 c0       	rjmp	.+32     	; 0x51f8 <DIO_enumWritePortValue+0x84>
	case DIO_PORTB : PORTB_REG = portu8Value ;break;
    51d8:	e8 e3       	ldi	r30, 0x38	; 56
    51da:	f0 e0       	ldi	r31, 0x00	; 0
    51dc:	8b 81       	ldd	r24, Y+3	; 0x03
    51de:	80 83       	st	Z, r24
    51e0:	0b c0       	rjmp	.+22     	; 0x51f8 <DIO_enumWritePortValue+0x84>
	case DIO_PORTC : PORTC_REG = portu8Value ;break;
    51e2:	e5 e3       	ldi	r30, 0x35	; 53
    51e4:	f0 e0       	ldi	r31, 0x00	; 0
    51e6:	8b 81       	ldd	r24, Y+3	; 0x03
    51e8:	80 83       	st	Z, r24
    51ea:	06 c0       	rjmp	.+12     	; 0x51f8 <DIO_enumWritePortValue+0x84>
	case DIO_PORTD : PORTD_REG = portu8Value ;break;
    51ec:	e2 e3       	ldi	r30, 0x32	; 50
    51ee:	f0 e0       	ldi	r31, 0x00	; 0
    51f0:	8b 81       	ldd	r24, Y+3	; 0x03
    51f2:	80 83       	st	Z, r24
    51f4:	01 c0       	rjmp	.+2      	; 0x51f8 <DIO_enumWritePortValue+0x84>
	}
}
else {
loc_enumState =DIO_NOK ;
    51f6:	19 82       	std	Y+1, r1	; 0x01
}
return loc_enumState ;
    51f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    51fa:	0f 90       	pop	r0
    51fc:	0f 90       	pop	r0
    51fe:	0f 90       	pop	r0
    5200:	0f 90       	pop	r0
    5202:	0f 90       	pop	r0
    5204:	cf 91       	pop	r28
    5206:	df 91       	pop	r29
    5208:	08 95       	ret

0000520a <DIO_enumReadPortValue>:

DIO_ErrorStatus DIO_enumReadPortValue  (u8 copy_u8PORT , u8 * copy_ptrData )
{
    520a:	df 93       	push	r29
    520c:	cf 93       	push	r28
    520e:	00 d0       	rcall	.+0      	; 0x5210 <DIO_enumReadPortValue+0x6>
    5210:	00 d0       	rcall	.+0      	; 0x5212 <DIO_enumReadPortValue+0x8>
    5212:	00 d0       	rcall	.+0      	; 0x5214 <DIO_enumReadPortValue+0xa>
    5214:	cd b7       	in	r28, 0x3d	; 61
    5216:	de b7       	in	r29, 0x3e	; 62
    5218:	8a 83       	std	Y+2, r24	; 0x02
    521a:	7c 83       	std	Y+4, r23	; 0x04
    521c:	6b 83       	std	Y+3, r22	; 0x03
DIO_ErrorStatus loc_enumState =DIO_OK ;
    521e:	81 e0       	ldi	r24, 0x01	; 1
    5220:	89 83       	std	Y+1, r24	; 0x01

	if((copy_u8PORT <= DIO_PORTD))
    5222:	8a 81       	ldd	r24, Y+2	; 0x02
    5224:	84 30       	cpi	r24, 0x04	; 4
    5226:	e8 f5       	brcc	.+122    	; 0x52a2 <DIO_enumReadPortValue+0x98>
	{
 switch(copy_u8PORT)
    5228:	8a 81       	ldd	r24, Y+2	; 0x02
    522a:	28 2f       	mov	r18, r24
    522c:	30 e0       	ldi	r19, 0x00	; 0
    522e:	3e 83       	std	Y+6, r19	; 0x06
    5230:	2d 83       	std	Y+5, r18	; 0x05
    5232:	8d 81       	ldd	r24, Y+5	; 0x05
    5234:	9e 81       	ldd	r25, Y+6	; 0x06
    5236:	81 30       	cpi	r24, 0x01	; 1
    5238:	91 05       	cpc	r25, r1
    523a:	e1 f0       	breq	.+56     	; 0x5274 <DIO_enumReadPortValue+0x6a>
    523c:	2d 81       	ldd	r18, Y+5	; 0x05
    523e:	3e 81       	ldd	r19, Y+6	; 0x06
    5240:	22 30       	cpi	r18, 0x02	; 2
    5242:	31 05       	cpc	r19, r1
    5244:	2c f4       	brge	.+10     	; 0x5250 <DIO_enumReadPortValue+0x46>
    5246:	8d 81       	ldd	r24, Y+5	; 0x05
    5248:	9e 81       	ldd	r25, Y+6	; 0x06
    524a:	00 97       	sbiw	r24, 0x00	; 0
    524c:	61 f0       	breq	.+24     	; 0x5266 <DIO_enumReadPortValue+0x5c>
    524e:	27 c0       	rjmp	.+78     	; 0x529e <DIO_enumReadPortValue+0x94>
    5250:	2d 81       	ldd	r18, Y+5	; 0x05
    5252:	3e 81       	ldd	r19, Y+6	; 0x06
    5254:	22 30       	cpi	r18, 0x02	; 2
    5256:	31 05       	cpc	r19, r1
    5258:	a1 f0       	breq	.+40     	; 0x5282 <DIO_enumReadPortValue+0x78>
    525a:	8d 81       	ldd	r24, Y+5	; 0x05
    525c:	9e 81       	ldd	r25, Y+6	; 0x06
    525e:	83 30       	cpi	r24, 0x03	; 3
    5260:	91 05       	cpc	r25, r1
    5262:	b1 f0       	breq	.+44     	; 0x5290 <DIO_enumReadPortValue+0x86>
    5264:	1c c0       	rjmp	.+56     	; 0x529e <DIO_enumReadPortValue+0x94>
 {
	case DIO_PORTA : * copy_ptrData= PINA_REG;break;
    5266:	e9 e3       	ldi	r30, 0x39	; 57
    5268:	f0 e0       	ldi	r31, 0x00	; 0
    526a:	80 81       	ld	r24, Z
    526c:	eb 81       	ldd	r30, Y+3	; 0x03
    526e:	fc 81       	ldd	r31, Y+4	; 0x04
    5270:	80 83       	st	Z, r24
    5272:	18 c0       	rjmp	.+48     	; 0x52a4 <DIO_enumReadPortValue+0x9a>
	case DIO_PORTB : * copy_ptrData=PINA_REG;break;
    5274:	e9 e3       	ldi	r30, 0x39	; 57
    5276:	f0 e0       	ldi	r31, 0x00	; 0
    5278:	80 81       	ld	r24, Z
    527a:	eb 81       	ldd	r30, Y+3	; 0x03
    527c:	fc 81       	ldd	r31, Y+4	; 0x04
    527e:	80 83       	st	Z, r24
    5280:	11 c0       	rjmp	.+34     	; 0x52a4 <DIO_enumReadPortValue+0x9a>
	case DIO_PORTC : * copy_ptrData= PINA_REG;break;
    5282:	e9 e3       	ldi	r30, 0x39	; 57
    5284:	f0 e0       	ldi	r31, 0x00	; 0
    5286:	80 81       	ld	r24, Z
    5288:	eb 81       	ldd	r30, Y+3	; 0x03
    528a:	fc 81       	ldd	r31, Y+4	; 0x04
    528c:	80 83       	st	Z, r24
    528e:	0a c0       	rjmp	.+20     	; 0x52a4 <DIO_enumReadPortValue+0x9a>
	case DIO_PORTD : * copy_ptrData= PINA_REG;break;
    5290:	e9 e3       	ldi	r30, 0x39	; 57
    5292:	f0 e0       	ldi	r31, 0x00	; 0
    5294:	80 81       	ld	r24, Z
    5296:	eb 81       	ldd	r30, Y+3	; 0x03
    5298:	fc 81       	ldd	r31, Y+4	; 0x04
    529a:	80 83       	st	Z, r24
    529c:	03 c0       	rjmp	.+6      	; 0x52a4 <DIO_enumReadPortValue+0x9a>
	default	: loc_enumState =DIO_NOK ;break;
    529e:	19 82       	std	Y+1, r1	; 0x01
    52a0:	01 c0       	rjmp	.+2      	; 0x52a4 <DIO_enumReadPortValue+0x9a>
 }
	}
else {
loc_enumState =DIO_NOK ;
    52a2:	19 82       	std	Y+1, r1	; 0x01
}
return loc_enumState ;
    52a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    52a6:	26 96       	adiw	r28, 0x06	; 6
    52a8:	0f b6       	in	r0, 0x3f	; 63
    52aa:	f8 94       	cli
    52ac:	de bf       	out	0x3e, r29	; 62
    52ae:	0f be       	out	0x3f, r0	; 63
    52b0:	cd bf       	out	0x3d, r28	; 61
    52b2:	cf 91       	pop	r28
    52b4:	df 91       	pop	r29
    52b6:	08 95       	ret

000052b8 <DIO_enumTogglePortValue>:
DIO_ErrorStatus DIO_enumTogglePortValue  (u8 copy_u8PORT)
{
    52b8:	df 93       	push	r29
    52ba:	cf 93       	push	r28
    52bc:	00 d0       	rcall	.+0      	; 0x52be <DIO_enumTogglePortValue+0x6>
    52be:	00 d0       	rcall	.+0      	; 0x52c0 <DIO_enumTogglePortValue+0x8>
    52c0:	cd b7       	in	r28, 0x3d	; 61
    52c2:	de b7       	in	r29, 0x3e	; 62
    52c4:	8a 83       	std	Y+2, r24	; 0x02
DIO_ErrorStatus loc_enumState =DIO_OK ;
    52c6:	81 e0       	ldi	r24, 0x01	; 1
    52c8:	89 83       	std	Y+1, r24	; 0x01

if((copy_u8PORT <= DIO_PORTD))
    52ca:	8a 81       	ldd	r24, Y+2	; 0x02
    52cc:	84 30       	cpi	r24, 0x04	; 4
    52ce:	08 f0       	brcs	.+2      	; 0x52d2 <DIO_enumTogglePortValue+0x1a>
    52d0:	3f c0       	rjmp	.+126    	; 0x5350 <DIO_enumTogglePortValue+0x98>
{
switch(copy_u8PORT)
    52d2:	8a 81       	ldd	r24, Y+2	; 0x02
    52d4:	28 2f       	mov	r18, r24
    52d6:	30 e0       	ldi	r19, 0x00	; 0
    52d8:	3c 83       	std	Y+4, r19	; 0x04
    52da:	2b 83       	std	Y+3, r18	; 0x03
    52dc:	8b 81       	ldd	r24, Y+3	; 0x03
    52de:	9c 81       	ldd	r25, Y+4	; 0x04
    52e0:	81 30       	cpi	r24, 0x01	; 1
    52e2:	91 05       	cpc	r25, r1
    52e4:	e9 f0       	breq	.+58     	; 0x5320 <DIO_enumTogglePortValue+0x68>
    52e6:	2b 81       	ldd	r18, Y+3	; 0x03
    52e8:	3c 81       	ldd	r19, Y+4	; 0x04
    52ea:	22 30       	cpi	r18, 0x02	; 2
    52ec:	31 05       	cpc	r19, r1
    52ee:	2c f4       	brge	.+10     	; 0x52fa <DIO_enumTogglePortValue+0x42>
    52f0:	8b 81       	ldd	r24, Y+3	; 0x03
    52f2:	9c 81       	ldd	r25, Y+4	; 0x04
    52f4:	00 97       	sbiw	r24, 0x00	; 0
    52f6:	61 f0       	breq	.+24     	; 0x5310 <DIO_enumTogglePortValue+0x58>
    52f8:	2c c0       	rjmp	.+88     	; 0x5352 <DIO_enumTogglePortValue+0x9a>
    52fa:	2b 81       	ldd	r18, Y+3	; 0x03
    52fc:	3c 81       	ldd	r19, Y+4	; 0x04
    52fe:	22 30       	cpi	r18, 0x02	; 2
    5300:	31 05       	cpc	r19, r1
    5302:	b1 f0       	breq	.+44     	; 0x5330 <DIO_enumTogglePortValue+0x78>
    5304:	8b 81       	ldd	r24, Y+3	; 0x03
    5306:	9c 81       	ldd	r25, Y+4	; 0x04
    5308:	83 30       	cpi	r24, 0x03	; 3
    530a:	91 05       	cpc	r25, r1
    530c:	c9 f0       	breq	.+50     	; 0x5340 <DIO_enumTogglePortValue+0x88>
    530e:	21 c0       	rjmp	.+66     	; 0x5352 <DIO_enumTogglePortValue+0x9a>
{
	case DIO_PORTA : PORTA_REG  = ~PORTA_REG;break;
    5310:	ab e3       	ldi	r26, 0x3B	; 59
    5312:	b0 e0       	ldi	r27, 0x00	; 0
    5314:	eb e3       	ldi	r30, 0x3B	; 59
    5316:	f0 e0       	ldi	r31, 0x00	; 0
    5318:	80 81       	ld	r24, Z
    531a:	80 95       	com	r24
    531c:	8c 93       	st	X, r24
    531e:	19 c0       	rjmp	.+50     	; 0x5352 <DIO_enumTogglePortValue+0x9a>
	case DIO_PORTB : PORTB_REG = ~PORTB_REG;break;
    5320:	a8 e3       	ldi	r26, 0x38	; 56
    5322:	b0 e0       	ldi	r27, 0x00	; 0
    5324:	e8 e3       	ldi	r30, 0x38	; 56
    5326:	f0 e0       	ldi	r31, 0x00	; 0
    5328:	80 81       	ld	r24, Z
    532a:	80 95       	com	r24
    532c:	8c 93       	st	X, r24
    532e:	11 c0       	rjmp	.+34     	; 0x5352 <DIO_enumTogglePortValue+0x9a>
	case DIO_PORTC : PORTC_REG = ~PORTC_REG;break;
    5330:	a5 e3       	ldi	r26, 0x35	; 53
    5332:	b0 e0       	ldi	r27, 0x00	; 0
    5334:	e5 e3       	ldi	r30, 0x35	; 53
    5336:	f0 e0       	ldi	r31, 0x00	; 0
    5338:	80 81       	ld	r24, Z
    533a:	80 95       	com	r24
    533c:	8c 93       	st	X, r24
    533e:	09 c0       	rjmp	.+18     	; 0x5352 <DIO_enumTogglePortValue+0x9a>
	case DIO_PORTD : PORTD_REG = ~PORTD_REG;break;
    5340:	a2 e3       	ldi	r26, 0x32	; 50
    5342:	b0 e0       	ldi	r27, 0x00	; 0
    5344:	e2 e3       	ldi	r30, 0x32	; 50
    5346:	f0 e0       	ldi	r31, 0x00	; 0
    5348:	80 81       	ld	r24, Z
    534a:	80 95       	com	r24
    534c:	8c 93       	st	X, r24
    534e:	01 c0       	rjmp	.+2      	; 0x5352 <DIO_enumTogglePortValue+0x9a>
}
}
else {
loc_enumState =DIO_NOK ;
    5350:	19 82       	std	Y+1, r1	; 0x01
}
return loc_enumState ;
    5352:	89 81       	ldd	r24, Y+1	; 0x01
}
    5354:	0f 90       	pop	r0
    5356:	0f 90       	pop	r0
    5358:	0f 90       	pop	r0
    535a:	0f 90       	pop	r0
    535c:	cf 91       	pop	r28
    535e:	df 91       	pop	r29
    5360:	08 95       	ret

00005362 <DIO_enumConnectPullUp>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
    =>Copy_u8ConnectPullup --> [DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumConnectPullUp(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{
    5362:	df 93       	push	r29
    5364:	cf 93       	push	r28
    5366:	00 d0       	rcall	.+0      	; 0x5368 <DIO_enumConnectPullUp+0x6>
    5368:	00 d0       	rcall	.+0      	; 0x536a <DIO_enumConnectPullUp+0x8>
    536a:	00 d0       	rcall	.+0      	; 0x536c <DIO_enumConnectPullUp+0xa>
    536c:	cd b7       	in	r28, 0x3d	; 61
    536e:	de b7       	in	r29, 0x3e	; 62
    5370:	8a 83       	std	Y+2, r24	; 0x02
    5372:	6b 83       	std	Y+3, r22	; 0x03
    5374:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus LOC_enumState = DIO_OK;
    5376:	81 e0       	ldi	r24, 0x01	; 1
    5378:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    537a:	8a 81       	ldd	r24, Y+2	; 0x02
    537c:	84 30       	cpi	r24, 0x04	; 4
    537e:	08 f0       	brcs	.+2      	; 0x5382 <DIO_enumConnectPullUp+0x20>
    5380:	3e c1       	rjmp	.+636    	; 0x55fe <DIO_enumConnectPullUp+0x29c>
    5382:	8b 81       	ldd	r24, Y+3	; 0x03
    5384:	88 30       	cpi	r24, 0x08	; 8
    5386:	08 f0       	brcs	.+2      	; 0x538a <DIO_enumConnectPullUp+0x28>
    5388:	3a c1       	rjmp	.+628    	; 0x55fe <DIO_enumConnectPullUp+0x29c>
  {
    switch (Copy_u8PORT)
    538a:	8a 81       	ldd	r24, Y+2	; 0x02
    538c:	28 2f       	mov	r18, r24
    538e:	30 e0       	ldi	r19, 0x00	; 0
    5390:	3e 83       	std	Y+6, r19	; 0x06
    5392:	2d 83       	std	Y+5, r18	; 0x05
    5394:	8d 81       	ldd	r24, Y+5	; 0x05
    5396:	9e 81       	ldd	r25, Y+6	; 0x06
    5398:	81 30       	cpi	r24, 0x01	; 1
    539a:	91 05       	cpc	r25, r1
    539c:	09 f4       	brne	.+2      	; 0x53a0 <DIO_enumConnectPullUp+0x3e>
    539e:	5d c0       	rjmp	.+186    	; 0x545a <DIO_enumConnectPullUp+0xf8>
    53a0:	2d 81       	ldd	r18, Y+5	; 0x05
    53a2:	3e 81       	ldd	r19, Y+6	; 0x06
    53a4:	22 30       	cpi	r18, 0x02	; 2
    53a6:	31 05       	cpc	r19, r1
    53a8:	2c f4       	brge	.+10     	; 0x53b4 <DIO_enumConnectPullUp+0x52>
    53aa:	8d 81       	ldd	r24, Y+5	; 0x05
    53ac:	9e 81       	ldd	r25, Y+6	; 0x06
    53ae:	00 97       	sbiw	r24, 0x00	; 0
    53b0:	71 f0       	breq	.+28     	; 0x53ce <DIO_enumConnectPullUp+0x6c>
    53b2:	26 c1       	rjmp	.+588    	; 0x5600 <DIO_enumConnectPullUp+0x29e>
    53b4:	2d 81       	ldd	r18, Y+5	; 0x05
    53b6:	3e 81       	ldd	r19, Y+6	; 0x06
    53b8:	22 30       	cpi	r18, 0x02	; 2
    53ba:	31 05       	cpc	r19, r1
    53bc:	09 f4       	brne	.+2      	; 0x53c0 <DIO_enumConnectPullUp+0x5e>
    53be:	93 c0       	rjmp	.+294    	; 0x54e6 <DIO_enumConnectPullUp+0x184>
    53c0:	8d 81       	ldd	r24, Y+5	; 0x05
    53c2:	9e 81       	ldd	r25, Y+6	; 0x06
    53c4:	83 30       	cpi	r24, 0x03	; 3
    53c6:	91 05       	cpc	r25, r1
    53c8:	09 f4       	brne	.+2      	; 0x53cc <DIO_enumConnectPullUp+0x6a>
    53ca:	d3 c0       	rjmp	.+422    	; 0x5572 <DIO_enumConnectPullUp+0x210>
    53cc:	19 c1       	rjmp	.+562    	; 0x5600 <DIO_enumConnectPullUp+0x29e>
    {
    /* Connect or disconnect the pull up resistance to the given pin in port A */
    case DIO_PORTA:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    53ce:	8c 81       	ldd	r24, Y+4	; 0x04
    53d0:	81 30       	cpi	r24, 0x01	; 1
    53d2:	71 f5       	brne	.+92     	; 0x5430 <DIO_enumConnectPullUp+0xce>
      {
        CLR_BIT(SFIOR_REG, PUD); // It's default is zero
    53d4:	a0 e5       	ldi	r26, 0x50	; 80
    53d6:	b0 e0       	ldi	r27, 0x00	; 0
    53d8:	e0 e5       	ldi	r30, 0x50	; 80
    53da:	f0 e0       	ldi	r31, 0x00	; 0
    53dc:	80 81       	ld	r24, Z
    53de:	8b 7f       	andi	r24, 0xFB	; 251
    53e0:	8c 93       	st	X, r24
        CLR_BIT(DDRA_REG, Copy_u8PIN);
    53e2:	aa e3       	ldi	r26, 0x3A	; 58
    53e4:	b0 e0       	ldi	r27, 0x00	; 0
    53e6:	ea e3       	ldi	r30, 0x3A	; 58
    53e8:	f0 e0       	ldi	r31, 0x00	; 0
    53ea:	80 81       	ld	r24, Z
    53ec:	48 2f       	mov	r20, r24
    53ee:	8b 81       	ldd	r24, Y+3	; 0x03
    53f0:	28 2f       	mov	r18, r24
    53f2:	30 e0       	ldi	r19, 0x00	; 0
    53f4:	81 e0       	ldi	r24, 0x01	; 1
    53f6:	90 e0       	ldi	r25, 0x00	; 0
    53f8:	02 c0       	rjmp	.+4      	; 0x53fe <DIO_enumConnectPullUp+0x9c>
    53fa:	88 0f       	add	r24, r24
    53fc:	99 1f       	adc	r25, r25
    53fe:	2a 95       	dec	r18
    5400:	e2 f7       	brpl	.-8      	; 0x53fa <DIO_enumConnectPullUp+0x98>
    5402:	80 95       	com	r24
    5404:	84 23       	and	r24, r20
    5406:	8c 93       	st	X, r24
        SET_BIT(PORTA_REG, Copy_u8PIN);
    5408:	ab e3       	ldi	r26, 0x3B	; 59
    540a:	b0 e0       	ldi	r27, 0x00	; 0
    540c:	eb e3       	ldi	r30, 0x3B	; 59
    540e:	f0 e0       	ldi	r31, 0x00	; 0
    5410:	80 81       	ld	r24, Z
    5412:	48 2f       	mov	r20, r24
    5414:	8b 81       	ldd	r24, Y+3	; 0x03
    5416:	28 2f       	mov	r18, r24
    5418:	30 e0       	ldi	r19, 0x00	; 0
    541a:	81 e0       	ldi	r24, 0x01	; 1
    541c:	90 e0       	ldi	r25, 0x00	; 0
    541e:	02 2e       	mov	r0, r18
    5420:	02 c0       	rjmp	.+4      	; 0x5426 <DIO_enumConnectPullUp+0xc4>
    5422:	88 0f       	add	r24, r24
    5424:	99 1f       	adc	r25, r25
    5426:	0a 94       	dec	r0
    5428:	e2 f7       	brpl	.-8      	; 0x5422 <DIO_enumConnectPullUp+0xc0>
    542a:	84 2b       	or	r24, r20
    542c:	8c 93       	st	X, r24
    542e:	e8 c0       	rjmp	.+464    	; 0x5600 <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTA_REG, Copy_u8PIN);
    5430:	ab e3       	ldi	r26, 0x3B	; 59
    5432:	b0 e0       	ldi	r27, 0x00	; 0
    5434:	eb e3       	ldi	r30, 0x3B	; 59
    5436:	f0 e0       	ldi	r31, 0x00	; 0
    5438:	80 81       	ld	r24, Z
    543a:	48 2f       	mov	r20, r24
    543c:	8b 81       	ldd	r24, Y+3	; 0x03
    543e:	28 2f       	mov	r18, r24
    5440:	30 e0       	ldi	r19, 0x00	; 0
    5442:	81 e0       	ldi	r24, 0x01	; 1
    5444:	90 e0       	ldi	r25, 0x00	; 0
    5446:	02 2e       	mov	r0, r18
    5448:	02 c0       	rjmp	.+4      	; 0x544e <DIO_enumConnectPullUp+0xec>
    544a:	88 0f       	add	r24, r24
    544c:	99 1f       	adc	r25, r25
    544e:	0a 94       	dec	r0
    5450:	e2 f7       	brpl	.-8      	; 0x544a <DIO_enumConnectPullUp+0xe8>
    5452:	80 95       	com	r24
    5454:	84 23       	and	r24, r20
    5456:	8c 93       	st	X, r24
    5458:	d3 c0       	rjmp	.+422    	; 0x5600 <DIO_enumConnectPullUp+0x29e>
      }
      break;
      /* Connect or disconnect the pull up resistance to the given pin in port B */
    case DIO_PORTB:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    545a:	8c 81       	ldd	r24, Y+4	; 0x04
    545c:	81 30       	cpi	r24, 0x01	; 1
    545e:	71 f5       	brne	.+92     	; 0x54bc <DIO_enumConnectPullUp+0x15a>
      {
        CLR_BIT(SFIOR_REG, PUD);
    5460:	a0 e5       	ldi	r26, 0x50	; 80
    5462:	b0 e0       	ldi	r27, 0x00	; 0
    5464:	e0 e5       	ldi	r30, 0x50	; 80
    5466:	f0 e0       	ldi	r31, 0x00	; 0
    5468:	80 81       	ld	r24, Z
    546a:	8b 7f       	andi	r24, 0xFB	; 251
    546c:	8c 93       	st	X, r24
        CLR_BIT(DDRB_REG, Copy_u8PIN);
    546e:	a7 e3       	ldi	r26, 0x37	; 55
    5470:	b0 e0       	ldi	r27, 0x00	; 0
    5472:	e7 e3       	ldi	r30, 0x37	; 55
    5474:	f0 e0       	ldi	r31, 0x00	; 0
    5476:	80 81       	ld	r24, Z
    5478:	48 2f       	mov	r20, r24
    547a:	8b 81       	ldd	r24, Y+3	; 0x03
    547c:	28 2f       	mov	r18, r24
    547e:	30 e0       	ldi	r19, 0x00	; 0
    5480:	81 e0       	ldi	r24, 0x01	; 1
    5482:	90 e0       	ldi	r25, 0x00	; 0
    5484:	02 c0       	rjmp	.+4      	; 0x548a <DIO_enumConnectPullUp+0x128>
    5486:	88 0f       	add	r24, r24
    5488:	99 1f       	adc	r25, r25
    548a:	2a 95       	dec	r18
    548c:	e2 f7       	brpl	.-8      	; 0x5486 <DIO_enumConnectPullUp+0x124>
    548e:	80 95       	com	r24
    5490:	84 23       	and	r24, r20
    5492:	8c 93       	st	X, r24
        SET_BIT(PORTB_REG, Copy_u8PIN);
    5494:	a8 e3       	ldi	r26, 0x38	; 56
    5496:	b0 e0       	ldi	r27, 0x00	; 0
    5498:	e8 e3       	ldi	r30, 0x38	; 56
    549a:	f0 e0       	ldi	r31, 0x00	; 0
    549c:	80 81       	ld	r24, Z
    549e:	48 2f       	mov	r20, r24
    54a0:	8b 81       	ldd	r24, Y+3	; 0x03
    54a2:	28 2f       	mov	r18, r24
    54a4:	30 e0       	ldi	r19, 0x00	; 0
    54a6:	81 e0       	ldi	r24, 0x01	; 1
    54a8:	90 e0       	ldi	r25, 0x00	; 0
    54aa:	02 2e       	mov	r0, r18
    54ac:	02 c0       	rjmp	.+4      	; 0x54b2 <DIO_enumConnectPullUp+0x150>
    54ae:	88 0f       	add	r24, r24
    54b0:	99 1f       	adc	r25, r25
    54b2:	0a 94       	dec	r0
    54b4:	e2 f7       	brpl	.-8      	; 0x54ae <DIO_enumConnectPullUp+0x14c>
    54b6:	84 2b       	or	r24, r20
    54b8:	8c 93       	st	X, r24
    54ba:	a2 c0       	rjmp	.+324    	; 0x5600 <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTB_REG, Copy_u8PIN);
    54bc:	a8 e3       	ldi	r26, 0x38	; 56
    54be:	b0 e0       	ldi	r27, 0x00	; 0
    54c0:	e8 e3       	ldi	r30, 0x38	; 56
    54c2:	f0 e0       	ldi	r31, 0x00	; 0
    54c4:	80 81       	ld	r24, Z
    54c6:	48 2f       	mov	r20, r24
    54c8:	8b 81       	ldd	r24, Y+3	; 0x03
    54ca:	28 2f       	mov	r18, r24
    54cc:	30 e0       	ldi	r19, 0x00	; 0
    54ce:	81 e0       	ldi	r24, 0x01	; 1
    54d0:	90 e0       	ldi	r25, 0x00	; 0
    54d2:	02 2e       	mov	r0, r18
    54d4:	02 c0       	rjmp	.+4      	; 0x54da <DIO_enumConnectPullUp+0x178>
    54d6:	88 0f       	add	r24, r24
    54d8:	99 1f       	adc	r25, r25
    54da:	0a 94       	dec	r0
    54dc:	e2 f7       	brpl	.-8      	; 0x54d6 <DIO_enumConnectPullUp+0x174>
    54de:	80 95       	com	r24
    54e0:	84 23       	and	r24, r20
    54e2:	8c 93       	st	X, r24
    54e4:	8d c0       	rjmp	.+282    	; 0x5600 <DIO_enumConnectPullUp+0x29e>
      }
      break;
      /* Connect or disconnect the pull up resistance to the given pin in port C */
    case DIO_PORTC:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    54e6:	8c 81       	ldd	r24, Y+4	; 0x04
    54e8:	81 30       	cpi	r24, 0x01	; 1
    54ea:	71 f5       	brne	.+92     	; 0x5548 <DIO_enumConnectPullUp+0x1e6>
      {
        CLR_BIT(SFIOR_REG, PUD );
    54ec:	a0 e5       	ldi	r26, 0x50	; 80
    54ee:	b0 e0       	ldi	r27, 0x00	; 0
    54f0:	e0 e5       	ldi	r30, 0x50	; 80
    54f2:	f0 e0       	ldi	r31, 0x00	; 0
    54f4:	80 81       	ld	r24, Z
    54f6:	8b 7f       	andi	r24, 0xFB	; 251
    54f8:	8c 93       	st	X, r24
        CLR_BIT(DDRC_REG, Copy_u8PIN);
    54fa:	a4 e3       	ldi	r26, 0x34	; 52
    54fc:	b0 e0       	ldi	r27, 0x00	; 0
    54fe:	e4 e3       	ldi	r30, 0x34	; 52
    5500:	f0 e0       	ldi	r31, 0x00	; 0
    5502:	80 81       	ld	r24, Z
    5504:	48 2f       	mov	r20, r24
    5506:	8b 81       	ldd	r24, Y+3	; 0x03
    5508:	28 2f       	mov	r18, r24
    550a:	30 e0       	ldi	r19, 0x00	; 0
    550c:	81 e0       	ldi	r24, 0x01	; 1
    550e:	90 e0       	ldi	r25, 0x00	; 0
    5510:	02 c0       	rjmp	.+4      	; 0x5516 <DIO_enumConnectPullUp+0x1b4>
    5512:	88 0f       	add	r24, r24
    5514:	99 1f       	adc	r25, r25
    5516:	2a 95       	dec	r18
    5518:	e2 f7       	brpl	.-8      	; 0x5512 <DIO_enumConnectPullUp+0x1b0>
    551a:	80 95       	com	r24
    551c:	84 23       	and	r24, r20
    551e:	8c 93       	st	X, r24
        SET_BIT(PORTC_REG, Copy_u8PIN);
    5520:	a5 e3       	ldi	r26, 0x35	; 53
    5522:	b0 e0       	ldi	r27, 0x00	; 0
    5524:	e5 e3       	ldi	r30, 0x35	; 53
    5526:	f0 e0       	ldi	r31, 0x00	; 0
    5528:	80 81       	ld	r24, Z
    552a:	48 2f       	mov	r20, r24
    552c:	8b 81       	ldd	r24, Y+3	; 0x03
    552e:	28 2f       	mov	r18, r24
    5530:	30 e0       	ldi	r19, 0x00	; 0
    5532:	81 e0       	ldi	r24, 0x01	; 1
    5534:	90 e0       	ldi	r25, 0x00	; 0
    5536:	02 2e       	mov	r0, r18
    5538:	02 c0       	rjmp	.+4      	; 0x553e <DIO_enumConnectPullUp+0x1dc>
    553a:	88 0f       	add	r24, r24
    553c:	99 1f       	adc	r25, r25
    553e:	0a 94       	dec	r0
    5540:	e2 f7       	brpl	.-8      	; 0x553a <DIO_enumConnectPullUp+0x1d8>
    5542:	84 2b       	or	r24, r20
    5544:	8c 93       	st	X, r24
    5546:	5c c0       	rjmp	.+184    	; 0x5600 <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTC_REG, Copy_u8PIN);
    5548:	a5 e3       	ldi	r26, 0x35	; 53
    554a:	b0 e0       	ldi	r27, 0x00	; 0
    554c:	e5 e3       	ldi	r30, 0x35	; 53
    554e:	f0 e0       	ldi	r31, 0x00	; 0
    5550:	80 81       	ld	r24, Z
    5552:	48 2f       	mov	r20, r24
    5554:	8b 81       	ldd	r24, Y+3	; 0x03
    5556:	28 2f       	mov	r18, r24
    5558:	30 e0       	ldi	r19, 0x00	; 0
    555a:	81 e0       	ldi	r24, 0x01	; 1
    555c:	90 e0       	ldi	r25, 0x00	; 0
    555e:	02 2e       	mov	r0, r18
    5560:	02 c0       	rjmp	.+4      	; 0x5566 <DIO_enumConnectPullUp+0x204>
    5562:	88 0f       	add	r24, r24
    5564:	99 1f       	adc	r25, r25
    5566:	0a 94       	dec	r0
    5568:	e2 f7       	brpl	.-8      	; 0x5562 <DIO_enumConnectPullUp+0x200>
    556a:	80 95       	com	r24
    556c:	84 23       	and	r24, r20
    556e:	8c 93       	st	X, r24
    5570:	47 c0       	rjmp	.+142    	; 0x5600 <DIO_enumConnectPullUp+0x29e>
      }
      break;
      /* Connect or disconnect the pull up resistance to the given pin in port D */
    case DIO_PORTD:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    5572:	8c 81       	ldd	r24, Y+4	; 0x04
    5574:	81 30       	cpi	r24, 0x01	; 1
    5576:	71 f5       	brne	.+92     	; 0x55d4 <DIO_enumConnectPullUp+0x272>
      {
        CLR_BIT(SFIOR_REG, PUD);
    5578:	a0 e5       	ldi	r26, 0x50	; 80
    557a:	b0 e0       	ldi	r27, 0x00	; 0
    557c:	e0 e5       	ldi	r30, 0x50	; 80
    557e:	f0 e0       	ldi	r31, 0x00	; 0
    5580:	80 81       	ld	r24, Z
    5582:	8b 7f       	andi	r24, 0xFB	; 251
    5584:	8c 93       	st	X, r24
        CLR_BIT(DDRD_REG, Copy_u8PIN);
    5586:	a1 e3       	ldi	r26, 0x31	; 49
    5588:	b0 e0       	ldi	r27, 0x00	; 0
    558a:	e1 e3       	ldi	r30, 0x31	; 49
    558c:	f0 e0       	ldi	r31, 0x00	; 0
    558e:	80 81       	ld	r24, Z
    5590:	48 2f       	mov	r20, r24
    5592:	8b 81       	ldd	r24, Y+3	; 0x03
    5594:	28 2f       	mov	r18, r24
    5596:	30 e0       	ldi	r19, 0x00	; 0
    5598:	81 e0       	ldi	r24, 0x01	; 1
    559a:	90 e0       	ldi	r25, 0x00	; 0
    559c:	02 c0       	rjmp	.+4      	; 0x55a2 <DIO_enumConnectPullUp+0x240>
    559e:	88 0f       	add	r24, r24
    55a0:	99 1f       	adc	r25, r25
    55a2:	2a 95       	dec	r18
    55a4:	e2 f7       	brpl	.-8      	; 0x559e <DIO_enumConnectPullUp+0x23c>
    55a6:	80 95       	com	r24
    55a8:	84 23       	and	r24, r20
    55aa:	8c 93       	st	X, r24
        SET_BIT(PORTD_REG, Copy_u8PIN);
    55ac:	a2 e3       	ldi	r26, 0x32	; 50
    55ae:	b0 e0       	ldi	r27, 0x00	; 0
    55b0:	e2 e3       	ldi	r30, 0x32	; 50
    55b2:	f0 e0       	ldi	r31, 0x00	; 0
    55b4:	80 81       	ld	r24, Z
    55b6:	48 2f       	mov	r20, r24
    55b8:	8b 81       	ldd	r24, Y+3	; 0x03
    55ba:	28 2f       	mov	r18, r24
    55bc:	30 e0       	ldi	r19, 0x00	; 0
    55be:	81 e0       	ldi	r24, 0x01	; 1
    55c0:	90 e0       	ldi	r25, 0x00	; 0
    55c2:	02 2e       	mov	r0, r18
    55c4:	02 c0       	rjmp	.+4      	; 0x55ca <DIO_enumConnectPullUp+0x268>
    55c6:	88 0f       	add	r24, r24
    55c8:	99 1f       	adc	r25, r25
    55ca:	0a 94       	dec	r0
    55cc:	e2 f7       	brpl	.-8      	; 0x55c6 <DIO_enumConnectPullUp+0x264>
    55ce:	84 2b       	or	r24, r20
    55d0:	8c 93       	st	X, r24
    55d2:	16 c0       	rjmp	.+44     	; 0x5600 <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTD_REG, Copy_u8PIN);
    55d4:	a2 e3       	ldi	r26, 0x32	; 50
    55d6:	b0 e0       	ldi	r27, 0x00	; 0
    55d8:	e2 e3       	ldi	r30, 0x32	; 50
    55da:	f0 e0       	ldi	r31, 0x00	; 0
    55dc:	80 81       	ld	r24, Z
    55de:	48 2f       	mov	r20, r24
    55e0:	8b 81       	ldd	r24, Y+3	; 0x03
    55e2:	28 2f       	mov	r18, r24
    55e4:	30 e0       	ldi	r19, 0x00	; 0
    55e6:	81 e0       	ldi	r24, 0x01	; 1
    55e8:	90 e0       	ldi	r25, 0x00	; 0
    55ea:	02 2e       	mov	r0, r18
    55ec:	02 c0       	rjmp	.+4      	; 0x55f2 <DIO_enumConnectPullUp+0x290>
    55ee:	88 0f       	add	r24, r24
    55f0:	99 1f       	adc	r25, r25
    55f2:	0a 94       	dec	r0
    55f4:	e2 f7       	brpl	.-8      	; 0x55ee <DIO_enumConnectPullUp+0x28c>
    55f6:	80 95       	com	r24
    55f8:	84 23       	and	r24, r20
    55fa:	8c 93       	st	X, r24
    55fc:	01 c0       	rjmp	.+2      	; 0x5600 <DIO_enumConnectPullUp+0x29e>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    55fe:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    5600:	89 81       	ldd	r24, Y+1	; 0x01
}
    5602:	26 96       	adiw	r28, 0x06	; 6
    5604:	0f b6       	in	r0, 0x3f	; 63
    5606:	f8 94       	cli
    5608:	de bf       	out	0x3e, r29	; 62
    560a:	0f be       	out	0x3f, r0	; 63
    560c:	cd bf       	out	0x3d, r28	; 61
    560e:	cf 91       	pop	r28
    5610:	df 91       	pop	r29
    5612:	08 95       	ret

00005614 <DIO_vWriteLowNibble>:
 *Hint1 : Low Nibbles = Least Pins [0:3]
 *Hint2 : This Function also take the first 4 bits from the value (#) => xxxx#### AND put it in low nobbles
 *
 */
DIO_ErrorStatus DIO_vWriteLowNibble(u8 Copy_u8PORT, u8 value)
{
    5614:	df 93       	push	r29
    5616:	cf 93       	push	r28
    5618:	00 d0       	rcall	.+0      	; 0x561a <DIO_vWriteLowNibble+0x6>
    561a:	00 d0       	rcall	.+0      	; 0x561c <DIO_vWriteLowNibble+0x8>
    561c:	0f 92       	push	r0
    561e:	cd b7       	in	r28, 0x3d	; 61
    5620:	de b7       	in	r29, 0x3e	; 62
    5622:	8a 83       	std	Y+2, r24	; 0x02
    5624:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK;
    5626:	81 e0       	ldi	r24, 0x01	; 1
    5628:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    562a:	8a 81       	ldd	r24, Y+2	; 0x02
    562c:	84 30       	cpi	r24, 0x04	; 4
    562e:	08 f0       	brcs	.+2      	; 0x5632 <DIO_vWriteLowNibble+0x1e>
    5630:	62 c0       	rjmp	.+196    	; 0x56f6 <DIO_vWriteLowNibble+0xe2>
  {
    value &= 0x0F;
    5632:	8b 81       	ldd	r24, Y+3	; 0x03
    5634:	8f 70       	andi	r24, 0x0F	; 15
    5636:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    5638:	8a 81       	ldd	r24, Y+2	; 0x02
    563a:	28 2f       	mov	r18, r24
    563c:	30 e0       	ldi	r19, 0x00	; 0
    563e:	3d 83       	std	Y+5, r19	; 0x05
    5640:	2c 83       	std	Y+4, r18	; 0x04
    5642:	8c 81       	ldd	r24, Y+4	; 0x04
    5644:	9d 81       	ldd	r25, Y+5	; 0x05
    5646:	81 30       	cpi	r24, 0x01	; 1
    5648:	91 05       	cpc	r25, r1
    564a:	29 f1       	breq	.+74     	; 0x5696 <DIO_vWriteLowNibble+0x82>
    564c:	2c 81       	ldd	r18, Y+4	; 0x04
    564e:	3d 81       	ldd	r19, Y+5	; 0x05
    5650:	22 30       	cpi	r18, 0x02	; 2
    5652:	31 05       	cpc	r19, r1
    5654:	2c f4       	brge	.+10     	; 0x5660 <DIO_vWriteLowNibble+0x4c>
    5656:	8c 81       	ldd	r24, Y+4	; 0x04
    5658:	9d 81       	ldd	r25, Y+5	; 0x05
    565a:	00 97       	sbiw	r24, 0x00	; 0
    565c:	61 f0       	breq	.+24     	; 0x5676 <DIO_vWriteLowNibble+0x62>
    565e:	4c c0       	rjmp	.+152    	; 0x56f8 <DIO_vWriteLowNibble+0xe4>
    5660:	2c 81       	ldd	r18, Y+4	; 0x04
    5662:	3d 81       	ldd	r19, Y+5	; 0x05
    5664:	22 30       	cpi	r18, 0x02	; 2
    5666:	31 05       	cpc	r19, r1
    5668:	31 f1       	breq	.+76     	; 0x56b6 <DIO_vWriteLowNibble+0xa2>
    566a:	8c 81       	ldd	r24, Y+4	; 0x04
    566c:	9d 81       	ldd	r25, Y+5	; 0x05
    566e:	83 30       	cpi	r24, 0x03	; 3
    5670:	91 05       	cpc	r25, r1
    5672:	89 f1       	breq	.+98     	; 0x56d6 <DIO_vWriteLowNibble+0xc2>
    5674:	41 c0       	rjmp	.+130    	; 0x56f8 <DIO_vWriteLowNibble+0xe4>
    {
    case DIO_PORTA:
      PORTA_REG &= 0xF0; // Set only the high nibble of the port A by the given value
    5676:	ab e3       	ldi	r26, 0x3B	; 59
    5678:	b0 e0       	ldi	r27, 0x00	; 0
    567a:	eb e3       	ldi	r30, 0x3B	; 59
    567c:	f0 e0       	ldi	r31, 0x00	; 0
    567e:	80 81       	ld	r24, Z
    5680:	80 7f       	andi	r24, 0xF0	; 240
    5682:	8c 93       	st	X, r24
      PORTA_REG |= value;
    5684:	ab e3       	ldi	r26, 0x3B	; 59
    5686:	b0 e0       	ldi	r27, 0x00	; 0
    5688:	eb e3       	ldi	r30, 0x3B	; 59
    568a:	f0 e0       	ldi	r31, 0x00	; 0
    568c:	90 81       	ld	r25, Z
    568e:	8b 81       	ldd	r24, Y+3	; 0x03
    5690:	89 2b       	or	r24, r25
    5692:	8c 93       	st	X, r24
    5694:	31 c0       	rjmp	.+98     	; 0x56f8 <DIO_vWriteLowNibble+0xe4>
      break;
    case DIO_PORTB:
      PORTB_REG &= 0xF0; // Set only the high nibble of the port B by the given value
    5696:	a8 e3       	ldi	r26, 0x38	; 56
    5698:	b0 e0       	ldi	r27, 0x00	; 0
    569a:	e8 e3       	ldi	r30, 0x38	; 56
    569c:	f0 e0       	ldi	r31, 0x00	; 0
    569e:	80 81       	ld	r24, Z
    56a0:	80 7f       	andi	r24, 0xF0	; 240
    56a2:	8c 93       	st	X, r24
      PORTB_REG |= value;
    56a4:	a8 e3       	ldi	r26, 0x38	; 56
    56a6:	b0 e0       	ldi	r27, 0x00	; 0
    56a8:	e8 e3       	ldi	r30, 0x38	; 56
    56aa:	f0 e0       	ldi	r31, 0x00	; 0
    56ac:	90 81       	ld	r25, Z
    56ae:	8b 81       	ldd	r24, Y+3	; 0x03
    56b0:	89 2b       	or	r24, r25
    56b2:	8c 93       	st	X, r24
    56b4:	21 c0       	rjmp	.+66     	; 0x56f8 <DIO_vWriteLowNibble+0xe4>
      break;
    case DIO_PORTC:
      PORTC_REG &= 0xF0; // Set only the high nibble of the port C by the given value
    56b6:	a5 e3       	ldi	r26, 0x35	; 53
    56b8:	b0 e0       	ldi	r27, 0x00	; 0
    56ba:	e5 e3       	ldi	r30, 0x35	; 53
    56bc:	f0 e0       	ldi	r31, 0x00	; 0
    56be:	80 81       	ld	r24, Z
    56c0:	80 7f       	andi	r24, 0xF0	; 240
    56c2:	8c 93       	st	X, r24
      PORTC_REG |= value;
    56c4:	a5 e3       	ldi	r26, 0x35	; 53
    56c6:	b0 e0       	ldi	r27, 0x00	; 0
    56c8:	e5 e3       	ldi	r30, 0x35	; 53
    56ca:	f0 e0       	ldi	r31, 0x00	; 0
    56cc:	90 81       	ld	r25, Z
    56ce:	8b 81       	ldd	r24, Y+3	; 0x03
    56d0:	89 2b       	or	r24, r25
    56d2:	8c 93       	st	X, r24
    56d4:	11 c0       	rjmp	.+34     	; 0x56f8 <DIO_vWriteLowNibble+0xe4>
      break;
    case DIO_PORTD:
      PORTD_REG &= 0xF0; // Set only the high nibble of the port D by the given value
    56d6:	a2 e3       	ldi	r26, 0x32	; 50
    56d8:	b0 e0       	ldi	r27, 0x00	; 0
    56da:	e2 e3       	ldi	r30, 0x32	; 50
    56dc:	f0 e0       	ldi	r31, 0x00	; 0
    56de:	80 81       	ld	r24, Z
    56e0:	80 7f       	andi	r24, 0xF0	; 240
    56e2:	8c 93       	st	X, r24
      PORTD_REG |= value;
    56e4:	a2 e3       	ldi	r26, 0x32	; 50
    56e6:	b0 e0       	ldi	r27, 0x00	; 0
    56e8:	e2 e3       	ldi	r30, 0x32	; 50
    56ea:	f0 e0       	ldi	r31, 0x00	; 0
    56ec:	90 81       	ld	r25, Z
    56ee:	8b 81       	ldd	r24, Y+3	; 0x03
    56f0:	89 2b       	or	r24, r25
    56f2:	8c 93       	st	X, r24
    56f4:	01 c0       	rjmp	.+2      	; 0x56f8 <DIO_vWriteLowNibble+0xe4>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    56f6:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    56f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    56fa:	0f 90       	pop	r0
    56fc:	0f 90       	pop	r0
    56fe:	0f 90       	pop	r0
    5700:	0f 90       	pop	r0
    5702:	0f 90       	pop	r0
    5704:	cf 91       	pop	r28
    5706:	df 91       	pop	r29
    5708:	08 95       	ret

0000570a <DIO_vWriteHighNibble>:
 *Hint1 : High Nibbles = Most Pins [4:7]
 *Hint2 : This Function take the first 4 bits from the value (#) => xxxx#### AND put it in high nobbles
 *
 */
DIO_ErrorStatus DIO_vWriteHighNibble(u8 Copy_u8PORT, u8 value)
{
    570a:	df 93       	push	r29
    570c:	cf 93       	push	r28
    570e:	00 d0       	rcall	.+0      	; 0x5710 <DIO_vWriteHighNibble+0x6>
    5710:	00 d0       	rcall	.+0      	; 0x5712 <DIO_vWriteHighNibble+0x8>
    5712:	0f 92       	push	r0
    5714:	cd b7       	in	r28, 0x3d	; 61
    5716:	de b7       	in	r29, 0x3e	; 62
    5718:	8a 83       	std	Y+2, r24	; 0x02
    571a:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK;
    571c:	81 e0       	ldi	r24, 0x01	; 1
    571e:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    5720:	8a 81       	ldd	r24, Y+2	; 0x02
    5722:	84 30       	cpi	r24, 0x04	; 4
    5724:	08 f0       	brcs	.+2      	; 0x5728 <DIO_vWriteHighNibble+0x1e>
    5726:	63 c0       	rjmp	.+198    	; 0x57ee <DIO_vWriteHighNibble+0xe4>
  {
    value <<= 4;
    5728:	8b 81       	ldd	r24, Y+3	; 0x03
    572a:	82 95       	swap	r24
    572c:	80 7f       	andi	r24, 0xF0	; 240
    572e:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    5730:	8a 81       	ldd	r24, Y+2	; 0x02
    5732:	28 2f       	mov	r18, r24
    5734:	30 e0       	ldi	r19, 0x00	; 0
    5736:	3d 83       	std	Y+5, r19	; 0x05
    5738:	2c 83       	std	Y+4, r18	; 0x04
    573a:	8c 81       	ldd	r24, Y+4	; 0x04
    573c:	9d 81       	ldd	r25, Y+5	; 0x05
    573e:	81 30       	cpi	r24, 0x01	; 1
    5740:	91 05       	cpc	r25, r1
    5742:	29 f1       	breq	.+74     	; 0x578e <DIO_vWriteHighNibble+0x84>
    5744:	2c 81       	ldd	r18, Y+4	; 0x04
    5746:	3d 81       	ldd	r19, Y+5	; 0x05
    5748:	22 30       	cpi	r18, 0x02	; 2
    574a:	31 05       	cpc	r19, r1
    574c:	2c f4       	brge	.+10     	; 0x5758 <DIO_vWriteHighNibble+0x4e>
    574e:	8c 81       	ldd	r24, Y+4	; 0x04
    5750:	9d 81       	ldd	r25, Y+5	; 0x05
    5752:	00 97       	sbiw	r24, 0x00	; 0
    5754:	61 f0       	breq	.+24     	; 0x576e <DIO_vWriteHighNibble+0x64>
    5756:	4c c0       	rjmp	.+152    	; 0x57f0 <DIO_vWriteHighNibble+0xe6>
    5758:	2c 81       	ldd	r18, Y+4	; 0x04
    575a:	3d 81       	ldd	r19, Y+5	; 0x05
    575c:	22 30       	cpi	r18, 0x02	; 2
    575e:	31 05       	cpc	r19, r1
    5760:	31 f1       	breq	.+76     	; 0x57ae <DIO_vWriteHighNibble+0xa4>
    5762:	8c 81       	ldd	r24, Y+4	; 0x04
    5764:	9d 81       	ldd	r25, Y+5	; 0x05
    5766:	83 30       	cpi	r24, 0x03	; 3
    5768:	91 05       	cpc	r25, r1
    576a:	89 f1       	breq	.+98     	; 0x57ce <DIO_vWriteHighNibble+0xc4>
    576c:	41 c0       	rjmp	.+130    	; 0x57f0 <DIO_vWriteHighNibble+0xe6>
    {
    case DIO_PORTA:
      PORTA_REG &= 0x0F;
    576e:	ab e3       	ldi	r26, 0x3B	; 59
    5770:	b0 e0       	ldi	r27, 0x00	; 0
    5772:	eb e3       	ldi	r30, 0x3B	; 59
    5774:	f0 e0       	ldi	r31, 0x00	; 0
    5776:	80 81       	ld	r24, Z
    5778:	8f 70       	andi	r24, 0x0F	; 15
    577a:	8c 93       	st	X, r24
      PORTA_REG|= value;
    577c:	ab e3       	ldi	r26, 0x3B	; 59
    577e:	b0 e0       	ldi	r27, 0x00	; 0
    5780:	eb e3       	ldi	r30, 0x3B	; 59
    5782:	f0 e0       	ldi	r31, 0x00	; 0
    5784:	90 81       	ld	r25, Z
    5786:	8b 81       	ldd	r24, Y+3	; 0x03
    5788:	89 2b       	or	r24, r25
    578a:	8c 93       	st	X, r24
    578c:	31 c0       	rjmp	.+98     	; 0x57f0 <DIO_vWriteHighNibble+0xe6>
      break;
    case DIO_PORTB:
      PORTB_REG &= 0x0F;
    578e:	a8 e3       	ldi	r26, 0x38	; 56
    5790:	b0 e0       	ldi	r27, 0x00	; 0
    5792:	e8 e3       	ldi	r30, 0x38	; 56
    5794:	f0 e0       	ldi	r31, 0x00	; 0
    5796:	80 81       	ld	r24, Z
    5798:	8f 70       	andi	r24, 0x0F	; 15
    579a:	8c 93       	st	X, r24
      PORTB_REG |= value;
    579c:	a8 e3       	ldi	r26, 0x38	; 56
    579e:	b0 e0       	ldi	r27, 0x00	; 0
    57a0:	e8 e3       	ldi	r30, 0x38	; 56
    57a2:	f0 e0       	ldi	r31, 0x00	; 0
    57a4:	90 81       	ld	r25, Z
    57a6:	8b 81       	ldd	r24, Y+3	; 0x03
    57a8:	89 2b       	or	r24, r25
    57aa:	8c 93       	st	X, r24
    57ac:	21 c0       	rjmp	.+66     	; 0x57f0 <DIO_vWriteHighNibble+0xe6>
      break;
    case DIO_PORTC:
      PORTC_REG &= 0x0F;
    57ae:	a5 e3       	ldi	r26, 0x35	; 53
    57b0:	b0 e0       	ldi	r27, 0x00	; 0
    57b2:	e5 e3       	ldi	r30, 0x35	; 53
    57b4:	f0 e0       	ldi	r31, 0x00	; 0
    57b6:	80 81       	ld	r24, Z
    57b8:	8f 70       	andi	r24, 0x0F	; 15
    57ba:	8c 93       	st	X, r24
      PORTC_REG |= value;
    57bc:	a5 e3       	ldi	r26, 0x35	; 53
    57be:	b0 e0       	ldi	r27, 0x00	; 0
    57c0:	e5 e3       	ldi	r30, 0x35	; 53
    57c2:	f0 e0       	ldi	r31, 0x00	; 0
    57c4:	90 81       	ld	r25, Z
    57c6:	8b 81       	ldd	r24, Y+3	; 0x03
    57c8:	89 2b       	or	r24, r25
    57ca:	8c 93       	st	X, r24
    57cc:	11 c0       	rjmp	.+34     	; 0x57f0 <DIO_vWriteHighNibble+0xe6>
      break;
    case DIO_PORTD:
      PORTD_REG &= 0x0F;
    57ce:	a2 e3       	ldi	r26, 0x32	; 50
    57d0:	b0 e0       	ldi	r27, 0x00	; 0
    57d2:	e2 e3       	ldi	r30, 0x32	; 50
    57d4:	f0 e0       	ldi	r31, 0x00	; 0
    57d6:	80 81       	ld	r24, Z
    57d8:	8f 70       	andi	r24, 0x0F	; 15
    57da:	8c 93       	st	X, r24
      PORTD_REG |= value;
    57dc:	a2 e3       	ldi	r26, 0x32	; 50
    57de:	b0 e0       	ldi	r27, 0x00	; 0
    57e0:	e2 e3       	ldi	r30, 0x32	; 50
    57e2:	f0 e0       	ldi	r31, 0x00	; 0
    57e4:	90 81       	ld	r25, Z
    57e6:	8b 81       	ldd	r24, Y+3	; 0x03
    57e8:	89 2b       	or	r24, r25
    57ea:	8c 93       	st	X, r24
    57ec:	01 c0       	rjmp	.+2      	; 0x57f0 <DIO_vWriteHighNibble+0xe6>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    57ee:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    57f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    57f2:	0f 90       	pop	r0
    57f4:	0f 90       	pop	r0
    57f6:	0f 90       	pop	r0
    57f8:	0f 90       	pop	r0
    57fa:	0f 90       	pop	r0
    57fc:	cf 91       	pop	r28
    57fe:	df 91       	pop	r29
    5800:	08 95       	ret

00005802 <DIO_vSetLowNibbleDir>:

/*___________________________________________________________________________________________________________________*/

DIO_ErrorStatus DIO_vSetLowNibbleDir(u8 Copy_u8PORT, u8 value)
{DIO_ErrorStatus LOC_enumState = DIO_OK;
    5802:	df 93       	push	r29
    5804:	cf 93       	push	r28
    5806:	00 d0       	rcall	.+0      	; 0x5808 <DIO_vSetLowNibbleDir+0x6>
    5808:	00 d0       	rcall	.+0      	; 0x580a <DIO_vSetLowNibbleDir+0x8>
    580a:	0f 92       	push	r0
    580c:	cd b7       	in	r28, 0x3d	; 61
    580e:	de b7       	in	r29, 0x3e	; 62
    5810:	8a 83       	std	Y+2, r24	; 0x02
    5812:	6b 83       	std	Y+3, r22	; 0x03
    5814:	81 e0       	ldi	r24, 0x01	; 1
    5816:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    5818:	8a 81       	ldd	r24, Y+2	; 0x02
    581a:	84 30       	cpi	r24, 0x04	; 4
    581c:	08 f0       	brcs	.+2      	; 0x5820 <DIO_vSetLowNibbleDir+0x1e>
    581e:	62 c0       	rjmp	.+196    	; 0x58e4 <DIO_vSetLowNibbleDir+0xe2>
  {
    value &= 0x0F;
    5820:	8b 81       	ldd	r24, Y+3	; 0x03
    5822:	8f 70       	andi	r24, 0x0F	; 15
    5824:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    5826:	8a 81       	ldd	r24, Y+2	; 0x02
    5828:	28 2f       	mov	r18, r24
    582a:	30 e0       	ldi	r19, 0x00	; 0
    582c:	3d 83       	std	Y+5, r19	; 0x05
    582e:	2c 83       	std	Y+4, r18	; 0x04
    5830:	8c 81       	ldd	r24, Y+4	; 0x04
    5832:	9d 81       	ldd	r25, Y+5	; 0x05
    5834:	81 30       	cpi	r24, 0x01	; 1
    5836:	91 05       	cpc	r25, r1
    5838:	29 f1       	breq	.+74     	; 0x5884 <DIO_vSetLowNibbleDir+0x82>
    583a:	2c 81       	ldd	r18, Y+4	; 0x04
    583c:	3d 81       	ldd	r19, Y+5	; 0x05
    583e:	22 30       	cpi	r18, 0x02	; 2
    5840:	31 05       	cpc	r19, r1
    5842:	2c f4       	brge	.+10     	; 0x584e <DIO_vSetLowNibbleDir+0x4c>
    5844:	8c 81       	ldd	r24, Y+4	; 0x04
    5846:	9d 81       	ldd	r25, Y+5	; 0x05
    5848:	00 97       	sbiw	r24, 0x00	; 0
    584a:	61 f0       	breq	.+24     	; 0x5864 <DIO_vSetLowNibbleDir+0x62>
    584c:	4c c0       	rjmp	.+152    	; 0x58e6 <DIO_vSetLowNibbleDir+0xe4>
    584e:	2c 81       	ldd	r18, Y+4	; 0x04
    5850:	3d 81       	ldd	r19, Y+5	; 0x05
    5852:	22 30       	cpi	r18, 0x02	; 2
    5854:	31 05       	cpc	r19, r1
    5856:	31 f1       	breq	.+76     	; 0x58a4 <DIO_vSetLowNibbleDir+0xa2>
    5858:	8c 81       	ldd	r24, Y+4	; 0x04
    585a:	9d 81       	ldd	r25, Y+5	; 0x05
    585c:	83 30       	cpi	r24, 0x03	; 3
    585e:	91 05       	cpc	r25, r1
    5860:	89 f1       	breq	.+98     	; 0x58c4 <DIO_vSetLowNibbleDir+0xc2>
    5862:	41 c0       	rjmp	.+130    	; 0x58e6 <DIO_vSetLowNibbleDir+0xe4>
    {
    case DIO_PORTA:
      DDRA_REG &= 0xF0; // Set only the high nibble of the port A by the given value
    5864:	aa e3       	ldi	r26, 0x3A	; 58
    5866:	b0 e0       	ldi	r27, 0x00	; 0
    5868:	ea e3       	ldi	r30, 0x3A	; 58
    586a:	f0 e0       	ldi	r31, 0x00	; 0
    586c:	80 81       	ld	r24, Z
    586e:	80 7f       	andi	r24, 0xF0	; 240
    5870:	8c 93       	st	X, r24
      DDRA_REG |= value;
    5872:	aa e3       	ldi	r26, 0x3A	; 58
    5874:	b0 e0       	ldi	r27, 0x00	; 0
    5876:	ea e3       	ldi	r30, 0x3A	; 58
    5878:	f0 e0       	ldi	r31, 0x00	; 0
    587a:	90 81       	ld	r25, Z
    587c:	8b 81       	ldd	r24, Y+3	; 0x03
    587e:	89 2b       	or	r24, r25
    5880:	8c 93       	st	X, r24
    5882:	31 c0       	rjmp	.+98     	; 0x58e6 <DIO_vSetLowNibbleDir+0xe4>
      break;
    case DIO_PORTB:
      DDRB_REG &= 0xF0; // Set only the high nibble of the port B by the given value
    5884:	a7 e3       	ldi	r26, 0x37	; 55
    5886:	b0 e0       	ldi	r27, 0x00	; 0
    5888:	e7 e3       	ldi	r30, 0x37	; 55
    588a:	f0 e0       	ldi	r31, 0x00	; 0
    588c:	80 81       	ld	r24, Z
    588e:	80 7f       	andi	r24, 0xF0	; 240
    5890:	8c 93       	st	X, r24
      DDRB_REG |= value;
    5892:	a7 e3       	ldi	r26, 0x37	; 55
    5894:	b0 e0       	ldi	r27, 0x00	; 0
    5896:	e7 e3       	ldi	r30, 0x37	; 55
    5898:	f0 e0       	ldi	r31, 0x00	; 0
    589a:	90 81       	ld	r25, Z
    589c:	8b 81       	ldd	r24, Y+3	; 0x03
    589e:	89 2b       	or	r24, r25
    58a0:	8c 93       	st	X, r24
    58a2:	21 c0       	rjmp	.+66     	; 0x58e6 <DIO_vSetLowNibbleDir+0xe4>
      break;
    case DIO_PORTC:
      DDRC_REG &= 0xF0; // Set only the high nibble of the port C by the given value
    58a4:	a4 e3       	ldi	r26, 0x34	; 52
    58a6:	b0 e0       	ldi	r27, 0x00	; 0
    58a8:	e4 e3       	ldi	r30, 0x34	; 52
    58aa:	f0 e0       	ldi	r31, 0x00	; 0
    58ac:	80 81       	ld	r24, Z
    58ae:	80 7f       	andi	r24, 0xF0	; 240
    58b0:	8c 93       	st	X, r24
      DDRC_REG |= value;
    58b2:	a4 e3       	ldi	r26, 0x34	; 52
    58b4:	b0 e0       	ldi	r27, 0x00	; 0
    58b6:	e4 e3       	ldi	r30, 0x34	; 52
    58b8:	f0 e0       	ldi	r31, 0x00	; 0
    58ba:	90 81       	ld	r25, Z
    58bc:	8b 81       	ldd	r24, Y+3	; 0x03
    58be:	89 2b       	or	r24, r25
    58c0:	8c 93       	st	X, r24
    58c2:	11 c0       	rjmp	.+34     	; 0x58e6 <DIO_vSetLowNibbleDir+0xe4>
      break;
    case DIO_PORTD:
      DDRD_REG &= 0xF0; // Set only the high nibble of the port D by the given value
    58c4:	a1 e3       	ldi	r26, 0x31	; 49
    58c6:	b0 e0       	ldi	r27, 0x00	; 0
    58c8:	e1 e3       	ldi	r30, 0x31	; 49
    58ca:	f0 e0       	ldi	r31, 0x00	; 0
    58cc:	80 81       	ld	r24, Z
    58ce:	80 7f       	andi	r24, 0xF0	; 240
    58d0:	8c 93       	st	X, r24
      DDRD_REG|= value;
    58d2:	a1 e3       	ldi	r26, 0x31	; 49
    58d4:	b0 e0       	ldi	r27, 0x00	; 0
    58d6:	e1 e3       	ldi	r30, 0x31	; 49
    58d8:	f0 e0       	ldi	r31, 0x00	; 0
    58da:	90 81       	ld	r25, Z
    58dc:	8b 81       	ldd	r24, Y+3	; 0x03
    58de:	89 2b       	or	r24, r25
    58e0:	8c 93       	st	X, r24
    58e2:	01 c0       	rjmp	.+2      	; 0x58e6 <DIO_vSetLowNibbleDir+0xe4>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    58e4:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    58e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    58e8:	0f 90       	pop	r0
    58ea:	0f 90       	pop	r0
    58ec:	0f 90       	pop	r0
    58ee:	0f 90       	pop	r0
    58f0:	0f 90       	pop	r0
    58f2:	cf 91       	pop	r28
    58f4:	df 91       	pop	r29
    58f6:	08 95       	ret

000058f8 <DIO_vSetHighNibbleDir>:

/*___________________________________________________________________________________________________________________*/

DIO_ErrorStatus DIO_vSetHighNibbleDir(u8 Copy_u8PORT, u8 value)
{
    58f8:	df 93       	push	r29
    58fa:	cf 93       	push	r28
    58fc:	00 d0       	rcall	.+0      	; 0x58fe <DIO_vSetHighNibbleDir+0x6>
    58fe:	00 d0       	rcall	.+0      	; 0x5900 <DIO_vSetHighNibbleDir+0x8>
    5900:	0f 92       	push	r0
    5902:	cd b7       	in	r28, 0x3d	; 61
    5904:	de b7       	in	r29, 0x3e	; 62
    5906:	8a 83       	std	Y+2, r24	; 0x02
    5908:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK;
    590a:	81 e0       	ldi	r24, 0x01	; 1
    590c:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    590e:	8a 81       	ldd	r24, Y+2	; 0x02
    5910:	84 30       	cpi	r24, 0x04	; 4
    5912:	08 f0       	brcs	.+2      	; 0x5916 <DIO_vSetHighNibbleDir+0x1e>
    5914:	63 c0       	rjmp	.+198    	; 0x59dc <DIO_vSetHighNibbleDir+0xe4>
  {
    value <<= 4;
    5916:	8b 81       	ldd	r24, Y+3	; 0x03
    5918:	82 95       	swap	r24
    591a:	80 7f       	andi	r24, 0xF0	; 240
    591c:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    591e:	8a 81       	ldd	r24, Y+2	; 0x02
    5920:	28 2f       	mov	r18, r24
    5922:	30 e0       	ldi	r19, 0x00	; 0
    5924:	3d 83       	std	Y+5, r19	; 0x05
    5926:	2c 83       	std	Y+4, r18	; 0x04
    5928:	8c 81       	ldd	r24, Y+4	; 0x04
    592a:	9d 81       	ldd	r25, Y+5	; 0x05
    592c:	81 30       	cpi	r24, 0x01	; 1
    592e:	91 05       	cpc	r25, r1
    5930:	29 f1       	breq	.+74     	; 0x597c <DIO_vSetHighNibbleDir+0x84>
    5932:	2c 81       	ldd	r18, Y+4	; 0x04
    5934:	3d 81       	ldd	r19, Y+5	; 0x05
    5936:	22 30       	cpi	r18, 0x02	; 2
    5938:	31 05       	cpc	r19, r1
    593a:	2c f4       	brge	.+10     	; 0x5946 <DIO_vSetHighNibbleDir+0x4e>
    593c:	8c 81       	ldd	r24, Y+4	; 0x04
    593e:	9d 81       	ldd	r25, Y+5	; 0x05
    5940:	00 97       	sbiw	r24, 0x00	; 0
    5942:	61 f0       	breq	.+24     	; 0x595c <DIO_vSetHighNibbleDir+0x64>
    5944:	4c c0       	rjmp	.+152    	; 0x59de <DIO_vSetHighNibbleDir+0xe6>
    5946:	2c 81       	ldd	r18, Y+4	; 0x04
    5948:	3d 81       	ldd	r19, Y+5	; 0x05
    594a:	22 30       	cpi	r18, 0x02	; 2
    594c:	31 05       	cpc	r19, r1
    594e:	31 f1       	breq	.+76     	; 0x599c <DIO_vSetHighNibbleDir+0xa4>
    5950:	8c 81       	ldd	r24, Y+4	; 0x04
    5952:	9d 81       	ldd	r25, Y+5	; 0x05
    5954:	83 30       	cpi	r24, 0x03	; 3
    5956:	91 05       	cpc	r25, r1
    5958:	89 f1       	breq	.+98     	; 0x59bc <DIO_vSetHighNibbleDir+0xc4>
    595a:	41 c0       	rjmp	.+130    	; 0x59de <DIO_vSetHighNibbleDir+0xe6>
    {
    case DIO_PORTA:
      DDRA_REG &= 0x0F;
    595c:	aa e3       	ldi	r26, 0x3A	; 58
    595e:	b0 e0       	ldi	r27, 0x00	; 0
    5960:	ea e3       	ldi	r30, 0x3A	; 58
    5962:	f0 e0       	ldi	r31, 0x00	; 0
    5964:	80 81       	ld	r24, Z
    5966:	8f 70       	andi	r24, 0x0F	; 15
    5968:	8c 93       	st	X, r24
      DDRA_REG |= value;
    596a:	aa e3       	ldi	r26, 0x3A	; 58
    596c:	b0 e0       	ldi	r27, 0x00	; 0
    596e:	ea e3       	ldi	r30, 0x3A	; 58
    5970:	f0 e0       	ldi	r31, 0x00	; 0
    5972:	90 81       	ld	r25, Z
    5974:	8b 81       	ldd	r24, Y+3	; 0x03
    5976:	89 2b       	or	r24, r25
    5978:	8c 93       	st	X, r24
    597a:	31 c0       	rjmp	.+98     	; 0x59de <DIO_vSetHighNibbleDir+0xe6>
      break;
    case DIO_PORTB:
      DDRB_REG &= 0x0F;
    597c:	a7 e3       	ldi	r26, 0x37	; 55
    597e:	b0 e0       	ldi	r27, 0x00	; 0
    5980:	e7 e3       	ldi	r30, 0x37	; 55
    5982:	f0 e0       	ldi	r31, 0x00	; 0
    5984:	80 81       	ld	r24, Z
    5986:	8f 70       	andi	r24, 0x0F	; 15
    5988:	8c 93       	st	X, r24
      DDRB_REG |= value;
    598a:	a7 e3       	ldi	r26, 0x37	; 55
    598c:	b0 e0       	ldi	r27, 0x00	; 0
    598e:	e7 e3       	ldi	r30, 0x37	; 55
    5990:	f0 e0       	ldi	r31, 0x00	; 0
    5992:	90 81       	ld	r25, Z
    5994:	8b 81       	ldd	r24, Y+3	; 0x03
    5996:	89 2b       	or	r24, r25
    5998:	8c 93       	st	X, r24
    599a:	21 c0       	rjmp	.+66     	; 0x59de <DIO_vSetHighNibbleDir+0xe6>
      break;
    case DIO_PORTC:
      DDRC_REG &= 0x0F;
    599c:	a4 e3       	ldi	r26, 0x34	; 52
    599e:	b0 e0       	ldi	r27, 0x00	; 0
    59a0:	e4 e3       	ldi	r30, 0x34	; 52
    59a2:	f0 e0       	ldi	r31, 0x00	; 0
    59a4:	80 81       	ld	r24, Z
    59a6:	8f 70       	andi	r24, 0x0F	; 15
    59a8:	8c 93       	st	X, r24
      DDRC_REG |= value;
    59aa:	a4 e3       	ldi	r26, 0x34	; 52
    59ac:	b0 e0       	ldi	r27, 0x00	; 0
    59ae:	e4 e3       	ldi	r30, 0x34	; 52
    59b0:	f0 e0       	ldi	r31, 0x00	; 0
    59b2:	90 81       	ld	r25, Z
    59b4:	8b 81       	ldd	r24, Y+3	; 0x03
    59b6:	89 2b       	or	r24, r25
    59b8:	8c 93       	st	X, r24
    59ba:	11 c0       	rjmp	.+34     	; 0x59de <DIO_vSetHighNibbleDir+0xe6>
      break;
    case DIO_PORTD:
      DDRD_REG &= 0x0F;
    59bc:	a1 e3       	ldi	r26, 0x31	; 49
    59be:	b0 e0       	ldi	r27, 0x00	; 0
    59c0:	e1 e3       	ldi	r30, 0x31	; 49
    59c2:	f0 e0       	ldi	r31, 0x00	; 0
    59c4:	80 81       	ld	r24, Z
    59c6:	8f 70       	andi	r24, 0x0F	; 15
    59c8:	8c 93       	st	X, r24
      DDRD_REG |= value;
    59ca:	a1 e3       	ldi	r26, 0x31	; 49
    59cc:	b0 e0       	ldi	r27, 0x00	; 0
    59ce:	e1 e3       	ldi	r30, 0x31	; 49
    59d0:	f0 e0       	ldi	r31, 0x00	; 0
    59d2:	90 81       	ld	r25, Z
    59d4:	8b 81       	ldd	r24, Y+3	; 0x03
    59d6:	89 2b       	or	r24, r25
    59d8:	8c 93       	st	X, r24
    59da:	01 c0       	rjmp	.+2      	; 0x59de <DIO_vSetHighNibbleDir+0xe6>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    59dc:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    59de:	89 81       	ldd	r24, Y+1	; 0x01
}
    59e0:	0f 90       	pop	r0
    59e2:	0f 90       	pop	r0
    59e4:	0f 90       	pop	r0
    59e6:	0f 90       	pop	r0
    59e8:	0f 90       	pop	r0
    59ea:	cf 91       	pop	r28
    59ec:	df 91       	pop	r29
    59ee:	08 95       	ret

000059f0 <EEPROM_vWrite>:
Function Returns     : void
Function Arguments   : unsigned short address, unsigned char data
Function Description :  write one byte to the given  address.
*/
void EEPROM_vWrite(u16 address, u8 data)
{
    59f0:	df 93       	push	r29
    59f2:	cf 93       	push	r28
    59f4:	00 d0       	rcall	.+0      	; 0x59f6 <EEPROM_vWrite+0x6>
    59f6:	0f 92       	push	r0
    59f8:	cd b7       	in	r28, 0x3d	; 61
    59fa:	de b7       	in	r29, 0x3e	; 62
    59fc:	9a 83       	std	Y+2, r25	; 0x02
    59fe:	89 83       	std	Y+1, r24	; 0x01
    5a00:	6b 83       	std	Y+3, r22	; 0x03
    /*set up address register*/
    EEARL_REG = (u8)address;  // تعيين الجزء المنخفض من العنوان
    5a02:	ee e3       	ldi	r30, 0x3E	; 62
    5a04:	f0 e0       	ldi	r31, 0x00	; 0
    5a06:	89 81       	ldd	r24, Y+1	; 0x01
    5a08:	80 83       	st	Z, r24
    EEARH_REG = (u8)(address >> 8);  // تعيين الجزء المرتفع من العنوان
    5a0a:	ef e3       	ldi	r30, 0x3F	; 63
    5a0c:	f0 e0       	ldi	r31, 0x00	; 0
    5a0e:	89 81       	ldd	r24, Y+1	; 0x01
    5a10:	9a 81       	ldd	r25, Y+2	; 0x02
    5a12:	89 2f       	mov	r24, r25
    5a14:	99 27       	eor	r25, r25
    5a16:	80 83       	st	Z, r24
    /*set up data register*/
    EEDR_REG = data;
    5a18:	ed e3       	ldi	r30, 0x3D	; 61
    5a1a:	f0 e0       	ldi	r31, 0x00	; 0
    5a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    5a1e:	80 83       	st	Z, r24
    /*write logical one to EEMWE*/
    SET_BIT(EECR_REG, EECR_EEMWE);
    5a20:	ac e3       	ldi	r26, 0x3C	; 60
    5a22:	b0 e0       	ldi	r27, 0x00	; 0
    5a24:	ec e3       	ldi	r30, 0x3C	; 60
    5a26:	f0 e0       	ldi	r31, 0x00	; 0
    5a28:	80 81       	ld	r24, Z
    5a2a:	84 60       	ori	r24, 0x04	; 4
    5a2c:	8c 93       	st	X, r24
    /*start EEPROM write by setting EEWE*/
    SET_BIT(EECR_REG, EECR_EEWE);
    5a2e:	ac e3       	ldi	r26, 0x3C	; 60
    5a30:	b0 e0       	ldi	r27, 0x00	; 0
    5a32:	ec e3       	ldi	r30, 0x3C	; 60
    5a34:	f0 e0       	ldi	r31, 0x00	; 0
    5a36:	80 81       	ld	r24, Z
    5a38:	82 60       	ori	r24, 0x02	; 2
    5a3a:	8c 93       	st	X, r24
    /* wait for completion of write operation*/
    while (READ_BIT(EECR_REG, EECR_EEWE) == 1);
    5a3c:	ec e3       	ldi	r30, 0x3C	; 60
    5a3e:	f0 e0       	ldi	r31, 0x00	; 0
    5a40:	80 81       	ld	r24, Z
    5a42:	86 95       	lsr	r24
    5a44:	88 2f       	mov	r24, r24
    5a46:	90 e0       	ldi	r25, 0x00	; 0
    5a48:	81 70       	andi	r24, 0x01	; 1
    5a4a:	90 70       	andi	r25, 0x00	; 0
    5a4c:	88 23       	and	r24, r24
    5a4e:	b1 f7       	brne	.-20     	; 0x5a3c <EEPROM_vWrite+0x4c>
}
    5a50:	0f 90       	pop	r0
    5a52:	0f 90       	pop	r0
    5a54:	0f 90       	pop	r0
    5a56:	cf 91       	pop	r28
    5a58:	df 91       	pop	r29
    5a5a:	08 95       	ret

00005a5c <EEPROM_vRead>:
Function Returns     : unsigned char
Function Arguments   :  unsigned short address
Function Description :  read one byte from the given  address.
*/
u8 EEPROM_vRead(u16 address)
{
    5a5c:	df 93       	push	r29
    5a5e:	cf 93       	push	r28
    5a60:	00 d0       	rcall	.+0      	; 0x5a62 <EEPROM_vRead+0x6>
    5a62:	cd b7       	in	r28, 0x3d	; 61
    5a64:	de b7       	in	r29, 0x3e	; 62
    5a66:	9a 83       	std	Y+2, r25	; 0x02
    5a68:	89 83       	std	Y+1, r24	; 0x01
  /*set up address register*/
  EEARL_REG = (char)address;
    5a6a:	ee e3       	ldi	r30, 0x3E	; 62
    5a6c:	f0 e0       	ldi	r31, 0x00	; 0
    5a6e:	89 81       	ldd	r24, Y+1	; 0x01
    5a70:	80 83       	st	Z, r24
  EEARH_REG = (char)(address >> 8);
    5a72:	ef e3       	ldi	r30, 0x3F	; 63
    5a74:	f0 e0       	ldi	r31, 0x00	; 0
    5a76:	89 81       	ldd	r24, Y+1	; 0x01
    5a78:	9a 81       	ldd	r25, Y+2	; 0x02
    5a7a:	89 2f       	mov	r24, r25
    5a7c:	99 27       	eor	r25, r25
    5a7e:	80 83       	st	Z, r24
  /*start EEPROM read by setting EERE*/
  SET_BIT(EECR_REG, EECR_EERE);
    5a80:	ac e3       	ldi	r26, 0x3C	; 60
    5a82:	b0 e0       	ldi	r27, 0x00	; 0
    5a84:	ec e3       	ldi	r30, 0x3C	; 60
    5a86:	f0 e0       	ldi	r31, 0x00	; 0
    5a88:	80 81       	ld	r24, Z
    5a8a:	81 60       	ori	r24, 0x01	; 1
    5a8c:	8c 93       	st	X, r24
  /*return data from data register*/
  return EEDR_REG;
    5a8e:	ed e3       	ldi	r30, 0x3D	; 61
    5a90:	f0 e0       	ldi	r31, 0x00	; 0
    5a92:	80 81       	ld	r24, Z
}
    5a94:	0f 90       	pop	r0
    5a96:	0f 90       	pop	r0
    5a98:	cf 91       	pop	r28
    5a9a:	df 91       	pop	r29
    5a9c:	08 95       	ret

00005a9e <EEPROM_write>:

// دالة الكتابة (تدعم بيانات متعددة البايتات)
void EEPROM_write(unsigned short address, const u8 *data, u8 size) {
    5a9e:	df 93       	push	r29
    5aa0:	cf 93       	push	r28
    5aa2:	00 d0       	rcall	.+0      	; 0x5aa4 <EEPROM_write+0x6>
    5aa4:	00 d0       	rcall	.+0      	; 0x5aa6 <EEPROM_write+0x8>
    5aa6:	00 d0       	rcall	.+0      	; 0x5aa8 <EEPROM_write+0xa>
    5aa8:	cd b7       	in	r28, 0x3d	; 61
    5aaa:	de b7       	in	r29, 0x3e	; 62
    5aac:	9b 83       	std	Y+3, r25	; 0x03
    5aae:	8a 83       	std	Y+2, r24	; 0x02
    5ab0:	7d 83       	std	Y+5, r23	; 0x05
    5ab2:	6c 83       	std	Y+4, r22	; 0x04
    5ab4:	4e 83       	std	Y+6, r20	; 0x06
    for(u8 i = 0; i < size; i++) {
    5ab6:	19 82       	std	Y+1, r1	; 0x01
    5ab8:	33 c0       	rjmp	.+102    	; 0x5b20 <EEPROM_write+0x82>
        EEAR = address + i; // تعيين العنوان الحالي
    5aba:	ee e3       	ldi	r30, 0x3E	; 62
    5abc:	f0 e0       	ldi	r31, 0x00	; 0
    5abe:	89 81       	ldd	r24, Y+1	; 0x01
    5ac0:	28 2f       	mov	r18, r24
    5ac2:	30 e0       	ldi	r19, 0x00	; 0
    5ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    5ac6:	9b 81       	ldd	r25, Y+3	; 0x03
    5ac8:	82 0f       	add	r24, r18
    5aca:	93 1f       	adc	r25, r19
    5acc:	91 83       	std	Z+1, r25	; 0x01
    5ace:	80 83       	st	Z, r24
        EEDR = data[i]; // تعيين البيانات
    5ad0:	ad e3       	ldi	r26, 0x3D	; 61
    5ad2:	b0 e0       	ldi	r27, 0x00	; 0
    5ad4:	89 81       	ldd	r24, Y+1	; 0x01
    5ad6:	28 2f       	mov	r18, r24
    5ad8:	30 e0       	ldi	r19, 0x00	; 0
    5ada:	8c 81       	ldd	r24, Y+4	; 0x04
    5adc:	9d 81       	ldd	r25, Y+5	; 0x05
    5ade:	fc 01       	movw	r30, r24
    5ae0:	e2 0f       	add	r30, r18
    5ae2:	f3 1f       	adc	r31, r19
    5ae4:	80 81       	ld	r24, Z
    5ae6:	8c 93       	st	X, r24
        SET_BIT(EECR, EEMWE); // تمكين الكتابة
    5ae8:	ac e3       	ldi	r26, 0x3C	; 60
    5aea:	b0 e0       	ldi	r27, 0x00	; 0
    5aec:	ec e3       	ldi	r30, 0x3C	; 60
    5aee:	f0 e0       	ldi	r31, 0x00	; 0
    5af0:	80 81       	ld	r24, Z
    5af2:	84 60       	ori	r24, 0x04	; 4
    5af4:	8c 93       	st	X, r24
        SET_BIT(EECR, EEWE); // بدء الكتابة
    5af6:	ac e3       	ldi	r26, 0x3C	; 60
    5af8:	b0 e0       	ldi	r27, 0x00	; 0
    5afa:	ec e3       	ldi	r30, 0x3C	; 60
    5afc:	f0 e0       	ldi	r31, 0x00	; 0
    5afe:	80 81       	ld	r24, Z
    5b00:	82 60       	ori	r24, 0x02	; 2
    5b02:	8c 93       	st	X, r24
        while (GET_BIT(EECR, EEWE)); // انتظار اكتمال الكتابة
    5b04:	ec e3       	ldi	r30, 0x3C	; 60
    5b06:	f0 e0       	ldi	r31, 0x00	; 0
    5b08:	80 81       	ld	r24, Z
    5b0a:	88 2f       	mov	r24, r24
    5b0c:	90 e0       	ldi	r25, 0x00	; 0
    5b0e:	82 70       	andi	r24, 0x02	; 2
    5b10:	90 70       	andi	r25, 0x00	; 0
    5b12:	95 95       	asr	r25
    5b14:	87 95       	ror	r24
    5b16:	00 97       	sbiw	r24, 0x00	; 0
    5b18:	a9 f7       	brne	.-22     	; 0x5b04 <EEPROM_write+0x66>
  return EEDR_REG;
}

// دالة الكتابة (تدعم بيانات متعددة البايتات)
void EEPROM_write(unsigned short address, const u8 *data, u8 size) {
    for(u8 i = 0; i < size; i++) {
    5b1a:	89 81       	ldd	r24, Y+1	; 0x01
    5b1c:	8f 5f       	subi	r24, 0xFF	; 255
    5b1e:	89 83       	std	Y+1, r24	; 0x01
    5b20:	99 81       	ldd	r25, Y+1	; 0x01
    5b22:	8e 81       	ldd	r24, Y+6	; 0x06
    5b24:	98 17       	cp	r25, r24
    5b26:	48 f2       	brcs	.-110    	; 0x5aba <EEPROM_write+0x1c>
        EEDR = data[i]; // تعيين البيانات
        SET_BIT(EECR, EEMWE); // تمكين الكتابة
        SET_BIT(EECR, EEWE); // بدء الكتابة
        while (GET_BIT(EECR, EEWE)); // انتظار اكتمال الكتابة
    }
}
    5b28:	26 96       	adiw	r28, 0x06	; 6
    5b2a:	0f b6       	in	r0, 0x3f	; 63
    5b2c:	f8 94       	cli
    5b2e:	de bf       	out	0x3e, r29	; 62
    5b30:	0f be       	out	0x3f, r0	; 63
    5b32:	cd bf       	out	0x3d, r28	; 61
    5b34:	cf 91       	pop	r28
    5b36:	df 91       	pop	r29
    5b38:	08 95       	ret

00005b3a <EEPROM_read>:

// دالة القراءة (تدعم بيانات متعددة البايتات)
void EEPROM_read(unsigned short address, u8 *data, u8 size) {
    5b3a:	df 93       	push	r29
    5b3c:	cf 93       	push	r28
    5b3e:	00 d0       	rcall	.+0      	; 0x5b40 <EEPROM_read+0x6>
    5b40:	00 d0       	rcall	.+0      	; 0x5b42 <EEPROM_read+0x8>
    5b42:	00 d0       	rcall	.+0      	; 0x5b44 <EEPROM_read+0xa>
    5b44:	cd b7       	in	r28, 0x3d	; 61
    5b46:	de b7       	in	r29, 0x3e	; 62
    5b48:	9b 83       	std	Y+3, r25	; 0x03
    5b4a:	8a 83       	std	Y+2, r24	; 0x02
    5b4c:	7d 83       	std	Y+5, r23	; 0x05
    5b4e:	6c 83       	std	Y+4, r22	; 0x04
    5b50:	4e 83       	std	Y+6, r20	; 0x06
    for(u8 i = 0; i < size; i++) {
    5b52:	19 82       	std	Y+1, r1	; 0x01
    5b54:	21 c0       	rjmp	.+66     	; 0x5b98 <EEPROM_read+0x5e>
        EEAR = address + i; // تعيين العنوان الحالي
    5b56:	ee e3       	ldi	r30, 0x3E	; 62
    5b58:	f0 e0       	ldi	r31, 0x00	; 0
    5b5a:	89 81       	ldd	r24, Y+1	; 0x01
    5b5c:	28 2f       	mov	r18, r24
    5b5e:	30 e0       	ldi	r19, 0x00	; 0
    5b60:	8a 81       	ldd	r24, Y+2	; 0x02
    5b62:	9b 81       	ldd	r25, Y+3	; 0x03
    5b64:	82 0f       	add	r24, r18
    5b66:	93 1f       	adc	r25, r19
    5b68:	91 83       	std	Z+1, r25	; 0x01
    5b6a:	80 83       	st	Z, r24
        SET_BIT(EECR, EERE); // بدء القراءة
    5b6c:	ac e3       	ldi	r26, 0x3C	; 60
    5b6e:	b0 e0       	ldi	r27, 0x00	; 0
    5b70:	ec e3       	ldi	r30, 0x3C	; 60
    5b72:	f0 e0       	ldi	r31, 0x00	; 0
    5b74:	80 81       	ld	r24, Z
    5b76:	81 60       	ori	r24, 0x01	; 1
    5b78:	8c 93       	st	X, r24
        data[i] = EEDR; // تخزين البيانات المقروءة
    5b7a:	89 81       	ldd	r24, Y+1	; 0x01
    5b7c:	28 2f       	mov	r18, r24
    5b7e:	30 e0       	ldi	r19, 0x00	; 0
    5b80:	8c 81       	ldd	r24, Y+4	; 0x04
    5b82:	9d 81       	ldd	r25, Y+5	; 0x05
    5b84:	dc 01       	movw	r26, r24
    5b86:	a2 0f       	add	r26, r18
    5b88:	b3 1f       	adc	r27, r19
    5b8a:	ed e3       	ldi	r30, 0x3D	; 61
    5b8c:	f0 e0       	ldi	r31, 0x00	; 0
    5b8e:	80 81       	ld	r24, Z
    5b90:	8c 93       	st	X, r24
    }
}

// دالة القراءة (تدعم بيانات متعددة البايتات)
void EEPROM_read(unsigned short address, u8 *data, u8 size) {
    for(u8 i = 0; i < size; i++) {
    5b92:	89 81       	ldd	r24, Y+1	; 0x01
    5b94:	8f 5f       	subi	r24, 0xFF	; 255
    5b96:	89 83       	std	Y+1, r24	; 0x01
    5b98:	99 81       	ldd	r25, Y+1	; 0x01
    5b9a:	8e 81       	ldd	r24, Y+6	; 0x06
    5b9c:	98 17       	cp	r25, r24
    5b9e:	d8 f2       	brcs	.-74     	; 0x5b56 <EEPROM_read+0x1c>
        EEAR = address + i; // تعيين العنوان الحالي
        SET_BIT(EECR, EERE); // بدء القراءة
        data[i] = EEDR; // تخزين البيانات المقروءة
    }
}
    5ba0:	26 96       	adiw	r28, 0x06	; 6
    5ba2:	0f b6       	in	r0, 0x3f	; 63
    5ba4:	f8 94       	cli
    5ba6:	de bf       	out	0x3e, r29	; 62
    5ba8:	0f be       	out	0x3f, r0	; 63
    5baa:	cd bf       	out	0x3d, r28	; 61
    5bac:	cf 91       	pop	r28
    5bae:	df 91       	pop	r29
    5bb0:	08 95       	ret

00005bb2 <EEPROM_vWriteBlock>:

// في ملف EEPROM_prog.c أضف التنفيذ:
void EEPROM_vWriteBlock(u16 address, const u8 *data, u8 size) {
    5bb2:	df 93       	push	r29
    5bb4:	cf 93       	push	r28
    5bb6:	cd b7       	in	r28, 0x3d	; 61
    5bb8:	de b7       	in	r29, 0x3e	; 62
    5bba:	64 97       	sbiw	r28, 0x14	; 20
    5bbc:	0f b6       	in	r0, 0x3f	; 63
    5bbe:	f8 94       	cli
    5bc0:	de bf       	out	0x3e, r29	; 62
    5bc2:	0f be       	out	0x3f, r0	; 63
    5bc4:	cd bf       	out	0x3d, r28	; 61
    5bc6:	99 8b       	std	Y+17, r25	; 0x11
    5bc8:	88 8b       	std	Y+16, r24	; 0x10
    5bca:	7b 8b       	std	Y+19, r23	; 0x13
    5bcc:	6a 8b       	std	Y+18, r22	; 0x12
    5bce:	4c 8b       	std	Y+20, r20	; 0x14
    for(u8 i = 0; i < size; i++) {
    5bd0:	1f 86       	std	Y+15, r1	; 0x0f
    5bd2:	8a c0       	rjmp	.+276    	; 0x5ce8 <EEPROM_vWriteBlock+0x136>
        EEPROM_vWrite(address + i, data[i]);
    5bd4:	8f 85       	ldd	r24, Y+15	; 0x0f
    5bd6:	28 2f       	mov	r18, r24
    5bd8:	30 e0       	ldi	r19, 0x00	; 0
    5bda:	88 89       	ldd	r24, Y+16	; 0x10
    5bdc:	99 89       	ldd	r25, Y+17	; 0x11
    5bde:	a9 01       	movw	r20, r18
    5be0:	48 0f       	add	r20, r24
    5be2:	59 1f       	adc	r21, r25
    5be4:	8f 85       	ldd	r24, Y+15	; 0x0f
    5be6:	28 2f       	mov	r18, r24
    5be8:	30 e0       	ldi	r19, 0x00	; 0
    5bea:	8a 89       	ldd	r24, Y+18	; 0x12
    5bec:	9b 89       	ldd	r25, Y+19	; 0x13
    5bee:	fc 01       	movw	r30, r24
    5bf0:	e2 0f       	add	r30, r18
    5bf2:	f3 1f       	adc	r31, r19
    5bf4:	20 81       	ld	r18, Z
    5bf6:	ca 01       	movw	r24, r20
    5bf8:	62 2f       	mov	r22, r18
    5bfa:	0e 94 f8 2c 	call	0x59f0	; 0x59f0 <EEPROM_vWrite>
    5bfe:	80 e0       	ldi	r24, 0x00	; 0
    5c00:	90 e0       	ldi	r25, 0x00	; 0
    5c02:	a0 e2       	ldi	r26, 0x20	; 32
    5c04:	b1 e4       	ldi	r27, 0x41	; 65
    5c06:	8b 87       	std	Y+11, r24	; 0x0b
    5c08:	9c 87       	std	Y+12, r25	; 0x0c
    5c0a:	ad 87       	std	Y+13, r26	; 0x0d
    5c0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5c10:	7c 85       	ldd	r23, Y+12	; 0x0c
    5c12:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c14:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c16:	20 e0       	ldi	r18, 0x00	; 0
    5c18:	30 e0       	ldi	r19, 0x00	; 0
    5c1a:	4a ef       	ldi	r20, 0xFA	; 250
    5c1c:	54 e4       	ldi	r21, 0x44	; 68
    5c1e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5c22:	dc 01       	movw	r26, r24
    5c24:	cb 01       	movw	r24, r22
    5c26:	8f 83       	std	Y+7, r24	; 0x07
    5c28:	98 87       	std	Y+8, r25	; 0x08
    5c2a:	a9 87       	std	Y+9, r26	; 0x09
    5c2c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5c2e:	6f 81       	ldd	r22, Y+7	; 0x07
    5c30:	78 85       	ldd	r23, Y+8	; 0x08
    5c32:	89 85       	ldd	r24, Y+9	; 0x09
    5c34:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c36:	20 e0       	ldi	r18, 0x00	; 0
    5c38:	30 e0       	ldi	r19, 0x00	; 0
    5c3a:	40 e8       	ldi	r20, 0x80	; 128
    5c3c:	5f e3       	ldi	r21, 0x3F	; 63
    5c3e:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    5c42:	88 23       	and	r24, r24
    5c44:	2c f4       	brge	.+10     	; 0x5c50 <EEPROM_vWriteBlock+0x9e>
		__ticks = 1;
    5c46:	81 e0       	ldi	r24, 0x01	; 1
    5c48:	90 e0       	ldi	r25, 0x00	; 0
    5c4a:	9e 83       	std	Y+6, r25	; 0x06
    5c4c:	8d 83       	std	Y+5, r24	; 0x05
    5c4e:	3f c0       	rjmp	.+126    	; 0x5cce <EEPROM_vWriteBlock+0x11c>
	else if (__tmp > 65535)
    5c50:	6f 81       	ldd	r22, Y+7	; 0x07
    5c52:	78 85       	ldd	r23, Y+8	; 0x08
    5c54:	89 85       	ldd	r24, Y+9	; 0x09
    5c56:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c58:	20 e0       	ldi	r18, 0x00	; 0
    5c5a:	3f ef       	ldi	r19, 0xFF	; 255
    5c5c:	4f e7       	ldi	r20, 0x7F	; 127
    5c5e:	57 e4       	ldi	r21, 0x47	; 71
    5c60:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    5c64:	18 16       	cp	r1, r24
    5c66:	4c f5       	brge	.+82     	; 0x5cba <EEPROM_vWriteBlock+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c68:	6b 85       	ldd	r22, Y+11	; 0x0b
    5c6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    5c6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c70:	20 e0       	ldi	r18, 0x00	; 0
    5c72:	30 e0       	ldi	r19, 0x00	; 0
    5c74:	40 e2       	ldi	r20, 0x20	; 32
    5c76:	51 e4       	ldi	r21, 0x41	; 65
    5c78:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5c7c:	dc 01       	movw	r26, r24
    5c7e:	cb 01       	movw	r24, r22
    5c80:	bc 01       	movw	r22, r24
    5c82:	cd 01       	movw	r24, r26
    5c84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c88:	dc 01       	movw	r26, r24
    5c8a:	cb 01       	movw	r24, r22
    5c8c:	9e 83       	std	Y+6, r25	; 0x06
    5c8e:	8d 83       	std	Y+5, r24	; 0x05
    5c90:	0f c0       	rjmp	.+30     	; 0x5cb0 <EEPROM_vWriteBlock+0xfe>
    5c92:	88 ec       	ldi	r24, 0xC8	; 200
    5c94:	90 e0       	ldi	r25, 0x00	; 0
    5c96:	9c 83       	std	Y+4, r25	; 0x04
    5c98:	8b 83       	std	Y+3, r24	; 0x03
    5c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    5c9c:	9c 81       	ldd	r25, Y+4	; 0x04
    5c9e:	01 97       	sbiw	r24, 0x01	; 1
    5ca0:	f1 f7       	brne	.-4      	; 0x5c9e <EEPROM_vWriteBlock+0xec>
    5ca2:	9c 83       	std	Y+4, r25	; 0x04
    5ca4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    5ca8:	9e 81       	ldd	r25, Y+6	; 0x06
    5caa:	01 97       	sbiw	r24, 0x01	; 1
    5cac:	9e 83       	std	Y+6, r25	; 0x06
    5cae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5cb0:	8d 81       	ldd	r24, Y+5	; 0x05
    5cb2:	9e 81       	ldd	r25, Y+6	; 0x06
    5cb4:	00 97       	sbiw	r24, 0x00	; 0
    5cb6:	69 f7       	brne	.-38     	; 0x5c92 <EEPROM_vWriteBlock+0xe0>
    5cb8:	14 c0       	rjmp	.+40     	; 0x5ce2 <EEPROM_vWriteBlock+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5cba:	6f 81       	ldd	r22, Y+7	; 0x07
    5cbc:	78 85       	ldd	r23, Y+8	; 0x08
    5cbe:	89 85       	ldd	r24, Y+9	; 0x09
    5cc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    5cc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5cc6:	dc 01       	movw	r26, r24
    5cc8:	cb 01       	movw	r24, r22
    5cca:	9e 83       	std	Y+6, r25	; 0x06
    5ccc:	8d 83       	std	Y+5, r24	; 0x05
    5cce:	8d 81       	ldd	r24, Y+5	; 0x05
    5cd0:	9e 81       	ldd	r25, Y+6	; 0x06
    5cd2:	9a 83       	std	Y+2, r25	; 0x02
    5cd4:	89 83       	std	Y+1, r24	; 0x01
    5cd6:	89 81       	ldd	r24, Y+1	; 0x01
    5cd8:	9a 81       	ldd	r25, Y+2	; 0x02
    5cda:	01 97       	sbiw	r24, 0x01	; 1
    5cdc:	f1 f7       	brne	.-4      	; 0x5cda <EEPROM_vWriteBlock+0x128>
    5cde:	9a 83       	std	Y+2, r25	; 0x02
    5ce0:	89 83       	std	Y+1, r24	; 0x01
    }
}

// في ملف EEPROM_prog.c أضف التنفيذ:
void EEPROM_vWriteBlock(u16 address, const u8 *data, u8 size) {
    for(u8 i = 0; i < size; i++) {
    5ce2:	8f 85       	ldd	r24, Y+15	; 0x0f
    5ce4:	8f 5f       	subi	r24, 0xFF	; 255
    5ce6:	8f 87       	std	Y+15, r24	; 0x0f
    5ce8:	9f 85       	ldd	r25, Y+15	; 0x0f
    5cea:	8c 89       	ldd	r24, Y+20	; 0x14
    5cec:	98 17       	cp	r25, r24
    5cee:	08 f4       	brcc	.+2      	; 0x5cf2 <EEPROM_vWriteBlock+0x140>
    5cf0:	71 cf       	rjmp	.-286    	; 0x5bd4 <EEPROM_vWriteBlock+0x22>
        EEPROM_vWrite(address + i, data[i]);
        _delay_ms(10); // تأخير لضمان اكتمال الكتابة
    }
}
    5cf2:	64 96       	adiw	r28, 0x14	; 20
    5cf4:	0f b6       	in	r0, 0x3f	; 63
    5cf6:	f8 94       	cli
    5cf8:	de bf       	out	0x3e, r29	; 62
    5cfa:	0f be       	out	0x3f, r0	; 63
    5cfc:	cd bf       	out	0x3d, r28	; 61
    5cfe:	cf 91       	pop	r28
    5d00:	df 91       	pop	r29
    5d02:	08 95       	ret

00005d04 <EEPROM_vReadBlock>:

void EEPROM_vReadBlock(u16 address, u8 *data, u8 size) {
    5d04:	0f 93       	push	r16
    5d06:	1f 93       	push	r17
    5d08:	df 93       	push	r29
    5d0a:	cf 93       	push	r28
    5d0c:	00 d0       	rcall	.+0      	; 0x5d0e <EEPROM_vReadBlock+0xa>
    5d0e:	00 d0       	rcall	.+0      	; 0x5d10 <EEPROM_vReadBlock+0xc>
    5d10:	00 d0       	rcall	.+0      	; 0x5d12 <EEPROM_vReadBlock+0xe>
    5d12:	cd b7       	in	r28, 0x3d	; 61
    5d14:	de b7       	in	r29, 0x3e	; 62
    5d16:	9b 83       	std	Y+3, r25	; 0x03
    5d18:	8a 83       	std	Y+2, r24	; 0x02
    5d1a:	7d 83       	std	Y+5, r23	; 0x05
    5d1c:	6c 83       	std	Y+4, r22	; 0x04
    5d1e:	4e 83       	std	Y+6, r20	; 0x06
    for(u8 i = 0; i < size; i++) {
    5d20:	19 82       	std	Y+1, r1	; 0x01
    5d22:	16 c0       	rjmp	.+44     	; 0x5d50 <EEPROM_vReadBlock+0x4c>
        data[i] = EEPROM_vRead(address + i);
    5d24:	89 81       	ldd	r24, Y+1	; 0x01
    5d26:	28 2f       	mov	r18, r24
    5d28:	30 e0       	ldi	r19, 0x00	; 0
    5d2a:	8c 81       	ldd	r24, Y+4	; 0x04
    5d2c:	9d 81       	ldd	r25, Y+5	; 0x05
    5d2e:	8c 01       	movw	r16, r24
    5d30:	02 0f       	add	r16, r18
    5d32:	13 1f       	adc	r17, r19
    5d34:	89 81       	ldd	r24, Y+1	; 0x01
    5d36:	28 2f       	mov	r18, r24
    5d38:	30 e0       	ldi	r19, 0x00	; 0
    5d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    5d3c:	9b 81       	ldd	r25, Y+3	; 0x03
    5d3e:	82 0f       	add	r24, r18
    5d40:	93 1f       	adc	r25, r19
    5d42:	0e 94 2e 2d 	call	0x5a5c	; 0x5a5c <EEPROM_vRead>
    5d46:	f8 01       	movw	r30, r16
    5d48:	80 83       	st	Z, r24
        _delay_ms(10); // تأخير لضمان اكتمال الكتابة
    }
}

void EEPROM_vReadBlock(u16 address, u8 *data, u8 size) {
    for(u8 i = 0; i < size; i++) {
    5d4a:	89 81       	ldd	r24, Y+1	; 0x01
    5d4c:	8f 5f       	subi	r24, 0xFF	; 255
    5d4e:	89 83       	std	Y+1, r24	; 0x01
    5d50:	99 81       	ldd	r25, Y+1	; 0x01
    5d52:	8e 81       	ldd	r24, Y+6	; 0x06
    5d54:	98 17       	cp	r25, r24
    5d56:	30 f3       	brcs	.-52     	; 0x5d24 <EEPROM_vReadBlock+0x20>
        data[i] = EEPROM_vRead(address + i);
    }
}
    5d58:	26 96       	adiw	r28, 0x06	; 6
    5d5a:	0f b6       	in	r0, 0x3f	; 63
    5d5c:	f8 94       	cli
    5d5e:	de bf       	out	0x3e, r29	; 62
    5d60:	0f be       	out	0x3f, r0	; 63
    5d62:	cd bf       	out	0x3d, r28	; 61
    5d64:	cf 91       	pop	r28
    5d66:	df 91       	pop	r29
    5d68:	1f 91       	pop	r17
    5d6a:	0f 91       	pop	r16
    5d6c:	08 95       	ret

00005d6e <TIMER0_vInit>:
static void (*TIMERS_pvCallBackFunc[8])(void) = {NULL} ;  /* we have 8 interrupt sources in timer  */


/*******************************************************************************************************************/
void TIMER0_vInit(void)
{
    5d6e:	df 93       	push	r29
    5d70:	cf 93       	push	r28
    5d72:	cd b7       	in	r28, 0x3d	; 61
    5d74:	de b7       	in	r29, 0x3e	; 62
			#endif

		#elif TIMER0_WAVEFORM_GENERATION_MODE == TIMER_FAST_PWM_MODE

			/*Initialize Waveform Generation Mode as Fast PWM Mode*/
			SET_BIT(TCCR0 , TCCR0_WGM00) ;
    5d76:	a3 e5       	ldi	r26, 0x53	; 83
    5d78:	b0 e0       	ldi	r27, 0x00	; 0
    5d7a:	e3 e5       	ldi	r30, 0x53	; 83
    5d7c:	f0 e0       	ldi	r31, 0x00	; 0
    5d7e:	80 81       	ld	r24, Z
    5d80:	80 64       	ori	r24, 0x40	; 64
    5d82:	8c 93       	st	X, r24
			SET_BIT(TCCR0 , TCCR0_WGM01) ;
    5d84:	a3 e5       	ldi	r26, 0x53	; 83
    5d86:	b0 e0       	ldi	r27, 0x00	; 0
    5d88:	e3 e5       	ldi	r30, 0x53	; 83
    5d8a:	f0 e0       	ldi	r31, 0x00	; 0
    5d8c:	80 81       	ld	r24, Z
    5d8e:	88 60       	ori	r24, 0x08	; 8
    5d90:	8c 93       	st	X, r24
			/*Set CTC Fast PWM MODE*/
			#if TIMER0_CTC_PWM_MODE == TIMER_OC_DISCONNECTED
					CLR_BIT(TCCR0 , TCCR0_COM00) ;
					CLR_BIT(TCCR0 , TCCR0_COM01) ;
			#elif TIMER0_CTC_PWM_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
					CLR_BIT(TCCR0 , TCCR0_COM00) ;
    5d92:	a3 e5       	ldi	r26, 0x53	; 83
    5d94:	b0 e0       	ldi	r27, 0x00	; 0
    5d96:	e3 e5       	ldi	r30, 0x53	; 83
    5d98:	f0 e0       	ldi	r31, 0x00	; 0
    5d9a:	80 81       	ld	r24, Z
    5d9c:	8f 7e       	andi	r24, 0xEF	; 239
    5d9e:	8c 93       	st	X, r24
					SET_BIT(TCCR0 , TCCR0_COM01) ;
    5da0:	a3 e5       	ldi	r26, 0x53	; 83
    5da2:	b0 e0       	ldi	r27, 0x00	; 0
    5da4:	e3 e5       	ldi	r30, 0x53	; 83
    5da6:	f0 e0       	ldi	r31, 0x00	; 0
    5da8:	80 81       	ld	r24, Z
    5daa:	80 62       	ori	r24, 0x20	; 32
    5dac:	8c 93       	st	X, r24
			#else
					#error "Wrong TIMER0_CTC_PWM_MODE Config"
			#endif

			/*Set the Required CTC Value*/
			OCR0 = TIMER0_CTC_VAL ;
    5dae:	ec e5       	ldi	r30, 0x5C	; 92
    5db0:	f0 e0       	ldi	r31, 0x00	; 0
    5db2:	10 82       	st	Z, r1
			#error "Wrong TIMER0_WAVEFORM_GENERATION_MODE Config"

		#endif

	/*Set the Required Prescaler*/
	TCCR0 &= TIMER_PRESCALER_MASK ;
    5db4:	a3 e5       	ldi	r26, 0x53	; 83
    5db6:	b0 e0       	ldi	r27, 0x00	; 0
    5db8:	e3 e5       	ldi	r30, 0x53	; 83
    5dba:	f0 e0       	ldi	r31, 0x00	; 0
    5dbc:	80 81       	ld	r24, Z
    5dbe:	88 7f       	andi	r24, 0xF8	; 248
    5dc0:	8c 93       	st	X, r24
	TCCR0 |= TIMER0_PRESCALER ;
    5dc2:	a3 e5       	ldi	r26, 0x53	; 83
    5dc4:	b0 e0       	ldi	r27, 0x00	; 0
    5dc6:	e3 e5       	ldi	r30, 0x53	; 83
    5dc8:	f0 e0       	ldi	r31, 0x00	; 0
    5dca:	80 81       	ld	r24, Z
    5dcc:	8c 93       	st	X, r24
}
    5dce:	cf 91       	pop	r28
    5dd0:	df 91       	pop	r29
    5dd2:	08 95       	ret

00005dd4 <TIMER1_vInit>:

/*___________________________________________________________________________________________________________________*/

void TIMER1_vInit(void)
{
    5dd4:	df 93       	push	r29
    5dd6:	cf 93       	push	r28
    5dd8:	cd b7       	in	r28, 0x3d	; 61
    5dda:	de b7       	in	r29, 0x3e	; 62
				SET_BIT(TCCR1A,TCCR1A_WGM10);
				SET_BIT(TCCR1A,TCCR1A_WGM11);
				SET_BIT(TCCR1B,TCCR1B_WGM12);
				SET_BIT(TCCR1B,TCCR1B_WGM13);
			#elif TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
				CLR_BIT(TCCR1A,TCCR1A_WGM10);
    5ddc:	af e4       	ldi	r26, 0x4F	; 79
    5dde:	b0 e0       	ldi	r27, 0x00	; 0
    5de0:	ef e4       	ldi	r30, 0x4F	; 79
    5de2:	f0 e0       	ldi	r31, 0x00	; 0
    5de4:	80 81       	ld	r24, Z
    5de6:	8e 7f       	andi	r24, 0xFE	; 254
    5de8:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1A_WGM11);
    5dea:	af e4       	ldi	r26, 0x4F	; 79
    5dec:	b0 e0       	ldi	r27, 0x00	; 0
    5dee:	ef e4       	ldi	r30, 0x4F	; 79
    5df0:	f0 e0       	ldi	r31, 0x00	; 0
    5df2:	80 81       	ld	r24, Z
    5df4:	82 60       	ori	r24, 0x02	; 2
    5df6:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,TCCR1B_WGM12);
    5df8:	ae e4       	ldi	r26, 0x4E	; 78
    5dfa:	b0 e0       	ldi	r27, 0x00	; 0
    5dfc:	ee e4       	ldi	r30, 0x4E	; 78
    5dfe:	f0 e0       	ldi	r31, 0x00	; 0
    5e00:	80 81       	ld	r24, Z
    5e02:	88 60       	ori	r24, 0x08	; 8
    5e04:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,TCCR1B_WGM13);
    5e06:	ae e4       	ldi	r26, 0x4E	; 78
    5e08:	b0 e0       	ldi	r27, 0x00	; 0
    5e0a:	ee e4       	ldi	r30, 0x4E	; 78
    5e0c:	f0 e0       	ldi	r31, 0x00	; 0
    5e0e:	80 81       	ld	r24, Z
    5e10:	80 61       	ori	r24, 0x10	; 16
    5e12:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
			#endif

			/*Set the require CTC Values*/
			OCR1A = TIMER1_CTCA_VAL ;
    5e14:	ea e4       	ldi	r30, 0x4A	; 74
    5e16:	f0 e0       	ldi	r31, 0x00	; 0
    5e18:	11 82       	std	Z+1, r1	; 0x01
    5e1a:	10 82       	st	Z, r1
			OCR1B = TIMER1_CTCB_VAL ;
    5e1c:	e8 e4       	ldi	r30, 0x48	; 72
    5e1e:	f0 e0       	ldi	r31, 0x00	; 0
    5e20:	11 82       	std	Z+1, r1	; 0x01
    5e22:	10 82       	st	Z, r1

			/*Set ICR1*/
			#if TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
				ICR1 = TIMER1_ICR1_VAL ;
    5e24:	e6 e4       	ldi	r30, 0x46	; 70
    5e26:	f0 e0       	ldi	r31, 0x00	; 0
    5e28:	80 e2       	ldi	r24, 0x20	; 32
    5e2a:	9e e4       	ldi	r25, 0x4E	; 78
    5e2c:	91 83       	std	Z+1, r25	; 0x01
    5e2e:	80 83       	st	Z, r24

				#if TIMER1_ICR_EDGE == RISING_EDGE
					SET_BIT(TCCR1B , TCCR1B_ICES1) ;
    5e30:	ae e4       	ldi	r26, 0x4E	; 78
    5e32:	b0 e0       	ldi	r27, 0x00	; 0
    5e34:	ee e4       	ldi	r30, 0x4E	; 78
    5e36:	f0 e0       	ldi	r31, 0x00	; 0
    5e38:	80 81       	ld	r24, Z
    5e3a:	80 64       	ori	r24, 0x40	; 64
    5e3c:	8c 93       	st	X, r24
			/*Set OCR1A mode*/
			#if TIMER1_OCR1A_MODE == TIMER_OC_DISCONNECTED
				CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
				CLR_BIT(TCCR1A , TCCR1A_COM1A1) ;
			#elif TIMER1_OCR1A_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
				CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
    5e3e:	af e4       	ldi	r26, 0x4F	; 79
    5e40:	b0 e0       	ldi	r27, 0x00	; 0
    5e42:	ef e4       	ldi	r30, 0x4F	; 79
    5e44:	f0 e0       	ldi	r31, 0x00	; 0
    5e46:	80 81       	ld	r24, Z
    5e48:	8f 7b       	andi	r24, 0xBF	; 191
    5e4a:	8c 93       	st	X, r24
				SET_BIT(TCCR1A , TCCR1A_COM1A1) ;
    5e4c:	af e4       	ldi	r26, 0x4F	; 79
    5e4e:	b0 e0       	ldi	r27, 0x00	; 0
    5e50:	ef e4       	ldi	r30, 0x4F	; 79
    5e52:	f0 e0       	ldi	r31, 0x00	; 0
    5e54:	80 81       	ld	r24, Z
    5e56:	80 68       	ori	r24, 0x80	; 128
    5e58:	8c 93       	st	X, r24
			/*Set OCR1B mode*/
			#if TIMER1_OCR1B_MODE == TIMER_OC_DISCONNECTED
				CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
				CLR_BIT(TCCR1A , TCCR1A_COM1B1) ;
			#elif TIMER1_OCR1B_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
				CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
    5e5a:	af e4       	ldi	r26, 0x4F	; 79
    5e5c:	b0 e0       	ldi	r27, 0x00	; 0
    5e5e:	ef e4       	ldi	r30, 0x4F	; 79
    5e60:	f0 e0       	ldi	r31, 0x00	; 0
    5e62:	80 81       	ld	r24, Z
    5e64:	8f 7e       	andi	r24, 0xEF	; 239
    5e66:	8c 93       	st	X, r24
				SET_BIT(TCCR1A , TCCR1A_COM1B1) ;
    5e68:	af e4       	ldi	r26, 0x4F	; 79
    5e6a:	b0 e0       	ldi	r27, 0x00	; 0
    5e6c:	ef e4       	ldi	r30, 0x4F	; 79
    5e6e:	f0 e0       	ldi	r31, 0x00	; 0
    5e70:	80 81       	ld	r24, Z
    5e72:	80 62       	ori	r24, 0x20	; 32
    5e74:	8c 93       	st	X, r24
				#error "Wrong TIMER1_OCR1B_MODE Config"
			#endif

			/*Timer1 PWM Interrupt Enable*/
			#if TIMER1_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE1) ;
    5e76:	a9 e5       	ldi	r26, 0x59	; 89
    5e78:	b0 e0       	ldi	r27, 0x00	; 0
    5e7a:	e9 e5       	ldi	r30, 0x59	; 89
    5e7c:	f0 e0       	ldi	r31, 0x00	; 0
    5e7e:	80 81       	ld	r24, Z
    5e80:	8b 7f       	andi	r24, 0xFB	; 251
    5e82:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_OVERFLOW_INTERRUPT Config"
			#endif

			#if TIMER1_CTCA_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE1A) ;
    5e84:	a9 e5       	ldi	r26, 0x59	; 89
    5e86:	b0 e0       	ldi	r27, 0x00	; 0
    5e88:	e9 e5       	ldi	r30, 0x59	; 89
    5e8a:	f0 e0       	ldi	r31, 0x00	; 0
    5e8c:	80 81       	ld	r24, Z
    5e8e:	8f 7e       	andi	r24, 0xEF	; 239
    5e90:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_CTCA_INTERRUPT Config"
			#endif

			#if TIMER1_CTCB_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE1B) ;
    5e92:	a9 e5       	ldi	r26, 0x59	; 89
    5e94:	b0 e0       	ldi	r27, 0x00	; 0
    5e96:	e9 e5       	ldi	r30, 0x59	; 89
    5e98:	f0 e0       	ldi	r31, 0x00	; 0
    5e9a:	80 81       	ld	r24, Z
    5e9c:	87 7f       	andi	r24, 0xF7	; 247
    5e9e:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_CTCB_INTERRUPT Config"
			#endif

			#if TIMER1_ICR_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TICIE1) ;
    5ea0:	a9 e5       	ldi	r26, 0x59	; 89
    5ea2:	b0 e0       	ldi	r27, 0x00	; 0
    5ea4:	e9 e5       	ldi	r30, 0x59	; 89
    5ea6:	f0 e0       	ldi	r31, 0x00	; 0
    5ea8:	80 81       	ld	r24, Z
    5eaa:	8f 7d       	andi	r24, 0xDF	; 223
    5eac:	8c 93       	st	X, r24
		#else
			#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
		#endif

	/*Set the Required Prescaler*/
	TCCR1B &= TIMER_PRESCALER_MASK ;
    5eae:	ae e4       	ldi	r26, 0x4E	; 78
    5eb0:	b0 e0       	ldi	r27, 0x00	; 0
    5eb2:	ee e4       	ldi	r30, 0x4E	; 78
    5eb4:	f0 e0       	ldi	r31, 0x00	; 0
    5eb6:	80 81       	ld	r24, Z
    5eb8:	88 7f       	andi	r24, 0xF8	; 248
    5eba:	8c 93       	st	X, r24
	TCCR1B |= TIMER1_PRESCALER ;
    5ebc:	ae e4       	ldi	r26, 0x4E	; 78
    5ebe:	b0 e0       	ldi	r27, 0x00	; 0
    5ec0:	ee e4       	ldi	r30, 0x4E	; 78
    5ec2:	f0 e0       	ldi	r31, 0x00	; 0
    5ec4:	80 81       	ld	r24, Z
    5ec6:	82 60       	ori	r24, 0x02	; 2
    5ec8:	8c 93       	st	X, r24


}
    5eca:	cf 91       	pop	r28
    5ecc:	df 91       	pop	r29
    5ece:	08 95       	ret

00005ed0 <TIMER2_vInit>:

void TIMER2_vInit(void)
{
    5ed0:	df 93       	push	r29
    5ed2:	cf 93       	push	r28
    5ed4:	cd b7       	in	r28, 0x3d	; 61
    5ed6:	de b7       	in	r29, 0x3e	; 62
	#if TIMER2_EXTERNAL_CLK == ENABLE
		SET_BIT(ASSR, ASSR_AS2);
    5ed8:	a2 e4       	ldi	r26, 0x42	; 66
    5eda:	b0 e0       	ldi	r27, 0x00	; 0
    5edc:	e2 e4       	ldi	r30, 0x42	; 66
    5ede:	f0 e0       	ldi	r31, 0x00	; 0
    5ee0:	80 81       	ld	r24, Z
    5ee2:	88 60       	ori	r24, 0x08	; 8
    5ee4:	8c 93       	st	X, r24
	#endif
	/*Set Configurable Modes*/
		#if TIMER2_WAVEFORM_GENERATION_MODE == TIMER_NORMAL_MODE

			/*Initialize Waveform Generation Mode as Normal Mode*/
			CLR_BIT(TCCR2 , TCCR2_WGM20) ;
    5ee6:	a5 e4       	ldi	r26, 0x45	; 69
    5ee8:	b0 e0       	ldi	r27, 0x00	; 0
    5eea:	e5 e4       	ldi	r30, 0x45	; 69
    5eec:	f0 e0       	ldi	r31, 0x00	; 0
    5eee:	80 81       	ld	r24, Z
    5ef0:	8f 7b       	andi	r24, 0xBF	; 191
    5ef2:	8c 93       	st	X, r24
			CLR_BIT(TCCR2 , TCCR2_WGM21) ;
    5ef4:	a5 e4       	ldi	r26, 0x45	; 69
    5ef6:	b0 e0       	ldi	r27, 0x00	; 0
    5ef8:	e5 e4       	ldi	r30, 0x45	; 69
    5efa:	f0 e0       	ldi	r31, 0x00	; 0
    5efc:	80 81       	ld	r24, Z
    5efe:	87 7f       	andi	r24, 0xF7	; 247
    5f00:	8c 93       	st	X, r24

			/*Set the Required Preload Value*/
			TCNT2 = TIMER2_PRELOAD_VAL ;
    5f02:	e4 e4       	ldi	r30, 0x44	; 68
    5f04:	f0 e0       	ldi	r31, 0x00	; 0
    5f06:	10 82       	st	Z, r1

			/*Timer2 Overflow Interrupt Enable*/
			#if TIMER2_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE2) ;
			#elif TIMER2_OVERFLOW_INTERRUPT == ENABLE
				SET_BIT(TIMSK , TIMSK_TOIE2) ;
    5f08:	a9 e5       	ldi	r26, 0x59	; 89
    5f0a:	b0 e0       	ldi	r27, 0x00	; 0
    5f0c:	e9 e5       	ldi	r30, 0x59	; 89
    5f0e:	f0 e0       	ldi	r31, 0x00	; 0
    5f10:	80 81       	ld	r24, Z
    5f12:	80 64       	ori	r24, 0x40	; 64
    5f14:	8c 93       	st	X, r24
			#error "Wrong TIMER2_WAVEFORM_GENERATION_MODE Config"

		#endif

			/*Set the Required Prescaler*/
		TCCR2 &= TIMER_PRESCALER_MASK ;
    5f16:	a5 e4       	ldi	r26, 0x45	; 69
    5f18:	b0 e0       	ldi	r27, 0x00	; 0
    5f1a:	e5 e4       	ldi	r30, 0x45	; 69
    5f1c:	f0 e0       	ldi	r31, 0x00	; 0
    5f1e:	80 81       	ld	r24, Z
    5f20:	88 7f       	andi	r24, 0xF8	; 248
    5f22:	8c 93       	st	X, r24
		TCCR2 |= TIMER2_PRESCALER ;
    5f24:	a5 e4       	ldi	r26, 0x45	; 69
    5f26:	b0 e0       	ldi	r27, 0x00	; 0
    5f28:	e5 e4       	ldi	r30, 0x45	; 69
    5f2a:	f0 e0       	ldi	r31, 0x00	; 0
    5f2c:	80 81       	ld	r24, Z
    5f2e:	85 60       	ori	r24, 0x05	; 5
    5f30:	8c 93       	st	X, r24
}
    5f32:	cf 91       	pop	r28
    5f34:	df 91       	pop	r29
    5f36:	08 95       	ret

00005f38 <TIMER0_vSetPreload>:

/*******************************************************************************************************************/
void TIMER0_vSetPreload (u8 Copy_u8Preload)
{
    5f38:	df 93       	push	r29
    5f3a:	cf 93       	push	r28
    5f3c:	0f 92       	push	r0
    5f3e:	cd b7       	in	r28, 0x3d	; 61
    5f40:	de b7       	in	r29, 0x3e	; 62
    5f42:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload ;
    5f44:	e2 e5       	ldi	r30, 0x52	; 82
    5f46:	f0 e0       	ldi	r31, 0x00	; 0
    5f48:	89 81       	ldd	r24, Y+1	; 0x01
    5f4a:	80 83       	st	Z, r24
}
    5f4c:	0f 90       	pop	r0
    5f4e:	cf 91       	pop	r28
    5f50:	df 91       	pop	r29
    5f52:	08 95       	ret

00005f54 <TIMER1_vSetPreload>:

void TIMER1_vSetPreload (u16 Copy_u16Preload)
{
    5f54:	df 93       	push	r29
    5f56:	cf 93       	push	r28
    5f58:	00 d0       	rcall	.+0      	; 0x5f5a <TIMER1_vSetPreload+0x6>
    5f5a:	cd b7       	in	r28, 0x3d	; 61
    5f5c:	de b7       	in	r29, 0x3e	; 62
    5f5e:	9a 83       	std	Y+2, r25	; 0x02
    5f60:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Preload ;
    5f62:	ec e4       	ldi	r30, 0x4C	; 76
    5f64:	f0 e0       	ldi	r31, 0x00	; 0
    5f66:	89 81       	ldd	r24, Y+1	; 0x01
    5f68:	9a 81       	ldd	r25, Y+2	; 0x02
    5f6a:	91 83       	std	Z+1, r25	; 0x01
    5f6c:	80 83       	st	Z, r24
}
    5f6e:	0f 90       	pop	r0
    5f70:	0f 90       	pop	r0
    5f72:	cf 91       	pop	r28
    5f74:	df 91       	pop	r29
    5f76:	08 95       	ret

00005f78 <TIMER2_vSetPreload>:


void TIMER2_vSetPreload (u8 Copy_u8Preload)
{
    5f78:	df 93       	push	r29
    5f7a:	cf 93       	push	r28
    5f7c:	0f 92       	push	r0
    5f7e:	cd b7       	in	r28, 0x3d	; 61
    5f80:	de b7       	in	r29, 0x3e	; 62
    5f82:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = Copy_u8Preload ;
    5f84:	e4 e4       	ldi	r30, 0x44	; 68
    5f86:	f0 e0       	ldi	r31, 0x00	; 0
    5f88:	89 81       	ldd	r24, Y+1	; 0x01
    5f8a:	80 83       	st	Z, r24
}
    5f8c:	0f 90       	pop	r0
    5f8e:	cf 91       	pop	r28
    5f90:	df 91       	pop	r29
    5f92:	08 95       	ret

00005f94 <TIMER0_vSetCTC>:

void TIMER0_vSetCTC (u8 Copy_u8CTC)
{
    5f94:	df 93       	push	r29
    5f96:	cf 93       	push	r28
    5f98:	0f 92       	push	r0
    5f9a:	cd b7       	in	r28, 0x3d	; 61
    5f9c:	de b7       	in	r29, 0x3e	; 62
    5f9e:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8CTC ;
    5fa0:	ec e5       	ldi	r30, 0x5C	; 92
    5fa2:	f0 e0       	ldi	r31, 0x00	; 0
    5fa4:	89 81       	ldd	r24, Y+1	; 0x01
    5fa6:	80 83       	st	Z, r24
}
    5fa8:	0f 90       	pop	r0
    5faa:	cf 91       	pop	r28
    5fac:	df 91       	pop	r29
    5fae:	08 95       	ret

00005fb0 <TIMER1_vSetCTCA>:

void TIMER1_vSetCTCA (u16 Copy_u16CTCA)
{
    5fb0:	df 93       	push	r29
    5fb2:	cf 93       	push	r28
    5fb4:	00 d0       	rcall	.+0      	; 0x5fb6 <TIMER1_vSetCTCA+0x6>
    5fb6:	cd b7       	in	r28, 0x3d	; 61
    5fb8:	de b7       	in	r29, 0x3e	; 62
    5fba:	9a 83       	std	Y+2, r25	; 0x02
    5fbc:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CTCA ;
    5fbe:	ea e4       	ldi	r30, 0x4A	; 74
    5fc0:	f0 e0       	ldi	r31, 0x00	; 0
    5fc2:	89 81       	ldd	r24, Y+1	; 0x01
    5fc4:	9a 81       	ldd	r25, Y+2	; 0x02
    5fc6:	91 83       	std	Z+1, r25	; 0x01
    5fc8:	80 83       	st	Z, r24
}
    5fca:	0f 90       	pop	r0
    5fcc:	0f 90       	pop	r0
    5fce:	cf 91       	pop	r28
    5fd0:	df 91       	pop	r29
    5fd2:	08 95       	ret

00005fd4 <TIMER1_vSetCTCB>:

void TIMER1_vSetCTCB (u16 Copy_u16CTCB)
{
    5fd4:	df 93       	push	r29
    5fd6:	cf 93       	push	r28
    5fd8:	00 d0       	rcall	.+0      	; 0x5fda <TIMER1_vSetCTCB+0x6>
    5fda:	cd b7       	in	r28, 0x3d	; 61
    5fdc:	de b7       	in	r29, 0x3e	; 62
    5fde:	9a 83       	std	Y+2, r25	; 0x02
    5fe0:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = Copy_u16CTCB ;
    5fe2:	e8 e4       	ldi	r30, 0x48	; 72
    5fe4:	f0 e0       	ldi	r31, 0x00	; 0
    5fe6:	89 81       	ldd	r24, Y+1	; 0x01
    5fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    5fea:	91 83       	std	Z+1, r25	; 0x01
    5fec:	80 83       	st	Z, r24
}
    5fee:	0f 90       	pop	r0
    5ff0:	0f 90       	pop	r0
    5ff2:	cf 91       	pop	r28
    5ff4:	df 91       	pop	r29
    5ff6:	08 95       	ret

00005ff8 <TIMER2_vSetCTC>:

void TIMER2_vSetCTC (u8 Copy_u8CTC)
{
    5ff8:	df 93       	push	r29
    5ffa:	cf 93       	push	r28
    5ffc:	0f 92       	push	r0
    5ffe:	cd b7       	in	r28, 0x3d	; 61
    6000:	de b7       	in	r29, 0x3e	; 62
    6002:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_u8CTC ;
    6004:	e3 e4       	ldi	r30, 0x43	; 67
    6006:	f0 e0       	ldi	r31, 0x00	; 0
    6008:	89 81       	ldd	r24, Y+1	; 0x01
    600a:	80 83       	st	Z, r24
}
    600c:	0f 90       	pop	r0
    600e:	cf 91       	pop	r28
    6010:	df 91       	pop	r29
    6012:	08 95       	ret

00006014 <TIMER1_vSetICR1>:

void TIMER1_vSetICR1 (u16 Copy_u16ICR1)
{
    6014:	df 93       	push	r29
    6016:	cf 93       	push	r28
    6018:	00 d0       	rcall	.+0      	; 0x601a <TIMER1_vSetICR1+0x6>
    601a:	cd b7       	in	r28, 0x3d	; 61
    601c:	de b7       	in	r29, 0x3e	; 62
    601e:	9a 83       	std	Y+2, r25	; 0x02
    6020:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16ICR1 ;
    6022:	e6 e4       	ldi	r30, 0x46	; 70
    6024:	f0 e0       	ldi	r31, 0x00	; 0
    6026:	89 81       	ldd	r24, Y+1	; 0x01
    6028:	9a 81       	ldd	r25, Y+2	; 0x02
    602a:	91 83       	std	Z+1, r25	; 0x01
    602c:	80 83       	st	Z, r24
}
    602e:	0f 90       	pop	r0
    6030:	0f 90       	pop	r0
    6032:	cf 91       	pop	r28
    6034:	df 91       	pop	r29
    6036:	08 95       	ret

00006038 <TIMER0_u8GetTimerCounterValue>:

u8 TIMER0_u8GetTimerCounterValue (void)
{
    6038:	df 93       	push	r29
    603a:	cf 93       	push	r28
    603c:	cd b7       	in	r28, 0x3d	; 61
    603e:	de b7       	in	r29, 0x3e	; 62
	return TCNT0 ;
    6040:	e2 e5       	ldi	r30, 0x52	; 82
    6042:	f0 e0       	ldi	r31, 0x00	; 0
    6044:	80 81       	ld	r24, Z
}
    6046:	cf 91       	pop	r28
    6048:	df 91       	pop	r29
    604a:	08 95       	ret

0000604c <TIMER1_u16GetTimerCounterValue>:

u16 TIMER1_u16GetTimerCounterValue (void)
{
    604c:	df 93       	push	r29
    604e:	cf 93       	push	r28
    6050:	cd b7       	in	r28, 0x3d	; 61
    6052:	de b7       	in	r29, 0x3e	; 62
	return TCNT1 ;
    6054:	ec e4       	ldi	r30, 0x4C	; 76
    6056:	f0 e0       	ldi	r31, 0x00	; 0
    6058:	80 81       	ld	r24, Z
    605a:	91 81       	ldd	r25, Z+1	; 0x01
}
    605c:	cf 91       	pop	r28
    605e:	df 91       	pop	r29
    6060:	08 95       	ret

00006062 <TIMER2_u8GetTimerCounterValue>:

u8 TIMER2_u8GetTimerCounterValue (void)
{
    6062:	df 93       	push	r29
    6064:	cf 93       	push	r28
    6066:	cd b7       	in	r28, 0x3d	; 61
    6068:	de b7       	in	r29, 0x3e	; 62
	return TCNT2 ;
    606a:	e4 e4       	ldi	r30, 0x44	; 68
    606c:	f0 e0       	ldi	r31, 0x00	; 0
    606e:	80 81       	ld	r24, Z
}
    6070:	cf 91       	pop	r28
    6072:	df 91       	pop	r29
    6074:	08 95       	ret

00006076 <TIMER_vSetPWM>:

/*******************************************************************************************************************/

void TIMER_vSetPWM(u16 Copy_u16CompareValue)
{
    6076:	df 93       	push	r29
    6078:	cf 93       	push	r28
    607a:	00 d0       	rcall	.+0      	; 0x607c <TIMER_vSetPWM+0x6>
    607c:	cd b7       	in	r28, 0x3d	; 61
    607e:	de b7       	in	r29, 0x3e	; 62
    6080:	9a 83       	std	Y+2, r25	; 0x02
    6082:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CompareValue;
    6084:	ea e4       	ldi	r30, 0x4A	; 74
    6086:	f0 e0       	ldi	r31, 0x00	; 0
    6088:	89 81       	ldd	r24, Y+1	; 0x01
    608a:	9a 81       	ldd	r25, Y+2	; 0x02
    608c:	91 83       	std	Z+1, r25	; 0x01
    608e:	80 83       	st	Z, r24
}
    6090:	0f 90       	pop	r0
    6092:	0f 90       	pop	r0
    6094:	cf 91       	pop	r28
    6096:	df 91       	pop	r29
    6098:	08 95       	ret

0000609a <Timer2_vSetPrescaler>:
/*******************************************************************************************************************/
void Timer2_vSetPrescaler(u8 Prescaler)
{
    609a:	df 93       	push	r29
    609c:	cf 93       	push	r28
    609e:	0f 92       	push	r0
    60a0:	cd b7       	in	r28, 0x3d	; 61
    60a2:	de b7       	in	r29, 0x3e	; 62
    60a4:	89 83       	std	Y+1, r24	; 0x01
	/*Set the Required Prescaler*/
	TCCR2 &= TIMER_PRESCALER_MASK ;
    60a6:	a5 e4       	ldi	r26, 0x45	; 69
    60a8:	b0 e0       	ldi	r27, 0x00	; 0
    60aa:	e5 e4       	ldi	r30, 0x45	; 69
    60ac:	f0 e0       	ldi	r31, 0x00	; 0
    60ae:	80 81       	ld	r24, Z
    60b0:	88 7f       	andi	r24, 0xF8	; 248
    60b2:	8c 93       	st	X, r24
	TCCR2 |= Prescaler ;
    60b4:	a5 e4       	ldi	r26, 0x45	; 69
    60b6:	b0 e0       	ldi	r27, 0x00	; 0
    60b8:	e5 e4       	ldi	r30, 0x45	; 69
    60ba:	f0 e0       	ldi	r31, 0x00	; 0
    60bc:	90 81       	ld	r25, Z
    60be:	89 81       	ldd	r24, Y+1	; 0x01
    60c0:	89 2b       	or	r24, r25
    60c2:	8c 93       	st	X, r24
}
    60c4:	0f 90       	pop	r0
    60c6:	cf 91       	pop	r28
    60c8:	df 91       	pop	r29
    60ca:	08 95       	ret

000060cc <Timer0_vSetPrescaler>:
/*******************************************************************************************************************/
void Timer0_vSetPrescaler(u8 Prescaler)
{
    60cc:	df 93       	push	r29
    60ce:	cf 93       	push	r28
    60d0:	0f 92       	push	r0
    60d2:	cd b7       	in	r28, 0x3d	; 61
    60d4:	de b7       	in	r29, 0x3e	; 62
    60d6:	89 83       	std	Y+1, r24	; 0x01
	/*Set the Required Prescaler*/
	TCCR0 &= TIMER_PRESCALER_MASK ;
    60d8:	a3 e5       	ldi	r26, 0x53	; 83
    60da:	b0 e0       	ldi	r27, 0x00	; 0
    60dc:	e3 e5       	ldi	r30, 0x53	; 83
    60de:	f0 e0       	ldi	r31, 0x00	; 0
    60e0:	80 81       	ld	r24, Z
    60e2:	88 7f       	andi	r24, 0xF8	; 248
    60e4:	8c 93       	st	X, r24
	TCCR0 |= Prescaler ;
    60e6:	a3 e5       	ldi	r26, 0x53	; 83
    60e8:	b0 e0       	ldi	r27, 0x00	; 0
    60ea:	e3 e5       	ldi	r30, 0x53	; 83
    60ec:	f0 e0       	ldi	r31, 0x00	; 0
    60ee:	90 81       	ld	r25, Z
    60f0:	89 81       	ldd	r24, Y+1	; 0x01
    60f2:	89 2b       	or	r24, r25
    60f4:	8c 93       	st	X, r24
}
    60f6:	0f 90       	pop	r0
    60f8:	cf 91       	pop	r28
    60fa:	df 91       	pop	r29
    60fc:	08 95       	ret

000060fe <TIMER_vICUInitEnable>:
//----------------------------------------------------------------------------------------------------------------------------------------------------
/*
	Hint : This func for initial state of trigger (prebuild)
*/
void TIMER_vICUInitEnable(void)
{
    60fe:	df 93       	push	r29
    6100:	cf 93       	push	r28
    6102:	cd b7       	in	r28, 0x3d	; 61
    6104:	de b7       	in	r29, 0x3e	; 62
	/* Set trigger source as rising edge Initially  */
	#if (TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_RAISING_EDGE)
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    6106:	ae e4       	ldi	r26, 0x4E	; 78
    6108:	b0 e0       	ldi	r27, 0x00	; 0
    610a:	ee e4       	ldi	r30, 0x4E	; 78
    610c:	f0 e0       	ldi	r31, 0x00	; 0
    610e:	80 81       	ld	r24, Z
    6110:	80 64       	ori	r24, 0x40	; 64
    6112:	8c 93       	st	X, r24
	#elif(TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_FALLING_EDGE)
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
	#endif

	/* Enable Interrupt of ICU */
	SET_BIT(TIMSK,TIMSK_TICIE1);
    6114:	a9 e5       	ldi	r26, 0x59	; 89
    6116:	b0 e0       	ldi	r27, 0x00	; 0
    6118:	e9 e5       	ldi	r30, 0x59	; 89
    611a:	f0 e0       	ldi	r31, 0x00	; 0
    611c:	80 81       	ld	r24, Z
    611e:	80 62       	ori	r24, 0x20	; 32
    6120:	8c 93       	st	X, r24
}
    6122:	cf 91       	pop	r28
    6124:	df 91       	pop	r29
    6126:	08 95       	ret

00006128 <TIMER_vICUSetTriggerEdge>:
	Options :-
	 1- TIMER_u8_ICP_RAISING_EDGE
	 2- TIMER_u8_ICP_FALLING_EDGE
*/
u8 TIMER_vICUSetTriggerEdge(u8 Copy_u8Edge)
{
    6128:	df 93       	push	r29
    612a:	cf 93       	push	r28
    612c:	00 d0       	rcall	.+0      	; 0x612e <TIMER_vICUSetTriggerEdge+0x6>
    612e:	cd b7       	in	r28, 0x3d	; 61
    6130:	de b7       	in	r29, 0x3e	; 62
    6132:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK ;
    6134:	19 82       	std	Y+1, r1	; 0x01

	/* Change The trigger source as Rising edge or Falling edge */
	if (Copy_u8Edge == TIMER_u8_ICP_RAISING_EDGE)
    6136:	8a 81       	ldd	r24, Y+2	; 0x02
    6138:	81 30       	cpi	r24, 0x01	; 1
    613a:	41 f4       	brne	.+16     	; 0x614c <TIMER_vICUSetTriggerEdge+0x24>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    613c:	ae e4       	ldi	r26, 0x4E	; 78
    613e:	b0 e0       	ldi	r27, 0x00	; 0
    6140:	ee e4       	ldi	r30, 0x4E	; 78
    6142:	f0 e0       	ldi	r31, 0x00	; 0
    6144:	80 81       	ld	r24, Z
    6146:	80 64       	ori	r24, 0x40	; 64
    6148:	8c 93       	st	X, r24
    614a:	0d c0       	rjmp	.+26     	; 0x6166 <TIMER_vICUSetTriggerEdge+0x3e>
	}
	else if(Copy_u8Edge == TIMER_u8_ICP_FALLING_EDGE)
    614c:	8a 81       	ldd	r24, Y+2	; 0x02
    614e:	88 23       	and	r24, r24
    6150:	41 f4       	brne	.+16     	; 0x6162 <TIMER_vICUSetTriggerEdge+0x3a>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    6152:	ae e4       	ldi	r26, 0x4E	; 78
    6154:	b0 e0       	ldi	r27, 0x00	; 0
    6156:	ee e4       	ldi	r30, 0x4E	; 78
    6158:	f0 e0       	ldi	r31, 0x00	; 0
    615a:	80 81       	ld	r24, Z
    615c:	8f 7b       	andi	r24, 0xBF	; 191
    615e:	8c 93       	st	X, r24
    6160:	02 c0       	rjmp	.+4      	; 0x6166 <TIMER_vICUSetTriggerEdge+0x3e>
	}
	else
	{
		Local_u8ErrorStatus = NOK ;
    6162:	81 e0       	ldi	r24, 0x01	; 1
    6164:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    6166:	89 81       	ldd	r24, Y+1	; 0x01

}
    6168:	0f 90       	pop	r0
    616a:	0f 90       	pop	r0
    616c:	cf 91       	pop	r28
    616e:	df 91       	pop	r29
    6170:	08 95       	ret

00006172 <TIMER_vICUEnableInterrupt>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_vICUEnableInterrupt(void)
{
    6172:	df 93       	push	r29
    6174:	cf 93       	push	r28
    6176:	cd b7       	in	r28, 0x3d	; 61
    6178:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
    617a:	a9 e5       	ldi	r26, 0x59	; 89
    617c:	b0 e0       	ldi	r27, 0x00	; 0
    617e:	e9 e5       	ldi	r30, 0x59	; 89
    6180:	f0 e0       	ldi	r31, 0x00	; 0
    6182:	80 81       	ld	r24, Z
    6184:	80 62       	ori	r24, 0x20	; 32
    6186:	8c 93       	st	X, r24
}
    6188:	cf 91       	pop	r28
    618a:	df 91       	pop	r29
    618c:	08 95       	ret

0000618e <TIMER_vICUDisableInterrupt>:


//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_vICUDisableInterrupt(void)
{
    618e:	df 93       	push	r29
    6190:	cf 93       	push	r28
    6192:	cd b7       	in	r28, 0x3d	; 61
    6194:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    6196:	a9 e5       	ldi	r26, 0x59	; 89
    6198:	b0 e0       	ldi	r27, 0x00	; 0
    619a:	e9 e5       	ldi	r30, 0x59	; 89
    619c:	f0 e0       	ldi	r31, 0x00	; 0
    619e:	80 81       	ld	r24, Z
    61a0:	8f 7d       	andi	r24, 0xDF	; 223
    61a2:	8c 93       	st	X, r24
}
    61a4:	cf 91       	pop	r28
    61a6:	df 91       	pop	r29
    61a8:	08 95       	ret

000061aa <TIMER_u16GetICR>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

u16 TIMER_u16GetICR(void)
{
    61aa:	df 93       	push	r29
    61ac:	cf 93       	push	r28
    61ae:	cd b7       	in	r28, 0x3d	; 61
    61b0:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    61b2:	e6 e4       	ldi	r30, 0x46	; 70
    61b4:	f0 e0       	ldi	r31, 0x00	; 0
    61b6:	80 81       	ld	r24, Z
    61b8:	91 81       	ldd	r25, Z+1	; 0x01
}
    61ba:	cf 91       	pop	r28
    61bc:	df 91       	pop	r29
    61be:	08 95       	ret

000061c0 <TIMER_vWDTSleep>:
*/

//----------------------------------------------------------------------------------------------------------------------------------------------------
/* Hint : prebuild config  */
void TIMER_vWDTSleep(void)
{
    61c0:	df 93       	push	r29
    61c2:	cf 93       	push	r28
    61c4:	cd b7       	in	r28, 0x3d	; 61
    61c6:	de b7       	in	r29, 0x3e	; 62
	/* CLear The Prescaler bits  */
	WDTCR &= WDT_PS_MASKING ;
    61c8:	a1 e4       	ldi	r26, 0x41	; 65
    61ca:	b0 e0       	ldi	r27, 0x00	; 0
    61cc:	e1 e4       	ldi	r30, 0x41	; 65
    61ce:	f0 e0       	ldi	r31, 0x00	; 0
    61d0:	80 81       	ld	r24, Z
    61d2:	88 7f       	andi	r24, 0xF8	; 248
    61d4:	8c 93       	st	X, r24
	/* Set The required prescaller */
	WDTCR |= WDT_PRESCALER ;
    61d6:	a1 e4       	ldi	r26, 0x41	; 65
    61d8:	b0 e0       	ldi	r27, 0x00	; 0
    61da:	e1 e4       	ldi	r30, 0x41	; 65
    61dc:	f0 e0       	ldi	r31, 0x00	; 0
    61de:	80 81       	ld	r24, Z
    61e0:	86 60       	ori	r24, 0x06	; 6
    61e2:	8c 93       	st	X, r24
}
    61e4:	cf 91       	pop	r28
    61e6:	df 91       	pop	r29
    61e8:	08 95       	ret

000061ea <TIMER_vWDTEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_vWDTEnable (void)
{
    61ea:	df 93       	push	r29
    61ec:	cf 93       	push	r28
    61ee:	cd b7       	in	r28, 0x3d	; 61
    61f0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT (WDTCR , WDTCR_WDE);
    61f2:	a1 e4       	ldi	r26, 0x41	; 65
    61f4:	b0 e0       	ldi	r27, 0x00	; 0
    61f6:	e1 e4       	ldi	r30, 0x41	; 65
    61f8:	f0 e0       	ldi	r31, 0x00	; 0
    61fa:	80 81       	ld	r24, Z
    61fc:	88 60       	ori	r24, 0x08	; 8
    61fe:	8c 93       	st	X, r24
}
    6200:	cf 91       	pop	r28
    6202:	df 91       	pop	r29
    6204:	08 95       	ret

00006206 <TIMER_vWDTDisable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_vWDTDisable (void)
{
    6206:	df 93       	push	r29
    6208:	cf 93       	push	r28
    620a:	cd b7       	in	r28, 0x3d	; 61
    620c:	de b7       	in	r29, 0x3e	; 62
	/* Set Bit 3&4 at the same CLK cycle  */
	WDTCR |= 0b00011000 ;
    620e:	a1 e4       	ldi	r26, 0x41	; 65
    6210:	b0 e0       	ldi	r27, 0x00	; 0
    6212:	e1 e4       	ldi	r30, 0x41	; 65
    6214:	f0 e0       	ldi	r31, 0x00	; 0
    6216:	80 81       	ld	r24, Z
    6218:	88 61       	ori	r24, 0x18	; 24
    621a:	8c 93       	st	X, r24
	/* WDTCR_WDE = 0 */
	/* I don't care for any value in this Reg Cuz I want to Disable */
	WDTCR = 0 ;
    621c:	e1 e4       	ldi	r30, 0x41	; 65
    621e:	f0 e0       	ldi	r31, 0x00	; 0
    6220:	10 82       	st	Z, r1
}
    6222:	cf 91       	pop	r28
    6224:	df 91       	pop	r29
    6226:	08 95       	ret

00006228 <TIMER_u8SetCallBack>:

//----------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------------------------

u8 TIMER_u8SetCallBack(void (*Copy_pvCallBackFunc)(void) , u8 Copy_u8VectorID)
{
    6228:	df 93       	push	r29
    622a:	cf 93       	push	r28
    622c:	00 d0       	rcall	.+0      	; 0x622e <TIMER_u8SetCallBack+0x6>
    622e:	00 d0       	rcall	.+0      	; 0x6230 <TIMER_u8SetCallBack+0x8>
    6230:	cd b7       	in	r28, 0x3d	; 61
    6232:	de b7       	in	r29, 0x3e	; 62
    6234:	9b 83       	std	Y+3, r25	; 0x03
    6236:	8a 83       	std	Y+2, r24	; 0x02
    6238:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK ;
    623a:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pvCallBackFunc != NULL)
    623c:	8a 81       	ldd	r24, Y+2	; 0x02
    623e:	9b 81       	ldd	r25, Y+3	; 0x03
    6240:	00 97       	sbiw	r24, 0x00	; 0
    6242:	69 f0       	breq	.+26     	; 0x625e <TIMER_u8SetCallBack+0x36>
	{
		TIMERS_pvCallBackFunc[Copy_u8VectorID] = Copy_pvCallBackFunc ;
    6244:	8c 81       	ldd	r24, Y+4	; 0x04
    6246:	88 2f       	mov	r24, r24
    6248:	90 e0       	ldi	r25, 0x00	; 0
    624a:	88 0f       	add	r24, r24
    624c:	99 1f       	adc	r25, r25
    624e:	fc 01       	movw	r30, r24
    6250:	e2 5b       	subi	r30, 0xB2	; 178
    6252:	fd 4f       	sbci	r31, 0xFD	; 253
    6254:	8a 81       	ldd	r24, Y+2	; 0x02
    6256:	9b 81       	ldd	r25, Y+3	; 0x03
    6258:	91 83       	std	Z+1, r25	; 0x01
    625a:	80 83       	st	Z, r24
    625c:	02 c0       	rjmp	.+4      	; 0x6262 <TIMER_u8SetCallBack+0x3a>
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER ;
    625e:	82 e0       	ldi	r24, 0x02	; 2
    6260:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    6262:	89 81       	ldd	r24, Y+1	; 0x01
}
    6264:	0f 90       	pop	r0
    6266:	0f 90       	pop	r0
    6268:	0f 90       	pop	r0
    626a:	0f 90       	pop	r0
    626c:	cf 91       	pop	r28
    626e:	df 91       	pop	r29
    6270:	08 95       	ret

00006272 <__vector_11>:

/*TIMER0 Normal Mode ISR*/
void __vector_11 (void)		__attribute__((signal)) ;
void __vector_11 (void)
{
    6272:	1f 92       	push	r1
    6274:	0f 92       	push	r0
    6276:	0f b6       	in	r0, 0x3f	; 63
    6278:	0f 92       	push	r0
    627a:	11 24       	eor	r1, r1
    627c:	2f 93       	push	r18
    627e:	3f 93       	push	r19
    6280:	4f 93       	push	r20
    6282:	5f 93       	push	r21
    6284:	6f 93       	push	r22
    6286:	7f 93       	push	r23
    6288:	8f 93       	push	r24
    628a:	9f 93       	push	r25
    628c:	af 93       	push	r26
    628e:	bf 93       	push	r27
    6290:	ef 93       	push	r30
    6292:	ff 93       	push	r31
    6294:	df 93       	push	r29
    6296:	cf 93       	push	r28
    6298:	cd b7       	in	r28, 0x3d	; 61
    629a:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID] != NULL)
    629c:	80 91 64 02 	lds	r24, 0x0264
    62a0:	90 91 65 02 	lds	r25, 0x0265
    62a4:	00 97       	sbiw	r24, 0x00	; 0
    62a6:	29 f0       	breq	.+10     	; 0x62b2 <__vector_11+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID]() ;
    62a8:	e0 91 64 02 	lds	r30, 0x0264
    62ac:	f0 91 65 02 	lds	r31, 0x0265
    62b0:	09 95       	icall
	}
}
    62b2:	cf 91       	pop	r28
    62b4:	df 91       	pop	r29
    62b6:	ff 91       	pop	r31
    62b8:	ef 91       	pop	r30
    62ba:	bf 91       	pop	r27
    62bc:	af 91       	pop	r26
    62be:	9f 91       	pop	r25
    62c0:	8f 91       	pop	r24
    62c2:	7f 91       	pop	r23
    62c4:	6f 91       	pop	r22
    62c6:	5f 91       	pop	r21
    62c8:	4f 91       	pop	r20
    62ca:	3f 91       	pop	r19
    62cc:	2f 91       	pop	r18
    62ce:	0f 90       	pop	r0
    62d0:	0f be       	out	0x3f, r0	; 63
    62d2:	0f 90       	pop	r0
    62d4:	1f 90       	pop	r1
    62d6:	18 95       	reti

000062d8 <__vector_10>:

/*TIMER0 CTC Mode ISR*/
void __vector_10 (void)		__attribute__((signal)) ;
void __vector_10 (void)
{
    62d8:	1f 92       	push	r1
    62da:	0f 92       	push	r0
    62dc:	0f b6       	in	r0, 0x3f	; 63
    62de:	0f 92       	push	r0
    62e0:	11 24       	eor	r1, r1
    62e2:	2f 93       	push	r18
    62e4:	3f 93       	push	r19
    62e6:	4f 93       	push	r20
    62e8:	5f 93       	push	r21
    62ea:	6f 93       	push	r22
    62ec:	7f 93       	push	r23
    62ee:	8f 93       	push	r24
    62f0:	9f 93       	push	r25
    62f2:	af 93       	push	r26
    62f4:	bf 93       	push	r27
    62f6:	ef 93       	push	r30
    62f8:	ff 93       	push	r31
    62fa:	df 93       	push	r29
    62fc:	cf 93       	push	r28
    62fe:	cd b7       	in	r28, 0x3d	; 61
    6300:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID] != NULL)
    6302:	80 91 62 02 	lds	r24, 0x0262
    6306:	90 91 63 02 	lds	r25, 0x0263
    630a:	00 97       	sbiw	r24, 0x00	; 0
    630c:	29 f0       	breq	.+10     	; 0x6318 <__vector_10+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID]() ;
    630e:	e0 91 62 02 	lds	r30, 0x0262
    6312:	f0 91 63 02 	lds	r31, 0x0263
    6316:	09 95       	icall
	}
}
    6318:	cf 91       	pop	r28
    631a:	df 91       	pop	r29
    631c:	ff 91       	pop	r31
    631e:	ef 91       	pop	r30
    6320:	bf 91       	pop	r27
    6322:	af 91       	pop	r26
    6324:	9f 91       	pop	r25
    6326:	8f 91       	pop	r24
    6328:	7f 91       	pop	r23
    632a:	6f 91       	pop	r22
    632c:	5f 91       	pop	r21
    632e:	4f 91       	pop	r20
    6330:	3f 91       	pop	r19
    6332:	2f 91       	pop	r18
    6334:	0f 90       	pop	r0
    6336:	0f be       	out	0x3f, r0	; 63
    6338:	0f 90       	pop	r0
    633a:	1f 90       	pop	r1
    633c:	18 95       	reti

0000633e <__vector_9>:

/*TIMER1 Normal Mode ISR*/
void __vector_9 (void)		__attribute__((signal)) ;
void __vector_9 (void)
{
    633e:	1f 92       	push	r1
    6340:	0f 92       	push	r0
    6342:	0f b6       	in	r0, 0x3f	; 63
    6344:	0f 92       	push	r0
    6346:	11 24       	eor	r1, r1
    6348:	2f 93       	push	r18
    634a:	3f 93       	push	r19
    634c:	4f 93       	push	r20
    634e:	5f 93       	push	r21
    6350:	6f 93       	push	r22
    6352:	7f 93       	push	r23
    6354:	8f 93       	push	r24
    6356:	9f 93       	push	r25
    6358:	af 93       	push	r26
    635a:	bf 93       	push	r27
    635c:	ef 93       	push	r30
    635e:	ff 93       	push	r31
    6360:	df 93       	push	r29
    6362:	cf 93       	push	r28
    6364:	cd b7       	in	r28, 0x3d	; 61
    6366:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID] != NULL)
    6368:	80 91 60 02 	lds	r24, 0x0260
    636c:	90 91 61 02 	lds	r25, 0x0261
    6370:	00 97       	sbiw	r24, 0x00	; 0
    6372:	29 f0       	breq	.+10     	; 0x637e <__vector_9+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID]() ;
    6374:	e0 91 60 02 	lds	r30, 0x0260
    6378:	f0 91 61 02 	lds	r31, 0x0261
    637c:	09 95       	icall
	}
}
    637e:	cf 91       	pop	r28
    6380:	df 91       	pop	r29
    6382:	ff 91       	pop	r31
    6384:	ef 91       	pop	r30
    6386:	bf 91       	pop	r27
    6388:	af 91       	pop	r26
    638a:	9f 91       	pop	r25
    638c:	8f 91       	pop	r24
    638e:	7f 91       	pop	r23
    6390:	6f 91       	pop	r22
    6392:	5f 91       	pop	r21
    6394:	4f 91       	pop	r20
    6396:	3f 91       	pop	r19
    6398:	2f 91       	pop	r18
    639a:	0f 90       	pop	r0
    639c:	0f be       	out	0x3f, r0	; 63
    639e:	0f 90       	pop	r0
    63a0:	1f 90       	pop	r1
    63a2:	18 95       	reti

000063a4 <__vector_8>:

/*TIMER1 CTCB Mode ISR*/
void __vector_8 (void)		__attribute__((signal)) ;
void __vector_8 (void)
{
    63a4:	1f 92       	push	r1
    63a6:	0f 92       	push	r0
    63a8:	0f b6       	in	r0, 0x3f	; 63
    63aa:	0f 92       	push	r0
    63ac:	11 24       	eor	r1, r1
    63ae:	2f 93       	push	r18
    63b0:	3f 93       	push	r19
    63b2:	4f 93       	push	r20
    63b4:	5f 93       	push	r21
    63b6:	6f 93       	push	r22
    63b8:	7f 93       	push	r23
    63ba:	8f 93       	push	r24
    63bc:	9f 93       	push	r25
    63be:	af 93       	push	r26
    63c0:	bf 93       	push	r27
    63c2:	ef 93       	push	r30
    63c4:	ff 93       	push	r31
    63c6:	df 93       	push	r29
    63c8:	cf 93       	push	r28
    63ca:	cd b7       	in	r28, 0x3d	; 61
    63cc:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID] != NULL)
    63ce:	80 91 5e 02 	lds	r24, 0x025E
    63d2:	90 91 5f 02 	lds	r25, 0x025F
    63d6:	00 97       	sbiw	r24, 0x00	; 0
    63d8:	29 f0       	breq	.+10     	; 0x63e4 <__vector_8+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID]() ;
    63da:	e0 91 5e 02 	lds	r30, 0x025E
    63de:	f0 91 5f 02 	lds	r31, 0x025F
    63e2:	09 95       	icall
	}
}
    63e4:	cf 91       	pop	r28
    63e6:	df 91       	pop	r29
    63e8:	ff 91       	pop	r31
    63ea:	ef 91       	pop	r30
    63ec:	bf 91       	pop	r27
    63ee:	af 91       	pop	r26
    63f0:	9f 91       	pop	r25
    63f2:	8f 91       	pop	r24
    63f4:	7f 91       	pop	r23
    63f6:	6f 91       	pop	r22
    63f8:	5f 91       	pop	r21
    63fa:	4f 91       	pop	r20
    63fc:	3f 91       	pop	r19
    63fe:	2f 91       	pop	r18
    6400:	0f 90       	pop	r0
    6402:	0f be       	out	0x3f, r0	; 63
    6404:	0f 90       	pop	r0
    6406:	1f 90       	pop	r1
    6408:	18 95       	reti

0000640a <__vector_7>:

/*TIMER1 CTCA Mode ISR*/
void __vector_7 (void)		__attribute__((signal)) ;
void __vector_7 (void)
{
    640a:	1f 92       	push	r1
    640c:	0f 92       	push	r0
    640e:	0f b6       	in	r0, 0x3f	; 63
    6410:	0f 92       	push	r0
    6412:	11 24       	eor	r1, r1
    6414:	2f 93       	push	r18
    6416:	3f 93       	push	r19
    6418:	4f 93       	push	r20
    641a:	5f 93       	push	r21
    641c:	6f 93       	push	r22
    641e:	7f 93       	push	r23
    6420:	8f 93       	push	r24
    6422:	9f 93       	push	r25
    6424:	af 93       	push	r26
    6426:	bf 93       	push	r27
    6428:	ef 93       	push	r30
    642a:	ff 93       	push	r31
    642c:	df 93       	push	r29
    642e:	cf 93       	push	r28
    6430:	cd b7       	in	r28, 0x3d	; 61
    6432:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID] != NULL)
    6434:	80 91 5c 02 	lds	r24, 0x025C
    6438:	90 91 5d 02 	lds	r25, 0x025D
    643c:	00 97       	sbiw	r24, 0x00	; 0
    643e:	29 f0       	breq	.+10     	; 0x644a <__vector_7+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID]() ;
    6440:	e0 91 5c 02 	lds	r30, 0x025C
    6444:	f0 91 5d 02 	lds	r31, 0x025D
    6448:	09 95       	icall
	}
}
    644a:	cf 91       	pop	r28
    644c:	df 91       	pop	r29
    644e:	ff 91       	pop	r31
    6450:	ef 91       	pop	r30
    6452:	bf 91       	pop	r27
    6454:	af 91       	pop	r26
    6456:	9f 91       	pop	r25
    6458:	8f 91       	pop	r24
    645a:	7f 91       	pop	r23
    645c:	6f 91       	pop	r22
    645e:	5f 91       	pop	r21
    6460:	4f 91       	pop	r20
    6462:	3f 91       	pop	r19
    6464:	2f 91       	pop	r18
    6466:	0f 90       	pop	r0
    6468:	0f be       	out	0x3f, r0	; 63
    646a:	0f 90       	pop	r0
    646c:	1f 90       	pop	r1
    646e:	18 95       	reti

00006470 <__vector_6>:

/*TIMER1 ICU ISR*/
void __vector_6 (void)		__attribute__((signal)) ;
void __vector_6 (void)
{
    6470:	1f 92       	push	r1
    6472:	0f 92       	push	r0
    6474:	0f b6       	in	r0, 0x3f	; 63
    6476:	0f 92       	push	r0
    6478:	11 24       	eor	r1, r1
    647a:	2f 93       	push	r18
    647c:	3f 93       	push	r19
    647e:	4f 93       	push	r20
    6480:	5f 93       	push	r21
    6482:	6f 93       	push	r22
    6484:	7f 93       	push	r23
    6486:	8f 93       	push	r24
    6488:	9f 93       	push	r25
    648a:	af 93       	push	r26
    648c:	bf 93       	push	r27
    648e:	ef 93       	push	r30
    6490:	ff 93       	push	r31
    6492:	df 93       	push	r29
    6494:	cf 93       	push	r28
    6496:	cd b7       	in	r28, 0x3d	; 61
    6498:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID] != NULL)
    649a:	80 91 5a 02 	lds	r24, 0x025A
    649e:	90 91 5b 02 	lds	r25, 0x025B
    64a2:	00 97       	sbiw	r24, 0x00	; 0
    64a4:	29 f0       	breq	.+10     	; 0x64b0 <__vector_6+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID]() ;
    64a6:	e0 91 5a 02 	lds	r30, 0x025A
    64aa:	f0 91 5b 02 	lds	r31, 0x025B
    64ae:	09 95       	icall
	}
}
    64b0:	cf 91       	pop	r28
    64b2:	df 91       	pop	r29
    64b4:	ff 91       	pop	r31
    64b6:	ef 91       	pop	r30
    64b8:	bf 91       	pop	r27
    64ba:	af 91       	pop	r26
    64bc:	9f 91       	pop	r25
    64be:	8f 91       	pop	r24
    64c0:	7f 91       	pop	r23
    64c2:	6f 91       	pop	r22
    64c4:	5f 91       	pop	r21
    64c6:	4f 91       	pop	r20
    64c8:	3f 91       	pop	r19
    64ca:	2f 91       	pop	r18
    64cc:	0f 90       	pop	r0
    64ce:	0f be       	out	0x3f, r0	; 63
    64d0:	0f 90       	pop	r0
    64d2:	1f 90       	pop	r1
    64d4:	18 95       	reti

000064d6 <__vector_5>:

/*TIMER2 Normal Mode ISR*/
void __vector_5 (void)		__attribute__((signal)) ;
void __vector_5 (void)
{
    64d6:	1f 92       	push	r1
    64d8:	0f 92       	push	r0
    64da:	0f b6       	in	r0, 0x3f	; 63
    64dc:	0f 92       	push	r0
    64de:	11 24       	eor	r1, r1
    64e0:	2f 93       	push	r18
    64e2:	3f 93       	push	r19
    64e4:	4f 93       	push	r20
    64e6:	5f 93       	push	r21
    64e8:	6f 93       	push	r22
    64ea:	7f 93       	push	r23
    64ec:	8f 93       	push	r24
    64ee:	9f 93       	push	r25
    64f0:	af 93       	push	r26
    64f2:	bf 93       	push	r27
    64f4:	ef 93       	push	r30
    64f6:	ff 93       	push	r31
    64f8:	df 93       	push	r29
    64fa:	cf 93       	push	r28
    64fc:	cd b7       	in	r28, 0x3d	; 61
    64fe:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID] != NULL)
    6500:	80 91 58 02 	lds	r24, 0x0258
    6504:	90 91 59 02 	lds	r25, 0x0259
    6508:	00 97       	sbiw	r24, 0x00	; 0
    650a:	29 f0       	breq	.+10     	; 0x6516 <__vector_5+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID]() ;
    650c:	e0 91 58 02 	lds	r30, 0x0258
    6510:	f0 91 59 02 	lds	r31, 0x0259
    6514:	09 95       	icall
	}
}
    6516:	cf 91       	pop	r28
    6518:	df 91       	pop	r29
    651a:	ff 91       	pop	r31
    651c:	ef 91       	pop	r30
    651e:	bf 91       	pop	r27
    6520:	af 91       	pop	r26
    6522:	9f 91       	pop	r25
    6524:	8f 91       	pop	r24
    6526:	7f 91       	pop	r23
    6528:	6f 91       	pop	r22
    652a:	5f 91       	pop	r21
    652c:	4f 91       	pop	r20
    652e:	3f 91       	pop	r19
    6530:	2f 91       	pop	r18
    6532:	0f 90       	pop	r0
    6534:	0f be       	out	0x3f, r0	; 63
    6536:	0f 90       	pop	r0
    6538:	1f 90       	pop	r1
    653a:	18 95       	reti

0000653c <__vector_4>:

/*TIMER2 CTC Mode ISR*/
void __vector_4 (void)		__attribute__((signal)) ;
void __vector_4 (void)
{
    653c:	1f 92       	push	r1
    653e:	0f 92       	push	r0
    6540:	0f b6       	in	r0, 0x3f	; 63
    6542:	0f 92       	push	r0
    6544:	11 24       	eor	r1, r1
    6546:	2f 93       	push	r18
    6548:	3f 93       	push	r19
    654a:	4f 93       	push	r20
    654c:	5f 93       	push	r21
    654e:	6f 93       	push	r22
    6550:	7f 93       	push	r23
    6552:	8f 93       	push	r24
    6554:	9f 93       	push	r25
    6556:	af 93       	push	r26
    6558:	bf 93       	push	r27
    655a:	ef 93       	push	r30
    655c:	ff 93       	push	r31
    655e:	df 93       	push	r29
    6560:	cf 93       	push	r28
    6562:	cd b7       	in	r28, 0x3d	; 61
    6564:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID] != NULL)
    6566:	80 91 56 02 	lds	r24, 0x0256
    656a:	90 91 57 02 	lds	r25, 0x0257
    656e:	00 97       	sbiw	r24, 0x00	; 0
    6570:	29 f0       	breq	.+10     	; 0x657c <__vector_4+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID]() ;
    6572:	e0 91 56 02 	lds	r30, 0x0256
    6576:	f0 91 57 02 	lds	r31, 0x0257
    657a:	09 95       	icall
	}
}
    657c:	cf 91       	pop	r28
    657e:	df 91       	pop	r29
    6580:	ff 91       	pop	r31
    6582:	ef 91       	pop	r30
    6584:	bf 91       	pop	r27
    6586:	af 91       	pop	r26
    6588:	9f 91       	pop	r25
    658a:	8f 91       	pop	r24
    658c:	7f 91       	pop	r23
    658e:	6f 91       	pop	r22
    6590:	5f 91       	pop	r21
    6592:	4f 91       	pop	r20
    6594:	3f 91       	pop	r19
    6596:	2f 91       	pop	r18
    6598:	0f 90       	pop	r0
    659a:	0f be       	out	0x3f, r0	; 63
    659c:	0f 90       	pop	r0
    659e:	1f 90       	pop	r1
    65a0:	18 95       	reti

000065a2 <TWI_vInitMaster>:

/*___________________________________________________________________________________________________________________*/

/*Set master address to 0 if master will not be addressed*/
void TWI_vInitMaster(u8 Copy_u8Address)
{
    65a2:	df 93       	push	r29
    65a4:	cf 93       	push	r28
    65a6:	0f 92       	push	r0
    65a8:	cd b7       	in	r28, 0x3d	; 61
    65aa:	de b7       	in	r29, 0x3e	; 62
    65ac:	89 83       	std	Y+1, r24	; 0x01

	/*Set SCL frequency to 400kHz, with 8Mhz system frequency*/
	/*1- Set TWBR to 2 => [0:255] */

	TWBR = (u8) (((F_CPU/SCL_Clock) - 16) / (2 * TWI_PRESCALLER));
    65ae:	e0 e2       	ldi	r30, 0x20	; 32
    65b0:	f0 e0       	ldi	r31, 0x00	; 0
    65b2:	82 e0       	ldi	r24, 0x02	; 2
    65b4:	80 83       	st	Z, r24

	/* Set the prescaler */
	/*2- Clear the prescaler bits (TWPS)*/
	#if TWI_PRESCALLER == PRESCALLER_BY_1
		TWSR = 0;
    65b6:	e1 e2       	ldi	r30, 0x21	; 33
    65b8:	f0 e0       	ldi	r31, 0x00	; 0
    65ba:	10 82       	st	Z, r1
	#else
		#error "wrong TWI_PRESCALLER config"
	#endif

	/*Check if the master node will be addressed & set the Master Address */
	if(Copy_u8Address != 0)
    65bc:	89 81       	ldd	r24, Y+1	; 0x01
    65be:	88 23       	and	r24, r24
    65c0:	29 f0       	breq	.+10     	; 0x65cc <TWI_vInitMaster+0x2a>
	{
		/*Set the required address in the 7 MSB of TWAR*/
		TWAR = Copy_u8Address<<1;
    65c2:	e2 e2       	ldi	r30, 0x22	; 34
    65c4:	f0 e0       	ldi	r31, 0x00	; 0
    65c6:	89 81       	ldd	r24, Y+1	; 0x01
    65c8:	88 0f       	add	r24, r24
    65ca:	80 83       	st	Z, r24
	}

	/************** Enable *******************/

	/*Enable Acknowledge bit*/
	SET_BIT(TWCR,TWCR_TWEA);
    65cc:	a6 e5       	ldi	r26, 0x56	; 86
    65ce:	b0 e0       	ldi	r27, 0x00	; 0
    65d0:	e6 e5       	ldi	r30, 0x56	; 86
    65d2:	f0 e0       	ldi	r31, 0x00	; 0
    65d4:	80 81       	ld	r24, Z
    65d6:	80 64       	ori	r24, 0x40	; 64
    65d8:	8c 93       	st	X, r24

	/*Enable TWI Peripheral*/
	SET_BIT(TWCR,TWCR_TWEN);
    65da:	a6 e5       	ldi	r26, 0x56	; 86
    65dc:	b0 e0       	ldi	r27, 0x00	; 0
    65de:	e6 e5       	ldi	r30, 0x56	; 86
    65e0:	f0 e0       	ldi	r31, 0x00	; 0
    65e2:	80 81       	ld	r24, Z
    65e4:	84 60       	ori	r24, 0x04	; 4
    65e6:	8c 93       	st	X, r24
}
    65e8:	0f 90       	pop	r0
    65ea:	cf 91       	pop	r28
    65ec:	df 91       	pop	r29
    65ee:	08 95       	ret

000065f0 <TWI_vInitSlave>:

void TWI_vInitSlave(u8 Copy_u8Address)
{
    65f0:	df 93       	push	r29
    65f2:	cf 93       	push	r28
    65f4:	0f 92       	push	r0
    65f6:	cd b7       	in	r28, 0x3d	; 61
    65f8:	de b7       	in	r29, 0x3e	; 62
    65fa:	89 83       	std	Y+1, r24	; 0x01
	/*Set the slave address*/
	TWAR = Copy_u8Address<<1;
    65fc:	e2 e2       	ldi	r30, 0x22	; 34
    65fe:	f0 e0       	ldi	r31, 0x00	; 0
    6600:	89 81       	ldd	r24, Y+1	; 0x01
    6602:	88 0f       	add	r24, r24
    6604:	80 83       	st	Z, r24

	/************** Enable *******************/

	/*Enable Acknowledge bit*/
	SET_BIT(TWCR,TWCR_TWEA);
    6606:	a6 e5       	ldi	r26, 0x56	; 86
    6608:	b0 e0       	ldi	r27, 0x00	; 0
    660a:	e6 e5       	ldi	r30, 0x56	; 86
    660c:	f0 e0       	ldi	r31, 0x00	; 0
    660e:	80 81       	ld	r24, Z
    6610:	80 64       	ori	r24, 0x40	; 64
    6612:	8c 93       	st	X, r24

	/*Enable TWI*/
	SET_BIT(TWCR,TWCR_TWEN);
    6614:	a6 e5       	ldi	r26, 0x56	; 86
    6616:	b0 e0       	ldi	r27, 0x00	; 0
    6618:	e6 e5       	ldi	r30, 0x56	; 86
    661a:	f0 e0       	ldi	r31, 0x00	; 0
    661c:	80 81       	ld	r24, Z
    661e:	84 60       	ori	r24, 0x04	; 4
    6620:	8c 93       	st	X, r24
}
    6622:	0f 90       	pop	r0
    6624:	cf 91       	pop	r28
    6626:	df 91       	pop	r29
    6628:	08 95       	ret

0000662a <TWI_SendStartCondition>:

TWI_ErrStatus TWI_SendStartCondition(void)
{
    662a:	df 93       	push	r29
    662c:	cf 93       	push	r28
    662e:	0f 92       	push	r0
    6630:	cd b7       	in	r28, 0x3d	; 61
    6632:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrStatus Local_Error= NoError;
    6634:	19 82       	std	Y+1, r1	; 0x01

	/*Send start condition*/
	SET_BIT(TWCR, TWCR_TWSTA);
    6636:	a6 e5       	ldi	r26, 0x56	; 86
    6638:	b0 e0       	ldi	r27, 0x00	; 0
    663a:	e6 e5       	ldi	r30, 0x56	; 86
    663c:	f0 e0       	ldi	r31, 0x00	; 0
    663e:	80 81       	ld	r24, Z
    6640:	80 62       	ori	r24, 0x20	; 32
    6642:	8c 93       	st	X, r24
	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR, TWCR_TWINT);
    6644:	a6 e5       	ldi	r26, 0x56	; 86
    6646:	b0 e0       	ldi	r27, 0x00	; 0
    6648:	e6 e5       	ldi	r30, 0x56	; 86
    664a:	f0 e0       	ldi	r31, 0x00	; 0
    664c:	80 81       	ld	r24, Z
    664e:	80 68       	ori	r24, 0x80	; 128
    6650:	8c 93       	st	X, r24
	Hint : we could use
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
	 */

	/*wait until the operation finishes and the flag is raised*/
   while((READ_BIT(TWCR,TWCR_TWINT)) == 0);
    6652:	e6 e5       	ldi	r30, 0x56	; 86
    6654:	f0 e0       	ldi	r31, 0x00	; 0
    6656:	80 81       	ld	r24, Z
    6658:	88 23       	and	r24, r24
    665a:	dc f7       	brge	.-10     	; 0x6652 <TWI_SendStartCondition+0x28>

	/*Check the operation status (Bit Masking) */
	if((TWSR & 0xF8) != START_ACK )
    665c:	e1 e2       	ldi	r30, 0x21	; 33
    665e:	f0 e0       	ldi	r31, 0x00	; 0
    6660:	80 81       	ld	r24, Z
    6662:	88 2f       	mov	r24, r24
    6664:	90 e0       	ldi	r25, 0x00	; 0
    6666:	88 7f       	andi	r24, 0xF8	; 248
    6668:	90 70       	andi	r25, 0x00	; 0
    666a:	88 30       	cpi	r24, 0x08	; 8
    666c:	91 05       	cpc	r25, r1
    666e:	11 f0       	breq	.+4      	; 0x6674 <TWI_SendStartCondition+0x4a>
	{
		Local_Error = StartConditionErr;
    6670:	81 e0       	ldi	r24, 0x01	; 1
    6672:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
    6674:	89 81       	ldd	r24, Y+1	; 0x01
}
    6676:	0f 90       	pop	r0
    6678:	cf 91       	pop	r28
    667a:	df 91       	pop	r29
    667c:	08 95       	ret

0000667e <TWI_SendRepeatedStart>:

TWI_ErrStatus TWI_SendRepeatedStart(void)
{
    667e:	df 93       	push	r29
    6680:	cf 93       	push	r28
    6682:	0f 92       	push	r0
    6684:	cd b7       	in	r28, 0x3d	; 61
    6686:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrStatus Local_Error= NoError;
    6688:	19 82       	std	Y+1, r1	; 0x01

	/*Send start condition*/
	SET_BIT(TWCR, TWCR_TWSTA);
    668a:	a6 e5       	ldi	r26, 0x56	; 86
    668c:	b0 e0       	ldi	r27, 0x00	; 0
    668e:	e6 e5       	ldi	r30, 0x56	; 86
    6690:	f0 e0       	ldi	r31, 0x00	; 0
    6692:	80 81       	ld	r24, Z
    6694:	80 62       	ori	r24, 0x20	; 32
    6696:	8c 93       	st	X, r24
	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    6698:	a6 e5       	ldi	r26, 0x56	; 86
    669a:	b0 e0       	ldi	r27, 0x00	; 0
    669c:	e6 e5       	ldi	r30, 0x56	; 86
    669e:	f0 e0       	ldi	r31, 0x00	; 0
    66a0:	80 81       	ld	r24, Z
    66a2:	80 68       	ori	r24, 0x80	; 128
    66a4:	8c 93       	st	X, r24
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
	 */


	/*wait until the operation finishes and the flag is raised*/
	while((READ_BIT(TWCR,TWCR_TWINT))==0);
    66a6:	e6 e5       	ldi	r30, 0x56	; 86
    66a8:	f0 e0       	ldi	r31, 0x00	; 0
    66aa:	80 81       	ld	r24, Z
    66ac:	88 23       	and	r24, r24
    66ae:	dc f7       	brge	.-10     	; 0x66a6 <TWI_SendRepeatedStart+0x28>

	/*Check the operation status*/
	if((TWSR & 0xF8) != REP_START_ACK )
    66b0:	e1 e2       	ldi	r30, 0x21	; 33
    66b2:	f0 e0       	ldi	r31, 0x00	; 0
    66b4:	80 81       	ld	r24, Z
    66b6:	88 2f       	mov	r24, r24
    66b8:	90 e0       	ldi	r25, 0x00	; 0
    66ba:	88 7f       	andi	r24, 0xF8	; 248
    66bc:	90 70       	andi	r25, 0x00	; 0
    66be:	80 31       	cpi	r24, 0x10	; 16
    66c0:	91 05       	cpc	r25, r1
    66c2:	11 f0       	breq	.+4      	; 0x66c8 <TWI_SendRepeatedStart+0x4a>
	{
		Local_Error = RepeatedStartError;
    66c4:	82 e0       	ldi	r24, 0x02	; 2
    66c6:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
    66c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    66ca:	0f 90       	pop	r0
    66cc:	cf 91       	pop	r28
    66ce:	df 91       	pop	r29
    66d0:	08 95       	ret

000066d2 <TWI_SendSlaveAddressWithWrite>:

TWI_ErrStatus TWI_SendSlaveAddressWithWrite(u8 Copy_u8SlaveAddress)
{
    66d2:	df 93       	push	r29
    66d4:	cf 93       	push	r28
    66d6:	00 d0       	rcall	.+0      	; 0x66d8 <TWI_SendSlaveAddressWithWrite+0x6>
    66d8:	cd b7       	in	r28, 0x3d	; 61
    66da:	de b7       	in	r29, 0x3e	; 62
    66dc:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
    66de:	19 82       	std	Y+1, r1	; 0x01

	/*send the 7bit slave address to the bus*/
	TWDR = (Copy_u8SlaveAddress<<1) ;
    66e0:	e3 e2       	ldi	r30, 0x23	; 35
    66e2:	f0 e0       	ldi	r31, 0x00	; 0
    66e4:	8a 81       	ldd	r24, Y+2	; 0x02
    66e6:	88 0f       	add	r24, r24
    66e8:	80 83       	st	Z, r24
	/*set the write request in the LSB in the data register*/
	CLR_BIT(TWDR, 0);
    66ea:	a3 e2       	ldi	r26, 0x23	; 35
    66ec:	b0 e0       	ldi	r27, 0x00	; 0
    66ee:	e3 e2       	ldi	r30, 0x23	; 35
    66f0:	f0 e0       	ldi	r31, 0x00	; 0
    66f2:	80 81       	ld	r24, Z
    66f4:	8e 7f       	andi	r24, 0xFE	; 254
    66f6:	8c 93       	st	X, r24

	/*Clear the start condition bit*/
	CLR_BIT(TWCR,TWCR_TWSTA);
    66f8:	a6 e5       	ldi	r26, 0x56	; 86
    66fa:	b0 e0       	ldi	r27, 0x00	; 0
    66fc:	e6 e5       	ldi	r30, 0x56	; 86
    66fe:	f0 e0       	ldi	r31, 0x00	; 0
    6700:	80 81       	ld	r24, Z
    6702:	8f 7d       	andi	r24, 0xDF	; 223
    6704:	8c 93       	st	X, r24

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    6706:	a6 e5       	ldi	r26, 0x56	; 86
    6708:	b0 e0       	ldi	r27, 0x00	; 0
    670a:	e6 e5       	ldi	r30, 0x56	; 86
    670c:	f0 e0       	ldi	r31, 0x00	; 0
    670e:	80 81       	ld	r24, Z
    6710:	80 68       	ori	r24, 0x80	; 128
    6712:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((READ_BIT(TWCR,TWCR_TWINT))==0);
    6714:	e6 e5       	ldi	r30, 0x56	; 86
    6716:	f0 e0       	ldi	r31, 0x00	; 0
    6718:	80 81       	ld	r24, Z
    671a:	88 23       	and	r24, r24
    671c:	dc f7       	brge	.-10     	; 0x6714 <TWI_SendSlaveAddressWithWrite+0x42>

	/*Check the operation status*/
	if((TWSR & 0xF8) != SLAVE_ADD_AND_WR_ACK )
    671e:	e1 e2       	ldi	r30, 0x21	; 33
    6720:	f0 e0       	ldi	r31, 0x00	; 0
    6722:	80 81       	ld	r24, Z
    6724:	88 2f       	mov	r24, r24
    6726:	90 e0       	ldi	r25, 0x00	; 0
    6728:	88 7f       	andi	r24, 0xF8	; 248
    672a:	90 70       	andi	r25, 0x00	; 0
    672c:	88 31       	cpi	r24, 0x18	; 24
    672e:	91 05       	cpc	r25, r1
    6730:	11 f0       	breq	.+4      	; 0x6736 <TWI_SendSlaveAddressWithWrite+0x64>
	{
		Local_Error = SlaveAddressWithWriteErr;
    6732:	83 e0       	ldi	r24, 0x03	; 3
    6734:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
    6736:	89 81       	ldd	r24, Y+1	; 0x01
}
    6738:	0f 90       	pop	r0
    673a:	0f 90       	pop	r0
    673c:	cf 91       	pop	r28
    673e:	df 91       	pop	r29
    6740:	08 95       	ret

00006742 <TWI_SendSlaveAddressWithRead>:

TWI_ErrStatus TWI_SendSlaveAddressWithRead(u8 Copy_u8SlaveAddress)
{
    6742:	df 93       	push	r29
    6744:	cf 93       	push	r28
    6746:	00 d0       	rcall	.+0      	; 0x6748 <TWI_SendSlaveAddressWithRead+0x6>
    6748:	cd b7       	in	r28, 0x3d	; 61
    674a:	de b7       	in	r29, 0x3e	; 62
    674c:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
    674e:	19 82       	std	Y+1, r1	; 0x01

	/*send the 7bit slave address to the bus*/
	TWDR = Copy_u8SlaveAddress << 1;
    6750:	e3 e2       	ldi	r30, 0x23	; 35
    6752:	f0 e0       	ldi	r31, 0x00	; 0
    6754:	8a 81       	ldd	r24, Y+2	; 0x02
    6756:	88 0f       	add	r24, r24
    6758:	80 83       	st	Z, r24
	/*set the read request in the LSB in the data register*/
	SET_BIT(TWDR, 0);
    675a:	a3 e2       	ldi	r26, 0x23	; 35
    675c:	b0 e0       	ldi	r27, 0x00	; 0
    675e:	e3 e2       	ldi	r30, 0x23	; 35
    6760:	f0 e0       	ldi	r31, 0x00	; 0
    6762:	80 81       	ld	r24, Z
    6764:	81 60       	ori	r24, 0x01	; 1
    6766:	8c 93       	st	X, r24

	/*Clear the start condition bit*/
	CLR_BIT(TWCR,TWCR_TWSTA);
    6768:	a6 e5       	ldi	r26, 0x56	; 86
    676a:	b0 e0       	ldi	r27, 0x00	; 0
    676c:	e6 e5       	ldi	r30, 0x56	; 86
    676e:	f0 e0       	ldi	r31, 0x00	; 0
    6770:	80 81       	ld	r24, Z
    6772:	8f 7d       	andi	r24, 0xDF	; 223
    6774:	8c 93       	st	X, r24

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    6776:	a6 e5       	ldi	r26, 0x56	; 86
    6778:	b0 e0       	ldi	r27, 0x00	; 0
    677a:	e6 e5       	ldi	r30, 0x56	; 86
    677c:	f0 e0       	ldi	r31, 0x00	; 0
    677e:	80 81       	ld	r24, Z
    6780:	80 68       	ori	r24, 0x80	; 128
    6782:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((READ_BIT(TWCR,TWCR_TWINT)) == 0);
    6784:	e6 e5       	ldi	r30, 0x56	; 86
    6786:	f0 e0       	ldi	r31, 0x00	; 0
    6788:	80 81       	ld	r24, Z
    678a:	88 23       	and	r24, r24
    678c:	dc f7       	brge	.-10     	; 0x6784 <TWI_SendSlaveAddressWithRead+0x42>

	/*Check the operation status*/
	if((TWSR & 0xF8) != SLAVE_ADD_AND_RD_ACK )
    678e:	e1 e2       	ldi	r30, 0x21	; 33
    6790:	f0 e0       	ldi	r31, 0x00	; 0
    6792:	80 81       	ld	r24, Z
    6794:	88 2f       	mov	r24, r24
    6796:	90 e0       	ldi	r25, 0x00	; 0
    6798:	88 7f       	andi	r24, 0xF8	; 248
    679a:	90 70       	andi	r25, 0x00	; 0
    679c:	80 34       	cpi	r24, 0x40	; 64
    679e:	91 05       	cpc	r25, r1
    67a0:	11 f0       	breq	.+4      	; 0x67a6 <TWI_SendSlaveAddressWithRead+0x64>
	{
		Local_Error = SlaveAddressWithReadErr;
    67a2:	84 e0       	ldi	r24, 0x04	; 4
    67a4:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
    67a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    67a8:	0f 90       	pop	r0
    67aa:	0f 90       	pop	r0
    67ac:	cf 91       	pop	r28
    67ae:	df 91       	pop	r29
    67b0:	08 95       	ret

000067b2 <TWI_MasterWriteDataByte>:

TWI_ErrStatus TWI_MasterWriteDataByte(u8 Copy_u8DataByte)
{
    67b2:	df 93       	push	r29
    67b4:	cf 93       	push	r28
    67b6:	00 d0       	rcall	.+0      	; 0x67b8 <TWI_MasterWriteDataByte+0x6>
    67b8:	cd b7       	in	r28, 0x3d	; 61
    67ba:	de b7       	in	r29, 0x3e	; 62
    67bc:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
    67be:	19 82       	std	Y+1, r1	; 0x01

	/*Write the data byte on the bus*/
	TWDR = Copy_u8DataByte;
    67c0:	e3 e2       	ldi	r30, 0x23	; 35
    67c2:	f0 e0       	ldi	r31, 0x00	; 0
    67c4:	8a 81       	ldd	r24, Y+2	; 0x02
    67c6:	80 83       	st	Z, r24

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    67c8:	a6 e5       	ldi	r26, 0x56	; 86
    67ca:	b0 e0       	ldi	r27, 0x00	; 0
    67cc:	e6 e5       	ldi	r30, 0x56	; 86
    67ce:	f0 e0       	ldi	r31, 0x00	; 0
    67d0:	80 81       	ld	r24, Z
    67d2:	80 68       	ori	r24, 0x80	; 128
    67d4:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((READ_BIT(TWCR,TWCR_TWINT)) == 0 );
    67d6:	e6 e5       	ldi	r30, 0x56	; 86
    67d8:	f0 e0       	ldi	r31, 0x00	; 0
    67da:	80 81       	ld	r24, Z
    67dc:	88 23       	and	r24, r24
    67de:	dc f7       	brge	.-10     	; 0x67d6 <TWI_MasterWriteDataByte+0x24>

	/*Check the operation status*/
	if((TWSR & 0xF8) !=  MSTR_WR_BYTE_ACK)
    67e0:	e1 e2       	ldi	r30, 0x21	; 33
    67e2:	f0 e0       	ldi	r31, 0x00	; 0
    67e4:	80 81       	ld	r24, Z
    67e6:	88 2f       	mov	r24, r24
    67e8:	90 e0       	ldi	r25, 0x00	; 0
    67ea:	88 7f       	andi	r24, 0xF8	; 248
    67ec:	90 70       	andi	r25, 0x00	; 0
    67ee:	88 32       	cpi	r24, 0x28	; 40
    67f0:	91 05       	cpc	r25, r1
    67f2:	11 f0       	breq	.+4      	; 0x67f8 <TWI_MasterWriteDataByte+0x46>
	{
		Local_Error = MasterWriteByteErr;
    67f4:	85 e0       	ldi	r24, 0x05	; 5
    67f6:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
    67f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    67fa:	0f 90       	pop	r0
    67fc:	0f 90       	pop	r0
    67fe:	cf 91       	pop	r28
    6800:	df 91       	pop	r29
    6802:	08 95       	ret

00006804 <TWI_MasterReadDataByte>:

TWI_ErrStatus TWI_MasterReadDataByte(u8* Copy_pu8DataByte)
{
    6804:	df 93       	push	r29
    6806:	cf 93       	push	r28
    6808:	00 d0       	rcall	.+0      	; 0x680a <TWI_MasterReadDataByte+0x6>
    680a:	0f 92       	push	r0
    680c:	cd b7       	in	r28, 0x3d	; 61
    680e:	de b7       	in	r29, 0x3e	; 62
    6810:	9b 83       	std	Y+3, r25	; 0x03
    6812:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
    6814:	19 82       	std	Y+1, r1	; 0x01

	/*Clear the interrupt flag to allow the slave send the data*/
	SET_BIT(TWCR,TWCR_TWINT);
    6816:	a6 e5       	ldi	r26, 0x56	; 86
    6818:	b0 e0       	ldi	r27, 0x00	; 0
    681a:	e6 e5       	ldi	r30, 0x56	; 86
    681c:	f0 e0       	ldi	r31, 0x00	; 0
    681e:	80 81       	ld	r24, Z
    6820:	80 68       	ori	r24, 0x80	; 128
    6822:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((READ_BIT(TWCR,TWCR_TWINT))==0);
    6824:	e6 e5       	ldi	r30, 0x56	; 86
    6826:	f0 e0       	ldi	r31, 0x00	; 0
    6828:	80 81       	ld	r24, Z
    682a:	88 23       	and	r24, r24
    682c:	dc f7       	brge	.-10     	; 0x6824 <TWI_MasterReadDataByte+0x20>

	/*Check the operation status*/
	if((TWSR & 0xF8) !=  MSTR_RD_BYTE_WITH_ACK)
    682e:	e1 e2       	ldi	r30, 0x21	; 33
    6830:	f0 e0       	ldi	r31, 0x00	; 0
    6832:	80 81       	ld	r24, Z
    6834:	88 2f       	mov	r24, r24
    6836:	90 e0       	ldi	r25, 0x00	; 0
    6838:	88 7f       	andi	r24, 0xF8	; 248
    683a:	90 70       	andi	r25, 0x00	; 0
    683c:	80 35       	cpi	r24, 0x50	; 80
    683e:	91 05       	cpc	r25, r1
    6840:	19 f0       	breq	.+6      	; 0x6848 <TWI_MasterReadDataByte+0x44>
	{
		Local_Error = MasterReadByteErr;
    6842:	86 e0       	ldi	r24, 0x06	; 6
    6844:	89 83       	std	Y+1, r24	; 0x01
    6846:	06 c0       	rjmp	.+12     	; 0x6854 <TWI_MasterReadDataByte+0x50>
	}
	else
	{
		/*Read the received data*/
		*Copy_pu8DataByte = TWDR;
    6848:	e3 e2       	ldi	r30, 0x23	; 35
    684a:	f0 e0       	ldi	r31, 0x00	; 0
    684c:	80 81       	ld	r24, Z
    684e:	ea 81       	ldd	r30, Y+2	; 0x02
    6850:	fb 81       	ldd	r31, Y+3	; 0x03
    6852:	80 83       	st	Z, r24
	}

	return Local_Error;
    6854:	89 81       	ldd	r24, Y+1	; 0x01
}
    6856:	0f 90       	pop	r0
    6858:	0f 90       	pop	r0
    685a:	0f 90       	pop	r0
    685c:	cf 91       	pop	r28
    685e:	df 91       	pop	r29
    6860:	08 95       	ret

00006862 <TWI_SlaveWriteDataByte>:

TWI_ErrStatus TWI_SlaveWriteDataByte(u8 Copy_u8DataByte)
{
    6862:	df 93       	push	r29
    6864:	cf 93       	push	r28
    6866:	00 d0       	rcall	.+0      	; 0x6868 <TWI_SlaveWriteDataByte+0x6>
    6868:	cd b7       	in	r28, 0x3d	; 61
    686a:	de b7       	in	r29, 0x3e	; 62
    686c:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
    686e:	19 82       	std	Y+1, r1	; 0x01

	/*Write the data byte on the bus*/
	TWDR = Copy_u8DataByte;
    6870:	e3 e2       	ldi	r30, 0x23	; 35
    6872:	f0 e0       	ldi	r31, 0x00	; 0
    6874:	8a 81       	ldd	r24, Y+2	; 0x02
    6876:	80 83       	st	Z, r24

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    6878:	a6 e5       	ldi	r26, 0x56	; 86
    687a:	b0 e0       	ldi	r27, 0x00	; 0
    687c:	e6 e5       	ldi	r30, 0x56	; 86
    687e:	f0 e0       	ldi	r31, 0x00	; 0
    6880:	80 81       	ld	r24, Z
    6882:	80 68       	ori	r24, 0x80	; 128
    6884:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((READ_BIT(TWCR,TWCR_TWINT))==0);
    6886:	e6 e5       	ldi	r30, 0x56	; 86
    6888:	f0 e0       	ldi	r31, 0x00	; 0
    688a:	80 81       	ld	r24, Z
    688c:	88 23       	and	r24, r24
    688e:	dc f7       	brge	.-10     	; 0x6886 <TWI_SlaveWriteDataByte+0x24>

	/*Check the operation status*/
	if((TWSR & 0xF8) !=  SLAVE_BYTE_TRANSMITTED)
    6890:	e1 e2       	ldi	r30, 0x21	; 33
    6892:	f0 e0       	ldi	r31, 0x00	; 0
    6894:	80 81       	ld	r24, Z
    6896:	88 2f       	mov	r24, r24
    6898:	90 e0       	ldi	r25, 0x00	; 0
    689a:	88 7f       	andi	r24, 0xF8	; 248
    689c:	90 70       	andi	r25, 0x00	; 0
    689e:	88 3b       	cpi	r24, 0xB8	; 184
    68a0:	91 05       	cpc	r25, r1
    68a2:	11 f0       	breq	.+4      	; 0x68a8 <TWI_SlaveWriteDataByte+0x46>
	{
		Local_Error = SlaveWriteByteErr;
    68a4:	87 e0       	ldi	r24, 0x07	; 7
    68a6:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
    68a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    68aa:	0f 90       	pop	r0
    68ac:	0f 90       	pop	r0
    68ae:	cf 91       	pop	r28
    68b0:	df 91       	pop	r29
    68b2:	08 95       	ret

000068b4 <TWI_SlaveReadDataByte>:

TWI_ErrStatus TWI_SlaveReadDataByte(u8* Copy_pu8DataByte)
{
    68b4:	df 93       	push	r29
    68b6:	cf 93       	push	r28
    68b8:	00 d0       	rcall	.+0      	; 0x68ba <TWI_SlaveReadDataByte+0x6>
    68ba:	0f 92       	push	r0
    68bc:	cd b7       	in	r28, 0x3d	; 61
    68be:	de b7       	in	r29, 0x3e	; 62
    68c0:	9b 83       	std	Y+3, r25	; 0x03
    68c2:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
    68c4:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(TWCR,TWCR_TWINT);
    68c6:	a6 e5       	ldi	r26, 0x56	; 86
    68c8:	b0 e0       	ldi	r27, 0x00	; 0
    68ca:	e6 e5       	ldi	r30, 0x56	; 86
    68cc:	f0 e0       	ldi	r31, 0x00	; 0
    68ce:	80 81       	ld	r24, Z
    68d0:	80 68       	ori	r24, 0x80	; 128
    68d2:	8c 93       	st	X, r24


	/*wait until the operation finishes and the flag is raised*/
	while((READ_BIT(TWCR,TWCR_TWINT)) == 0);
    68d4:	e6 e5       	ldi	r30, 0x56	; 86
    68d6:	f0 e0       	ldi	r31, 0x00	; 0
    68d8:	80 81       	ld	r24, Z
    68da:	88 23       	and	r24, r24
    68dc:	dc f7       	brge	.-10     	; 0x68d4 <TWI_SlaveReadDataByte+0x20>
	/*Check the operation status*/
	if((TWSR & 0xF8) !=  SLAVE_DATA_RECEIVED)
    68de:	e1 e2       	ldi	r30, 0x21	; 33
    68e0:	f0 e0       	ldi	r31, 0x00	; 0
    68e2:	80 81       	ld	r24, Z
    68e4:	88 2f       	mov	r24, r24
    68e6:	90 e0       	ldi	r25, 0x00	; 0
    68e8:	88 7f       	andi	r24, 0xF8	; 248
    68ea:	90 70       	andi	r25, 0x00	; 0
    68ec:	80 38       	cpi	r24, 0x80	; 128
    68ee:	91 05       	cpc	r25, r1
    68f0:	19 f0       	breq	.+6      	; 0x68f8 <TWI_SlaveReadDataByte+0x44>
	{
		Local_Error = SlaveReadByteErr;
    68f2:	88 e0       	ldi	r24, 0x08	; 8
    68f4:	89 83       	std	Y+1, r24	; 0x01
    68f6:	06 c0       	rjmp	.+12     	; 0x6904 <TWI_SlaveReadDataByte+0x50>
	}
	else
	{
		/*Read the received data*/
		*Copy_pu8DataByte = TWDR;
    68f8:	e3 e2       	ldi	r30, 0x23	; 35
    68fa:	f0 e0       	ldi	r31, 0x00	; 0
    68fc:	80 81       	ld	r24, Z
    68fe:	ea 81       	ldd	r30, Y+2	; 0x02
    6900:	fb 81       	ldd	r31, Y+3	; 0x03
    6902:	80 83       	st	Z, r24
	}

	return Local_Error;
    6904:	89 81       	ldd	r24, Y+1	; 0x01
}
    6906:	0f 90       	pop	r0
    6908:	0f 90       	pop	r0
    690a:	0f 90       	pop	r0
    690c:	cf 91       	pop	r28
    690e:	df 91       	pop	r29
    6910:	08 95       	ret

00006912 <TWI_vSendStopCondition>:


void TWI_vSendStopCondition(void)
{
    6912:	df 93       	push	r29
    6914:	cf 93       	push	r28
    6916:	cd b7       	in	r28, 0x3d	; 61
    6918:	de b7       	in	r29, 0x3e	; 62
	/*Sent a stop condition on the bus*/
	SET_BIT(TWCR,TWCR_TWSTO);
    691a:	a6 e5       	ldi	r26, 0x56	; 86
    691c:	b0 e0       	ldi	r27, 0x00	; 0
    691e:	e6 e5       	ldi	r30, 0x56	; 86
    6920:	f0 e0       	ldi	r31, 0x00	; 0
    6922:	80 81       	ld	r24, Z
    6924:	80 61       	ori	r24, 0x10	; 16
    6926:	8c 93       	st	X, r24

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    6928:	a6 e5       	ldi	r26, 0x56	; 86
    692a:	b0 e0       	ldi	r27, 0x00	; 0
    692c:	e6 e5       	ldi	r30, 0x56	; 86
    692e:	f0 e0       	ldi	r31, 0x00	; 0
    6930:	80 81       	ld	r24, Z
    6932:	80 68       	ori	r24, 0x80	; 128
    6934:	8c 93       	st	X, r24

}
    6936:	cf 91       	pop	r28
    6938:	df 91       	pop	r29
    693a:	08 95       	ret

0000693c <PIR_Init>:
#define PIR_PIN  PC2
#define PIR_PORT PORTC
#define PIR_DDR  DDRC
#define PIR_PIN_REG PIND

void PIR_Init() {
    693c:	df 93       	push	r29
    693e:	cf 93       	push	r28
    6940:	cd b7       	in	r28, 0x3d	; 61
    6942:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(PIR_DDR, PIR_PIN); // Set PD2 as input
    6944:	a4 e3       	ldi	r26, 0x34	; 52
    6946:	b0 e0       	ldi	r27, 0x00	; 0
    6948:	e4 e3       	ldi	r30, 0x34	; 52
    694a:	f0 e0       	ldi	r31, 0x00	; 0
    694c:	80 81       	ld	r24, Z
    694e:	8b 7f       	andi	r24, 0xFB	; 251
    6950:	8c 93       	st	X, r24
}
    6952:	cf 91       	pop	r28
    6954:	df 91       	pop	r29
    6956:	08 95       	ret

00006958 <PIR_Read>:

u8 PIR_Read() {
    6958:	df 93       	push	r29
    695a:	cf 93       	push	r28
    695c:	cd b7       	in	r28, 0x3d	; 61
    695e:	de b7       	in	r29, 0x3e	; 62
    return GET_BIT(PIR_PIN_REG, PIR_PIN); // Read PD2
    6960:	e0 e3       	ldi	r30, 0x30	; 48
    6962:	f0 e0       	ldi	r31, 0x00	; 0
    6964:	80 81       	ld	r24, Z
    6966:	88 2f       	mov	r24, r24
    6968:	90 e0       	ldi	r25, 0x00	; 0
    696a:	84 70       	andi	r24, 0x04	; 4
    696c:	90 70       	andi	r25, 0x00	; 0
    696e:	95 95       	asr	r25
    6970:	87 95       	ror	r24
    6972:	95 95       	asr	r25
    6974:	87 95       	ror	r24
}
    6976:	cf 91       	pop	r28
    6978:	df 91       	pop	r29
    697a:	08 95       	ret

0000697c <main>:
u8 checkCredentials(u8* enteredName, u8* enteredPass);
void ownerMode(void);
void guestMode(void);
void scrollText(char* text, u8 row);

int main(void) {
    697c:	df 93       	push	r29
    697e:	cf 93       	push	r28
    6980:	cd b7       	in	r28, 0x3d	; 61
    6982:	de b7       	in	r29, 0x3e	; 62
    6984:	61 97       	sbiw	r28, 0x11	; 17
    6986:	0f b6       	in	r0, 0x3f	; 63
    6988:	f8 94       	cli
    698a:	de bf       	out	0x3e, r29	; 62
    698c:	0f be       	out	0x3f, r0	; 63
    698e:	cd bf       	out	0x3d, r28	; 61
    /* Initialize components */
    CLCD_voidInit();
    6990:	0e 94 7d 09 	call	0x12fa	; 0x12fa <CLCD_voidInit>
    DHT11_voidInit();
    6994:	0e 94 46 12 	call	0x248c	; 0x248c <DHT11_voidInit>
    MQ2_enumInit(&mq2Config);
    6998:	81 e3       	ldi	r24, 0x31	; 49
    699a:	92 e0       	ldi	r25, 0x02	; 2
    699c:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <MQ2_enumInit>
    BUZ_vInit(buzzer);
    69a0:	60 91 2b 02 	lds	r22, 0x022B
    69a4:	70 91 2c 02 	lds	r23, 0x022C
    69a8:	80 91 2d 02 	lds	r24, 0x022D
    69ac:	0e 94 10 09 	call	0x1220	; 0x1220 <BUZ_vInit>
    KPD_vInit();
    69b0:	0e 94 99 1a 	call	0x3532	; 0x3532 <KPD_vInit>
    SoilMoisture_voidInit();
    69b4:	0e 94 cb 20 	call	0x4196	; 0x4196 <SoilMoisture_voidInit>

    u8 pirState = LOW;
    69b8:	19 8a       	std	Y+17, r1	; 0x11
    u8 systemChoice = 0;
    69ba:	18 8a       	std	Y+16, r1	; 0x10
    PIR_Init();
    69bc:	0e 94 9e 34 	call	0x693c	; 0x693c <PIR_Init>
    /* Welcome message */
    displayWelcomeMessage();
    69c0:	0e 94 77 35 	call	0x6aee	; 0x6aee <displayWelcomeMessage>

    while(1) {
        /* Check PIR sensor (simulated input - replace with actual PIR reading) */
    	u8 pirState = PIR_Read();; // Implement PIR reading
    69c4:	0e 94 ac 34 	call	0x6958	; 0x6958 <PIR_Read>
    69c8:	8f 87       	std	Y+15, r24	; 0x0f

    	  if(pirState == HIGH) {
    69ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    69cc:	81 30       	cpi	r24, 0x01	; 1
    69ce:	e1 f4       	brne	.+56     	; 0x6a08 <main+0x8c>
            CLCD_voidClearScreen();
    69d0:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidClearScreen>
            CLCD_voidSetPosition(1, 1);
    69d4:	81 e0       	ldi	r24, 0x01	; 1
    69d6:	61 e0       	ldi	r22, 0x01	; 1
    69d8:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <CLCD_voidSetPosition>
            CLCD_voidsendString ("1:Owner 2:Guest");
    69dc:	80 e6       	ldi	r24, 0x60	; 96
    69de:	90 e0       	ldi	r25, 0x00	; 0
    69e0:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <CLCD_voidsendString>

            /* Get user choice */
            while(KPD_u8GetPressed() == NOTPRESSED);
    69e4:	0e 94 bc 1a 	call	0x3578	; 0x3578 <KPD_u8GetPressed>
    69e8:	8f 3f       	cpi	r24, 0xFF	; 255
    69ea:	e1 f3       	breq	.-8      	; 0x69e4 <main+0x68>
            systemChoice = KPD_u8GetPressed();
    69ec:	0e 94 bc 1a 	call	0x3578	; 0x3578 <KPD_u8GetPressed>
    69f0:	88 8b       	std	Y+16, r24	; 0x10

            if(systemChoice == '1') {
    69f2:	88 89       	ldd	r24, Y+16	; 0x10
    69f4:	81 33       	cpi	r24, 0x31	; 49
    69f6:	19 f4       	brne	.+6      	; 0x69fe <main+0x82>
                ownerMode();
    69f8:	0e 94 b4 36 	call	0x6d68	; 0x6d68 <ownerMode>
    69fc:	05 c0       	rjmp	.+10     	; 0x6a08 <main+0x8c>
            } else if(systemChoice == '2') {
    69fe:	88 89       	ldd	r24, Y+16	; 0x10
    6a00:	82 33       	cpi	r24, 0x32	; 50
    6a02:	11 f4       	brne	.+4      	; 0x6a08 <main+0x8c>
                guestMode();
    6a04:	0e 94 ef 38 	call	0x71de	; 0x71de <guestMode>
    6a08:	80 e0       	ldi	r24, 0x00	; 0
    6a0a:	90 e0       	ldi	r25, 0x00	; 0
    6a0c:	a0 e0       	ldi	r26, 0x00	; 0
    6a0e:	b0 e0       	ldi	r27, 0x00	; 0
    6a10:	8b 87       	std	Y+11, r24	; 0x0b
    6a12:	9c 87       	std	Y+12, r25	; 0x0c
    6a14:	ad 87       	std	Y+13, r26	; 0x0d
    6a16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6a18:	6b 85       	ldd	r22, Y+11	; 0x0b
    6a1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    6a1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    6a1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6a20:	20 e0       	ldi	r18, 0x00	; 0
    6a22:	30 e0       	ldi	r19, 0x00	; 0
    6a24:	4a ef       	ldi	r20, 0xFA	; 250
    6a26:	54 e4       	ldi	r21, 0x44	; 68
    6a28:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6a2c:	dc 01       	movw	r26, r24
    6a2e:	cb 01       	movw	r24, r22
    6a30:	8f 83       	std	Y+7, r24	; 0x07
    6a32:	98 87       	std	Y+8, r25	; 0x08
    6a34:	a9 87       	std	Y+9, r26	; 0x09
    6a36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6a38:	6f 81       	ldd	r22, Y+7	; 0x07
    6a3a:	78 85       	ldd	r23, Y+8	; 0x08
    6a3c:	89 85       	ldd	r24, Y+9	; 0x09
    6a3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6a40:	20 e0       	ldi	r18, 0x00	; 0
    6a42:	30 e0       	ldi	r19, 0x00	; 0
    6a44:	40 e8       	ldi	r20, 0x80	; 128
    6a46:	5f e3       	ldi	r21, 0x3F	; 63
    6a48:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    6a4c:	88 23       	and	r24, r24
    6a4e:	2c f4       	brge	.+10     	; 0x6a5a <main+0xde>
		__ticks = 1;
    6a50:	81 e0       	ldi	r24, 0x01	; 1
    6a52:	90 e0       	ldi	r25, 0x00	; 0
    6a54:	9e 83       	std	Y+6, r25	; 0x06
    6a56:	8d 83       	std	Y+5, r24	; 0x05
    6a58:	3f c0       	rjmp	.+126    	; 0x6ad8 <main+0x15c>
	else if (__tmp > 65535)
    6a5a:	6f 81       	ldd	r22, Y+7	; 0x07
    6a5c:	78 85       	ldd	r23, Y+8	; 0x08
    6a5e:	89 85       	ldd	r24, Y+9	; 0x09
    6a60:	9a 85       	ldd	r25, Y+10	; 0x0a
    6a62:	20 e0       	ldi	r18, 0x00	; 0
    6a64:	3f ef       	ldi	r19, 0xFF	; 255
    6a66:	4f e7       	ldi	r20, 0x7F	; 127
    6a68:	57 e4       	ldi	r21, 0x47	; 71
    6a6a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    6a6e:	18 16       	cp	r1, r24
    6a70:	4c f5       	brge	.+82     	; 0x6ac4 <main+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6a72:	6b 85       	ldd	r22, Y+11	; 0x0b
    6a74:	7c 85       	ldd	r23, Y+12	; 0x0c
    6a76:	8d 85       	ldd	r24, Y+13	; 0x0d
    6a78:	9e 85       	ldd	r25, Y+14	; 0x0e
    6a7a:	20 e0       	ldi	r18, 0x00	; 0
    6a7c:	30 e0       	ldi	r19, 0x00	; 0
    6a7e:	40 e2       	ldi	r20, 0x20	; 32
    6a80:	51 e4       	ldi	r21, 0x41	; 65
    6a82:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6a86:	dc 01       	movw	r26, r24
    6a88:	cb 01       	movw	r24, r22
    6a8a:	bc 01       	movw	r22, r24
    6a8c:	cd 01       	movw	r24, r26
    6a8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a92:	dc 01       	movw	r26, r24
    6a94:	cb 01       	movw	r24, r22
    6a96:	9e 83       	std	Y+6, r25	; 0x06
    6a98:	8d 83       	std	Y+5, r24	; 0x05
    6a9a:	0f c0       	rjmp	.+30     	; 0x6aba <main+0x13e>
    6a9c:	88 ec       	ldi	r24, 0xC8	; 200
    6a9e:	90 e0       	ldi	r25, 0x00	; 0
    6aa0:	9c 83       	std	Y+4, r25	; 0x04
    6aa2:	8b 83       	std	Y+3, r24	; 0x03
    6aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    6aa6:	9c 81       	ldd	r25, Y+4	; 0x04
    6aa8:	01 97       	sbiw	r24, 0x01	; 1
    6aaa:	f1 f7       	brne	.-4      	; 0x6aa8 <main+0x12c>
    6aac:	9c 83       	std	Y+4, r25	; 0x04
    6aae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6ab0:	8d 81       	ldd	r24, Y+5	; 0x05
    6ab2:	9e 81       	ldd	r25, Y+6	; 0x06
    6ab4:	01 97       	sbiw	r24, 0x01	; 1
    6ab6:	9e 83       	std	Y+6, r25	; 0x06
    6ab8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6aba:	8d 81       	ldd	r24, Y+5	; 0x05
    6abc:	9e 81       	ldd	r25, Y+6	; 0x06
    6abe:	00 97       	sbiw	r24, 0x00	; 0
    6ac0:	69 f7       	brne	.-38     	; 0x6a9c <main+0x120>
    6ac2:	80 cf       	rjmp	.-256    	; 0x69c4 <main+0x48>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6ac4:	6f 81       	ldd	r22, Y+7	; 0x07
    6ac6:	78 85       	ldd	r23, Y+8	; 0x08
    6ac8:	89 85       	ldd	r24, Y+9	; 0x09
    6aca:	9a 85       	ldd	r25, Y+10	; 0x0a
    6acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6ad0:	dc 01       	movw	r26, r24
    6ad2:	cb 01       	movw	r24, r22
    6ad4:	9e 83       	std	Y+6, r25	; 0x06
    6ad6:	8d 83       	std	Y+5, r24	; 0x05
    6ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    6ada:	9e 81       	ldd	r25, Y+6	; 0x06
    6adc:	9a 83       	std	Y+2, r25	; 0x02
    6ade:	89 83       	std	Y+1, r24	; 0x01
    6ae0:	89 81       	ldd	r24, Y+1	; 0x01
    6ae2:	9a 81       	ldd	r25, Y+2	; 0x02
    6ae4:	01 97       	sbiw	r24, 0x01	; 1
    6ae6:	f1 f7       	brne	.-4      	; 0x6ae4 <main+0x168>
    6ae8:	9a 83       	std	Y+2, r25	; 0x02
    6aea:	89 83       	std	Y+1, r24	; 0x01
    6aec:	6b cf       	rjmp	.-298    	; 0x69c4 <main+0x48>

00006aee <displayWelcomeMessage>:
        _delay_ms(00);
    }
    return 0;
}

void displayWelcomeMessage(void) {
    6aee:	df 93       	push	r29
    6af0:	cf 93       	push	r28
    6af2:	cd b7       	in	r28, 0x3d	; 61
    6af4:	de b7       	in	r29, 0x3e	; 62
    6af6:	aa 97       	sbiw	r28, 0x2a	; 42
    6af8:	0f b6       	in	r0, 0x3f	; 63
    6afa:	f8 94       	cli
    6afc:	de bf       	out	0x3e, r29	; 62
    6afe:	0f be       	out	0x3f, r0	; 63
    6b00:	cd bf       	out	0x3d, r28	; 61
    char welcomeMsg[] = "Welcome to Garden of Eco Home System";
    6b02:	ce 01       	movw	r24, r28
    6b04:	01 96       	adiw	r24, 0x01	; 1
    6b06:	9f a3       	std	Y+39, r25	; 0x27
    6b08:	8e a3       	std	Y+38, r24	; 0x26
    6b0a:	e0 e7       	ldi	r30, 0x70	; 112
    6b0c:	f0 e0       	ldi	r31, 0x00	; 0
    6b0e:	f9 a7       	std	Y+41, r31	; 0x29
    6b10:	e8 a7       	std	Y+40, r30	; 0x28
    6b12:	f5 e2       	ldi	r31, 0x25	; 37
    6b14:	fa a7       	std	Y+42, r31	; 0x2a
    6b16:	e8 a5       	ldd	r30, Y+40	; 0x28
    6b18:	f9 a5       	ldd	r31, Y+41	; 0x29
    6b1a:	00 80       	ld	r0, Z
    6b1c:	88 a5       	ldd	r24, Y+40	; 0x28
    6b1e:	99 a5       	ldd	r25, Y+41	; 0x29
    6b20:	01 96       	adiw	r24, 0x01	; 1
    6b22:	99 a7       	std	Y+41, r25	; 0x29
    6b24:	88 a7       	std	Y+40, r24	; 0x28
    6b26:	ee a1       	ldd	r30, Y+38	; 0x26
    6b28:	ff a1       	ldd	r31, Y+39	; 0x27
    6b2a:	00 82       	st	Z, r0
    6b2c:	8e a1       	ldd	r24, Y+38	; 0x26
    6b2e:	9f a1       	ldd	r25, Y+39	; 0x27
    6b30:	01 96       	adiw	r24, 0x01	; 1
    6b32:	9f a3       	std	Y+39, r25	; 0x27
    6b34:	8e a3       	std	Y+38, r24	; 0x26
    6b36:	9a a5       	ldd	r25, Y+42	; 0x2a
    6b38:	91 50       	subi	r25, 0x01	; 1
    6b3a:	9a a7       	std	Y+42, r25	; 0x2a
    6b3c:	ea a5       	ldd	r30, Y+42	; 0x2a
    6b3e:	ee 23       	and	r30, r30
    6b40:	51 f7       	brne	.-44     	; 0x6b16 <displayWelcomeMessage+0x28>
    scrollText(welcomeMsg, CLCD_Row_1);
    6b42:	ce 01       	movw	r24, r28
    6b44:	01 96       	adiw	r24, 0x01	; 1
    6b46:	61 e0       	ldi	r22, 0x01	; 1
    6b48:	0e 94 af 35 	call	0x6b5e	; 0x6b5e <scrollText>
}
    6b4c:	aa 96       	adiw	r28, 0x2a	; 42
    6b4e:	0f b6       	in	r0, 0x3f	; 63
    6b50:	f8 94       	cli
    6b52:	de bf       	out	0x3e, r29	; 62
    6b54:	0f be       	out	0x3f, r0	; 63
    6b56:	cd bf       	out	0x3d, r28	; 61
    6b58:	cf 91       	pop	r28
    6b5a:	df 91       	pop	r29
    6b5c:	08 95       	ret

00006b5e <scrollText>:

void scrollText(char* text, u8 row) {
    6b5e:	df 93       	push	r29
    6b60:	cf 93       	push	r28
    6b62:	cd b7       	in	r28, 0x3d	; 61
    6b64:	de b7       	in	r29, 0x3e	; 62
    6b66:	63 97       	sbiw	r28, 0x13	; 19
    6b68:	0f b6       	in	r0, 0x3f	; 63
    6b6a:	f8 94       	cli
    6b6c:	de bf       	out	0x3e, r29	; 62
    6b6e:	0f be       	out	0x3f, r0	; 63
    6b70:	cd bf       	out	0x3d, r28	; 61
    6b72:	9a 8b       	std	Y+18, r25	; 0x12
    6b74:	89 8b       	std	Y+17, r24	; 0x11
    6b76:	6b 8b       	std	Y+19, r22	; 0x13
    u8 i;
    u8 length = strlen(text);
    6b78:	89 89       	ldd	r24, Y+17	; 0x11
    6b7a:	9a 89       	ldd	r25, Y+18	; 0x12
    6b7c:	0e 94 c7 3a 	call	0x758e	; 0x758e <strlen>
    6b80:	8f 87       	std	Y+15, r24	; 0x0f

    // اكتب النص في موضعه الأولي
    CLCD_voidSetPosition(row, 0);
    6b82:	8b 89       	ldd	r24, Y+19	; 0x13
    6b84:	60 e0       	ldi	r22, 0x00	; 0
    6b86:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <CLCD_voidSetPosition>
    CLCD_voidsendString(text);
    6b8a:	89 89       	ldd	r24, Y+17	; 0x11
    6b8c:	9a 89       	ldd	r25, Y+18	; 0x12
    6b8e:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <CLCD_voidsendString>

    // أضف مسافات لإزالة النص من الشاشة بعد التحريك
    for(i=0; i < 16; i++) {
    6b92:	18 8a       	std	Y+16, r1	; 0x10
    6b94:	06 c0       	rjmp	.+12     	; 0x6ba2 <scrollText+0x44>
        CLCD_voidsendData(' ');
    6b96:	80 e2       	ldi	r24, 0x20	; 32
    6b98:	0e 94 c7 0c 	call	0x198e	; 0x198e <CLCD_voidsendData>
    // اكتب النص في موضعه الأولي
    CLCD_voidSetPosition(row, 0);
    CLCD_voidsendString(text);

    // أضف مسافات لإزالة النص من الشاشة بعد التحريك
    for(i=0; i < 16; i++) {
    6b9c:	88 89       	ldd	r24, Y+16	; 0x10
    6b9e:	8f 5f       	subi	r24, 0xFF	; 255
    6ba0:	88 8b       	std	Y+16, r24	; 0x10
    6ba2:	88 89       	ldd	r24, Y+16	; 0x10
    6ba4:	80 31       	cpi	r24, 0x10	; 16
    6ba6:	b8 f3       	brcs	.-18     	; 0x6b96 <scrollText+0x38>
        CLCD_voidsendData(' ');
    }

    // قم بتحريك الشاشة لليسار بشكل متكرر
    for(i=0; i < (length + 16); i++) {
    6ba8:	18 8a       	std	Y+16, r1	; 0x10
    6baa:	78 c0       	rjmp	.+240    	; 0x6c9c <scrollText+0x13e>
    	CLCD_voidsendCommand (0x18); // أمر تحريك الشاشة لليسار
    6bac:	88 e1       	ldi	r24, 0x18	; 24
    6bae:	0e 94 67 0d 	call	0x1ace	; 0x1ace <CLCD_voidsendCommand>
    6bb2:	80 e0       	ldi	r24, 0x00	; 0
    6bb4:	90 e0       	ldi	r25, 0x00	; 0
    6bb6:	a6 e9       	ldi	r26, 0x96	; 150
    6bb8:	b3 e4       	ldi	r27, 0x43	; 67
    6bba:	8b 87       	std	Y+11, r24	; 0x0b
    6bbc:	9c 87       	std	Y+12, r25	; 0x0c
    6bbe:	ad 87       	std	Y+13, r26	; 0x0d
    6bc0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6bc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    6bc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    6bc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    6bc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    6bca:	20 e0       	ldi	r18, 0x00	; 0
    6bcc:	30 e0       	ldi	r19, 0x00	; 0
    6bce:	4a ef       	ldi	r20, 0xFA	; 250
    6bd0:	54 e4       	ldi	r21, 0x44	; 68
    6bd2:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6bd6:	dc 01       	movw	r26, r24
    6bd8:	cb 01       	movw	r24, r22
    6bda:	8f 83       	std	Y+7, r24	; 0x07
    6bdc:	98 87       	std	Y+8, r25	; 0x08
    6bde:	a9 87       	std	Y+9, r26	; 0x09
    6be0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6be2:	6f 81       	ldd	r22, Y+7	; 0x07
    6be4:	78 85       	ldd	r23, Y+8	; 0x08
    6be6:	89 85       	ldd	r24, Y+9	; 0x09
    6be8:	9a 85       	ldd	r25, Y+10	; 0x0a
    6bea:	20 e0       	ldi	r18, 0x00	; 0
    6bec:	30 e0       	ldi	r19, 0x00	; 0
    6bee:	40 e8       	ldi	r20, 0x80	; 128
    6bf0:	5f e3       	ldi	r21, 0x3F	; 63
    6bf2:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    6bf6:	88 23       	and	r24, r24
    6bf8:	2c f4       	brge	.+10     	; 0x6c04 <scrollText+0xa6>
		__ticks = 1;
    6bfa:	81 e0       	ldi	r24, 0x01	; 1
    6bfc:	90 e0       	ldi	r25, 0x00	; 0
    6bfe:	9e 83       	std	Y+6, r25	; 0x06
    6c00:	8d 83       	std	Y+5, r24	; 0x05
    6c02:	3f c0       	rjmp	.+126    	; 0x6c82 <scrollText+0x124>
	else if (__tmp > 65535)
    6c04:	6f 81       	ldd	r22, Y+7	; 0x07
    6c06:	78 85       	ldd	r23, Y+8	; 0x08
    6c08:	89 85       	ldd	r24, Y+9	; 0x09
    6c0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    6c0c:	20 e0       	ldi	r18, 0x00	; 0
    6c0e:	3f ef       	ldi	r19, 0xFF	; 255
    6c10:	4f e7       	ldi	r20, 0x7F	; 127
    6c12:	57 e4       	ldi	r21, 0x47	; 71
    6c14:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    6c18:	18 16       	cp	r1, r24
    6c1a:	4c f5       	brge	.+82     	; 0x6c6e <scrollText+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6c1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    6c1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    6c20:	8d 85       	ldd	r24, Y+13	; 0x0d
    6c22:	9e 85       	ldd	r25, Y+14	; 0x0e
    6c24:	20 e0       	ldi	r18, 0x00	; 0
    6c26:	30 e0       	ldi	r19, 0x00	; 0
    6c28:	40 e2       	ldi	r20, 0x20	; 32
    6c2a:	51 e4       	ldi	r21, 0x41	; 65
    6c2c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6c30:	dc 01       	movw	r26, r24
    6c32:	cb 01       	movw	r24, r22
    6c34:	bc 01       	movw	r22, r24
    6c36:	cd 01       	movw	r24, r26
    6c38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6c3c:	dc 01       	movw	r26, r24
    6c3e:	cb 01       	movw	r24, r22
    6c40:	9e 83       	std	Y+6, r25	; 0x06
    6c42:	8d 83       	std	Y+5, r24	; 0x05
    6c44:	0f c0       	rjmp	.+30     	; 0x6c64 <scrollText+0x106>
    6c46:	88 ec       	ldi	r24, 0xC8	; 200
    6c48:	90 e0       	ldi	r25, 0x00	; 0
    6c4a:	9c 83       	std	Y+4, r25	; 0x04
    6c4c:	8b 83       	std	Y+3, r24	; 0x03
    6c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    6c50:	9c 81       	ldd	r25, Y+4	; 0x04
    6c52:	01 97       	sbiw	r24, 0x01	; 1
    6c54:	f1 f7       	brne	.-4      	; 0x6c52 <scrollText+0xf4>
    6c56:	9c 83       	std	Y+4, r25	; 0x04
    6c58:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6c5a:	8d 81       	ldd	r24, Y+5	; 0x05
    6c5c:	9e 81       	ldd	r25, Y+6	; 0x06
    6c5e:	01 97       	sbiw	r24, 0x01	; 1
    6c60:	9e 83       	std	Y+6, r25	; 0x06
    6c62:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6c64:	8d 81       	ldd	r24, Y+5	; 0x05
    6c66:	9e 81       	ldd	r25, Y+6	; 0x06
    6c68:	00 97       	sbiw	r24, 0x00	; 0
    6c6a:	69 f7       	brne	.-38     	; 0x6c46 <scrollText+0xe8>
    6c6c:	14 c0       	rjmp	.+40     	; 0x6c96 <scrollText+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6c6e:	6f 81       	ldd	r22, Y+7	; 0x07
    6c70:	78 85       	ldd	r23, Y+8	; 0x08
    6c72:	89 85       	ldd	r24, Y+9	; 0x09
    6c74:	9a 85       	ldd	r25, Y+10	; 0x0a
    6c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6c7a:	dc 01       	movw	r26, r24
    6c7c:	cb 01       	movw	r24, r22
    6c7e:	9e 83       	std	Y+6, r25	; 0x06
    6c80:	8d 83       	std	Y+5, r24	; 0x05
    6c82:	8d 81       	ldd	r24, Y+5	; 0x05
    6c84:	9e 81       	ldd	r25, Y+6	; 0x06
    6c86:	9a 83       	std	Y+2, r25	; 0x02
    6c88:	89 83       	std	Y+1, r24	; 0x01
    6c8a:	89 81       	ldd	r24, Y+1	; 0x01
    6c8c:	9a 81       	ldd	r25, Y+2	; 0x02
    6c8e:	01 97       	sbiw	r24, 0x01	; 1
    6c90:	f1 f7       	brne	.-4      	; 0x6c8e <scrollText+0x130>
    6c92:	9a 83       	std	Y+2, r25	; 0x02
    6c94:	89 83       	std	Y+1, r24	; 0x01
    for(i=0; i < 16; i++) {
        CLCD_voidsendData(' ');
    }

    // قم بتحريك الشاشة لليسار بشكل متكرر
    for(i=0; i < (length + 16); i++) {
    6c96:	88 89       	ldd	r24, Y+16	; 0x10
    6c98:	8f 5f       	subi	r24, 0xFF	; 255
    6c9a:	88 8b       	std	Y+16, r24	; 0x10
    6c9c:	88 89       	ldd	r24, Y+16	; 0x10
    6c9e:	28 2f       	mov	r18, r24
    6ca0:	30 e0       	ldi	r19, 0x00	; 0
    6ca2:	8f 85       	ldd	r24, Y+15	; 0x0f
    6ca4:	88 2f       	mov	r24, r24
    6ca6:	90 e0       	ldi	r25, 0x00	; 0
    6ca8:	40 96       	adiw	r24, 0x10	; 16
    6caa:	28 17       	cp	r18, r24
    6cac:	39 07       	cpc	r19, r25
    6cae:	0c f4       	brge	.+2      	; 0x6cb2 <scrollText+0x154>
    6cb0:	7d cf       	rjmp	.-262    	; 0x6bac <scrollText+0x4e>
    	CLCD_voidsendCommand (0x18); // أمر تحريك الشاشة لليسار
        _delay_ms(300);
    }
}
    6cb2:	63 96       	adiw	r28, 0x13	; 19
    6cb4:	0f b6       	in	r0, 0x3f	; 63
    6cb6:	f8 94       	cli
    6cb8:	de bf       	out	0x3e, r29	; 62
    6cba:	0f be       	out	0x3f, r0	; 63
    6cbc:	cd bf       	out	0x3d, r28	; 61
    6cbe:	cf 91       	pop	r28
    6cc0:	df 91       	pop	r29
    6cc2:	08 95       	ret

00006cc4 <checkCredentials>:

u8 checkCredentials(u8* enteredName, u8* enteredPass) {
    6cc4:	df 93       	push	r29
    6cc6:	cf 93       	push	r28
    6cc8:	cd b7       	in	r28, 0x3d	; 61
    6cca:	de b7       	in	r29, 0x3e	; 62
    6ccc:	27 97       	sbiw	r28, 0x07	; 7
    6cce:	0f b6       	in	r0, 0x3f	; 63
    6cd0:	f8 94       	cli
    6cd2:	de bf       	out	0x3e, r29	; 62
    6cd4:	0f be       	out	0x3f, r0	; 63
    6cd6:	cd bf       	out	0x3d, r28	; 61
    6cd8:	9c 83       	std	Y+4, r25	; 0x04
    6cda:	8b 83       	std	Y+3, r24	; 0x03
    6cdc:	7e 83       	std	Y+6, r23	; 0x06
    6cde:	6d 83       	std	Y+5, r22	; 0x05
    for(u8 i=0; i<OWNER_NAME_SIZE; i++) {
    6ce0:	1a 82       	std	Y+2, r1	; 0x02
    6ce2:	17 c0       	rjmp	.+46     	; 0x6d12 <checkCredentials+0x4e>
        if(enteredName[i] != ownerName[i]) return 0;
    6ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    6ce6:	28 2f       	mov	r18, r24
    6ce8:	30 e0       	ldi	r19, 0x00	; 0
    6cea:	8b 81       	ldd	r24, Y+3	; 0x03
    6cec:	9c 81       	ldd	r25, Y+4	; 0x04
    6cee:	fc 01       	movw	r30, r24
    6cf0:	e2 0f       	add	r30, r18
    6cf2:	f3 1f       	adc	r31, r19
    6cf4:	20 81       	ld	r18, Z
    6cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    6cf8:	88 2f       	mov	r24, r24
    6cfa:	90 e0       	ldi	r25, 0x00	; 0
    6cfc:	fc 01       	movw	r30, r24
    6cfe:	e8 5c       	subi	r30, 0xC8	; 200
    6d00:	fd 4f       	sbci	r31, 0xFD	; 253
    6d02:	80 81       	ld	r24, Z
    6d04:	28 17       	cp	r18, r24
    6d06:	11 f0       	breq	.+4      	; 0x6d0c <checkCredentials+0x48>
    6d08:	1f 82       	std	Y+7, r1	; 0x07
    6d0a:	24 c0       	rjmp	.+72     	; 0x6d54 <checkCredentials+0x90>
        _delay_ms(300);
    }
}

u8 checkCredentials(u8* enteredName, u8* enteredPass) {
    for(u8 i=0; i<OWNER_NAME_SIZE; i++) {
    6d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    6d0e:	8f 5f       	subi	r24, 0xFF	; 255
    6d10:	8a 83       	std	Y+2, r24	; 0x02
    6d12:	8a 81       	ldd	r24, Y+2	; 0x02
    6d14:	83 30       	cpi	r24, 0x03	; 3
    6d16:	30 f3       	brcs	.-52     	; 0x6ce4 <checkCredentials+0x20>
        if(enteredName[i] != ownerName[i]) return 0;
    }
    for(u8 i=0; i<PASSWORD_SIZE; i++) {
    6d18:	19 82       	std	Y+1, r1	; 0x01
    6d1a:	17 c0       	rjmp	.+46     	; 0x6d4a <checkCredentials+0x86>
        if(enteredPass[i] != ownerPass[i]) return 0;
    6d1c:	89 81       	ldd	r24, Y+1	; 0x01
    6d1e:	28 2f       	mov	r18, r24
    6d20:	30 e0       	ldi	r19, 0x00	; 0
    6d22:	8d 81       	ldd	r24, Y+5	; 0x05
    6d24:	9e 81       	ldd	r25, Y+6	; 0x06
    6d26:	fc 01       	movw	r30, r24
    6d28:	e2 0f       	add	r30, r18
    6d2a:	f3 1f       	adc	r31, r19
    6d2c:	20 81       	ld	r18, Z
    6d2e:	89 81       	ldd	r24, Y+1	; 0x01
    6d30:	88 2f       	mov	r24, r24
    6d32:	90 e0       	ldi	r25, 0x00	; 0
    6d34:	fc 01       	movw	r30, r24
    6d36:	e5 5c       	subi	r30, 0xC5	; 197
    6d38:	fd 4f       	sbci	r31, 0xFD	; 253
    6d3a:	80 81       	ld	r24, Z
    6d3c:	28 17       	cp	r18, r24
    6d3e:	11 f0       	breq	.+4      	; 0x6d44 <checkCredentials+0x80>
    6d40:	1f 82       	std	Y+7, r1	; 0x07
    6d42:	08 c0       	rjmp	.+16     	; 0x6d54 <checkCredentials+0x90>

u8 checkCredentials(u8* enteredName, u8* enteredPass) {
    for(u8 i=0; i<OWNER_NAME_SIZE; i++) {
        if(enteredName[i] != ownerName[i]) return 0;
    }
    for(u8 i=0; i<PASSWORD_SIZE; i++) {
    6d44:	89 81       	ldd	r24, Y+1	; 0x01
    6d46:	8f 5f       	subi	r24, 0xFF	; 255
    6d48:	89 83       	std	Y+1, r24	; 0x01
    6d4a:	89 81       	ldd	r24, Y+1	; 0x01
    6d4c:	83 30       	cpi	r24, 0x03	; 3
    6d4e:	30 f3       	brcs	.-52     	; 0x6d1c <checkCredentials+0x58>
        if(enteredPass[i] != ownerPass[i]) return 0;
    }
    return 1;
    6d50:	81 e0       	ldi	r24, 0x01	; 1
    6d52:	8f 83       	std	Y+7, r24	; 0x07
    6d54:	8f 81       	ldd	r24, Y+7	; 0x07
}
    6d56:	27 96       	adiw	r28, 0x07	; 7
    6d58:	0f b6       	in	r0, 0x3f	; 63
    6d5a:	f8 94       	cli
    6d5c:	de bf       	out	0x3e, r29	; 62
    6d5e:	0f be       	out	0x3f, r0	; 63
    6d60:	cd bf       	out	0x3d, r28	; 61
    6d62:	cf 91       	pop	r28
    6d64:	df 91       	pop	r29
    6d66:	08 95       	ret

00006d68 <ownerMode>:

void ownerMode(void) {
    6d68:	df 93       	push	r29
    6d6a:	cf 93       	push	r28
    6d6c:	cd b7       	in	r28, 0x3d	; 61
    6d6e:	de b7       	in	r29, 0x3e	; 62
    6d70:	e7 97       	sbiw	r28, 0x37	; 55
    6d72:	0f b6       	in	r0, 0x3f	; 63
    6d74:	f8 94       	cli
    6d76:	de bf       	out	0x3e, r29	; 62
    6d78:	0f be       	out	0x3f, r0	; 63
    6d7a:	cd bf       	out	0x3d, r28	; 61
    u8 enteredName[OWNER_NAME_SIZE];
    u8 enteredPass[PASSWORD_SIZE];
    u8 key, index = 0;
    6d7c:	1d a6       	std	Y+45, r1	; 0x2d
    u16 gasValue;
    u8 soilPercent;

    /* Enter Name */
    CLCD_voidClearScreen();
    6d7e:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidClearScreen>
    CLCD_voidSetPosition(1, 1);
    6d82:	81 e0       	ldi	r24, 0x01	; 1
    6d84:	61 e0       	ldi	r22, 0x01	; 1
    6d86:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <CLCD_voidSetPosition>
    CLCD_voidsendString("Enter Name:");
    6d8a:	85 e9       	ldi	r24, 0x95	; 149
    6d8c:	90 e0       	ldi	r25, 0x00	; 0
    6d8e:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <CLCD_voidsendString>
    for(u8 i=0; i<OWNER_NAME_SIZE; i++) {
    6d92:	1c a6       	std	Y+44, r1	; 0x2c
    6d94:	16 c0       	rjmp	.+44     	; 0x6dc2 <ownerMode+0x5a>
        while((key = KPD_u8GetPressed()) == NOTPRESSED);
    6d96:	0e 94 bc 1a 	call	0x3578	; 0x3578 <KPD_u8GetPressed>
    6d9a:	8e a7       	std	Y+46, r24	; 0x2e
    6d9c:	8e a5       	ldd	r24, Y+46	; 0x2e
    6d9e:	8f 3f       	cpi	r24, 0xFF	; 255
    6da0:	d1 f3       	breq	.-12     	; 0x6d96 <ownerMode+0x2e>
        enteredName[i] = key;
    6da2:	8c a5       	ldd	r24, Y+44	; 0x2c
    6da4:	28 2f       	mov	r18, r24
    6da6:	30 e0       	ldi	r19, 0x00	; 0
    6da8:	ce 01       	movw	r24, r28
    6daa:	8f 96       	adiw	r24, 0x2f	; 47
    6dac:	fc 01       	movw	r30, r24
    6dae:	e2 0f       	add	r30, r18
    6db0:	f3 1f       	adc	r31, r19
    6db2:	8e a5       	ldd	r24, Y+46	; 0x2e
    6db4:	80 83       	st	Z, r24
        CLCD_voidsendData('*');
    6db6:	8a e2       	ldi	r24, 0x2A	; 42
    6db8:	0e 94 c7 0c 	call	0x198e	; 0x198e <CLCD_voidsendData>

    /* Enter Name */
    CLCD_voidClearScreen();
    CLCD_voidSetPosition(1, 1);
    CLCD_voidsendString("Enter Name:");
    for(u8 i=0; i<OWNER_NAME_SIZE; i++) {
    6dbc:	8c a5       	ldd	r24, Y+44	; 0x2c
    6dbe:	8f 5f       	subi	r24, 0xFF	; 255
    6dc0:	8c a7       	std	Y+44, r24	; 0x2c
    6dc2:	8c a5       	ldd	r24, Y+44	; 0x2c
    6dc4:	83 30       	cpi	r24, 0x03	; 3
    6dc6:	38 f3       	brcs	.-50     	; 0x6d96 <ownerMode+0x2e>
        enteredName[i] = key;
        CLCD_voidsendData('*');
    }

    /* Enter Password */
    CLCD_voidClearScreen();
    6dc8:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidClearScreen>
    CLCD_voidSetPosition(1, 1);
    6dcc:	81 e0       	ldi	r24, 0x01	; 1
    6dce:	61 e0       	ldi	r22, 0x01	; 1
    6dd0:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <CLCD_voidSetPosition>
    CLCD_voidsendString("Enter Pass:");
    6dd4:	81 ea       	ldi	r24, 0xA1	; 161
    6dd6:	90 e0       	ldi	r25, 0x00	; 0
    6dd8:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <CLCD_voidsendString>
    for(u8 i=0; i<PASSWORD_SIZE; i++) {
    6ddc:	1b a6       	std	Y+43, r1	; 0x2b
    6dde:	16 c0       	rjmp	.+44     	; 0x6e0c <ownerMode+0xa4>
        while((key = KPD_u8GetPressed()) == NOTPRESSED);
    6de0:	0e 94 bc 1a 	call	0x3578	; 0x3578 <KPD_u8GetPressed>
    6de4:	8e a7       	std	Y+46, r24	; 0x2e
    6de6:	8e a5       	ldd	r24, Y+46	; 0x2e
    6de8:	8f 3f       	cpi	r24, 0xFF	; 255
    6dea:	d1 f3       	breq	.-12     	; 0x6de0 <ownerMode+0x78>
        enteredPass[i] = key;
    6dec:	8b a5       	ldd	r24, Y+43	; 0x2b
    6dee:	28 2f       	mov	r18, r24
    6df0:	30 e0       	ldi	r19, 0x00	; 0
    6df2:	ce 01       	movw	r24, r28
    6df4:	c2 96       	adiw	r24, 0x32	; 50
    6df6:	fc 01       	movw	r30, r24
    6df8:	e2 0f       	add	r30, r18
    6dfa:	f3 1f       	adc	r31, r19
    6dfc:	8e a5       	ldd	r24, Y+46	; 0x2e
    6dfe:	80 83       	st	Z, r24
        CLCD_voidsendData('*');
    6e00:	8a e2       	ldi	r24, 0x2A	; 42
    6e02:	0e 94 c7 0c 	call	0x198e	; 0x198e <CLCD_voidsendData>

    /* Enter Password */
    CLCD_voidClearScreen();
    CLCD_voidSetPosition(1, 1);
    CLCD_voidsendString("Enter Pass:");
    for(u8 i=0; i<PASSWORD_SIZE; i++) {
    6e06:	8b a5       	ldd	r24, Y+43	; 0x2b
    6e08:	8f 5f       	subi	r24, 0xFF	; 255
    6e0a:	8b a7       	std	Y+43, r24	; 0x2b
    6e0c:	8b a5       	ldd	r24, Y+43	; 0x2b
    6e0e:	83 30       	cpi	r24, 0x03	; 3
    6e10:	38 f3       	brcs	.-50     	; 0x6de0 <ownerMode+0x78>
        enteredPass[i] = key;
        CLCD_voidsendData('*');
    }

    /* Validate credentials */
    if(checkCredentials(enteredName, enteredPass)) {
    6e12:	ce 01       	movw	r24, r28
    6e14:	8f 96       	adiw	r24, 0x2f	; 47
    6e16:	9e 01       	movw	r18, r28
    6e18:	2e 5c       	subi	r18, 0xCE	; 206
    6e1a:	3f 4f       	sbci	r19, 0xFF	; 255
    6e1c:	b9 01       	movw	r22, r18
    6e1e:	0e 94 62 36 	call	0x6cc4	; 0x6cc4 <checkCredentials>
    6e22:	88 23       	and	r24, r24
    6e24:	09 f4       	brne	.+2      	; 0x6e28 <ownerMode+0xc0>
    6e26:	5a c1       	rjmp	.+692    	; 0x70dc <ownerMode+0x374>
        CLCD_voidClearScreen();
    6e28:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidClearScreen>
        CLCD_voidsendString("Access Granted");
    6e2c:	8d ea       	ldi	r24, 0xAD	; 173
    6e2e:	90 e0       	ldi	r25, 0x00	; 0
    6e30:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <CLCD_voidsendString>
    6e34:	80 e0       	ldi	r24, 0x00	; 0
    6e36:	90 e0       	ldi	r25, 0x00	; 0
    6e38:	aa ef       	ldi	r26, 0xFA	; 250
    6e3a:	b3 e4       	ldi	r27, 0x43	; 67
    6e3c:	8f a3       	std	Y+39, r24	; 0x27
    6e3e:	98 a7       	std	Y+40, r25	; 0x28
    6e40:	a9 a7       	std	Y+41, r26	; 0x29
    6e42:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6e44:	6f a1       	ldd	r22, Y+39	; 0x27
    6e46:	78 a5       	ldd	r23, Y+40	; 0x28
    6e48:	89 a5       	ldd	r24, Y+41	; 0x29
    6e4a:	9a a5       	ldd	r25, Y+42	; 0x2a
    6e4c:	20 e0       	ldi	r18, 0x00	; 0
    6e4e:	30 e0       	ldi	r19, 0x00	; 0
    6e50:	4a ef       	ldi	r20, 0xFA	; 250
    6e52:	54 e4       	ldi	r21, 0x44	; 68
    6e54:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6e58:	dc 01       	movw	r26, r24
    6e5a:	cb 01       	movw	r24, r22
    6e5c:	8b a3       	std	Y+35, r24	; 0x23
    6e5e:	9c a3       	std	Y+36, r25	; 0x24
    6e60:	ad a3       	std	Y+37, r26	; 0x25
    6e62:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    6e64:	6b a1       	ldd	r22, Y+35	; 0x23
    6e66:	7c a1       	ldd	r23, Y+36	; 0x24
    6e68:	8d a1       	ldd	r24, Y+37	; 0x25
    6e6a:	9e a1       	ldd	r25, Y+38	; 0x26
    6e6c:	20 e0       	ldi	r18, 0x00	; 0
    6e6e:	30 e0       	ldi	r19, 0x00	; 0
    6e70:	40 e8       	ldi	r20, 0x80	; 128
    6e72:	5f e3       	ldi	r21, 0x3F	; 63
    6e74:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    6e78:	88 23       	and	r24, r24
    6e7a:	2c f4       	brge	.+10     	; 0x6e86 <ownerMode+0x11e>
		__ticks = 1;
    6e7c:	81 e0       	ldi	r24, 0x01	; 1
    6e7e:	90 e0       	ldi	r25, 0x00	; 0
    6e80:	9a a3       	std	Y+34, r25	; 0x22
    6e82:	89 a3       	std	Y+33, r24	; 0x21
    6e84:	3f c0       	rjmp	.+126    	; 0x6f04 <ownerMode+0x19c>
	else if (__tmp > 65535)
    6e86:	6b a1       	ldd	r22, Y+35	; 0x23
    6e88:	7c a1       	ldd	r23, Y+36	; 0x24
    6e8a:	8d a1       	ldd	r24, Y+37	; 0x25
    6e8c:	9e a1       	ldd	r25, Y+38	; 0x26
    6e8e:	20 e0       	ldi	r18, 0x00	; 0
    6e90:	3f ef       	ldi	r19, 0xFF	; 255
    6e92:	4f e7       	ldi	r20, 0x7F	; 127
    6e94:	57 e4       	ldi	r21, 0x47	; 71
    6e96:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    6e9a:	18 16       	cp	r1, r24
    6e9c:	4c f5       	brge	.+82     	; 0x6ef0 <ownerMode+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6e9e:	6f a1       	ldd	r22, Y+39	; 0x27
    6ea0:	78 a5       	ldd	r23, Y+40	; 0x28
    6ea2:	89 a5       	ldd	r24, Y+41	; 0x29
    6ea4:	9a a5       	ldd	r25, Y+42	; 0x2a
    6ea6:	20 e0       	ldi	r18, 0x00	; 0
    6ea8:	30 e0       	ldi	r19, 0x00	; 0
    6eaa:	40 e2       	ldi	r20, 0x20	; 32
    6eac:	51 e4       	ldi	r21, 0x41	; 65
    6eae:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6eb2:	dc 01       	movw	r26, r24
    6eb4:	cb 01       	movw	r24, r22
    6eb6:	bc 01       	movw	r22, r24
    6eb8:	cd 01       	movw	r24, r26
    6eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6ebe:	dc 01       	movw	r26, r24
    6ec0:	cb 01       	movw	r24, r22
    6ec2:	9a a3       	std	Y+34, r25	; 0x22
    6ec4:	89 a3       	std	Y+33, r24	; 0x21
    6ec6:	0f c0       	rjmp	.+30     	; 0x6ee6 <ownerMode+0x17e>
    6ec8:	88 ec       	ldi	r24, 0xC8	; 200
    6eca:	90 e0       	ldi	r25, 0x00	; 0
    6ecc:	98 a3       	std	Y+32, r25	; 0x20
    6ece:	8f 8f       	std	Y+31, r24	; 0x1f
    6ed0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6ed2:	98 a1       	ldd	r25, Y+32	; 0x20
    6ed4:	01 97       	sbiw	r24, 0x01	; 1
    6ed6:	f1 f7       	brne	.-4      	; 0x6ed4 <ownerMode+0x16c>
    6ed8:	98 a3       	std	Y+32, r25	; 0x20
    6eda:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6edc:	89 a1       	ldd	r24, Y+33	; 0x21
    6ede:	9a a1       	ldd	r25, Y+34	; 0x22
    6ee0:	01 97       	sbiw	r24, 0x01	; 1
    6ee2:	9a a3       	std	Y+34, r25	; 0x22
    6ee4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6ee6:	89 a1       	ldd	r24, Y+33	; 0x21
    6ee8:	9a a1       	ldd	r25, Y+34	; 0x22
    6eea:	00 97       	sbiw	r24, 0x00	; 0
    6eec:	69 f7       	brne	.-38     	; 0x6ec8 <ownerMode+0x160>
    6eee:	14 c0       	rjmp	.+40     	; 0x6f18 <ownerMode+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6ef0:	6b a1       	ldd	r22, Y+35	; 0x23
    6ef2:	7c a1       	ldd	r23, Y+36	; 0x24
    6ef4:	8d a1       	ldd	r24, Y+37	; 0x25
    6ef6:	9e a1       	ldd	r25, Y+38	; 0x26
    6ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6efc:	dc 01       	movw	r26, r24
    6efe:	cb 01       	movw	r24, r22
    6f00:	9a a3       	std	Y+34, r25	; 0x22
    6f02:	89 a3       	std	Y+33, r24	; 0x21
    6f04:	89 a1       	ldd	r24, Y+33	; 0x21
    6f06:	9a a1       	ldd	r25, Y+34	; 0x22
    6f08:	9e 8f       	std	Y+30, r25	; 0x1e
    6f0a:	8d 8f       	std	Y+29, r24	; 0x1d
    6f0c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6f0e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6f10:	01 97       	sbiw	r24, 0x01	; 1
    6f12:	f1 f7       	brne	.-4      	; 0x6f10 <ownerMode+0x1a8>
    6f14:	9e 8f       	std	Y+30, r25	; 0x1e
    6f16:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(500);

        while(1) {
            /* Read sensors */
            DHT11_u8GetData(&dhtData);
    6f18:	8e e5       	ldi	r24, 0x5E	; 94
    6f1a:	92 e0       	ldi	r25, 0x02	; 2
    6f1c:	0e 94 57 12 	call	0x24ae	; 0x24ae <DHT11_u8GetData>
            MQ2_enumGetGasConcentration(&mq2Config, &gasValue);
    6f20:	81 e3       	ldi	r24, 0x31	; 49
    6f22:	92 e0       	ldi	r25, 0x02	; 2
    6f24:	9e 01       	movw	r18, r28
    6f26:	2b 5c       	subi	r18, 0xCB	; 203
    6f28:	3f 4f       	sbci	r19, 0xFF	; 255
    6f2a:	b9 01       	movw	r22, r18
    6f2c:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <MQ2_enumGetGasConcentration>
            SoilMoisture_u8GetPercentage(&soilPercent);
    6f30:	ce 01       	movw	r24, r28
    6f32:	c7 96       	adiw	r24, 0x37	; 55
    6f34:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <SoilMoisture_u8GetPercentage>

            /* Display data */
            CLCD_voidClearScreen();
    6f38:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidClearScreen>
            CLCD_voidSetPosition(1, 1);
    6f3c:	81 e0       	ldi	r24, 0x01	; 1
    6f3e:	61 e0       	ldi	r22, 0x01	; 1
    6f40:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <CLCD_voidSetPosition>
            CLCD_voidsendString("T:");
    6f44:	8c eb       	ldi	r24, 0xBC	; 188
    6f46:	90 e0       	ldi	r25, 0x00	; 0
    6f48:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <CLCD_voidsendString>
            CLCD_vSendIntNumber(dhtData.Temperature);
    6f4c:	80 91 5e 02 	lds	r24, 0x025E
    6f50:	88 2f       	mov	r24, r24
    6f52:	90 e0       	ldi	r25, 0x00	; 0
    6f54:	a0 e0       	ldi	r26, 0x00	; 0
    6f56:	b0 e0       	ldi	r27, 0x00	; 0
    6f58:	bc 01       	movw	r22, r24
    6f5a:	cd 01       	movw	r24, r26
    6f5c:	0e 94 91 10 	call	0x2122	; 0x2122 <CLCD_vSendIntNumber>
            CLCD_voidsendString("C H:");
    6f60:	8f eb       	ldi	r24, 0xBF	; 191
    6f62:	90 e0       	ldi	r25, 0x00	; 0
    6f64:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <CLCD_voidsendString>
            CLCD_vSendIntNumber(dhtData.Humidity);
    6f68:	80 91 5f 02 	lds	r24, 0x025F
    6f6c:	88 2f       	mov	r24, r24
    6f6e:	90 e0       	ldi	r25, 0x00	; 0
    6f70:	a0 e0       	ldi	r26, 0x00	; 0
    6f72:	b0 e0       	ldi	r27, 0x00	; 0
    6f74:	bc 01       	movw	r22, r24
    6f76:	cd 01       	movw	r24, r26
    6f78:	0e 94 91 10 	call	0x2122	; 0x2122 <CLCD_vSendIntNumber>
            CLCD_voidsendString("%");
    6f7c:	84 ec       	ldi	r24, 0xC4	; 196
    6f7e:	90 e0       	ldi	r25, 0x00	; 0
    6f80:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <CLCD_voidsendString>

            CLCD_voidSetPosition(2, 1);
    6f84:	82 e0       	ldi	r24, 0x02	; 2
    6f86:	61 e0       	ldi	r22, 0x01	; 1
    6f88:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <CLCD_voidSetPosition>
            CLCD_voidsendString("Soil:");
    6f8c:	86 ec       	ldi	r24, 0xC6	; 198
    6f8e:	90 e0       	ldi	r25, 0x00	; 0
    6f90:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <CLCD_voidsendString>
            CLCD_vSendIntNumber(soilPercent);
    6f94:	8f a9       	ldd	r24, Y+55	; 0x37
    6f96:	88 2f       	mov	r24, r24
    6f98:	90 e0       	ldi	r25, 0x00	; 0
    6f9a:	a0 e0       	ldi	r26, 0x00	; 0
    6f9c:	b0 e0       	ldi	r27, 0x00	; 0
    6f9e:	bc 01       	movw	r22, r24
    6fa0:	cd 01       	movw	r24, r26
    6fa2:	0e 94 91 10 	call	0x2122	; 0x2122 <CLCD_vSendIntNumber>
            CLCD_voidsendString("%");
    6fa6:	84 ec       	ldi	r24, 0xC4	; 196
    6fa8:	90 e0       	ldi	r25, 0x00	; 0
    6faa:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <CLCD_voidsendString>

            /* Check gas */
            if(gasValue > 200) { // Threshold value
    6fae:	8d a9       	ldd	r24, Y+53	; 0x35
    6fb0:	9e a9       	ldd	r25, Y+54	; 0x36
    6fb2:	89 3c       	cpi	r24, 0xC9	; 201
    6fb4:	91 05       	cpc	r25, r1
    6fb6:	48 f0       	brcs	.+18     	; 0x6fca <ownerMode+0x262>
                BUZ_vOn(buzzer);
    6fb8:	60 91 2b 02 	lds	r22, 0x022B
    6fbc:	70 91 2c 02 	lds	r23, 0x022C
    6fc0:	80 91 2d 02 	lds	r24, 0x022D
    6fc4:	0e 94 25 09 	call	0x124a	; 0x124a <BUZ_vOn>
    6fc8:	08 c0       	rjmp	.+16     	; 0x6fda <ownerMode+0x272>
            } else {
                BUZ_vOff(buzzer);
    6fca:	60 91 2b 02 	lds	r22, 0x022B
    6fce:	70 91 2c 02 	lds	r23, 0x022C
    6fd2:	80 91 2d 02 	lds	r24, 0x022D
    6fd6:	0e 94 47 09 	call	0x128e	; 0x128e <BUZ_vOff>
            }

            /* Check soil moisture */
            if(soilPercent < 30) { // Dry soil threshold
    6fda:	8f a9       	ldd	r24, Y+55	; 0x37
    6fdc:	8e 31       	cpi	r24, 0x1E	; 30
    6fde:	30 f4       	brcc	.+12     	; 0x6fec <ownerMode+0x284>
                DCMOTOR_uint8Control(&waterPump, DCMOTOR_CW);
    6fe0:	8e e2       	ldi	r24, 0x2E	; 46
    6fe2:	92 e0       	ldi	r25, 0x02	; 2
    6fe4:	60 e0       	ldi	r22, 0x00	; 0
    6fe6:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <DCMOTOR_uint8Control>
    6fea:	05 c0       	rjmp	.+10     	; 0x6ff6 <ownerMode+0x28e>
            } else {
                DCMOTOR_uint8Control(&waterPump, DCMOTOR_STOP);
    6fec:	8e e2       	ldi	r24, 0x2E	; 46
    6fee:	92 e0       	ldi	r25, 0x02	; 2
    6ff0:	62 e0       	ldi	r22, 0x02	; 2
    6ff2:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <DCMOTOR_uint8Control>
    6ff6:	80 e0       	ldi	r24, 0x00	; 0
    6ff8:	90 e0       	ldi	r25, 0x00	; 0
    6ffa:	aa ef       	ldi	r26, 0xFA	; 250
    6ffc:	b3 e4       	ldi	r27, 0x43	; 67
    6ffe:	89 8f       	std	Y+25, r24	; 0x19
    7000:	9a 8f       	std	Y+26, r25	; 0x1a
    7002:	ab 8f       	std	Y+27, r26	; 0x1b
    7004:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7006:	69 8d       	ldd	r22, Y+25	; 0x19
    7008:	7a 8d       	ldd	r23, Y+26	; 0x1a
    700a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    700c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    700e:	20 e0       	ldi	r18, 0x00	; 0
    7010:	30 e0       	ldi	r19, 0x00	; 0
    7012:	4a ef       	ldi	r20, 0xFA	; 250
    7014:	54 e4       	ldi	r21, 0x44	; 68
    7016:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    701a:	dc 01       	movw	r26, r24
    701c:	cb 01       	movw	r24, r22
    701e:	8d 8b       	std	Y+21, r24	; 0x15
    7020:	9e 8b       	std	Y+22, r25	; 0x16
    7022:	af 8b       	std	Y+23, r26	; 0x17
    7024:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    7026:	6d 89       	ldd	r22, Y+21	; 0x15
    7028:	7e 89       	ldd	r23, Y+22	; 0x16
    702a:	8f 89       	ldd	r24, Y+23	; 0x17
    702c:	98 8d       	ldd	r25, Y+24	; 0x18
    702e:	20 e0       	ldi	r18, 0x00	; 0
    7030:	30 e0       	ldi	r19, 0x00	; 0
    7032:	40 e8       	ldi	r20, 0x80	; 128
    7034:	5f e3       	ldi	r21, 0x3F	; 63
    7036:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    703a:	88 23       	and	r24, r24
    703c:	2c f4       	brge	.+10     	; 0x7048 <ownerMode+0x2e0>
		__ticks = 1;
    703e:	81 e0       	ldi	r24, 0x01	; 1
    7040:	90 e0       	ldi	r25, 0x00	; 0
    7042:	9c 8b       	std	Y+20, r25	; 0x14
    7044:	8b 8b       	std	Y+19, r24	; 0x13
    7046:	3f c0       	rjmp	.+126    	; 0x70c6 <ownerMode+0x35e>
	else if (__tmp > 65535)
    7048:	6d 89       	ldd	r22, Y+21	; 0x15
    704a:	7e 89       	ldd	r23, Y+22	; 0x16
    704c:	8f 89       	ldd	r24, Y+23	; 0x17
    704e:	98 8d       	ldd	r25, Y+24	; 0x18
    7050:	20 e0       	ldi	r18, 0x00	; 0
    7052:	3f ef       	ldi	r19, 0xFF	; 255
    7054:	4f e7       	ldi	r20, 0x7F	; 127
    7056:	57 e4       	ldi	r21, 0x47	; 71
    7058:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    705c:	18 16       	cp	r1, r24
    705e:	4c f5       	brge	.+82     	; 0x70b2 <ownerMode+0x34a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7060:	69 8d       	ldd	r22, Y+25	; 0x19
    7062:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7064:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7066:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7068:	20 e0       	ldi	r18, 0x00	; 0
    706a:	30 e0       	ldi	r19, 0x00	; 0
    706c:	40 e2       	ldi	r20, 0x20	; 32
    706e:	51 e4       	ldi	r21, 0x41	; 65
    7070:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    7074:	dc 01       	movw	r26, r24
    7076:	cb 01       	movw	r24, r22
    7078:	bc 01       	movw	r22, r24
    707a:	cd 01       	movw	r24, r26
    707c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7080:	dc 01       	movw	r26, r24
    7082:	cb 01       	movw	r24, r22
    7084:	9c 8b       	std	Y+20, r25	; 0x14
    7086:	8b 8b       	std	Y+19, r24	; 0x13
    7088:	0f c0       	rjmp	.+30     	; 0x70a8 <ownerMode+0x340>
    708a:	88 ec       	ldi	r24, 0xC8	; 200
    708c:	90 e0       	ldi	r25, 0x00	; 0
    708e:	9a 8b       	std	Y+18, r25	; 0x12
    7090:	89 8b       	std	Y+17, r24	; 0x11
    7092:	89 89       	ldd	r24, Y+17	; 0x11
    7094:	9a 89       	ldd	r25, Y+18	; 0x12
    7096:	01 97       	sbiw	r24, 0x01	; 1
    7098:	f1 f7       	brne	.-4      	; 0x7096 <ownerMode+0x32e>
    709a:	9a 8b       	std	Y+18, r25	; 0x12
    709c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    709e:	8b 89       	ldd	r24, Y+19	; 0x13
    70a0:	9c 89       	ldd	r25, Y+20	; 0x14
    70a2:	01 97       	sbiw	r24, 0x01	; 1
    70a4:	9c 8b       	std	Y+20, r25	; 0x14
    70a6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    70a8:	8b 89       	ldd	r24, Y+19	; 0x13
    70aa:	9c 89       	ldd	r25, Y+20	; 0x14
    70ac:	00 97       	sbiw	r24, 0x00	; 0
    70ae:	69 f7       	brne	.-38     	; 0x708a <ownerMode+0x322>
    70b0:	33 cf       	rjmp	.-410    	; 0x6f18 <ownerMode+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    70b2:	6d 89       	ldd	r22, Y+21	; 0x15
    70b4:	7e 89       	ldd	r23, Y+22	; 0x16
    70b6:	8f 89       	ldd	r24, Y+23	; 0x17
    70b8:	98 8d       	ldd	r25, Y+24	; 0x18
    70ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    70be:	dc 01       	movw	r26, r24
    70c0:	cb 01       	movw	r24, r22
    70c2:	9c 8b       	std	Y+20, r25	; 0x14
    70c4:	8b 8b       	std	Y+19, r24	; 0x13
    70c6:	8b 89       	ldd	r24, Y+19	; 0x13
    70c8:	9c 89       	ldd	r25, Y+20	; 0x14
    70ca:	98 8b       	std	Y+16, r25	; 0x10
    70cc:	8f 87       	std	Y+15, r24	; 0x0f
    70ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    70d0:	98 89       	ldd	r25, Y+16	; 0x10
    70d2:	01 97       	sbiw	r24, 0x01	; 1
    70d4:	f1 f7       	brne	.-4      	; 0x70d2 <ownerMode+0x36a>
    70d6:	98 8b       	std	Y+16, r25	; 0x10
    70d8:	8f 87       	std	Y+15, r24	; 0x0f
    70da:	1e cf       	rjmp	.-452    	; 0x6f18 <ownerMode+0x1b0>
            }

            _delay_ms(500);
        }
    } else {
        CLCD_voidClearScreen();
    70dc:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidClearScreen>
        CLCD_voidsendString("Access Denied");
    70e0:	8c ec       	ldi	r24, 0xCC	; 204
    70e2:	90 e0       	ldi	r25, 0x00	; 0
    70e4:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <CLCD_voidsendString>
    70e8:	80 e0       	ldi	r24, 0x00	; 0
    70ea:	90 e0       	ldi	r25, 0x00	; 0
    70ec:	aa ef       	ldi	r26, 0xFA	; 250
    70ee:	b3 e4       	ldi	r27, 0x43	; 67
    70f0:	8b 87       	std	Y+11, r24	; 0x0b
    70f2:	9c 87       	std	Y+12, r25	; 0x0c
    70f4:	ad 87       	std	Y+13, r26	; 0x0d
    70f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    70f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    70fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    70fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    70fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    7100:	20 e0       	ldi	r18, 0x00	; 0
    7102:	30 e0       	ldi	r19, 0x00	; 0
    7104:	4a ef       	ldi	r20, 0xFA	; 250
    7106:	54 e4       	ldi	r21, 0x44	; 68
    7108:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    710c:	dc 01       	movw	r26, r24
    710e:	cb 01       	movw	r24, r22
    7110:	8f 83       	std	Y+7, r24	; 0x07
    7112:	98 87       	std	Y+8, r25	; 0x08
    7114:	a9 87       	std	Y+9, r26	; 0x09
    7116:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    7118:	6f 81       	ldd	r22, Y+7	; 0x07
    711a:	78 85       	ldd	r23, Y+8	; 0x08
    711c:	89 85       	ldd	r24, Y+9	; 0x09
    711e:	9a 85       	ldd	r25, Y+10	; 0x0a
    7120:	20 e0       	ldi	r18, 0x00	; 0
    7122:	30 e0       	ldi	r19, 0x00	; 0
    7124:	40 e8       	ldi	r20, 0x80	; 128
    7126:	5f e3       	ldi	r21, 0x3F	; 63
    7128:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    712c:	88 23       	and	r24, r24
    712e:	2c f4       	brge	.+10     	; 0x713a <ownerMode+0x3d2>
		__ticks = 1;
    7130:	81 e0       	ldi	r24, 0x01	; 1
    7132:	90 e0       	ldi	r25, 0x00	; 0
    7134:	9e 83       	std	Y+6, r25	; 0x06
    7136:	8d 83       	std	Y+5, r24	; 0x05
    7138:	3f c0       	rjmp	.+126    	; 0x71b8 <ownerMode+0x450>
	else if (__tmp > 65535)
    713a:	6f 81       	ldd	r22, Y+7	; 0x07
    713c:	78 85       	ldd	r23, Y+8	; 0x08
    713e:	89 85       	ldd	r24, Y+9	; 0x09
    7140:	9a 85       	ldd	r25, Y+10	; 0x0a
    7142:	20 e0       	ldi	r18, 0x00	; 0
    7144:	3f ef       	ldi	r19, 0xFF	; 255
    7146:	4f e7       	ldi	r20, 0x7F	; 127
    7148:	57 e4       	ldi	r21, 0x47	; 71
    714a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    714e:	18 16       	cp	r1, r24
    7150:	4c f5       	brge	.+82     	; 0x71a4 <ownerMode+0x43c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7152:	6b 85       	ldd	r22, Y+11	; 0x0b
    7154:	7c 85       	ldd	r23, Y+12	; 0x0c
    7156:	8d 85       	ldd	r24, Y+13	; 0x0d
    7158:	9e 85       	ldd	r25, Y+14	; 0x0e
    715a:	20 e0       	ldi	r18, 0x00	; 0
    715c:	30 e0       	ldi	r19, 0x00	; 0
    715e:	40 e2       	ldi	r20, 0x20	; 32
    7160:	51 e4       	ldi	r21, 0x41	; 65
    7162:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    7166:	dc 01       	movw	r26, r24
    7168:	cb 01       	movw	r24, r22
    716a:	bc 01       	movw	r22, r24
    716c:	cd 01       	movw	r24, r26
    716e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7172:	dc 01       	movw	r26, r24
    7174:	cb 01       	movw	r24, r22
    7176:	9e 83       	std	Y+6, r25	; 0x06
    7178:	8d 83       	std	Y+5, r24	; 0x05
    717a:	0f c0       	rjmp	.+30     	; 0x719a <ownerMode+0x432>
    717c:	88 ec       	ldi	r24, 0xC8	; 200
    717e:	90 e0       	ldi	r25, 0x00	; 0
    7180:	9c 83       	std	Y+4, r25	; 0x04
    7182:	8b 83       	std	Y+3, r24	; 0x03
    7184:	8b 81       	ldd	r24, Y+3	; 0x03
    7186:	9c 81       	ldd	r25, Y+4	; 0x04
    7188:	01 97       	sbiw	r24, 0x01	; 1
    718a:	f1 f7       	brne	.-4      	; 0x7188 <ownerMode+0x420>
    718c:	9c 83       	std	Y+4, r25	; 0x04
    718e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7190:	8d 81       	ldd	r24, Y+5	; 0x05
    7192:	9e 81       	ldd	r25, Y+6	; 0x06
    7194:	01 97       	sbiw	r24, 0x01	; 1
    7196:	9e 83       	std	Y+6, r25	; 0x06
    7198:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    719a:	8d 81       	ldd	r24, Y+5	; 0x05
    719c:	9e 81       	ldd	r25, Y+6	; 0x06
    719e:	00 97       	sbiw	r24, 0x00	; 0
    71a0:	69 f7       	brne	.-38     	; 0x717c <ownerMode+0x414>
    71a2:	14 c0       	rjmp	.+40     	; 0x71cc <ownerMode+0x464>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    71a4:	6f 81       	ldd	r22, Y+7	; 0x07
    71a6:	78 85       	ldd	r23, Y+8	; 0x08
    71a8:	89 85       	ldd	r24, Y+9	; 0x09
    71aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    71ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    71b0:	dc 01       	movw	r26, r24
    71b2:	cb 01       	movw	r24, r22
    71b4:	9e 83       	std	Y+6, r25	; 0x06
    71b6:	8d 83       	std	Y+5, r24	; 0x05
    71b8:	8d 81       	ldd	r24, Y+5	; 0x05
    71ba:	9e 81       	ldd	r25, Y+6	; 0x06
    71bc:	9a 83       	std	Y+2, r25	; 0x02
    71be:	89 83       	std	Y+1, r24	; 0x01
    71c0:	89 81       	ldd	r24, Y+1	; 0x01
    71c2:	9a 81       	ldd	r25, Y+2	; 0x02
    71c4:	01 97       	sbiw	r24, 0x01	; 1
    71c6:	f1 f7       	brne	.-4      	; 0x71c4 <ownerMode+0x45c>
    71c8:	9a 83       	std	Y+2, r25	; 0x02
    71ca:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(500);
    }
}
    71cc:	e7 96       	adiw	r28, 0x37	; 55
    71ce:	0f b6       	in	r0, 0x3f	; 63
    71d0:	f8 94       	cli
    71d2:	de bf       	out	0x3e, r29	; 62
    71d4:	0f be       	out	0x3f, r0	; 63
    71d6:	cd bf       	out	0x3d, r28	; 61
    71d8:	cf 91       	pop	r28
    71da:	df 91       	pop	r29
    71dc:	08 95       	ret

000071de <guestMode>:

void guestMode(void) {
    71de:	df 93       	push	r29
    71e0:	cf 93       	push	r28
    71e2:	cd b7       	in	r28, 0x3d	; 61
    71e4:	de b7       	in	r29, 0x3e	; 62
    71e6:	a8 97       	sbiw	r28, 0x28	; 40
    71e8:	0f b6       	in	r0, 0x3f	; 63
    71ea:	f8 94       	cli
    71ec:	de bf       	out	0x3e, r29	; 62
    71ee:	0f be       	out	0x3f, r0	; 63
    71f0:	cd bf       	out	0x3d, r28	; 61
    u8 guestName[10];
    u8 key, index = 0;
    71f2:	1d 8e       	std	Y+29, r1	; 0x1d

    CLCD_voidClearScreen();
    71f4:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidClearScreen>
    CLCD_voidSetPosition(1, 1);
    71f8:	81 e0       	ldi	r24, 0x01	; 1
    71fa:	61 e0       	ldi	r22, 0x01	; 1
    71fc:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <CLCD_voidSetPosition>
    CLCD_voidsendString ("Enter Name:");
    7200:	85 e9       	ldi	r24, 0x95	; 149
    7202:	90 e0       	ldi	r25, 0x00	; 0
    7204:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <CLCD_voidsendString>
    7208:	16 c0       	rjmp	.+44     	; 0x7236 <guestMode+0x58>

    while(index < 9) {
        key = KPD_u8GetPressed();
    720a:	0e 94 bc 1a 	call	0x3578	; 0x3578 <KPD_u8GetPressed>
    720e:	8e 8f       	std	Y+30, r24	; 0x1e
        if(key != NOTPRESSED) {
    7210:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7212:	8f 3f       	cpi	r24, 0xFF	; 255
    7214:	81 f0       	breq	.+32     	; 0x7236 <guestMode+0x58>
            guestName[index++] = key;
    7216:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7218:	28 2f       	mov	r18, r24
    721a:	30 e0       	ldi	r19, 0x00	; 0
    721c:	ce 01       	movw	r24, r28
    721e:	4f 96       	adiw	r24, 0x1f	; 31
    7220:	fc 01       	movw	r30, r24
    7222:	e2 0f       	add	r30, r18
    7224:	f3 1f       	adc	r31, r19
    7226:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7228:	80 83       	st	Z, r24
    722a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    722c:	8f 5f       	subi	r24, 0xFF	; 255
    722e:	8d 8f       	std	Y+29, r24	; 0x1d
            CLCD_voidsendData(key);
    7230:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7232:	0e 94 c7 0c 	call	0x198e	; 0x198e <CLCD_voidsendData>

    CLCD_voidClearScreen();
    CLCD_voidSetPosition(1, 1);
    CLCD_voidsendString ("Enter Name:");

    while(index < 9) {
    7236:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7238:	89 30       	cpi	r24, 0x09	; 9
    723a:	38 f3       	brcs	.-50     	; 0x720a <guestMode+0x2c>
        if(key != NOTPRESSED) {
            guestName[index++] = key;
            CLCD_voidsendData(key);
        }
    }
    guestName[index] = '\0';
    723c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    723e:	28 2f       	mov	r18, r24
    7240:	30 e0       	ldi	r19, 0x00	; 0
    7242:	ce 01       	movw	r24, r28
    7244:	4f 96       	adiw	r24, 0x1f	; 31
    7246:	fc 01       	movw	r30, r24
    7248:	e2 0f       	add	r30, r18
    724a:	f3 1f       	adc	r31, r19
    724c:	10 82       	st	Z, r1

    CLCD_voidClearScreen();
    724e:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidClearScreen>
    CLCD_voidsendString("Req sent to owner");
    7252:	8a ed       	ldi	r24, 0xDA	; 218
    7254:	90 e0       	ldi	r25, 0x00	; 0
    7256:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <CLCD_voidsendString>
    725a:	80 e0       	ldi	r24, 0x00	; 0
    725c:	90 e0       	ldi	r25, 0x00	; 0
    725e:	aa ef       	ldi	r26, 0xFA	; 250
    7260:	b3 e4       	ldi	r27, 0x43	; 67
    7262:	89 8f       	std	Y+25, r24	; 0x19
    7264:	9a 8f       	std	Y+26, r25	; 0x1a
    7266:	ab 8f       	std	Y+27, r26	; 0x1b
    7268:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    726a:	69 8d       	ldd	r22, Y+25	; 0x19
    726c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    726e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7270:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7272:	20 e0       	ldi	r18, 0x00	; 0
    7274:	30 e0       	ldi	r19, 0x00	; 0
    7276:	4a ef       	ldi	r20, 0xFA	; 250
    7278:	54 e4       	ldi	r21, 0x44	; 68
    727a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    727e:	dc 01       	movw	r26, r24
    7280:	cb 01       	movw	r24, r22
    7282:	8d 8b       	std	Y+21, r24	; 0x15
    7284:	9e 8b       	std	Y+22, r25	; 0x16
    7286:	af 8b       	std	Y+23, r26	; 0x17
    7288:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    728a:	6d 89       	ldd	r22, Y+21	; 0x15
    728c:	7e 89       	ldd	r23, Y+22	; 0x16
    728e:	8f 89       	ldd	r24, Y+23	; 0x17
    7290:	98 8d       	ldd	r25, Y+24	; 0x18
    7292:	20 e0       	ldi	r18, 0x00	; 0
    7294:	30 e0       	ldi	r19, 0x00	; 0
    7296:	40 e8       	ldi	r20, 0x80	; 128
    7298:	5f e3       	ldi	r21, 0x3F	; 63
    729a:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    729e:	88 23       	and	r24, r24
    72a0:	2c f4       	brge	.+10     	; 0x72ac <guestMode+0xce>
		__ticks = 1;
    72a2:	81 e0       	ldi	r24, 0x01	; 1
    72a4:	90 e0       	ldi	r25, 0x00	; 0
    72a6:	9c 8b       	std	Y+20, r25	; 0x14
    72a8:	8b 8b       	std	Y+19, r24	; 0x13
    72aa:	3f c0       	rjmp	.+126    	; 0x732a <guestMode+0x14c>
	else if (__tmp > 65535)
    72ac:	6d 89       	ldd	r22, Y+21	; 0x15
    72ae:	7e 89       	ldd	r23, Y+22	; 0x16
    72b0:	8f 89       	ldd	r24, Y+23	; 0x17
    72b2:	98 8d       	ldd	r25, Y+24	; 0x18
    72b4:	20 e0       	ldi	r18, 0x00	; 0
    72b6:	3f ef       	ldi	r19, 0xFF	; 255
    72b8:	4f e7       	ldi	r20, 0x7F	; 127
    72ba:	57 e4       	ldi	r21, 0x47	; 71
    72bc:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    72c0:	18 16       	cp	r1, r24
    72c2:	4c f5       	brge	.+82     	; 0x7316 <guestMode+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    72c4:	69 8d       	ldd	r22, Y+25	; 0x19
    72c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    72c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    72ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    72cc:	20 e0       	ldi	r18, 0x00	; 0
    72ce:	30 e0       	ldi	r19, 0x00	; 0
    72d0:	40 e2       	ldi	r20, 0x20	; 32
    72d2:	51 e4       	ldi	r21, 0x41	; 65
    72d4:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    72d8:	dc 01       	movw	r26, r24
    72da:	cb 01       	movw	r24, r22
    72dc:	bc 01       	movw	r22, r24
    72de:	cd 01       	movw	r24, r26
    72e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    72e4:	dc 01       	movw	r26, r24
    72e6:	cb 01       	movw	r24, r22
    72e8:	9c 8b       	std	Y+20, r25	; 0x14
    72ea:	8b 8b       	std	Y+19, r24	; 0x13
    72ec:	0f c0       	rjmp	.+30     	; 0x730c <guestMode+0x12e>
    72ee:	88 ec       	ldi	r24, 0xC8	; 200
    72f0:	90 e0       	ldi	r25, 0x00	; 0
    72f2:	9a 8b       	std	Y+18, r25	; 0x12
    72f4:	89 8b       	std	Y+17, r24	; 0x11
    72f6:	89 89       	ldd	r24, Y+17	; 0x11
    72f8:	9a 89       	ldd	r25, Y+18	; 0x12
    72fa:	01 97       	sbiw	r24, 0x01	; 1
    72fc:	f1 f7       	brne	.-4      	; 0x72fa <guestMode+0x11c>
    72fe:	9a 8b       	std	Y+18, r25	; 0x12
    7300:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7302:	8b 89       	ldd	r24, Y+19	; 0x13
    7304:	9c 89       	ldd	r25, Y+20	; 0x14
    7306:	01 97       	sbiw	r24, 0x01	; 1
    7308:	9c 8b       	std	Y+20, r25	; 0x14
    730a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    730c:	8b 89       	ldd	r24, Y+19	; 0x13
    730e:	9c 89       	ldd	r25, Y+20	; 0x14
    7310:	00 97       	sbiw	r24, 0x00	; 0
    7312:	69 f7       	brne	.-38     	; 0x72ee <guestMode+0x110>
    7314:	14 c0       	rjmp	.+40     	; 0x733e <guestMode+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7316:	6d 89       	ldd	r22, Y+21	; 0x15
    7318:	7e 89       	ldd	r23, Y+22	; 0x16
    731a:	8f 89       	ldd	r24, Y+23	; 0x17
    731c:	98 8d       	ldd	r25, Y+24	; 0x18
    731e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7322:	dc 01       	movw	r26, r24
    7324:	cb 01       	movw	r24, r22
    7326:	9c 8b       	std	Y+20, r25	; 0x14
    7328:	8b 8b       	std	Y+19, r24	; 0x13
    732a:	8b 89       	ldd	r24, Y+19	; 0x13
    732c:	9c 89       	ldd	r25, Y+20	; 0x14
    732e:	98 8b       	std	Y+16, r25	; 0x10
    7330:	8f 87       	std	Y+15, r24	; 0x0f
    7332:	8f 85       	ldd	r24, Y+15	; 0x0f
    7334:	98 89       	ldd	r25, Y+16	; 0x10
    7336:	01 97       	sbiw	r24, 0x01	; 1
    7338:	f1 f7       	brne	.-4      	; 0x7336 <guestMode+0x158>
    733a:	98 8b       	std	Y+16, r25	; 0x10
    733c:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(500);

    CLCD_voidClearScreen();
    733e:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidClearScreen>
    CLCD_voidsendString("Welcome Guest!");
    7342:	8c ee       	ldi	r24, 0xEC	; 236
    7344:	90 e0       	ldi	r25, 0x00	; 0
    7346:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <CLCD_voidsendString>
    734a:	80 e0       	ldi	r24, 0x00	; 0
    734c:	90 e0       	ldi	r25, 0x00	; 0
    734e:	aa ef       	ldi	r26, 0xFA	; 250
    7350:	b3 e4       	ldi	r27, 0x43	; 67
    7352:	8b 87       	std	Y+11, r24	; 0x0b
    7354:	9c 87       	std	Y+12, r25	; 0x0c
    7356:	ad 87       	std	Y+13, r26	; 0x0d
    7358:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    735a:	6b 85       	ldd	r22, Y+11	; 0x0b
    735c:	7c 85       	ldd	r23, Y+12	; 0x0c
    735e:	8d 85       	ldd	r24, Y+13	; 0x0d
    7360:	9e 85       	ldd	r25, Y+14	; 0x0e
    7362:	20 e0       	ldi	r18, 0x00	; 0
    7364:	30 e0       	ldi	r19, 0x00	; 0
    7366:	4a ef       	ldi	r20, 0xFA	; 250
    7368:	54 e4       	ldi	r21, 0x44	; 68
    736a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    736e:	dc 01       	movw	r26, r24
    7370:	cb 01       	movw	r24, r22
    7372:	8f 83       	std	Y+7, r24	; 0x07
    7374:	98 87       	std	Y+8, r25	; 0x08
    7376:	a9 87       	std	Y+9, r26	; 0x09
    7378:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    737a:	6f 81       	ldd	r22, Y+7	; 0x07
    737c:	78 85       	ldd	r23, Y+8	; 0x08
    737e:	89 85       	ldd	r24, Y+9	; 0x09
    7380:	9a 85       	ldd	r25, Y+10	; 0x0a
    7382:	20 e0       	ldi	r18, 0x00	; 0
    7384:	30 e0       	ldi	r19, 0x00	; 0
    7386:	40 e8       	ldi	r20, 0x80	; 128
    7388:	5f e3       	ldi	r21, 0x3F	; 63
    738a:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    738e:	88 23       	and	r24, r24
    7390:	2c f4       	brge	.+10     	; 0x739c <guestMode+0x1be>
		__ticks = 1;
    7392:	81 e0       	ldi	r24, 0x01	; 1
    7394:	90 e0       	ldi	r25, 0x00	; 0
    7396:	9e 83       	std	Y+6, r25	; 0x06
    7398:	8d 83       	std	Y+5, r24	; 0x05
    739a:	3f c0       	rjmp	.+126    	; 0x741a <guestMode+0x23c>
	else if (__tmp > 65535)
    739c:	6f 81       	ldd	r22, Y+7	; 0x07
    739e:	78 85       	ldd	r23, Y+8	; 0x08
    73a0:	89 85       	ldd	r24, Y+9	; 0x09
    73a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    73a4:	20 e0       	ldi	r18, 0x00	; 0
    73a6:	3f ef       	ldi	r19, 0xFF	; 255
    73a8:	4f e7       	ldi	r20, 0x7F	; 127
    73aa:	57 e4       	ldi	r21, 0x47	; 71
    73ac:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    73b0:	18 16       	cp	r1, r24
    73b2:	4c f5       	brge	.+82     	; 0x7406 <guestMode+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    73b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    73b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    73b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    73ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    73bc:	20 e0       	ldi	r18, 0x00	; 0
    73be:	30 e0       	ldi	r19, 0x00	; 0
    73c0:	40 e2       	ldi	r20, 0x20	; 32
    73c2:	51 e4       	ldi	r21, 0x41	; 65
    73c4:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    73c8:	dc 01       	movw	r26, r24
    73ca:	cb 01       	movw	r24, r22
    73cc:	bc 01       	movw	r22, r24
    73ce:	cd 01       	movw	r24, r26
    73d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    73d4:	dc 01       	movw	r26, r24
    73d6:	cb 01       	movw	r24, r22
    73d8:	9e 83       	std	Y+6, r25	; 0x06
    73da:	8d 83       	std	Y+5, r24	; 0x05
    73dc:	0f c0       	rjmp	.+30     	; 0x73fc <guestMode+0x21e>
    73de:	88 ec       	ldi	r24, 0xC8	; 200
    73e0:	90 e0       	ldi	r25, 0x00	; 0
    73e2:	9c 83       	std	Y+4, r25	; 0x04
    73e4:	8b 83       	std	Y+3, r24	; 0x03
    73e6:	8b 81       	ldd	r24, Y+3	; 0x03
    73e8:	9c 81       	ldd	r25, Y+4	; 0x04
    73ea:	01 97       	sbiw	r24, 0x01	; 1
    73ec:	f1 f7       	brne	.-4      	; 0x73ea <guestMode+0x20c>
    73ee:	9c 83       	std	Y+4, r25	; 0x04
    73f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    73f2:	8d 81       	ldd	r24, Y+5	; 0x05
    73f4:	9e 81       	ldd	r25, Y+6	; 0x06
    73f6:	01 97       	sbiw	r24, 0x01	; 1
    73f8:	9e 83       	std	Y+6, r25	; 0x06
    73fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    73fc:	8d 81       	ldd	r24, Y+5	; 0x05
    73fe:	9e 81       	ldd	r25, Y+6	; 0x06
    7400:	00 97       	sbiw	r24, 0x00	; 0
    7402:	69 f7       	brne	.-38     	; 0x73de <guestMode+0x200>
    7404:	14 c0       	rjmp	.+40     	; 0x742e <guestMode+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7406:	6f 81       	ldd	r22, Y+7	; 0x07
    7408:	78 85       	ldd	r23, Y+8	; 0x08
    740a:	89 85       	ldd	r24, Y+9	; 0x09
    740c:	9a 85       	ldd	r25, Y+10	; 0x0a
    740e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7412:	dc 01       	movw	r26, r24
    7414:	cb 01       	movw	r24, r22
    7416:	9e 83       	std	Y+6, r25	; 0x06
    7418:	8d 83       	std	Y+5, r24	; 0x05
    741a:	8d 81       	ldd	r24, Y+5	; 0x05
    741c:	9e 81       	ldd	r25, Y+6	; 0x06
    741e:	9a 83       	std	Y+2, r25	; 0x02
    7420:	89 83       	std	Y+1, r24	; 0x01
    7422:	89 81       	ldd	r24, Y+1	; 0x01
    7424:	9a 81       	ldd	r25, Y+2	; 0x02
    7426:	01 97       	sbiw	r24, 0x01	; 1
    7428:	f1 f7       	brne	.-4      	; 0x7426 <guestMode+0x248>
    742a:	9a 83       	std	Y+2, r25	; 0x02
    742c:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(500);
}
    742e:	a8 96       	adiw	r28, 0x28	; 40
    7430:	0f b6       	in	r0, 0x3f	; 63
    7432:	f8 94       	cli
    7434:	de bf       	out	0x3e, r29	; 62
    7436:	0f be       	out	0x3f, r0	; 63
    7438:	cd bf       	out	0x3d, r28	; 61
    743a:	cf 91       	pop	r28
    743c:	df 91       	pop	r29
    743e:	08 95       	ret

00007440 <__mulsi3>:
    7440:	62 9f       	mul	r22, r18
    7442:	d0 01       	movw	r26, r0
    7444:	73 9f       	mul	r23, r19
    7446:	f0 01       	movw	r30, r0
    7448:	82 9f       	mul	r24, r18
    744a:	e0 0d       	add	r30, r0
    744c:	f1 1d       	adc	r31, r1
    744e:	64 9f       	mul	r22, r20
    7450:	e0 0d       	add	r30, r0
    7452:	f1 1d       	adc	r31, r1
    7454:	92 9f       	mul	r25, r18
    7456:	f0 0d       	add	r31, r0
    7458:	83 9f       	mul	r24, r19
    745a:	f0 0d       	add	r31, r0
    745c:	74 9f       	mul	r23, r20
    745e:	f0 0d       	add	r31, r0
    7460:	65 9f       	mul	r22, r21
    7462:	f0 0d       	add	r31, r0
    7464:	99 27       	eor	r25, r25
    7466:	72 9f       	mul	r23, r18
    7468:	b0 0d       	add	r27, r0
    746a:	e1 1d       	adc	r30, r1
    746c:	f9 1f       	adc	r31, r25
    746e:	63 9f       	mul	r22, r19
    7470:	b0 0d       	add	r27, r0
    7472:	e1 1d       	adc	r30, r1
    7474:	f9 1f       	adc	r31, r25
    7476:	bd 01       	movw	r22, r26
    7478:	cf 01       	movw	r24, r30
    747a:	11 24       	eor	r1, r1
    747c:	08 95       	ret

0000747e <__udivmodhi4>:
    747e:	aa 1b       	sub	r26, r26
    7480:	bb 1b       	sub	r27, r27
    7482:	51 e1       	ldi	r21, 0x11	; 17
    7484:	07 c0       	rjmp	.+14     	; 0x7494 <__udivmodhi4_ep>

00007486 <__udivmodhi4_loop>:
    7486:	aa 1f       	adc	r26, r26
    7488:	bb 1f       	adc	r27, r27
    748a:	a6 17       	cp	r26, r22
    748c:	b7 07       	cpc	r27, r23
    748e:	10 f0       	brcs	.+4      	; 0x7494 <__udivmodhi4_ep>
    7490:	a6 1b       	sub	r26, r22
    7492:	b7 0b       	sbc	r27, r23

00007494 <__udivmodhi4_ep>:
    7494:	88 1f       	adc	r24, r24
    7496:	99 1f       	adc	r25, r25
    7498:	5a 95       	dec	r21
    749a:	a9 f7       	brne	.-22     	; 0x7486 <__udivmodhi4_loop>
    749c:	80 95       	com	r24
    749e:	90 95       	com	r25
    74a0:	bc 01       	movw	r22, r24
    74a2:	cd 01       	movw	r24, r26
    74a4:	08 95       	ret

000074a6 <__udivmodsi4>:
    74a6:	a1 e2       	ldi	r26, 0x21	; 33
    74a8:	1a 2e       	mov	r1, r26
    74aa:	aa 1b       	sub	r26, r26
    74ac:	bb 1b       	sub	r27, r27
    74ae:	fd 01       	movw	r30, r26
    74b0:	0d c0       	rjmp	.+26     	; 0x74cc <__udivmodsi4_ep>

000074b2 <__udivmodsi4_loop>:
    74b2:	aa 1f       	adc	r26, r26
    74b4:	bb 1f       	adc	r27, r27
    74b6:	ee 1f       	adc	r30, r30
    74b8:	ff 1f       	adc	r31, r31
    74ba:	a2 17       	cp	r26, r18
    74bc:	b3 07       	cpc	r27, r19
    74be:	e4 07       	cpc	r30, r20
    74c0:	f5 07       	cpc	r31, r21
    74c2:	20 f0       	brcs	.+8      	; 0x74cc <__udivmodsi4_ep>
    74c4:	a2 1b       	sub	r26, r18
    74c6:	b3 0b       	sbc	r27, r19
    74c8:	e4 0b       	sbc	r30, r20
    74ca:	f5 0b       	sbc	r31, r21

000074cc <__udivmodsi4_ep>:
    74cc:	66 1f       	adc	r22, r22
    74ce:	77 1f       	adc	r23, r23
    74d0:	88 1f       	adc	r24, r24
    74d2:	99 1f       	adc	r25, r25
    74d4:	1a 94       	dec	r1
    74d6:	69 f7       	brne	.-38     	; 0x74b2 <__udivmodsi4_loop>
    74d8:	60 95       	com	r22
    74da:	70 95       	com	r23
    74dc:	80 95       	com	r24
    74de:	90 95       	com	r25
    74e0:	9b 01       	movw	r18, r22
    74e2:	ac 01       	movw	r20, r24
    74e4:	bd 01       	movw	r22, r26
    74e6:	cf 01       	movw	r24, r30
    74e8:	08 95       	ret

000074ea <__divmodsi4>:
    74ea:	97 fb       	bst	r25, 7
    74ec:	09 2e       	mov	r0, r25
    74ee:	05 26       	eor	r0, r21
    74f0:	0e d0       	rcall	.+28     	; 0x750e <__divmodsi4_neg1>
    74f2:	57 fd       	sbrc	r21, 7
    74f4:	04 d0       	rcall	.+8      	; 0x74fe <__divmodsi4_neg2>
    74f6:	d7 df       	rcall	.-82     	; 0x74a6 <__udivmodsi4>
    74f8:	0a d0       	rcall	.+20     	; 0x750e <__divmodsi4_neg1>
    74fa:	00 1c       	adc	r0, r0
    74fc:	38 f4       	brcc	.+14     	; 0x750c <__divmodsi4_exit>

000074fe <__divmodsi4_neg2>:
    74fe:	50 95       	com	r21
    7500:	40 95       	com	r20
    7502:	30 95       	com	r19
    7504:	21 95       	neg	r18
    7506:	3f 4f       	sbci	r19, 0xFF	; 255
    7508:	4f 4f       	sbci	r20, 0xFF	; 255
    750a:	5f 4f       	sbci	r21, 0xFF	; 255

0000750c <__divmodsi4_exit>:
    750c:	08 95       	ret

0000750e <__divmodsi4_neg1>:
    750e:	f6 f7       	brtc	.-4      	; 0x750c <__divmodsi4_exit>
    7510:	90 95       	com	r25
    7512:	80 95       	com	r24
    7514:	70 95       	com	r23
    7516:	61 95       	neg	r22
    7518:	7f 4f       	sbci	r23, 0xFF	; 255
    751a:	8f 4f       	sbci	r24, 0xFF	; 255
    751c:	9f 4f       	sbci	r25, 0xFF	; 255
    751e:	08 95       	ret

00007520 <__prologue_saves__>:
    7520:	2f 92       	push	r2
    7522:	3f 92       	push	r3
    7524:	4f 92       	push	r4
    7526:	5f 92       	push	r5
    7528:	6f 92       	push	r6
    752a:	7f 92       	push	r7
    752c:	8f 92       	push	r8
    752e:	9f 92       	push	r9
    7530:	af 92       	push	r10
    7532:	bf 92       	push	r11
    7534:	cf 92       	push	r12
    7536:	df 92       	push	r13
    7538:	ef 92       	push	r14
    753a:	ff 92       	push	r15
    753c:	0f 93       	push	r16
    753e:	1f 93       	push	r17
    7540:	cf 93       	push	r28
    7542:	df 93       	push	r29
    7544:	cd b7       	in	r28, 0x3d	; 61
    7546:	de b7       	in	r29, 0x3e	; 62
    7548:	ca 1b       	sub	r28, r26
    754a:	db 0b       	sbc	r29, r27
    754c:	0f b6       	in	r0, 0x3f	; 63
    754e:	f8 94       	cli
    7550:	de bf       	out	0x3e, r29	; 62
    7552:	0f be       	out	0x3f, r0	; 63
    7554:	cd bf       	out	0x3d, r28	; 61
    7556:	09 94       	ijmp

00007558 <__epilogue_restores__>:
    7558:	2a 88       	ldd	r2, Y+18	; 0x12
    755a:	39 88       	ldd	r3, Y+17	; 0x11
    755c:	48 88       	ldd	r4, Y+16	; 0x10
    755e:	5f 84       	ldd	r5, Y+15	; 0x0f
    7560:	6e 84       	ldd	r6, Y+14	; 0x0e
    7562:	7d 84       	ldd	r7, Y+13	; 0x0d
    7564:	8c 84       	ldd	r8, Y+12	; 0x0c
    7566:	9b 84       	ldd	r9, Y+11	; 0x0b
    7568:	aa 84       	ldd	r10, Y+10	; 0x0a
    756a:	b9 84       	ldd	r11, Y+9	; 0x09
    756c:	c8 84       	ldd	r12, Y+8	; 0x08
    756e:	df 80       	ldd	r13, Y+7	; 0x07
    7570:	ee 80       	ldd	r14, Y+6	; 0x06
    7572:	fd 80       	ldd	r15, Y+5	; 0x05
    7574:	0c 81       	ldd	r16, Y+4	; 0x04
    7576:	1b 81       	ldd	r17, Y+3	; 0x03
    7578:	aa 81       	ldd	r26, Y+2	; 0x02
    757a:	b9 81       	ldd	r27, Y+1	; 0x01
    757c:	ce 0f       	add	r28, r30
    757e:	d1 1d       	adc	r29, r1
    7580:	0f b6       	in	r0, 0x3f	; 63
    7582:	f8 94       	cli
    7584:	de bf       	out	0x3e, r29	; 62
    7586:	0f be       	out	0x3f, r0	; 63
    7588:	cd bf       	out	0x3d, r28	; 61
    758a:	ed 01       	movw	r28, r26
    758c:	08 95       	ret

0000758e <strlen>:
    758e:	fc 01       	movw	r30, r24
    7590:	01 90       	ld	r0, Z+
    7592:	00 20       	and	r0, r0
    7594:	e9 f7       	brne	.-6      	; 0x7590 <strlen+0x2>
    7596:	80 95       	com	r24
    7598:	90 95       	com	r25
    759a:	8e 0f       	add	r24, r30
    759c:	9f 1f       	adc	r25, r31
    759e:	08 95       	ret

000075a0 <_exit>:
    75a0:	f8 94       	cli

000075a2 <__stop_program>:
    75a2:	ff cf       	rjmp	.-2      	; 0x75a2 <__stop_program>
